Implementation smell,Namespace,Class,File,Method,Description
Long Method,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,HitTest,The method has 141 lines of code.
Long Method,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The method has 138 lines of code.
Long Method,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The method has 191 lines of code.
Long Method,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The method has 175 lines of code.
Long Method,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The method has 147 lines of code.
Long Method,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The method has 201 lines of code.
Long Method,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The method has 142 lines of code.
Long Method,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The method has 234 lines of code.
Long Method,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,GetSubItemText,The method has 117 lines of code.
Long Method,ImageGlass.ImageListView,ImageListViewItemComparer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,Compare,The method has 104 lines of code.
Long Method,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The method has 253 lines of code.
Long Method,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The method has 246 lines of code.
Long Method,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseUp,The method has 171 lines of code.
Long Method,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetThumbnail,The method has 119 lines of code.
Complex Method,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,Dispose,Cyclomatic complexity of the method is 12
Complex Method,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,bw_RunWorkerCompleted,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaWpf,Cyclomatic complexity of the method is 17
Complex Method,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,Cyclomatic complexity of the method is 8
Complex Method,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,Cyclomatic complexity of the method is 8
Complex Method,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,Cyclomatic complexity of the method is 11
Complex Method,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,Cyclomatic complexity of the method is 11
Complex Method,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,Cyclomatic complexity of the method is 21
Complex Method,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,Cyclomatic complexity of the method is 8
Complex Method,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,Cyclomatic complexity of the method is 15
Complex Method,ImageGlass.ImageListView,ImageListViewItemCollection,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,InsertInternal,Cyclomatic complexity of the method is 12
Complex Method,ImageGlass.ImageListView,ImageListViewItemCollection,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,Sort,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass.ImageListView,ImageListViewItemCollection,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,AddRemoveGroupItem,Cyclomatic complexity of the method is 8
Complex Method,ImageGlass.ImageListView,ImageListViewItemComparer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,CompareStrings,Cyclomatic complexity of the method is 8
Complex Method,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,Cyclomatic complexity of the method is 18
Complex Method,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderColumnHeaders,Cyclomatic complexity of the method is 11
Complex Method,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderItems,Cyclomatic complexity of the method is 18
Complex Method,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,Cyclomatic complexity of the method is 13
Complex Method,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,Cyclomatic complexity of the method is 10
Complex Method,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,DragDrop,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetThumbnail,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,Cyclomatic complexity of the method is 11
Long Parameter List,ImageGlass.ImageListView,CacheItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,CacheItem,The method has 5 parameters. Parameters: extension' smallIcon' largeIcon' filetype' state
Long Parameter List,ImageGlass.ImageListView,CacheItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,CacheItem,The method has 7 parameters. Parameters: guid' size' image' state' useEmbeddedThumbnails' autoRotate' useWIC
Long Parameter List,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetThumbnail,The method has 5 parameters. Parameters: key' size' useEmbeddedThumbnails' useExifOrientation' useWIC
Long Parameter List,ImageGlass.ImageListView,URIAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetThumbnail,The method has 5 parameters. Parameters: key' size' useEmbeddedThumbnails' useExifOrientation' useWIC
Long Parameter List,ImageGlass.ImageListView,CacheRequest,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheMetadata.cs,CacheRequest,The method has 8 parameters. Parameters: guid' adaptor' key' size' useEmbeddedThumbnails' autoRotate' useWIC' requestType
Long Parameter List,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,Add,The method has 7 parameters. Parameters: guid' adaptor' key' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC
Long Parameter List,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,Add,The method has 8 parameters. Parameters: guid' adaptor' key' thumbSize' thumb' useEmbeddedThumbnails' autoRotate' useWIC
Long Parameter List,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,AddToGalleryCache,The method has 7 parameters. Parameters: guid' adaptor' key' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC
Long Parameter List,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,AddToRendererCache,The method has 7 parameters. Parameters: guid' adaptor' key' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC
Long Parameter List,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetRendererImage,The method has 5 parameters. Parameters: guid' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC
Long Parameter List,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetGalleryImage,The method has 5 parameters. Parameters: guid' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC
Long Parameter List,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetImage,The method has 6 parameters. Parameters: guid' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC' clone
Long Parameter List,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetCacheState,The method has 5 parameters. Parameters: guid' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC
Long Parameter List,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetKey,The method has 5 parameters. Parameters: guid' size' useEmbeddedThumbnails' autoRotate' useWIC
Long Parameter List,ImageGlass.ImageListView,ImageListViewItemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptor.cs,GetThumbnail,The method has 5 parameters. Parameters: key' size' useEmbeddedThumbnails' useExifOrientation' useWIC
Long Parameter List,ImageGlass.ImageListView,QueuedWorkerCompletedEventArgs,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\QueuedBackgroundWorkerEvents.cs,QueuedWorkerCompletedEventArgs,The method has 5 parameters. Parameters: argument' result' priority' error' cancelled
Long Parameter List,ImageGlass.ImageListView,ShellInfoExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ShellInfoExtractor.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbFileInfo' uFlags
Long Parameter List,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawImageWithReflection,The method has 7 parameters. Parameters: g' img' x' y' width' height' reflection
Long Parameter List,ImageGlass.ImageListView,HitInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\HitInfo.cs,HitInfo,The method has 10 parameters. Parameters: itemIndex' checkBoxHit' group' column' columnSeparator' subItemIndex' paneBorder' inItemArea' inHeaderArea' inPaneArea
Long Parameter List,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,ImageListViewColumnHeader,The method has 5 parameters. Parameters: type' text' width' displayIndex' visible
Long Parameter List,ImageGlass.ImageListView,ImageListViewItemCollection,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,Insert,The method has 5 parameters. Parameters: index' key' text' initialThumbnail' adaptor
Long Parameter List,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawSubItemItemOverlay,The method has 6 parameters. Parameters: g' item' state' subItemIndex' subItemHovered' bounds
Long Parameter List,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,FromImage,The method has 5 parameters. Parameters: image' size' useEmbeddedThumbnails' useExifOrientation' useWIC
Long Parameter List,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,FromFile,The method has 5 parameters. Parameters: filename' size' useEmbeddedThumbnails' useExifOrientation' useWIC
Long Parameter List,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,DrawStringPair,The method has 7 parameters. Parameters: g' r' caption' text' font' captionBrush' textBrush
Long Parameter List,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The method has 5 parameters. Parameters: x' y' width' height' radius
Long Parameter List,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,FillRoundedRectangle,The method has 7 parameters. Parameters: graphics' brush' x' y' width' height' radius
Long Parameter List,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,FillRoundedRectangle,The method has 7 parameters. Parameters: graphics' brush' x' y' width' height' radius
Long Parameter List,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,DrawRoundedRectangle,The method has 7 parameters. Parameters: graphics' pen' x' y' width' height' radius
Long Parameter List,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,DrawRoundedRectangle,The method has 7 parameters. Parameters: graphics' pen' x' y' width' height' radius
Long Identifier,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,,The length of the parameter mSelectionRectangleBorderColor is 30.
Long Identifier,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,,The length of the parameter lastMouseDownInColumnHeaderArea is 31.
Long Statement,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ClearThumbnailCache,The length of the statement  "                        thumbnailCache.Add(item.Guid' item.Adaptor' item.VirtualItemKey' mThumbnailSize' mUseEmbeddedThumbnails' AutoRotateThumbnails' (mUseWIC == UseWIC.Auto || mUseWIC == UseWIC.ThumbnailsOnly)); " is 189.
Long Statement,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,HitTest,The length of the statement  "                        if (ScrollOrientation == ScrollOrientation.HorizontalScroll || (ScrollOrientation == ScrollOrientation.VerticalScroll && col <= layoutManager.Cols)) " is 148.
Long Statement,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ResumePaint,The length of the statement  "            System.Diagnostics.Debug.Assert(rendererSuspendCount > 0' "Suspend count does not match resume count."' "ResumePaint() must be matched by a prior SuspendPaint() call."); " is 169.
Long Statement,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,IsInputKey,The length of the statement  "            if ((keyData & Keys.Left) == Keys.Left || (keyData & Keys.Right) == Keys.Right || (keyData & Keys.Up) == Keys.Up || (keyData & Keys.Down) == Keys.Down) " is 151.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.FilePath' string.Empty' info.DirectoryName ?? "")); " is 120.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.Dimensions' string.Empty' new Size(metadata.Width' metadata.Height))); " is 139.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.Resolution' string.Empty' new SizeF((float)metadata.DPIX' (float)metadata.DPIY))); " is 151.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.ImageDescription' string.Empty' metadata.ImageDescription ?? "")); " is 135.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.EquipmentModel' string.Empty' metadata.EquipmentModel ?? "")); " is 131.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.Copyright' string.Empty' metadata.Copyright ?? "")); " is 121.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.ExposureTime' string.Empty' (float)metadata.ExposureTime)); " is 128.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.ISOSpeed' string.Empty' (ushort)metadata.ISOSpeed)); " is 121.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.UserComment' string.Empty' metadata.Comment ?? "")); " is 121.
Long Statement,ImageGlass.ImageListView,FileSystemAdaptor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemAdaptors.cs,GetDetails,The length of the statement  "                    details.Add(new Utility.Tuple<ColumnType' string' object>(ColumnType.FocalLength' string.Empty' (float)metadata.FocalLength)); " is 126.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,CanContinueProcessing,The length of the statement  "                if (existing != null && existing.Size == request.Size && existing.UseEmbeddedThumbnails == request.UseEmbeddedThumbnails && existing.AutoRotate == request.AutoRotate && existing.UseWIC == request.UseWIC) " is 203.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,CanContinueProcessing,The length of the statement  "                if (canProcess && (CacheMode == CacheMode.OnDemand) && mImageListView != null && !mImageListView.IsItemVisible(request.Guid)) " is 125.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,CanContinueProcessing,The length of the statement  "                if (existing != null && existing.Guid == request.Guid && existing.Size == request.Size && existing.UseEmbeddedThumbnails == request.UseEmbeddedThumbnails && existing.AutoRotate == request.AutoRotate && existing.UseWIC == request.UseWIC) " is 236.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,CanContinueProcessing,The length of the statement  "                if (existing != null && existing.Guid == request.Guid && existing.Size == request.Size && existing.UseEmbeddedThumbnails == request.UseEmbeddedThumbnails && existing.AutoRotate == request.AutoRotate && existing.UseWIC == request.UseWIC) " is 236.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,bw_RunWorkerCompleted,The length of the statement  "                mImageListView.OnThumbnailCachedInternal(result.Guid' result.Image' result.Size' request.RequestType == RequestType.Thumbnail); " is 127.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,bw_DoWork,The length of the statement  "            string diskCacheKey = GetKey(request.Guid' request.Size' request.UseEmbeddedThumbnails' request.AutoRotate' request.UseWIC); " is 124.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,bw_DoWork,The length of the statement  "                thumb = request.Adaptor.GetThumbnail(request.VirtualItemKey' request.Size' request.UseEmbeddedThumbnails' request.AutoRotate' request.UseWIC); " is 142.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,bw_DoWork,The length of the statement  "                result = new CacheItem(request.Guid' request.Size' null' CacheState.Error' request.UseEmbeddedThumbnails' request.AutoRotate' request.UseWIC); " is 142.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,bw_DoWork,The length of the statement  "                result = new CacheItem(request.Guid' request.Size' thumb' CacheState.Cached' request.UseEmbeddedThumbnails' request.AutoRotate' request.UseWIC); " is 144.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,IsPurgeNeeded,The length of the statement  "            return ((CacheLimitAsMemory != 0 && MemoryUsedByRemoved > CacheLimitAsMemory / 4) || (CacheLimitAsItemCount != 0 && removedItems.Count > CacheLimitAsItemCount / 4)); " is 165.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,IsCacheLimitExceeded,The length of the statement  "            return ((CacheLimitAsMemory != 0 && MemoryUsedByRemoved > CacheLimitAsMemory) || (CacheLimitAsItemCount != 0 && removedItems.Count > CacheLimitAsItemCount)); " is 157.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,Add,The length of the statement  "            RunWorker(new CacheRequest(guid' adaptor' key' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC' RequestType.Thumbnail)); " is 125.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,Add,The length of the statement  "            thumbCache.Add(guid' new CacheItem(guid' thumbSize' thumb' CacheState.Cached' useEmbeddedThumbnails' autoRotate' useWIC)); " is 122.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,AddToGalleryCache,The length of the statement  "            if (galleryItem != null && galleryItem.Guid == guid && galleryItem.Image != null && galleryItem.Size == thumbSize && galleryItem.UseEmbeddedThumbnails == useEmbeddedThumbnails && galleryItem.AutoRotate == autoRotate && galleryItem.UseWIC == useWIC) " is 248.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,AddToGalleryCache,The length of the statement  "            RunWorker(new CacheRequest(guid' adaptor' key' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC' RequestType.Gallery)' 2); " is 126.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,AddToRendererCache,The length of the statement  "            if (rendererItem != null && rendererItem.Guid == guid && rendererItem.Image != null && rendererItem.Size == thumbSize && rendererItem.UseEmbeddedThumbnails == useEmbeddedThumbnails && rendererItem.AutoRotate == autoRotate && rendererItem.UseWIC == useWIC) " is 255.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,AddToRendererCache,The length of the statement  "            RunWorker(new CacheRequest(guid' adaptor' key' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC' RequestType.Renderer)' 1); " is 127.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetRendererImage,The length of the statement  "            if (rendererItem != null && rendererItem.Guid == guid && rendererItem.Image != null && rendererItem.Size == thumbSize && rendererItem.UseEmbeddedThumbnails == useEmbeddedThumbnails && rendererItem.AutoRotate == autoRotate && rendererItem.UseWIC == useWIC) " is 255.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetGalleryImage,The length of the statement  "            if (galleryItem != null && galleryItem.Guid == guid && galleryItem.Image != null && galleryItem.Size == thumbSize && galleryItem.UseEmbeddedThumbnails == useEmbeddedThumbnails && galleryItem.AutoRotate == autoRotate && galleryItem.UseWIC == useWIC) " is 248.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetImage,The length of the statement  "            if (thumbCache.TryGetValue(guid' out item) && item != null && item.Image != null && item.Size == thumbSize && item.UseEmbeddedThumbnails == useEmbeddedThumbnails && item.AutoRotate == autoRotate && item.UseWIC == useWIC) " is 220.
Long Statement,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetCacheState,The length of the statement  "            if (thumbCache.TryGetValue(guid' out item) && item != null && item.Size == thumbSize && item.UseEmbeddedThumbnails == useEmbeddedThumbnails && item.AutoRotate == autoRotate && item.UseWIC == useWIC) " is 198.
Long Statement,ImageGlass.ImageListView,QueuedBackgroundWorker,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\QueuedBackgroundWorker.cs,RunWorkerAsync,The length of the statement  "				throw new ArgumentException ("priority must be between 0 and " + (priorityQueues - 1).ToString () + "  inclusive."' "priority"); " is 128.
Long Statement,ImageGlass.ImageListView,QueuedBackgroundWorker,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\QueuedBackgroundWorker.cs,CancelAsync,The length of the statement  "				throw new ArgumentException ("priority must be between 0 and " + (priorityQueues - 1).ToString () + "  inclusive."' "priority"); " is 128.
Long Statement,ImageGlass.ImageListView,QueuedBackgroundWorker,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\QueuedBackgroundWorker.cs,Run,The length of the statement  "						QueuedWorkerCompletedEventArgs workCompletedArg = new QueuedWorkerCompletedEventArgs (request' doWorkArg.Result' priority' error' doWorkArg.Cancel); " is 148.
Long Statement,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The length of the statement  "                string s = string.Format("Total: {0}\r\nCache: {1}\r\nCache*: {2}"' Utility.FormatSize(baseMem)' Utility.FormatSize(mem)' Utility.FormatSize(ImageListView.thumbnailCache.MemoryUsed)); " is 183.
Long Statement,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height); " is 161.
Long Statement,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                            new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)' " is 129.
Long Statement,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGalleryImage,The length of the statement  "                    Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.X + itemMargin.Width' bounds.Y + itemMargin.Height' bounds.Width - 2 * itemMargin.Width' bounds.Height - 2 * itemMargin.Height - mReflectionSize)' 50.0f' 100.0f); " is 234.
Long Statement,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The length of the statement  "                    Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f); " is 148.
Long Statement,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The length of the statement  "                    if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0) " is 122.
Long Statement,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The length of the statement  "                    if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType)) " is 165.
Long Statement,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The length of the statement  "                            g.DrawString(name' (ImageListView.GroupHeaderFont == null ? ImageListView.Font : ImageListView.GroupHeaderFont)' bText' bounds' sf); " is 132.
Long Statement,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical)) " is 160.
Long Statement,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None))) " is 128.
Long Statement,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical)) " is 160.
Long Statement,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical)) " is 160.
Long Statement,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical)) " is 153.
Long Statement,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f); " is 137.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The length of the statement  "                    itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3) + itemPadding.Height; // textHeight / 3 = vertical space between thumbnail and text " is 150.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height); " is 174.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height); " is 161.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGalleryImage,The length of the statement  "                    Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)); " is 135.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The length of the statement  "                    Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f); " is 148.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The length of the statement  "                    if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0) " is 122.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The length of the statement  "                        int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText); " is 122.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The length of the statement  "                    if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType)) " is 165.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The length of the statement  "                    using (Brush bHovered = new LinearGradientBrush(bounds' Color.FromArgb(16' SystemColors.Highlight)' Color.FromArgb(64' SystemColors.Highlight)' LinearGradientMode.Vertical)) " is 173.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The length of the statement  "                    using (Brush bNormal = new LinearGradientBrush(bounds' Color.FromArgb(32' SystemColors.Control)' Color.FromArgb(196' SystemColors.Control)' LinearGradientMode.Vertical)) " is 169.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The length of the statement  "                using (Brush bBorder = new LinearGradientBrush(bounds' Color.FromArgb(196' SystemColors.Control)' Color.FromArgb(32' SystemColors.Control)' LinearGradientMode.Vertical)) " is 169.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The length of the statement  "                        g.DrawString(column.Text' (ImageListView.ColumnHeaderFont == null ? ImageListView.Font : ImageListView.ColumnHeaderFont)' " is 121.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The length of the statement  "                using (Brush bBack = new LinearGradientBrush(bounds' Color.FromArgb(32' SystemColors.Control)' Color.FromArgb(196' SystemColors.Control)' LinearGradientMode.Vertical)) " is 167.
Long Statement,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The length of the statement  "                using (Brush bBorder = new LinearGradientBrush(bounds' Color.FromArgb(196' SystemColors.Control)' Color.FromArgb(32' SystemColors.Control)' LinearGradientMode.Vertical)) " is 169.
Long Statement,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                            using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical)) " is 160.
Long Statement,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                            (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None))) " is 128.
Long Statement,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                            using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical)) " is 160.
Long Statement,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                            using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical)) " is 160.
Long Statement,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                            using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical)) " is 153.
Long Statement,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The length of the statement  "                            TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping); " is 134.
Long Statement,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                            //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)); " is 126.
Long Statement,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping); " is 175.
Long Statement,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height); " is 151.
Long Statement,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                                        TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping); " is 134.
Long Statement,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                                        TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping); " is 134.
Long Statement,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The length of the statement  "                        TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping); " is 134.
Long Statement,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The length of the statement  "                    using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.ColumnHeaderHoverColor1' ImageListView.Colors.ColumnHeaderHoverColor2' LinearGradientMode.Vertical)) " is 177.
Long Statement,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The length of the statement  "                    using (Brush bNormal = new LinearGradientBrush(bounds' ImageListView.Colors.ColumnHeaderBackColor1' ImageListView.Colors.ColumnHeaderBackColor2' LinearGradientMode.Vertical)) " is 174.
Long Statement,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The length of the statement  "                            g.DrawString(column.Text' (ImageListView.ColumnHeaderFont == null ? ImageListView.Font : ImageListView.ColumnHeaderFont)' bText' bounds' sf); " is 141.
Long Statement,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The length of the statement  "                using (Brush bNormal = new LinearGradientBrush(bounds' ImageListView.Colors.ColumnHeaderBackColor1' ImageListView.Colors.ColumnHeaderBackColor2' LinearGradientMode.Vertical)) " is 174.
Long Statement,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                    Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight); " is 122.
Long Statement,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height); " is 130.
Long Statement,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3); " is 122.
Long Statement,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The length of the statement  "                        TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping); " is 140.
Long Statement,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGalleryImage,The length of the statement  "                    Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)); " is 135.
Long Statement,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,GetCachedImage,The length of the statement  "                    if (mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 32 && mImageListView.ThumbnailSize.Height > 32) " is 124.
Long Statement,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,GetCachedImage,The length of the statement  "                    mImageListView.AutoRotateThumbnails' mImageListView.UseWIC == UseWIC.Auto || mImageListView.UseWIC == UseWIC.ThumbnailsOnly' false); " is 132.
Long Statement,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,GetCachedImage,The length of the statement  "                if (img == null && mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 16 && mImageListView.ThumbnailSize.Height > 16) " is 139.
Long Statement,ImageGlass.ImageListView,ImageListViewItemCollection,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,Sort,The length of the statement  "                if ((mImageListView.GroupOrder == SortOrder.None || mImageListView.GroupColumn < 0 || mImageListView.GroupColumn >= mImageListView.Columns.Count) && " is 148.
Long Statement,ImageGlass.ImageListView,ImageListViewItemCollection,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,Sort,The length of the statement  "                   (mImageListView.SortOrder == SortOrder.None || mImageListView.SortColumn < 0 || mImageListView.SortColumn >= mImageListView.Columns.Count)) " is 139.
Long Statement,ImageGlass.ImageListView,ImageListViewItemCollection,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,Sort,The length of the statement  "                mItems.Sort(new ImageListViewItemComparer(groupColumn' mImageListView.GroupOrder' sortColumn' mImageListView.SortOrder)); " is 121.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetCheckBoxBounds,The length of the statement  "                if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter) " is 136.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetCheckBoxBounds,The length of the statement  "                else if (alignment == ContentAlignment.BottomRight || alignment == ContentAlignment.MiddleRight || alignment == ContentAlignment.TopRight) " is 138.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetIconBounds,The length of the statement  "                if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.TopLeft) " is 130.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetIconBounds,The length of the statement  "                else if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter) " is 141.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The length of the statement  "            else if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.TopLeft) " is 135.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The length of the statement  "            else if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter) " is 141.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The length of the statement  "            else // if (alignment == ContentAlignment.BottomRight || alignment == ContentAlignment.MiddleRight || alignment == ContentAlignment.TopRight) " is 141.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The length of the statement  "            else if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.BottomRight) " is 141.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The length of the statement  "            else if (alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.MiddleRight) " is 141.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The length of the statement  "            else // if (alignment == ContentAlignment.TopLeft || alignment == ContentAlignment.TopCenter || alignment == ContentAlignment.TopRight) " is 135.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateScrollBars,The length of the statement  "            mImageListView.hScrollBar.Width = mImageListView.ClientRectangle.Width - (mImageListView.vScrollBar.Visible ? mImageListView.vScrollBar.Width : 0); " is 147.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateScrollBars,The length of the statement  "            mImageListView.vScrollBar.Height = mImageListView.ClientRectangle.Height - (mImageListView.hScrollBar.Visible ? mImageListView.hScrollBar.Height : 0); " is 150.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                            mFirstPartiallyVisible = group.FirstItemIndex + (int)System.Math.Floor((float)(ItemAreaBounds.Left - group.itemBounds.Left) / (float)mItemSizeWithMargin.Width) * group.itemRows; " is 177.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                            mFirstVisible = group.FirstItemIndex + (int)System.Math.Ceiling((float)(ItemAreaBounds.Left - group.itemBounds.Left) / (float)mItemSizeWithMargin.Width) * group.itemRows; " is 170.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                            mFirstPartiallyVisible = group.FirstItemIndex + (int)System.Math.Floor((float)(ItemAreaBounds.Top - group.itemBounds.Top) / (float)mItemSizeWithMargin.Height) * group.itemCols; " is 176.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                            mFirstVisible = group.FirstItemIndex + (int)System.Math.Ceiling((float)(ItemAreaBounds.Top - group.itemBounds.Top) / (float)mItemSizeWithMargin.Height) * group.itemCols; " is 169.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                        mLastPartiallyVisible = group.FirstItemIndex + (int)System.Math.Ceiling((float)((ItemAreaBounds.Left - group.itemBounds.Left) + mItemAreaBounds.Width) / (float)mItemSizeWithMargin.Width) * group.itemRows - 1; " is 208.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                        mLastVisible = group.FirstItemIndex + (int)System.Math.Floor((float)((ItemAreaBounds.Left - group.itemBounds.Left) + mItemAreaBounds.Width) / (float)mItemSizeWithMargin.Width) * group.itemRows - 1; " is 197.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                        mLastPartiallyVisible = group.FirstItemIndex + (int)System.Math.Ceiling((float)((ItemAreaBounds.Top - group.itemBounds.Top) + mItemAreaBounds.Height) / (float)mItemSizeWithMargin.Height) * group.itemCols - 1; " is 208.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                        mLastVisible = group.FirstItemIndex + (int)System.Math.Floor((float)((ItemAreaBounds.Top - group.itemBounds.Top) + mItemAreaBounds.Height) / (float)mItemSizeWithMargin.Height) * group.itemCols - 1; " is 197.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                    mFirstPartiallyVisible = (int)System.Math.Floor((float)mImageListView.ViewOffset.X / (float)mItemSizeWithMargin.Width) * mDisplayedRows; " is 136.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                    mLastPartiallyVisible = (int)System.Math.Ceiling((float)(mImageListView.ViewOffset.X + mItemAreaBounds.Width) / (float)mItemSizeWithMargin.Width) * mDisplayedRows - 1; " is 167.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                    mFirstVisible = (int)System.Math.Ceiling((float)mImageListView.ViewOffset.X / (float)mItemSizeWithMargin.Width) * mDisplayedRows; " is 129.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                    mLastVisible = (int)System.Math.Floor((float)(mImageListView.ViewOffset.X + mItemAreaBounds.Width) / (float)mItemSizeWithMargin.Width) * mDisplayedRows - 1; " is 156.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                    mFirstPartiallyVisible = (int)System.Math.Floor((float)mImageListView.ViewOffset.Y / (float)mItemSizeWithMargin.Height) * mDisplayedCols; " is 137.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                    mLastPartiallyVisible = (int)System.Math.Ceiling((float)(mImageListView.ViewOffset.Y + mItemAreaBounds.Height) / (float)mItemSizeWithMargin.Height) * mDisplayedCols - 1; " is 169.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                    mFirstVisible = (int)System.Math.Ceiling((float)mImageListView.ViewOffset.Y / (float)mItemSizeWithMargin.Height) * mDisplayedCols; " is 130.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The length of the statement  "                    mLastVisible = (int)System.Math.Floor((float)(mImageListView.ViewOffset.Y + mItemAreaBounds.Height) / (float)mItemSizeWithMargin.Height) * mDisplayedCols - 1; " is 158.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateGroups,The length of the statement  "                    group.itemBounds = new Rectangle(x' y' group.itemCols * mItemSizeWithMargin.Width' group.itemRows * mItemSizeWithMargin.Height); " is 128.
Long Statement,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateGroups,The length of the statement  "                    group.itemBounds = new Rectangle(x' y' group.itemCols * mItemSizeWithMargin.Width' group.itemRows * mItemSizeWithMargin.Height); " is 128.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,GetImageAsync,The length of the statement  "                    ImageListView.AutoRotateThumbnails' ImageListView.UseWIC == UseWIC.Auto || ImageListView.UseWIC == UseWIC.ThumbnailsOnly); " is 122.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderItems,The length of the statement  "                for (int i = ImageListView.layoutManager.FirstPartiallyVisible; i <= ImageListView.layoutManager.LastPartiallyVisible; i++) " is 123.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderScrollbarFiller,The length of the statement  "                Rectangle filler = new Rectangle(bounds.Right' bounds.Bottom' ImageListView.vScrollBar.Width' ImageListView.hScrollBar.Height); " is 127.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,GetGalleryImageAsync,The length of the statement  "                    ImageListView.AutoRotateThumbnails' ImageListView.UseWIC == UseWIC.Auto || ImageListView.UseWIC == UseWIC.ThumbnailsOnly); " is 122.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItem,The length of the statement  "                    itemSize = new Size(colWidth' textHeight + 2 * textHeight / 6); // textHeight / 6 = vertical space between item border and text " is 127.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItem,The length of the statement  "                    itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3); // textHeight / 3 = vertical space between thumbnail and text " is 129.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawBorder,The length of the statement  "                    Border3DStyle style = (ImageListView.BorderStyle == BorderStyle.FixedSingle) ? Border3DStyle.Flat : Border3DStyle.SunkenInner; " is 126.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                    using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical)) " is 160.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                    (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None))) " is 128.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                    using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical)) " is 160.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                    using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical)) " is 160.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                    using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical)) " is 153.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                        Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)); " is 124.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                    Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height); " is 183.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                        TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine); " is 126.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                        RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height); " is 153.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                        Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' (ImageListView.View == View.Details ? 2 : 4)); " is 159.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                        Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4)); " is 155.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                        Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4)); " is 155.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                        Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4)); " is 150.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                        Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4)); " is 149.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The length of the statement  "                        Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4)); " is 154.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawGroupHeader,The length of the statement  "                using (Pen pSpep = new Pen(new LinearGradientBrush(bounds' ImageListView.Colors.ColumnSeparatorColor' Color.Transparent' LinearGradientMode.Horizontal))) " is 153.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawGroupHeader,The length of the statement  "                            g.DrawString(name' (ImageListView.GroupHeaderFont == null ? ImageListView.Font : ImageListView.GroupHeaderFont)' bText' bounds' sf); " is 132.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The length of the statement  "                    using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.ColumnHeaderHoverColor1' ImageListView.Colors.ColumnHeaderHoverColor2' LinearGradientMode.Vertical)) " is 177.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The length of the statement  "                    using (Brush bNormal = new LinearGradientBrush(bounds' ImageListView.Colors.ColumnHeaderBackColor1' ImageListView.Colors.ColumnHeaderBackColor2' LinearGradientMode.Vertical)) " is 174.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The length of the statement  "                using (Brush bBorder = new LinearGradientBrush(bounds' ImageListView.Colors.ColumnHeaderBackColor2' ImageListView.Colors.ColumnHeaderBackColor1' LinearGradientMode.Vertical)) " is 174.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The length of the statement  "                            g.DrawString(column.Text' (ImageListView.ColumnHeaderFont == null ? ImageListView.Font : ImageListView.ColumnHeaderFont)' bText' bounds' sf); " is 141.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The length of the statement  "                    Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f); " is 148.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The length of the statement  "                    if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0) " is 122.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The length of the statement  "                    if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType)) " is 165.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawGalleryImage,The length of the statement  "                //    Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)); " is 141.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnExtender,The length of the statement  "                using (Brush bBack = new LinearGradientBrush(bounds' ImageListView.Colors.ColumnHeaderBackColor1' ImageListView.Colors.ColumnHeaderBackColor2' LinearGradientMode.Vertical)) " is 172.
Long Statement,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnExtender,The length of the statement  "                using (Brush bBorder = new LinearGradientBrush(bounds' ImageListView.Colors.ColumnHeaderBackColor2' ImageListView.Colors.ColumnHeaderBackColor1' LinearGradientMode.Vertical)) " is 174.
Long Statement,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The length of the statement  "                else if (MouseSelecting && mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll && !scrollTimer.Enabled) " is 122.
Long Statement,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The length of the statement  "                    SelectionRectangle = new Rectangle(Math.Min(pt1.X' pt2.X)' Math.Min(pt1.Y' pt2.Y)' Math.Abs(pt1.X - pt2.X)' Math.Abs(pt1.Y - pt2.Y)); " is 133.
Long Statement,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The length of the statement  "                            List<int> indices = group.ItemIndicesInRectangle(SelectionRectangle' mImageListView.ScrollOrientation' mImageListView.layoutManager.ItemSizeWithMargin); " is 152.
Long Statement,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,ApplyNavKey,The length of the statement  "                    else if (key == Keys.PageDown && index < mImageListView.Items.Count - mImageListView.layoutManager.Cols * (mImageListView.layoutManager.Rows - 1)) " is 146.
Complex Conditional,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,IsInputKey,The conditional expression  "(keyData & Keys.Left) == Keys.Left || (keyData & Keys.Right) == Keys.Right || (keyData & Keys.Up) == Keys.Up || (keyData & Keys.Down) == Keys.Down"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewGroup,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroup.cs,ItemIndicesInRectangle,The conditional expression  "rec.Top <= itemBounds.Bottom && rec.Bottom >= itemBounds.Top &&                      rec.Left <= itemBounds.Right && rec.Right >= itemBounds.Left"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,CanContinueProcessing,The conditional expression  "existing != null && existing.Size == request.Size && existing.UseEmbeddedThumbnails == request.UseEmbeddedThumbnails && existing.AutoRotate == request.AutoRotate && existing.UseWIC == request.UseWIC"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,CanContinueProcessing,The conditional expression  "canProcess && (CacheMode == CacheMode.OnDemand) && mImageListView != null && !mImageListView.IsItemVisible(request.Guid)"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,CanContinueProcessing,The conditional expression  "existing != null && existing.Guid == request.Guid && existing.Size == request.Size && existing.UseEmbeddedThumbnails == request.UseEmbeddedThumbnails && existing.AutoRotate == request.AutoRotate && existing.UseWIC == request.UseWIC"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,CanContinueProcessing,The conditional expression  "existing != null && existing.Guid == request.Guid && existing.Size == request.Size && existing.UseEmbeddedThumbnails == request.UseEmbeddedThumbnails && existing.AutoRotate == request.AutoRotate && existing.UseWIC == request.UseWIC"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,AddToGalleryCache,The conditional expression  "galleryItem != null && galleryItem.Guid == guid && galleryItem.Image != null && galleryItem.Size == thumbSize && galleryItem.UseEmbeddedThumbnails == useEmbeddedThumbnails && galleryItem.AutoRotate == autoRotate && galleryItem.UseWIC == useWIC"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,AddToRendererCache,The conditional expression  "rendererItem != null && rendererItem.Guid == guid && rendererItem.Image != null && rendererItem.Size == thumbSize && rendererItem.UseEmbeddedThumbnails == useEmbeddedThumbnails && rendererItem.AutoRotate == autoRotate && rendererItem.UseWIC == useWIC"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetRendererImage,The conditional expression  "rendererItem != null && rendererItem.Guid == guid && rendererItem.Image != null && rendererItem.Size == thumbSize && rendererItem.UseEmbeddedThumbnails == useEmbeddedThumbnails && rendererItem.AutoRotate == autoRotate && rendererItem.UseWIC == useWIC"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetGalleryImage,The conditional expression  "galleryItem != null && galleryItem.Guid == guid && galleryItem.Image != null && galleryItem.Size == thumbSize && galleryItem.UseEmbeddedThumbnails == useEmbeddedThumbnails && galleryItem.AutoRotate == autoRotate && galleryItem.UseWIC == useWIC"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetImage,The conditional expression  "thumbCache.TryGetValue(guid' out item) && item != null && item.Image != null && item.Size == thumbSize && item.UseEmbeddedThumbnails == useEmbeddedThumbnails && item.AutoRotate == autoRotate && item.UseWIC == useWIC"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetCacheState,The conditional expression  "thumbCache.TryGetValue(guid' out item) && item != null && item.Size == thumbSize && item.UseEmbeddedThumbnails == useEmbeddedThumbnails && item.AutoRotate == autoRotate && item.UseWIC == useWIC"  is complex.
Complex Conditional,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The conditional expression  "ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None"  is complex.
Complex Conditional,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The conditional expression  "ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType)"  is complex.
Complex Conditional,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The conditional expression  "column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name"  is complex.
Complex Conditional,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The conditional expression  "(ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None))"  is complex.
Complex Conditional,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The conditional expression  "ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType)"  is complex.
Complex Conditional,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The conditional expression  "column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name"  is complex.
Complex Conditional,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The conditional expression  "(ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None))"  is complex.
Complex Conditional,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The conditional expression  "ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,GetCachedImage,The conditional expression  "img == null && mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 16 && mImageListView.ThumbnailSize.Height > 16"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewItemCollection,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItemCollection.cs,Sort,The conditional expression  "(mImageListView.GroupOrder == SortOrder.None || mImageListView.GroupColumn < 0 || mImageListView.GroupColumn >= mImageListView.Columns.Count) &&                     (mImageListView.SortOrder == SortOrder.None || mImageListView.SortColumn < 0 || mImageListView.SortColumn >= mImageListView.Columns.Count)"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetCheckBoxBounds,The conditional expression  "mImageListView.View != View.Details && mImageListView.CheckBoxAlignment == mImageListView.IconAlignment &&                  mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The conditional expression  "(mImageListView.View == View.Gallery && group.itemBounds.Left > ItemAreaBounds.Right) ||                          (mImageListView.View != View.Gallery && group.itemBounds.Top > ItemAreaBounds.Bottom)"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The conditional expression  "(mImageListView.View == View.Gallery && group.itemBounds.Right < ItemAreaBounds.Left) ||                          (mImageListView.View != View.Gallery && group.itemBounds.Bottom < ItemAreaBounds.Top)"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,UpdateVisibleItems,The conditional expression  "mFirstPartiallyVisible >= 0 &&                  mLastPartiallyVisible >= 0 &&                  mFirstPartiallyVisible <= mImageListView.Items.Count - 1 &&                  mLastPartiallyVisible <= mImageListView.Items.Count - 1"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The conditional expression  "(ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                      (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None))"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The conditional expression  "ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The conditional expression  "ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType)"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The conditional expression  "column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewSelectedItemEnumerator,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewSelectedItemCollection.cs,MoveNext,The conditional expression  "current == -1 ||                          owner[current].Guid == lastItem ||                          owner[current].Selected == false ||                          owner[current].Enabled == false"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              (startCol >= 0 || endCol >= 0) && (startRow >= 0 || endRow >= 0) &&                              (startCol <= mImageListView.layoutManager.Cols - 1 || endCol <= mImageListView.layoutManager.Cols - 1)"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "i >= 0 && i <= mImageListView.Items.Count - 1 &&                                          !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                          mImageListView.Items[i].Enabled"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inItemArea && lastMouseDownInItemArea &&                      (LeftButton || RightButton) &&                      ((Math.Abs(e.Location.X - lastMouseDownLocation.X) > SelectionTolerance ||                      Math.Abs(e.Location.Y - lastMouseDownLocation.Y) > SelectionTolerance))"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inHeaderArea && lastMouseDownInColumnHeaderArea && lastMouseDownOverSeparator && LeftButton &&                      mImageListView.AllowColumnResize && HoveredSeparator != null"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inPaneArea && lastMouseDownInPaneArea && lastMouseDownOverPaneBorder && LeftButton &&                      mImageListView.AllowPaneResize && HoveredPaneBorder != false"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "!ReferenceEquals(HoveredItem' oldHoveredItem) ||                      (HoveredSubItem != oldHoveredSubItem) ||                      !ReferenceEquals(HoveredColumn' oldHoveredColumn) ||                      !ReferenceEquals(HoveredSeparator' oldHoveredSeparator)"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "(mImageListView.AllowColumnResize && HoveredSeparator != null) ||                          (mImageListView.AllowPaneResize && HoveredPaneBorder != false)"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The conditional expression  "!((inHeaderArea && (DraggingSeperator || HoveredSeparator != null)) ||                          (inPaneArea && (ResizingPane || HoveredPaneBorder != false)))"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseUp,The conditional expression  "mImageListView.AllowCheckBoxClick && lastMouseDownInItemArea &&                      lastMouseDownOverCheckBox && HoveredItem != null && overCheckBox && LeftButton"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseUp,The conditional expression  "lastMouseDownInItemArea && lastMouseDownOverItem && HoveredItem != null && LeftButton"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseUp,The conditional expression  "lastMouseDownInItemArea && lastMouseDownOverItem && HoveredItem != null && RightButton"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseUp,The conditional expression  "lastMouseDownInItemArea && inItemArea && HoveredItem == null && (LeftButton || RightButton)"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseUp,The conditional expression  "lastMouseDownInColumnHeaderArea && lastMouseDownOverColumn &&                      mImageListView.AllowColumnClick && HoveredColumn != null && HoveredSeparator == null"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseDoubleClick,The conditional expression  "lastMouseDownInColumnHeaderArea && lastMouseDownOverSeparator &&                      mImageListView.AllowColumnClick && HoveredSeparator != null"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseLeave,The conditional expression  "HoveredItem != null || HoveredColumn != null || HoveredSeparator != null || HoveredPaneBorder != false"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,KeyDown,The conditional expression  "(ShiftKey || ControlKey) && mImageListView.Items.Count != 0 &&                      mImageListView.Items.FocusedItem == null"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,DragOver,The conditional expression  "e.Data.GetDataPresent(DataFormats.FileDrop) &&                      (mImageListView.AllowDrop || (mImageListView.AllowDrag && selfDragging))"  is complex.
Complex Conditional,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,DragOver,The conditional expression  "selfDragging && (dragDropTarget.Selected ||                              (!dragCaretOnRight && index > 0 && mImageListView.Items[index - 1].Selected) ||                              (dragCaretOnRight && index < mImageListView.Items.Count - 1 && mImageListView.Items[index + 1].Selected))"  is complex.
Complex Conditional,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetThumbnail,The conditional expression  "bmp.Decoder == null ||                          (bmp.Decoder.Preview == null && bmp.Decoder.Frames == null) ||                          useEmbeddedThumbnails == UseEmbeddedThumbnails.Always"  is complex.
Complex Conditional,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The conditional expression  "header[0] == 0x89 && header[1] == 0x50 && header[2] == 0x4E && header[3] == 0x47 &&                  header[4] == 0x0D && header[5] == 0x0A && header[6] == 0x1A && header[7] == 0x0A"  is complex.
Complex Conditional,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The conditional expression  "header[0] == 0xD7 && header[1] == 0xCD && header[2] == 0xC6 && header[3] == 0x9A"  is complex.
Complex Conditional,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The conditional expression  "header[0] == 0x01 && header[1] == 0x00 && header[2] == 0x00 && header[3] == 0x00"  is complex.
Complex Conditional,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The conditional expression  "header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x01 && header[3] == 0x00"  is complex.
Complex Conditional,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The conditional expression  "header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x02 && header[3] == 0x00"  is complex.
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,BuildIndex,The following statement contains a magic number: try              {                  writeOffset = 0;                  stream.Seek(0' SeekOrigin.Begin);                  while (stream.Position < stream.Length)                  {                      int read;                      byte[] buffer;                        buffer = new byte[mKeySize];                      read = stream.Read(buffer' 0' mKeySize);                      if (read != mKeySize)                          break;                      string id = Encoding.ASCII.GetString(buffer);                        buffer = new byte[8];                      read = stream.Read(buffer' 0' 8);                      if (read != 8)                          break;                      long length = BitConverter.ToInt64(buffer' 0);                        CacheItem item = new CacheItem(id' writeOffset' length);                      if (index.ContainsKey(id))                          index[id] = item;                      else                          index.Add(id' item);                        stream.Seek(length' SeekOrigin.Current);                      writeOffset += 24 + length;                  }              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,BuildIndex,The following statement contains a magic number: try              {                  writeOffset = 0;                  stream.Seek(0' SeekOrigin.Begin);                  while (stream.Position < stream.Length)                  {                      int read;                      byte[] buffer;                        buffer = new byte[mKeySize];                      read = stream.Read(buffer' 0' mKeySize);                      if (read != mKeySize)                          break;                      string id = Encoding.ASCII.GetString(buffer);                        buffer = new byte[8];                      read = stream.Read(buffer' 0' 8);                      if (read != 8)                          break;                      long length = BitConverter.ToInt64(buffer' 0);                        CacheItem item = new CacheItem(id' writeOffset' length);                      if (index.ContainsKey(id))                          index[id] = item;                      else                          index.Add(id' item);                        stream.Seek(length' SeekOrigin.Current);                      writeOffset += 24 + length;                  }              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,BuildIndex,The following statement contains a magic number: try              {                  writeOffset = 0;                  stream.Seek(0' SeekOrigin.Begin);                  while (stream.Position < stream.Length)                  {                      int read;                      byte[] buffer;                        buffer = new byte[mKeySize];                      read = stream.Read(buffer' 0' mKeySize);                      if (read != mKeySize)                          break;                      string id = Encoding.ASCII.GetString(buffer);                        buffer = new byte[8];                      read = stream.Read(buffer' 0' 8);                      if (read != 8)                          break;                      long length = BitConverter.ToInt64(buffer' 0);                        CacheItem item = new CacheItem(id' writeOffset' length);                      if (index.ContainsKey(id))                          index[id] = item;                      else                          index.Add(id' item);                        stream.Seek(length' SeekOrigin.Current);                      writeOffset += 24 + length;                  }              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,BuildIndex,The following statement contains a magic number: try              {                  writeOffset = 0;                  stream.Seek(0' SeekOrigin.Begin);                  while (stream.Position < stream.Length)                  {                      int read;                      byte[] buffer;                        buffer = new byte[mKeySize];                      read = stream.Read(buffer' 0' mKeySize);                      if (read != mKeySize)                          break;                      string id = Encoding.ASCII.GetString(buffer);                        buffer = new byte[8];                      read = stream.Read(buffer' 0' 8);                      if (read != 8)                          break;                      long length = BitConverter.ToInt64(buffer' 0);                        CacheItem item = new CacheItem(id' writeOffset' length);                      if (index.ContainsKey(id))                          index[id] = item;                      else                          index.Add(id' item);                        stream.Seek(length' SeekOrigin.Current);                      writeOffset += 24 + length;                  }              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Read,The following statement contains a magic number: try              {                  CacheItem item;                  if (!index.TryGetValue(id' out item))                      return false;                    stream.Seek(item.Offset' SeekOrigin.Begin);                    int read;                  byte[] buffer;                    buffer = new byte[mKeySize];                  read = stream.Read(buffer' 0' mKeySize);                  if (read != mKeySize)                  {                      index.Remove(id);                      return false;                  }                  string checkid = Encoding.ASCII.GetString(buffer);                  if (checkid != item.ID)                  {                      index.Remove(id);                      return false;                  }                    buffer = new byte[8];                  read = stream.Read(buffer' 0' 8);                  if (read != 8)                  {                      index.Remove(id);                      return false;                  }                  long length = BitConverter.ToInt64(buffer' 0);                  if (length != item.Length)                  {                      index.Remove(id);                      return false;                  }                    if (stream.Position + length > stream.Length)                  {                      index.Remove(id);                      return false;                  }                    data.Seek(0' SeekOrigin.Begin);                  data.SetLength(length);                  long totalRead = 0;                  buffer = new byte[4096];                  while (totalRead < length)                  {                      read = stream.Read(buffer' 0' 4096);                      data.Write(buffer' 0' read);                      totalRead += read;                  }              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Read,The following statement contains a magic number: try              {                  CacheItem item;                  if (!index.TryGetValue(id' out item))                      return false;                    stream.Seek(item.Offset' SeekOrigin.Begin);                    int read;                  byte[] buffer;                    buffer = new byte[mKeySize];                  read = stream.Read(buffer' 0' mKeySize);                  if (read != mKeySize)                  {                      index.Remove(id);                      return false;                  }                  string checkid = Encoding.ASCII.GetString(buffer);                  if (checkid != item.ID)                  {                      index.Remove(id);                      return false;                  }                    buffer = new byte[8];                  read = stream.Read(buffer' 0' 8);                  if (read != 8)                  {                      index.Remove(id);                      return false;                  }                  long length = BitConverter.ToInt64(buffer' 0);                  if (length != item.Length)                  {                      index.Remove(id);                      return false;                  }                    if (stream.Position + length > stream.Length)                  {                      index.Remove(id);                      return false;                  }                    data.Seek(0' SeekOrigin.Begin);                  data.SetLength(length);                  long totalRead = 0;                  buffer = new byte[4096];                  while (totalRead < length)                  {                      read = stream.Read(buffer' 0' 4096);                      data.Write(buffer' 0' read);                      totalRead += read;                  }              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Read,The following statement contains a magic number: try              {                  CacheItem item;                  if (!index.TryGetValue(id' out item))                      return false;                    stream.Seek(item.Offset' SeekOrigin.Begin);                    int read;                  byte[] buffer;                    buffer = new byte[mKeySize];                  read = stream.Read(buffer' 0' mKeySize);                  if (read != mKeySize)                  {                      index.Remove(id);                      return false;                  }                  string checkid = Encoding.ASCII.GetString(buffer);                  if (checkid != item.ID)                  {                      index.Remove(id);                      return false;                  }                    buffer = new byte[8];                  read = stream.Read(buffer' 0' 8);                  if (read != 8)                  {                      index.Remove(id);                      return false;                  }                  long length = BitConverter.ToInt64(buffer' 0);                  if (length != item.Length)                  {                      index.Remove(id);                      return false;                  }                    if (stream.Position + length > stream.Length)                  {                      index.Remove(id);                      return false;                  }                    data.Seek(0' SeekOrigin.Begin);                  data.SetLength(length);                  long totalRead = 0;                  buffer = new byte[4096];                  while (totalRead < length)                  {                      read = stream.Read(buffer' 0' 4096);                      data.Write(buffer' 0' read);                      totalRead += read;                  }              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Read,The following statement contains a magic number: try              {                  CacheItem item;                  if (!index.TryGetValue(id' out item))                      return false;                    stream.Seek(item.Offset' SeekOrigin.Begin);                    int read;                  byte[] buffer;                    buffer = new byte[mKeySize];                  read = stream.Read(buffer' 0' mKeySize);                  if (read != mKeySize)                  {                      index.Remove(id);                      return false;                  }                  string checkid = Encoding.ASCII.GetString(buffer);                  if (checkid != item.ID)                  {                      index.Remove(id);                      return false;                  }                    buffer = new byte[8];                  read = stream.Read(buffer' 0' 8);                  if (read != 8)                  {                      index.Remove(id);                      return false;                  }                  long length = BitConverter.ToInt64(buffer' 0);                  if (length != item.Length)                  {                      index.Remove(id);                      return false;                  }                    if (stream.Position + length > stream.Length)                  {                      index.Remove(id);                      return false;                  }                    data.Seek(0' SeekOrigin.Begin);                  data.SetLength(length);                  long totalRead = 0;                  buffer = new byte[4096];                  while (totalRead < length)                  {                      read = stream.Read(buffer' 0' 4096);                      data.Write(buffer' 0' read);                      totalRead += read;                  }              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Read,The following statement contains a magic number: try              {                  CacheItem item;                  if (!index.TryGetValue(id' out item))                      return false;                    stream.Seek(item.Offset' SeekOrigin.Begin);                    int read;                  byte[] buffer;                    buffer = new byte[mKeySize];                  read = stream.Read(buffer' 0' mKeySize);                  if (read != mKeySize)                  {                      index.Remove(id);                      return false;                  }                  string checkid = Encoding.ASCII.GetString(buffer);                  if (checkid != item.ID)                  {                      index.Remove(id);                      return false;                  }                    buffer = new byte[8];                  read = stream.Read(buffer' 0' 8);                  if (read != 8)                  {                      index.Remove(id);                      return false;                  }                  long length = BitConverter.ToInt64(buffer' 0);                  if (length != item.Length)                  {                      index.Remove(id);                      return false;                  }                    if (stream.Position + length > stream.Length)                  {                      index.Remove(id);                      return false;                  }                    data.Seek(0' SeekOrigin.Begin);                  data.SetLength(length);                  long totalRead = 0;                  buffer = new byte[4096];                  while (totalRead < length)                  {                      read = stream.Read(buffer' 0' 4096);                      data.Write(buffer' 0' read);                      totalRead += read;                  }              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Write,The following statement contains a magic number: try              {                  stream.Seek(writeOffset' SeekOrigin.Begin);                  data.Seek(0' SeekOrigin.Begin);                    byte[] buffer;                  buffer = Encoding.ASCII.GetBytes(id);                  stream.Write(buffer' 0' buffer.Length);                  stream.Write(BitConverter.GetBytes(data.Length)' 0' 8);                    int totalRead = 0;                  buffer = new byte[4096];                    while (data.Position < data.Length)                  {                      int read = data.Read(buffer' 0' 4096);                      stream.Write(buffer' 0' read);                      totalRead += read;                  }                    CacheItem item = new CacheItem(id' writeOffset' totalRead);                  if (index.ContainsKey(id))                      index[id] = item;                  else                      index.Add(id' item);                    writeOffset += 24 + totalRead;                  if (writeOffset > mSize)                      writeOffset = 0;              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Write,The following statement contains a magic number: try              {                  stream.Seek(writeOffset' SeekOrigin.Begin);                  data.Seek(0' SeekOrigin.Begin);                    byte[] buffer;                  buffer = Encoding.ASCII.GetBytes(id);                  stream.Write(buffer' 0' buffer.Length);                  stream.Write(BitConverter.GetBytes(data.Length)' 0' 8);                    int totalRead = 0;                  buffer = new byte[4096];                    while (data.Position < data.Length)                  {                      int read = data.Read(buffer' 0' 4096);                      stream.Write(buffer' 0' read);                      totalRead += read;                  }                    CacheItem item = new CacheItem(id' writeOffset' totalRead);                  if (index.ContainsKey(id))                      index[id] = item;                  else                      index.Add(id' item);                    writeOffset += 24 + totalRead;                  if (writeOffset > mSize)                      writeOffset = 0;              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Write,The following statement contains a magic number: try              {                  stream.Seek(writeOffset' SeekOrigin.Begin);                  data.Seek(0' SeekOrigin.Begin);                    byte[] buffer;                  buffer = Encoding.ASCII.GetBytes(id);                  stream.Write(buffer' 0' buffer.Length);                  stream.Write(BitConverter.GetBytes(data.Length)' 0' 8);                    int totalRead = 0;                  buffer = new byte[4096];                    while (data.Position < data.Length)                  {                      int read = data.Read(buffer' 0' 4096);                      stream.Write(buffer' 0' read);                      totalRead += read;                  }                    CacheItem item = new CacheItem(id' writeOffset' totalRead);                  if (index.ContainsKey(id))                      index[id] = item;                  else                      index.Add(id' item);                    writeOffset += 24 + totalRead;                  if (writeOffset > mSize)                      writeOffset = 0;              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,DiskCache,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\DiskCache.cs,Write,The following statement contains a magic number: try              {                  stream.Seek(writeOffset' SeekOrigin.Begin);                  data.Seek(0' SeekOrigin.Begin);                    byte[] buffer;                  buffer = Encoding.ASCII.GetBytes(id);                  stream.Write(buffer' 0' buffer.Length);                  stream.Write(BitConverter.GetBytes(data.Length)' 0' 8);                    int totalRead = 0;                  buffer = new byte[4096];                    while (data.Position < data.Length)                  {                      int read = data.Read(buffer' 0' 4096);                      stream.Write(buffer' 0' read);                      totalRead += read;                  }                    CacheItem item = new CacheItem(id' writeOffset' totalRead);                  if (index.ContainsKey(id))                      index[id] = item;                  else                      index.Add(id' item);                    writeOffset += 24 + totalRead;                  if (writeOffset > mSize)                      writeOffset = 0;              }              finally              {                  Monitor.Exit(lockObject);              }
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mCacheLimitAsMemory = 20 * 1024 * 1024;
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mCacheLimitAsMemory = 20 * 1024 * 1024;
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mCacheLimitAsMemory = 20 * 1024 * 1024;
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mPaneWidth = 240;
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: Size = new Size(120' 100);
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: Size = new Size(120' 100);
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mCheckBoxPadding = new Size(2' 2);
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mCheckBoxPadding = new Size(2' 2);
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mIconPadding = new Size(2' 2);
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mIconPadding = new Size(2' 2);
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mThumbnailSize = new Size(96' 96);
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,ImageListView,The following statement contains a magic number: mThumbnailSize = new Size(96' 96);
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,HitTest,The following statement contains a magic number: if (View == View.Details && pt.Y <= mRenderer.MeasureColumnHeaderHeight())              {                  int i = 0;                  int x = layoutManager.ColumnHeaderBounds.Left;                  ImageListViewColumnHeader colIndex = null;                  ImageListViewColumnHeader sepIndex = null;                  if (AllowColumnClick || AllowColumnResize)                  {                      foreach (ImageListViewColumnHeader col in Columns.GetDisplayedColumns())                      {                          // Over a column?                          if (pt.X >= x && pt.X < x + col.Width + SeparatorSize / 2)                              colIndex = col;                            // Over a colummn separator?                          if (pt.X > x + col.Width - SeparatorSize / 2 && pt.X < x + col.Width + SeparatorSize / 2)                              sepIndex = col;                            if (colIndex != null)                              break;                          x += col.Width;                          i++;                      }                  }                  hitInfo = new HitInfo(colIndex' sepIndex);              }              else if (View == View.Pane && pt.X <= mPaneWidth)              {                  bool overBorder = (pt.X >= mPaneWidth - PaneBorderSize);                  hitInfo = new HitInfo(overBorder);              }              else              {                  if (showGroups)                  {                      foreach (ImageListViewGroup @group in groups)                      {                          if (@group.headerBounds.Contains(pt))                          {                              hitInfo = new HitInfo(@group);                              return;                          }                      }                  }                    int itemIndex = -1;                  bool checkBoxHit = false;                  int subItemIndex = -1;                    if (showGroups)                  {                      foreach (ImageListViewGroup @group in groups)                      {                          if (@group.itemBounds.Contains(pt))                          {                              // Normalize to group item area coordinates                              pt.X -= @group.itemBounds.Left;                              pt.Y -= @group.itemBounds.Top;                                if (pt.X > 0 && pt.Y > 0)                              {                                  int col = pt.X / layoutManager.ItemSizeWithMargin.Width;                                  int row = pt.Y / layoutManager.ItemSizeWithMargin.Height;                                    int index = @group.FirstItemIndex + row * @group.itemCols + col;                                  if (index >= 0 && index <= Items.Count - 1)                                  {                                      Rectangle bounds = layoutManager.GetItemBounds(index);                                      if (bounds.Contains(pt.X + @group.itemBounds.Left' pt.Y + @group.itemBounds.Top))                                          itemIndex = index;                                      if (ShowCheckBoxes)                                      {                                          Rectangle checkBoxBounds = layoutManager.GetCheckBoxBounds(index);                                          if (checkBoxBounds.Contains(pt.X + @group.itemBounds.Left' pt.Y + @group.itemBounds.Top))                                              checkBoxHit = true;                                      }                                  }                                    // Calculate sub item index                                  if (itemIndex != -1 && View == View.Details)                                  {                                      int xc1 = layoutManager.ColumnHeaderBounds.Left;                                      int colIndex = 0;                                      foreach (ImageListViewColumnHeader column in mColumns.GetDisplayedColumns())                                      {                                          int xc2 = xc1 + column.Width;                                          if (pt.X >= xc1 && pt.X < xc2)                                          {                                              subItemIndex = colIndex;                                              break;                                          }                                          colIndex++;                                          xc1 = xc2;                                      }                                  }                              }                                break;                          }                      }                  }                  else                  {                      // Normalize to item area coordinates                      pt.X -= layoutManager.ItemAreaBounds.Left;                      pt.Y -= layoutManager.ItemAreaBounds.Top;                        if (pt.X > 0 && pt.Y > 0)                      {                          int col = (pt.X + mViewOffset.X) / layoutManager.ItemSizeWithMargin.Width;                          int row = (pt.Y + mViewOffset.Y) / layoutManager.ItemSizeWithMargin.Height;                            if (ScrollOrientation == ScrollOrientation.HorizontalScroll || (ScrollOrientation == ScrollOrientation.VerticalScroll && col <= layoutManager.Cols))                          {                              int index = row * layoutManager.Cols + col;                              if (index >= 0 && index <= Items.Count - 1)                              {                                  Rectangle bounds = layoutManager.GetItemBounds(index);                                  if (bounds.Contains(pt.X + layoutManager.ItemAreaBounds.Left' pt.Y + layoutManager.ItemAreaBounds.Top))                                      itemIndex = index;                                  if (ShowCheckBoxes)                                  {                                      Rectangle checkBoxBounds = layoutManager.GetCheckBoxBounds(index);                                      if (checkBoxBounds.Contains(pt.X + layoutManager.ItemAreaBounds.Left' pt.Y + layoutManager.ItemAreaBounds.Top))                                          checkBoxHit = true;                                  }                              }                          }                            // Calculate sub item index                          if (itemIndex != -1 && View == View.Details)                          {                              int xc1 = layoutManager.ColumnHeaderBounds.Left;                              int colIndex = 0;                              foreach (ImageListViewColumnHeader column in mColumns.GetDisplayedColumns())                              {                                  int xc2 = xc1 + column.Width;                                  if (pt.X >= xc1 && pt.X < xc2)                                  {                                      subItemIndex = colIndex;                                      break;                                  }                                  colIndex++;                                  xc1 = xc2;                              }                          }                      }                  }                    hitInfo = new HitInfo(itemIndex' subItemIndex' checkBoxHit);              }
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,HitTest,The following statement contains a magic number: if (View == View.Details && pt.Y <= mRenderer.MeasureColumnHeaderHeight())              {                  int i = 0;                  int x = layoutManager.ColumnHeaderBounds.Left;                  ImageListViewColumnHeader colIndex = null;                  ImageListViewColumnHeader sepIndex = null;                  if (AllowColumnClick || AllowColumnResize)                  {                      foreach (ImageListViewColumnHeader col in Columns.GetDisplayedColumns())                      {                          // Over a column?                          if (pt.X >= x && pt.X < x + col.Width + SeparatorSize / 2)                              colIndex = col;                            // Over a colummn separator?                          if (pt.X > x + col.Width - SeparatorSize / 2 && pt.X < x + col.Width + SeparatorSize / 2)                              sepIndex = col;                            if (colIndex != null)                              break;                          x += col.Width;                          i++;                      }                  }                  hitInfo = new HitInfo(colIndex' sepIndex);              }              else if (View == View.Pane && pt.X <= mPaneWidth)              {                  bool overBorder = (pt.X >= mPaneWidth - PaneBorderSize);                  hitInfo = new HitInfo(overBorder);              }              else              {                  if (showGroups)                  {                      foreach (ImageListViewGroup @group in groups)                      {                          if (@group.headerBounds.Contains(pt))                          {                              hitInfo = new HitInfo(@group);                              return;                          }                      }                  }                    int itemIndex = -1;                  bool checkBoxHit = false;                  int subItemIndex = -1;                    if (showGroups)                  {                      foreach (ImageListViewGroup @group in groups)                      {                          if (@group.itemBounds.Contains(pt))                          {                              // Normalize to group item area coordinates                              pt.X -= @group.itemBounds.Left;                              pt.Y -= @group.itemBounds.Top;                                if (pt.X > 0 && pt.Y > 0)                              {                                  int col = pt.X / layoutManager.ItemSizeWithMargin.Width;                                  int row = pt.Y / layoutManager.ItemSizeWithMargin.Height;                                    int index = @group.FirstItemIndex + row * @group.itemCols + col;                                  if (index >= 0 && index <= Items.Count - 1)                                  {                                      Rectangle bounds = layoutManager.GetItemBounds(index);                                      if (bounds.Contains(pt.X + @group.itemBounds.Left' pt.Y + @group.itemBounds.Top))                                          itemIndex = index;                                      if (ShowCheckBoxes)                                      {                                          Rectangle checkBoxBounds = layoutManager.GetCheckBoxBounds(index);                                          if (checkBoxBounds.Contains(pt.X + @group.itemBounds.Left' pt.Y + @group.itemBounds.Top))                                              checkBoxHit = true;                                      }                                  }                                    // Calculate sub item index                                  if (itemIndex != -1 && View == View.Details)                                  {                                      int xc1 = layoutManager.ColumnHeaderBounds.Left;                                      int colIndex = 0;                                      foreach (ImageListViewColumnHeader column in mColumns.GetDisplayedColumns())                                      {                                          int xc2 = xc1 + column.Width;                                          if (pt.X >= xc1 && pt.X < xc2)                                          {                                              subItemIndex = colIndex;                                              break;                                          }                                          colIndex++;                                          xc1 = xc2;                                      }                                  }                              }                                break;                          }                      }                  }                  else                  {                      // Normalize to item area coordinates                      pt.X -= layoutManager.ItemAreaBounds.Left;                      pt.Y -= layoutManager.ItemAreaBounds.Top;                        if (pt.X > 0 && pt.Y > 0)                      {                          int col = (pt.X + mViewOffset.X) / layoutManager.ItemSizeWithMargin.Width;                          int row = (pt.Y + mViewOffset.Y) / layoutManager.ItemSizeWithMargin.Height;                            if (ScrollOrientation == ScrollOrientation.HorizontalScroll || (ScrollOrientation == ScrollOrientation.VerticalScroll && col <= layoutManager.Cols))                          {                              int index = row * layoutManager.Cols + col;                              if (index >= 0 && index <= Items.Count - 1)                              {                                  Rectangle bounds = layoutManager.GetItemBounds(index);                                  if (bounds.Contains(pt.X + layoutManager.ItemAreaBounds.Left' pt.Y + layoutManager.ItemAreaBounds.Top))                                      itemIndex = index;                                  if (ShowCheckBoxes)                                  {                                      Rectangle checkBoxBounds = layoutManager.GetCheckBoxBounds(index);                                      if (checkBoxBounds.Contains(pt.X + layoutManager.ItemAreaBounds.Left' pt.Y + layoutManager.ItemAreaBounds.Top))                                          checkBoxHit = true;                                  }                              }                          }                            // Calculate sub item index                          if (itemIndex != -1 && View == View.Details)                          {                              int xc1 = layoutManager.ColumnHeaderBounds.Left;                              int colIndex = 0;                              foreach (ImageListViewColumnHeader column in mColumns.GetDisplayedColumns())                              {                                  int xc2 = xc1 + column.Width;                                  if (pt.X >= xc1 && pt.X < xc2)                                  {                                      subItemIndex = colIndex;                                      break;                                  }                                  colIndex++;                                  xc1 = xc2;                              }                          }                      }                  }                    hitInfo = new HitInfo(itemIndex' subItemIndex' checkBoxHit);              }
Magic Number,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,HitTest,The following statement contains a magic number: if (View == View.Details && pt.Y <= mRenderer.MeasureColumnHeaderHeight())              {                  int i = 0;                  int x = layoutManager.ColumnHeaderBounds.Left;                  ImageListViewColumnHeader colIndex = null;                  ImageListViewColumnHeader sepIndex = null;                  if (AllowColumnClick || AllowColumnResize)                  {                      foreach (ImageListViewColumnHeader col in Columns.GetDisplayedColumns())                      {                          // Over a column?                          if (pt.X >= x && pt.X < x + col.Width + SeparatorSize / 2)                              colIndex = col;                            // Over a colummn separator?                          if (pt.X > x + col.Width - SeparatorSize / 2 && pt.X < x + col.Width + SeparatorSize / 2)                              sepIndex = col;                            if (colIndex != null)                              break;                          x += col.Width;                          i++;                      }                  }                  hitInfo = new HitInfo(colIndex' sepIndex);              }              else if (View == View.Pane && pt.X <= mPaneWidth)              {                  bool overBorder = (pt.X >= mPaneWidth - PaneBorderSize);                  hitInfo = new HitInfo(overBorder);              }              else              {                  if (showGroups)                  {                      foreach (ImageListViewGroup @group in groups)                      {                          if (@group.headerBounds.Contains(pt))                          {                              hitInfo = new HitInfo(@group);                              return;                          }                      }                  }                    int itemIndex = -1;                  bool checkBoxHit = false;                  int subItemIndex = -1;                    if (showGroups)                  {                      foreach (ImageListViewGroup @group in groups)                      {                          if (@group.itemBounds.Contains(pt))                          {                              // Normalize to group item area coordinates                              pt.X -= @group.itemBounds.Left;                              pt.Y -= @group.itemBounds.Top;                                if (pt.X > 0 && pt.Y > 0)                              {                                  int col = pt.X / layoutManager.ItemSizeWithMargin.Width;                                  int row = pt.Y / layoutManager.ItemSizeWithMargin.Height;                                    int index = @group.FirstItemIndex + row * @group.itemCols + col;                                  if (index >= 0 && index <= Items.Count - 1)                                  {                                      Rectangle bounds = layoutManager.GetItemBounds(index);                                      if (bounds.Contains(pt.X + @group.itemBounds.Left' pt.Y + @group.itemBounds.Top))                                          itemIndex = index;                                      if (ShowCheckBoxes)                                      {                                          Rectangle checkBoxBounds = layoutManager.GetCheckBoxBounds(index);                                          if (checkBoxBounds.Contains(pt.X + @group.itemBounds.Left' pt.Y + @group.itemBounds.Top))                                              checkBoxHit = true;                                      }                                  }                                    // Calculate sub item index                                  if (itemIndex != -1 && View == View.Details)                                  {                                      int xc1 = layoutManager.ColumnHeaderBounds.Left;                                      int colIndex = 0;                                      foreach (ImageListViewColumnHeader column in mColumns.GetDisplayedColumns())                                      {                                          int xc2 = xc1 + column.Width;                                          if (pt.X >= xc1 && pt.X < xc2)                                          {                                              subItemIndex = colIndex;                                              break;                                          }                                          colIndex++;                                          xc1 = xc2;                                      }                                  }                              }                                break;                          }                      }                  }                  else                  {                      // Normalize to item area coordinates                      pt.X -= layoutManager.ItemAreaBounds.Left;                      pt.Y -= layoutManager.ItemAreaBounds.Top;                        if (pt.X > 0 && pt.Y > 0)                      {                          int col = (pt.X + mViewOffset.X) / layoutManager.ItemSizeWithMargin.Width;                          int row = (pt.Y + mViewOffset.Y) / layoutManager.ItemSizeWithMargin.Height;                            if (ScrollOrientation == ScrollOrientation.HorizontalScroll || (ScrollOrientation == ScrollOrientation.VerticalScroll && col <= layoutManager.Cols))                          {                              int index = row * layoutManager.Cols + col;                              if (index >= 0 && index <= Items.Count - 1)                              {                                  Rectangle bounds = layoutManager.GetItemBounds(index);                                  if (bounds.Contains(pt.X + layoutManager.ItemAreaBounds.Left' pt.Y + layoutManager.ItemAreaBounds.Top))                                      itemIndex = index;                                  if (ShowCheckBoxes)                                  {                                      Rectangle checkBoxBounds = layoutManager.GetCheckBoxBounds(index);                                      if (checkBoxBounds.Contains(pt.X + layoutManager.ItemAreaBounds.Left' pt.Y + layoutManager.ItemAreaBounds.Top))                                          checkBoxHit = true;                                  }                              }                          }                            // Calculate sub item index                          if (itemIndex != -1 && View == View.Details)                          {                              int xc1 = layoutManager.ColumnHeaderBounds.Left;                              int colIndex = 0;                              foreach (ImageListViewColumnHeader column in mColumns.GetDisplayedColumns())                              {                                  int xc2 = xc1 + column.Width;                                  if (pt.X >= xc1 && pt.X < xc2)                                  {                                      subItemIndex = colIndex;                                      break;                                  }                                  colIndex++;                                  xc1 = xc2;                              }                          }                      }                  }                    hitInfo = new HitInfo(itemIndex' subItemIndex' checkBoxHit);              }
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,ImageListViewCacheThumbnail,The following statement contains a magic number: diskCache = new DiskCache(string.Empty' 100 * 1024 * 1024' DiskCache.SyncBehavior.SyncNone' 32);
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,ImageListViewCacheThumbnail,The following statement contains a magic number: diskCache = new DiskCache(string.Empty' 100 * 1024 * 1024' DiskCache.SyncBehavior.SyncNone' 32);
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,ImageListViewCacheThumbnail,The following statement contains a magic number: diskCache = new DiskCache(string.Empty' 100 * 1024 * 1024' DiskCache.SyncBehavior.SyncNone' 32);
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,ImageListViewCacheThumbnail,The following statement contains a magic number: diskCache = new DiskCache(string.Empty' 100 * 1024 * 1024' DiskCache.SyncBehavior.SyncNone' 32);
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,ImageListViewCacheThumbnail,The following statement contains a magic number: CacheLimitAsMemory = 20 * 1024 * 1024;
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,ImageListViewCacheThumbnail,The following statement contains a magic number: CacheLimitAsMemory = 20 * 1024 * 1024;
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,ImageListViewCacheThumbnail,The following statement contains a magic number: CacheLimitAsMemory = 20 * 1024 * 1024;
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,IsPurgeNeeded,The following statement contains a magic number: return ((CacheLimitAsMemory != 0 && MemoryUsedByRemoved > CacheLimitAsMemory / 4) || (CacheLimitAsItemCount != 0 && removedItems.Count > CacheLimitAsItemCount / 4));
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,IsPurgeNeeded,The following statement contains a magic number: return ((CacheLimitAsMemory != 0 && MemoryUsedByRemoved > CacheLimitAsMemory / 4) || (CacheLimitAsItemCount != 0 && removedItems.Count > CacheLimitAsItemCount / 4));
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetImageMemorySize,The following statement contains a magic number: return width * height * 24 / 8;
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,GetImageMemorySize,The following statement contains a magic number: return width * height * 24 / 8;
Magic Number,ImageGlass.ImageListView,ImageListViewCacheThumbnail,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewCacheThumbnail.cs,AddToGalleryCache,The following statement contains a magic number: RunWorker(new CacheRequest(guid' adaptor' key' thumbSize' useEmbeddedThumbnails' autoRotate' useWIC' RequestType.Gallery)' 2);
Magic Number,ImageGlass.ImageListView,QueuedBackgroundWorker,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\QueuedBackgroundWorker.cs,QueuedBackgroundWorker,The following statement contains a magic number: threadCount = 5;
Magic Number,ImageGlass.ImageListView,QueuedBackgroundWorker,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\QueuedBackgroundWorker.cs,QueuedBackgroundWorker,The following statement contains a magic number: priorityQueues = 5;
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,ExifURational,The following statement contains a magic number: return BitConverter.ToUInt32(value' 0).ToString() + "/" +                      BitConverter.ToUInt32(value' 4).ToString();
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,ExifRational,The following statement contains a magic number: return BitConverter.ToInt32(value' 0).ToString() + "/" +                      BitConverter.ToInt32(value' 4).ToString();
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,ExifDouble,The following statement contains a magic number: uint den = BitConverter.ToUInt32(value' 4);
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following statement contains a magic number: foreach (PropertyItem prop in img.PropertyItems)              {                  if (prop.Value != null && prop.Value.Length != 0)                  {                      switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }                  }              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaWpf,The following statement contains a magic number: if (val != null)              {                  ushort simpleRating = (ushort)val;                    if (simpleRating == 1)                      Rating = 1;                  else if (simpleRating == 2)                      Rating = 25;                  else if (simpleRating == 3)                      Rating = 50;                  else if (simpleRating == 4)                      Rating = 75;                  else if (simpleRating == 5)                      Rating = 99;              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaWpf,The following statement contains a magic number: if (val != null)              {                  ushort simpleRating = (ushort)val;                    if (simpleRating == 1)                      Rating = 1;                  else if (simpleRating == 2)                      Rating = 25;                  else if (simpleRating == 3)                      Rating = 50;                  else if (simpleRating == 4)                      Rating = 75;                  else if (simpleRating == 5)                      Rating = 99;              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaWpf,The following statement contains a magic number: if (val != null)              {                  ushort simpleRating = (ushort)val;                    if (simpleRating == 1)                      Rating = 1;                  else if (simpleRating == 2)                      Rating = 25;                  else if (simpleRating == 3)                      Rating = 50;                  else if (simpleRating == 4)                      Rating = 75;                  else if (simpleRating == 5)                      Rating = 99;              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaWpf,The following statement contains a magic number: if (val != null)              {                  ushort simpleRating = (ushort)val;                    if (simpleRating == 1)                      Rating = 1;                  else if (simpleRating == 2)                      Rating = 25;                  else if (simpleRating == 3)                      Rating = 50;                  else if (simpleRating == 4)                      Rating = 75;                  else if (simpleRating == 5)                      Rating = 99;              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaWpf,The following statement contains a magic number: if (val != null)              {                  ushort simpleRating = (ushort)val;                    if (simpleRating == 1)                      Rating = 1;                  else if (simpleRating == 2)                      Rating = 25;                  else if (simpleRating == 3)                      Rating = 50;                  else if (simpleRating == 4)                      Rating = 75;                  else if (simpleRating == 5)                      Rating = 99;              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaWpf,The following statement contains a magic number: if (val != null)              {                  ushort simpleRating = (ushort)val;                    if (simpleRating == 1)                      Rating = 1;                  else if (simpleRating == 2)                      Rating = 25;                  else if (simpleRating == 3)                      Rating = 50;                  else if (simpleRating == 4)                      Rating = 75;                  else if (simpleRating == 5)                      Rating = 99;              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaWpf,The following statement contains a magic number: if (val != null)              {                  ushort simpleRating = (ushort)val;                    if (simpleRating == 1)                      Rating = 1;                  else if (simpleRating == 2)                      Rating = 25;                  else if (simpleRating == 3)                      Rating = 50;                  else if (simpleRating == 4)                      Rating = 75;                  else if (simpleRating == 5)                      Rating = 99;              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaWpf,The following statement contains a magic number: if (val != null)              {                  ushort simpleRating = (ushort)val;                    if (simpleRating == 1)                      Rating = 1;                  else if (simpleRating == 2)                      Rating = 25;                  else if (simpleRating == 3)                      Rating = 50;                  else if (simpleRating == 4)                      Rating = 75;                  else if (simpleRating == 5)                      Rating = 99;              }
Magic Number,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,ConvertFileTime,The following statement contains a magic number: long longTime = (((long)ft.dwHighDateTime) << 32) | ((uint)ft.dwLowDateTime);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mBorderColor = Color.FromArgb(64' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mUnFocusedColor1 = Color.FromArgb(16' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mUnFocusedColor2 = Color.FromArgb(64' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mUnFocusedBorderColor = Color.FromArgb(128' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mHoverColor1 = Color.FromArgb(8' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mHoverColor2 = Color.FromArgb(64' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mHoverBorderColor = Color.FromArgb(64' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mSelectedColor1 = Color.FromArgb(16' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mSelectedColor2 = Color.FromArgb(128' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mSelectedBorderColor = Color.FromArgb(128' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mDisabledColor2 = Color.FromArgb(32' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mDisabledBorderColor = Color.FromArgb(32' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mDisabledForeColor = Color.FromArgb(128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mDisabledForeColor = Color.FromArgb(128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mDisabledForeColor = Color.FromArgb(128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mImageInnerBorderColor = Color.FromArgb(128' Color.White);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mImageOuterBorderColor = Color.FromArgb(128' Color.Gray);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mColumnHeaderBackColor1 = Color.FromArgb(32' SystemColors.Control);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mColumnHeaderBackColor2 = Color.FromArgb(196' SystemColors.Control);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mColumnHeaderHoverColor1 = Color.FromArgb(16' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mColumnHeaderHoverColor2 = Color.FromArgb(64' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mColumnSelectColor = Color.FromArgb(16' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mColumnSeparatorColor = Color.FromArgb(32' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mPaneBackColor = Color.FromArgb(16' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mPaneSeparatorColor = Color.FromArgb(128' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mPaneLabelColor = Color.FromArgb(196' Color.Black);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mSelectionRectangleColor1 = Color.FromArgb(128' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,ImageListViewColor,The following statement contains a magic number: mSelectionRectangleColor2 = Color.FromArgb(128' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledBackColor = Color.FromArgb(220' 220' 220);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledBackColor = Color.FromArgb(220' 220' 220);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledBackColor = Color.FromArgb(220' 220' 220);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ForeColor = Color.FromArgb(60' 60' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ForeColor = Color.FromArgb(60' 60' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ForeColor = Color.FromArgb(60' 60' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.BorderColor = Color.FromArgb(187' 190' 183);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.BorderColor = Color.FromArgb(187' 190' 183);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.BorderColor = Color.FromArgb(187' 190' 183);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedColor1 = Color.FromArgb(235' 235' 235);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedColor1 = Color.FromArgb(235' 235' 235);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedColor1 = Color.FromArgb(235' 235' 235);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedColor2 = Color.FromArgb(217' 217' 217);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedColor2 = Color.FromArgb(217' 217' 217);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedColor2 = Color.FromArgb(217' 217' 217);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedBorderColor = Color.FromArgb(168' 169' 161);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedBorderColor = Color.FromArgb(168' 169' 161);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedBorderColor = Color.FromArgb(168' 169' 161);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedForeColor = Color.FromArgb(40' 40' 40);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedForeColor = Color.FromArgb(40' 40' 40);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.UnFocusedForeColor = Color.FromArgb(40' 40' 40);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectedColor1 = Color.FromArgb(244' 125' 77);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectedColor1 = Color.FromArgb(244' 125' 77);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectedColor1 = Color.FromArgb(244' 125' 77);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectedColor2 = Color.FromArgb(235' 110' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectedColor2 = Color.FromArgb(235' 110' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectedColor2 = Color.FromArgb(235' 110' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectedBorderColor = Color.FromArgb(240' 119' 70);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectedBorderColor = Color.FromArgb(240' 119' 70);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectedBorderColor = Color.FromArgb(240' 119' 70);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledColor1 = Color.FromArgb(217' 217' 217);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledColor1 = Color.FromArgb(217' 217' 217);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledColor1 = Color.FromArgb(217' 217' 217);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledColor2 = Color.FromArgb(197' 197' 197);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledColor2 = Color.FromArgb(197' 197' 197);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledColor2 = Color.FromArgb(197' 197' 197);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledBorderColor = Color.FromArgb(128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledBorderColor = Color.FromArgb(128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledBorderColor = Color.FromArgb(128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledForeColor = Color.FromArgb(128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledForeColor = Color.FromArgb(128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.DisabledForeColor = Color.FromArgb(128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.InsertionCaretColor = Color.FromArgb(240' 119' 70);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.InsertionCaretColor = Color.FromArgb(240' 119' 70);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.InsertionCaretColor = Color.FromArgb(240' 119' 70);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.CellForeColor = Color.FromArgb(60' 60' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.CellForeColor = Color.FromArgb(60' 60' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.CellForeColor = Color.FromArgb(60' 60' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderBackColor1 = Color.FromArgb(247' 247' 247);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderBackColor1 = Color.FromArgb(247' 247' 247);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderBackColor1 = Color.FromArgb(247' 247' 247);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderBackColor2 = Color.FromArgb(235' 235' 235);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderBackColor2 = Color.FromArgb(235' 235' 235);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderBackColor2 = Color.FromArgb(235' 235' 235);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor2 = Color.FromArgb(245' 245' 245);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor2 = Color.FromArgb(245' 245' 245);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor2 = Color.FromArgb(245' 245' 245);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderForeColor = Color.FromArgb(60' 60' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderForeColor = Color.FromArgb(60' 60' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnHeaderForeColor = Color.FromArgb(60' 60' 60);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnSelectColor = Color.FromArgb(34' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnSelectColor = Color.FromArgb(34' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnSelectColor = Color.FromArgb(34' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnSelectColor = Color.FromArgb(34' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnSeparatorColor = Color.FromArgb(106' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnSeparatorColor = Color.FromArgb(106' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnSeparatorColor = Color.FromArgb(106' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.ColumnSeparatorColor = Color.FromArgb(106' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.mAlternateBackColor = Color.FromArgb(234' 234' 234);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.mAlternateBackColor = Color.FromArgb(234' 234' 234);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.mAlternateBackColor = Color.FromArgb(234' 234' 234);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.mAlternateCellForeColor = Color.FromArgb(40' 40' 40);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.mAlternateCellForeColor = Color.FromArgb(40' 40' 40);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.mAlternateCellForeColor = Color.FromArgb(40' 40' 40);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.PaneSeparatorColor = Color.FromArgb(216' 216' 216);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.PaneSeparatorColor = Color.FromArgb(216' 216' 216);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.PaneSeparatorColor = Color.FromArgb(216' 216' 216);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.PaneLabelColor = Color.FromArgb(156' 156' 156);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.PaneLabelColor = Color.FromArgb(156' 156' 156);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.PaneLabelColor = Color.FromArgb(156' 156' 156);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleColor1 = Color.FromArgb(64' 240' 116' 68);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleColor1 = Color.FromArgb(64' 240' 116' 68);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleColor1 = Color.FromArgb(64' 240' 116' 68);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleColor1 = Color.FromArgb(64' 240' 116' 68);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleColor2 = Color.FromArgb(64' 240' 116' 68);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleColor2 = Color.FromArgb(64' 240' 116' 68);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleColor2 = Color.FromArgb(64' 240' 116' 68);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleColor2 = Color.FromArgb(64' 240' 116' 68);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleBorderColor = Color.FromArgb(240' 119' 70);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleBorderColor = Color.FromArgb(240' 119' 70);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetMandarinTheme,The following statement contains a magic number: c.SelectionRectangleBorderColor = Color.FromArgb(240' 119' 70);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.UnFocusedColor1 = Color.FromArgb(16' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.UnFocusedColor2 = Color.FromArgb(64' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.UnFocusedBorderColor = Color.FromArgb(128' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.HoverColor1 = Color.FromArgb(64' Color.White);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.HoverColor2 = Color.FromArgb(16' Color.White);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.HoverBorderColor = Color.FromArgb(64' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectedColor1 = Color.FromArgb(64' 96' 160);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectedColor1 = Color.FromArgb(64' 96' 160);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectedColor1 = Color.FromArgb(64' 96' 160);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectedColor2 = Color.FromArgb(64' 64' 96' 160);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectedColor2 = Color.FromArgb(64' 64' 96' 160);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectedColor2 = Color.FromArgb(64' 64' 96' 160);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectedColor2 = Color.FromArgb(64' 64' 96' 160);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectedBorderColor = Color.FromArgb(128' SystemColors.Highlight);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.DisabledColor2 = Color.FromArgb(32' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.DisabledBorderColor = Color.FromArgb(96' SystemColors.GrayText);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.InsertionCaretColor = Color.FromArgb(96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.InsertionCaretColor = Color.FromArgb(96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.InsertionCaretColor = Color.FromArgb(96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ImageInnerBorderColor = Color.FromArgb(128' Color.White);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ImageOuterBorderColor = Color.FromArgb(128' Color.Gray);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderBackColor1 = Color.FromArgb(32' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderBackColor1 = Color.FromArgb(32' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderBackColor1 = Color.FromArgb(32' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderBackColor1 = Color.FromArgb(32' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderBackColor2 = Color.FromArgb(196' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderBackColor2 = Color.FromArgb(196' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderBackColor2 = Color.FromArgb(196' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderBackColor2 = Color.FromArgb(196' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor1 = Color.FromArgb(64' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor1 = Color.FromArgb(64' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor1 = Color.FromArgb(64' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor1 = Color.FromArgb(64' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor2 = Color.FromArgb(196' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor2 = Color.FromArgb(196' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor2 = Color.FromArgb(196' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnHeaderHoverColor2 = Color.FromArgb(196' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnSelectColor = Color.FromArgb(96' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnSelectColor = Color.FromArgb(96' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnSelectColor = Color.FromArgb(96' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.ColumnSelectColor = Color.FromArgb(96' 128' 128' 128);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleColor1 = Color.FromArgb(160' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleColor1 = Color.FromArgb(160' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleColor1 = Color.FromArgb(160' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleColor1 = Color.FromArgb(160' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleColor2 = Color.FromArgb(32' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleColor2 = Color.FromArgb(32' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleColor2 = Color.FromArgb(32' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleColor2 = Color.FromArgb(32' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleBorderColor = Color.FromArgb(64' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleBorderColor = Color.FromArgb(64' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleBorderColor = Color.FromArgb(64' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,ImageListViewColor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColor.cs,GetNoirTheme,The following statement contains a magic number: c.SelectionRectangleBorderColor = Color.FromArgb(64' 96' 144' 240);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: Rectangle r = new Rectangle(ItemAreaBounds.Right - 120' ItemAreaBounds.Top + 5' 115' (int)sz.Height);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: Rectangle r = new Rectangle(ItemAreaBounds.Right - 120' ItemAreaBounds.Top + 5' 115' (int)sz.Height);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: Rectangle r = new Rectangle(ItemAreaBounds.Right - 120' ItemAreaBounds.Top + 5' 115' (int)sz.Height);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: using (Brush b = new SolidBrush(Color.FromArgb(220' Color.LightGray)))                  {                      g.FillRectangle(b' r);                  }
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: using (Pen pen = new Pen(Color.FromArgb(128' Color.Gray)))                  {                      g.DrawRectangle(pen' r);                  }
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r = new Rectangle(ItemAreaBounds.Right - 120' ItemAreaBounds.Top + 5 + (int)sz.Height + 10' 115' 125);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r = new Rectangle(ItemAreaBounds.Right - 120' ItemAreaBounds.Top + 5 + (int)sz.Height + 10' 115' 125);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r = new Rectangle(ItemAreaBounds.Right - 120' ItemAreaBounds.Top + 5 + (int)sz.Height + 10' 115' 125);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r = new Rectangle(ItemAreaBounds.Right - 120' ItemAreaBounds.Top + 5 + (int)sz.Height + 10' 115' 125);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r = new Rectangle(ItemAreaBounds.Right - 120' ItemAreaBounds.Top + 5 + (int)sz.Height + 10' 115' 125);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: using (Brush b = new SolidBrush(Color.FromArgb(220' Color.LightGray)))                  {                      g.FillRectangle(b' r);                  }
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: using (Pen pen = new Pen(Color.FromArgb(128' Color.Gray)))                  {                      g.DrawRectangle(pen' r);                  }
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r = new Rectangle(r.Left + 5' r.Top + 5' 15' 15);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r = new Rectangle(r.Left + 5' r.Top + 5' 15' 15);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r = new Rectangle(r.Left + 5' r.Top + 5' 15' 15);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r = new Rectangle(r.Left + 5' r.Top + 5' 15' 15);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r.Offset(15' 0);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r.Offset(15' 0);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r.Offset(-30' 22);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r.Offset(-30' 22);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r.Offset(0' 12);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r.Offset(0' 20);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r.Offset(0' 12);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r.Offset(0' 12);
Magic Number,ImageGlass.ImageListView,DebugRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawOverlay,The following statement contains a magic number: r.Offset(0' 12);
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,NewYear2010Renderer,The following statement contains a magic number: flake = CreateFlake(10' 3);
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,NewYear2010Renderer,The following statement contains a magic number: flake = CreateFlake(10' 3);
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateFlake,The following statement contains a magic number: float h = (float)Math.Sin(Math.PI / 3.0) * (float)size;
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateFlake,The following statement contains a magic number: for (int k = 0; k < iterations - 1; k++)                  {                      int todivide = segments.Count / 2;                      for (int i = 0; i < todivide; i++)                      {                          PointF p1 = segments.Dequeue();                          PointF p2 = segments.Dequeue();                            // Trisect the segment                          PointF pi1 = new PointF((p2.X - p1.X) / 3.0f + p1.X'                              (p2.Y - p1.Y) / 3.0f + p1.Y);                          PointF pi2 = new PointF((p2.X - p1.X) * 2.0f / 3.0f + p1.X'                              (p2.Y - p1.Y) * 2.0f / 3.0f + p1.Y);                          double dist = Math.Sqrt((pi1.X - pi2.X) * (pi1.X - pi2.X) + (pi1.Y - pi2.Y) * (pi1.Y - pi2.Y));                          double angle = Math.Atan2(p2.Y - p1.Y' p2.X - p1.X) - Math.PI / 3.0;                          PointF pn = new PointF(pi1.X + (float)(Math.Cos(angle) * dist)'                              pi1.Y + (float)(Math.Sin(angle) * dist));                            segments.Enqueue(p1); segments.Enqueue(pi1);                          segments.Enqueue(pi1); segments.Enqueue(pn);                          segments.Enqueue(pn); segments.Enqueue(pi2);                          segments.Enqueue(pi2); segments.Enqueue(p2);                      }                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateFlake,The following statement contains a magic number: for (int k = 0; k < iterations - 1; k++)                  {                      int todivide = segments.Count / 2;                      for (int i = 0; i < todivide; i++)                      {                          PointF p1 = segments.Dequeue();                          PointF p2 = segments.Dequeue();                            // Trisect the segment                          PointF pi1 = new PointF((p2.X - p1.X) / 3.0f + p1.X'                              (p2.Y - p1.Y) / 3.0f + p1.Y);                          PointF pi2 = new PointF((p2.X - p1.X) * 2.0f / 3.0f + p1.X'                              (p2.Y - p1.Y) * 2.0f / 3.0f + p1.Y);                          double dist = Math.Sqrt((pi1.X - pi2.X) * (pi1.X - pi2.X) + (pi1.Y - pi2.Y) * (pi1.Y - pi2.Y));                          double angle = Math.Atan2(p2.Y - p1.Y' p2.X - p1.X) - Math.PI / 3.0;                          PointF pn = new PointF(pi1.X + (float)(Math.Cos(angle) * dist)'                              pi1.Y + (float)(Math.Sin(angle) * dist));                            segments.Enqueue(p1); segments.Enqueue(pi1);                          segments.Enqueue(pi1); segments.Enqueue(pn);                          segments.Enqueue(pn); segments.Enqueue(pi2);                          segments.Enqueue(pi2); segments.Enqueue(p2);                      }                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateTerrain,The following statement contains a magic number: int width = 100;
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateTerrain,The following statement contains a magic number: int height = 10;
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateTerrain,The following statement contains a magic number: int count = 20;
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateTerrain,The following statement contains a magic number: for (int i = 0; i < count; i++)                  {                      int x = i * (width + 2 * step) / count - step;                      int y = rnd.Next(-height / 2' height / 2);                      points[i] = new Point(x' y);                      lastx = x;                      lasty = y;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateTerrain,The following statement contains a magic number: for (int i = 0; i < count; i++)                  {                      int x = i * (width + 2 * step) / count - step;                      int y = rnd.Next(-height / 2' height / 2);                      points[i] = new Point(x' y);                      lastx = x;                      lasty = y;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateTerrain,The following statement contains a magic number: for (int i = 0; i < count; i++)                  {                      int x = i * (width + 2 * step) / count - step;                      int y = rnd.Next(-height / 2' height / 2);                      points[i] = new Point(x' y);                      lastx = x;                      lasty = y;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateTerrain,The following statement contains a magic number: path.AddLine(width + step' 0' width + step' 200);
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateTerrain,The following statement contains a magic number: path.AddLine(width + step' 200' -step' 200);
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,CreateTerrain,The following statement contains a magic number: path.AddLine(width + step' 200' -step' 200);
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,UpdateTimerCallback,The following statement contains a magic number: lock (lockObject)                  {                      if (displayBounds.IsEmpty)                      {                          inTimer = false;                          return;                      }                        if (flakes == null)                          flakes = new List<SnowFlake>();                        // Add new snow flakes                      currentGeneration++;                      if (currentGeneration == flakeGeneration)                      {                          currentGeneration = 0;                          if (flakes.Count < maxFlakeCount)                          {                              SnowFlake snowFlake = new SnowFlake(random.Next(minFlakeSize' maxFlakeSize));                              snowFlake.Rotation = 360.0 * random.NextDouble();                              snowFlake.Location = new Point(random.Next(displayBounds.Left' displayBounds.Right)' -20);                              flakes.Add(snowFlake);                          }                      }                        // Move snow flakes                      for (int i = flakes.Count - 1; i >= 0; i--)                      {                          SnowFlake snowFlake = flakes[i];                          if (snowFlake.Location.Y > displayBounds.Height)                              flakes.Remove(snowFlake);                          else                          {                              snowFlake.Location = new Point(snowFlake.Location.X' snowFlake.Location.Y + snowFlake.Size * fallSpeed / 10);                              snowFlake.Rotation += 360.0 / 40.0;                              if (snowFlake.Rotation > 360.0) snowFlake.Rotation -= 360.0;                          }                      }                        // Do we need a refresh?                      if ((DateTime.Now - lastRedraw).Milliseconds > refreshPeriod)                          redraw = true;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,UpdateTimerCallback,The following statement contains a magic number: lock (lockObject)                  {                      if (displayBounds.IsEmpty)                      {                          inTimer = false;                          return;                      }                        if (flakes == null)                          flakes = new List<SnowFlake>();                        // Add new snow flakes                      currentGeneration++;                      if (currentGeneration == flakeGeneration)                      {                          currentGeneration = 0;                          if (flakes.Count < maxFlakeCount)                          {                              SnowFlake snowFlake = new SnowFlake(random.Next(minFlakeSize' maxFlakeSize));                              snowFlake.Rotation = 360.0 * random.NextDouble();                              snowFlake.Location = new Point(random.Next(displayBounds.Left' displayBounds.Right)' -20);                              flakes.Add(snowFlake);                          }                      }                        // Move snow flakes                      for (int i = flakes.Count - 1; i >= 0; i--)                      {                          SnowFlake snowFlake = flakes[i];                          if (snowFlake.Location.Y > displayBounds.Height)                              flakes.Remove(snowFlake);                          else                          {                              snowFlake.Location = new Point(snowFlake.Location.X' snowFlake.Location.Y + snowFlake.Size * fallSpeed / 10);                              snowFlake.Rotation += 360.0 / 40.0;                              if (snowFlake.Rotation > 360.0) snowFlake.Rotation -= 360.0;                          }                      }                        // Do we need a refresh?                      if ((DateTime.Now - lastRedraw).Milliseconds > refreshPeriod)                          redraw = true;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,UpdateTimerCallback,The following statement contains a magic number: lock (lockObject)                  {                      if (displayBounds.IsEmpty)                      {                          inTimer = false;                          return;                      }                        if (flakes == null)                          flakes = new List<SnowFlake>();                        // Add new snow flakes                      currentGeneration++;                      if (currentGeneration == flakeGeneration)                      {                          currentGeneration = 0;                          if (flakes.Count < maxFlakeCount)                          {                              SnowFlake snowFlake = new SnowFlake(random.Next(minFlakeSize' maxFlakeSize));                              snowFlake.Rotation = 360.0 * random.NextDouble();                              snowFlake.Location = new Point(random.Next(displayBounds.Left' displayBounds.Right)' -20);                              flakes.Add(snowFlake);                          }                      }                        // Move snow flakes                      for (int i = flakes.Count - 1; i >= 0; i--)                      {                          SnowFlake snowFlake = flakes[i];                          if (snowFlake.Location.Y > displayBounds.Height)                              flakes.Remove(snowFlake);                          else                          {                              snowFlake.Location = new Point(snowFlake.Location.X' snowFlake.Location.Y + snowFlake.Size * fallSpeed / 10);                              snowFlake.Rotation += 360.0 / 40.0;                              if (snowFlake.Rotation > 360.0) snowFlake.Rotation -= 360.0;                          }                      }                        // Do we need a refresh?                      if ((DateTime.Now - lastRedraw).Milliseconds > refreshPeriod)                          redraw = true;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,UpdateTimerCallback,The following statement contains a magic number: lock (lockObject)                  {                      if (displayBounds.IsEmpty)                      {                          inTimer = false;                          return;                      }                        if (flakes == null)                          flakes = new List<SnowFlake>();                        // Add new snow flakes                      currentGeneration++;                      if (currentGeneration == flakeGeneration)                      {                          currentGeneration = 0;                          if (flakes.Count < maxFlakeCount)                          {                              SnowFlake snowFlake = new SnowFlake(random.Next(minFlakeSize' maxFlakeSize));                              snowFlake.Rotation = 360.0 * random.NextDouble();                              snowFlake.Location = new Point(random.Next(displayBounds.Left' displayBounds.Right)' -20);                              flakes.Add(snowFlake);                          }                      }                        // Move snow flakes                      for (int i = flakes.Count - 1; i >= 0; i--)                      {                          SnowFlake snowFlake = flakes[i];                          if (snowFlake.Location.Y > displayBounds.Height)                              flakes.Remove(snowFlake);                          else                          {                              snowFlake.Location = new Point(snowFlake.Location.X' snowFlake.Location.Y + snowFlake.Size * fallSpeed / 10);                              snowFlake.Rotation += 360.0 / 40.0;                              if (snowFlake.Rotation > 360.0) snowFlake.Rotation -= 360.0;                          }                      }                        // Do we need a refresh?                      if ((DateTime.Now - lastRedraw).Milliseconds > refreshPeriod)                          redraw = true;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,UpdateTimerCallback,The following statement contains a magic number: lock (lockObject)                  {                      if (displayBounds.IsEmpty)                      {                          inTimer = false;                          return;                      }                        if (flakes == null)                          flakes = new List<SnowFlake>();                        // Add new snow flakes                      currentGeneration++;                      if (currentGeneration == flakeGeneration)                      {                          currentGeneration = 0;                          if (flakes.Count < maxFlakeCount)                          {                              SnowFlake snowFlake = new SnowFlake(random.Next(minFlakeSize' maxFlakeSize));                              snowFlake.Rotation = 360.0 * random.NextDouble();                              snowFlake.Location = new Point(random.Next(displayBounds.Left' displayBounds.Right)' -20);                              flakes.Add(snowFlake);                          }                      }                        // Move snow flakes                      for (int i = flakes.Count - 1; i >= 0; i--)                      {                          SnowFlake snowFlake = flakes[i];                          if (snowFlake.Location.Y > displayBounds.Height)                              flakes.Remove(snowFlake);                          else                          {                              snowFlake.Location = new Point(snowFlake.Location.X' snowFlake.Location.Y + snowFlake.Size * fallSpeed / 10);                              snowFlake.Rotation += 360.0 / 40.0;                              if (snowFlake.Rotation > 360.0) snowFlake.Rotation -= 360.0;                          }                      }                        // Do we need a refresh?                      if ((DateTime.Now - lastRedraw).Milliseconds > refreshPeriod)                          redraw = true;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,UpdateTimerCallback,The following statement contains a magic number: lock (lockObject)                  {                      if (displayBounds.IsEmpty)                      {                          inTimer = false;                          return;                      }                        if (flakes == null)                          flakes = new List<SnowFlake>();                        // Add new snow flakes                      currentGeneration++;                      if (currentGeneration == flakeGeneration)                      {                          currentGeneration = 0;                          if (flakes.Count < maxFlakeCount)                          {                              SnowFlake snowFlake = new SnowFlake(random.Next(minFlakeSize' maxFlakeSize));                              snowFlake.Rotation = 360.0 * random.NextDouble();                              snowFlake.Location = new Point(random.Next(displayBounds.Left' displayBounds.Right)' -20);                              flakes.Add(snowFlake);                          }                      }                        // Move snow flakes                      for (int i = flakes.Count - 1; i >= 0; i--)                      {                          SnowFlake snowFlake = flakes[i];                          if (snowFlake.Location.Y > displayBounds.Height)                              flakes.Remove(snowFlake);                          else                          {                              snowFlake.Location = new Point(snowFlake.Location.X' snowFlake.Location.Y + snowFlake.Size * fallSpeed / 10);                              snowFlake.Rotation += 360.0 / 40.0;                              if (snowFlake.Rotation > 360.0) snowFlake.Rotation -= 360.0;                          }                      }                        // Do we need a refresh?                      if ((DateTime.Now - lastRedraw).Milliseconds > refreshPeriod)                          redraw = true;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,UpdateTimerCallback,The following statement contains a magic number: lock (lockObject)                  {                      if (displayBounds.IsEmpty)                      {                          inTimer = false;                          return;                      }                        if (flakes == null)                          flakes = new List<SnowFlake>();                        // Add new snow flakes                      currentGeneration++;                      if (currentGeneration == flakeGeneration)                      {                          currentGeneration = 0;                          if (flakes.Count < maxFlakeCount)                          {                              SnowFlake snowFlake = new SnowFlake(random.Next(minFlakeSize' maxFlakeSize));                              snowFlake.Rotation = 360.0 * random.NextDouble();                              snowFlake.Location = new Point(random.Next(displayBounds.Left' displayBounds.Right)' -20);                              flakes.Add(snowFlake);                          }                      }                        // Move snow flakes                      for (int i = flakes.Count - 1; i >= 0; i--)                      {                          SnowFlake snowFlake = flakes[i];                          if (snowFlake.Location.Y > displayBounds.Height)                              flakes.Remove(snowFlake);                          else                          {                              snowFlake.Location = new Point(snowFlake.Location.X' snowFlake.Location.Y + snowFlake.Size * fallSpeed / 10);                              snowFlake.Rotation += 360.0 / 40.0;                              if (snowFlake.Rotation > 360.0) snowFlake.Rotation -= 360.0;                          }                      }                        // Do we need a refresh?                      if ((DateTime.Now - lastRedraw).Milliseconds > refreshPeriod)                          redraw = true;                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSnowFlake,The following statement contains a magic number: g.TranslateTransform(-snowFlake.Size / 2' -snowFlake.Size / 2' MatrixOrder.Append);
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSnowFlake,The following statement contains a magic number: g.TranslateTransform(-snowFlake.Size / 2' -snowFlake.Size / 2' MatrixOrder.Append);
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSnowFlake,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush(Color.White))                  using (Pen pen = new Pen(Color.Gray))                  using (Pen glowPen = new Pen(Color.FromArgb(96' Color.White)' 2.0f))                  {                      g.DrawPath(glowPen' flake);                      g.FillPath(brush' flake);                      g.DrawPath(pen' flake);                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawTerrain,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush(Color.White))                  using (Pen pen = new Pen(Color.Gray))                  {                      Rectangle rec = ImageListView.DisplayRectangle;                      g.ScaleTransform((float)rec.Width / 100.0f' 3.0f' MatrixOrder.Append);                      g.TranslateTransform(0' rec.Height - 30' MatrixOrder.Append);                      g.FillPath(brush' terrain);                      g.DrawPath(pen' terrain);                  }
Magic Number,ImageGlass.ImageListView,NewYear2010Renderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawTerrainOutline,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush(Color.White))                  {                      Rectangle rec = ImageListView.DisplayRectangle;                      g.ScaleTransform((float)rec.Width / 100.0f' 3.0f' MatrixOrder.Append);                      g.TranslateTransform(0' rec.Height - 20' MatrixOrder.Append);                      g.FillPath(brush' terrain);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,NoirRenderer,The following statement contains a magic number: padding = 4;
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                      return base.MeasureItem(view);                  else                      return new Size(ImageListView.ThumbnailSize.Width + 2 * padding'                          ImageListView.ThumbnailSize.Height + 2 * padding + mReflectionSize);
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                      return base.MeasureItem(view);                  else                      return new Size(ImageListView.ThumbnailSize.Width + 2 * padding'                          ImageListView.ThumbnailSize.Height + 2 * padding + mReflectionSize);
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      // Item background                      if ((state & ItemState.Selected) == ItemState.Selected)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' 96' 160)' Color.FromArgb(64' 64' 96' 160)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                      else if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Brush brush = new LinearGradientBrush(bounds'                              Color.FromArgb(64' Color.White)' Color.FromArgb(16' Color.White)' LinearGradientMode.Horizontal))                          {                              g.FillRectangle(brush' bounds);                          }                      }                        // Shade sort column                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                      int x = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid &&                              ImageListView.SortOrder != SortOrder.None &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush brush = new SolidBrush(Color.FromArgb(32' 128' 128' 128)))                              {                                  g.FillRectangle(brush' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                      // Separators                       x = ImageListView.layoutManager.ColumnHeaderBounds.Left;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          x += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pen = new Pen(Color.FromArgb(64' 128' 128' 128)))                              {                                  g.DrawLine(pen' x' bounds.Top' x' bounds.Bottom);                              }                          }                      }                        // Item texts                      Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = Color.White;                              if (!item.Enabled) foreColor = Color.FromArgb(128' 128' 128);                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      string srating = item.GetSubItemText(ColumnType.Rating);                                      if (!string.IsNullOrEmpty(srating))                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                          int rating = item.StarRating;                                          if (rating < 0) rating = 0;                                          if (rating > 5) rating = 5;                                          for (int i = 1; i <= rating; i++)                                              g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                          for (int i = rating + 1; i <= 5; i++)                                              g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.X += column.Width;                          }                      }                        // Border                      if ((state & ItemState.Hovered) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(128' Color.White)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.Hovered)                      {                          using (Pen pen = new Pen(Color.FromArgb(96' 144' 240)))                          {                              g.DrawRectangle(pen' bounds.X' bounds.Y' bounds.Width - 1' bounds.Height - 1);                          }                      }                  }                  else // if (ImageListView.View != View.Details)                  {                      // Align images to bottom of bounds                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img'                              new Rectangle(bounds.X + padding' bounds.Y + padding' bounds.Width - 2 * padding' bounds.Height - 2 * padding - mReflectionSize)'                              50.0f' 100.0f);                            int x = pos.X;                          int y = pos.Y;                            // Item background                          if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' 96' 160)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                          else if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(64' Color.White)' Color.FromArgb(16' 16' 16)))                              {                                  g.FillRectangle(brush' x - padding' y - padding' pos.Width + 2 * padding' pos.Height + 2 * padding);                              }                          }                            // Border                          if ((state & ItemState.Hovered) == ItemState.Hovered)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(128' Color.White)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                          else if ((state & ItemState.Selected) == ItemState.Selected)                          {                              using (Brush brush = new LinearGradientBrush(                                  new Point(x - padding' y - padding)' new Point(x - padding' y + pos.Height + 2 * padding)'                                  Color.FromArgb(96' 144' 240)' Color.FromArgb(16' 16' 16)))                              using (Pen pen = new Pen(brush))                              {                                  g.DrawRectangle(pen' x - padding' y - padding + 1' pos.Width + 2 * padding - 1' pos.Height + 2 * padding - 1);                              }                          }                            // Draw item image                          DrawImageWithReflection(g' img' pos' mReflectionSize);                            // Shade over disabled item image                          if (!item.Enabled)                          {                              pos.Inflate(4' 4);                              using (Brush brush = new LinearGradientBrush(pos'                                  Color.FromArgb(64' 0' 0' 0)' Color.FromArgb(196' 0' 0' 0)' LinearGradientMode.Vertical))                              {                                  g.FillRectangle(brush' pos);                              }                          }                            // Highlight                          if (item.Enabled)                          {                              using (Pen pen = new Pen(Color.FromArgb(160' Color.White)))                              {                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X + pos.Width - 1' pos.Y + 1);                                  g.DrawLine(pen' pos.X' pos.Y + 1' pos.X' pos.Y + pos.Height);                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds'                          Color.FromArgb(64' 96' 144' 240)' Color.FromArgb(196' 96' 144' 240)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds'                          Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pen = new Pen(Color.FromArgb(16' Color.White)))                  {                      g.DrawLine(pen' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pen' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pen = new Pen(Color.FromArgb(16' Color.White)))                  {                      g.DrawLine(pen' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pen' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pen = new Pen(Color.FromArgb(16' Color.White)))                  {                      g.DrawLine(pen' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pen' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: int textOffset = 4;
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.SortOrder != SortOrder.None && ((state & ColumnState.SortColumn) != ColumnState.None))                  {                      Image img = null;                      if (ImageListView.SortOrder == SortOrder.Ascending || ImageListView.SortOrder == SortOrder.AscendingNatural)                          img = ImageListViewResources.SortAscending;                      else if (ImageListView.SortOrder == SortOrder.Descending || ImageListView.SortOrder == SortOrder.DescendingNatural)                          img = ImageListViewResources.SortDescending;                      g.DrawImageUnscaled(img' bounds.X + 4' bounds.Top + (bounds.Height - img.Height) / 2);                      textOffset += img.Width;                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.SortOrder != SortOrder.None && ((state & ColumnState.SortColumn) != ColumnState.None))                  {                      Image img = null;                      if (ImageListView.SortOrder == SortOrder.Ascending || ImageListView.SortOrder == SortOrder.AscendingNatural)                          img = ImageListViewResources.SortAscending;                      else if (ImageListView.SortOrder == SortOrder.Descending || ImageListView.SortOrder == SortOrder.DescendingNatural)                          img = ImageListViewResources.SortDescending;                      g.DrawImageUnscaled(img' bounds.X + 4' bounds.Top + (bounds.Height - img.Height) / 2);                      textOffset += img.Width;                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (bounds.Width > 4)                  {                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          using (Brush brush = new SolidBrush(Color.White))                          {                              g.DrawString(column.Text'                                  (ImageListView.ColumnHeaderFont == null ? ImageListView.Font : ImageListView.ColumnHeaderFont)'                                  brush' bounds' sf);                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bNormal = new LinearGradientBrush(bounds'                      Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bNormal' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bNormal = new LinearGradientBrush(bounds'                      Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bNormal' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bNormal = new LinearGradientBrush(bounds'                      Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bNormal' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bNormal = new LinearGradientBrush(bounds'                      Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bNormal' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bNormal = new LinearGradientBrush(bounds'                      Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bNormal' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bNormal = new LinearGradientBrush(bounds'                      Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bNormal' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bNormal = new LinearGradientBrush(bounds'                      Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bNormal' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bNormal = new LinearGradientBrush(bounds'                      Color.FromArgb(32' 128' 128' 128)' Color.FromArgb(196' 128' 128' 128)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bNormal' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds'                      Color.FromArgb(96' 128' 128' 128)' Color.FromArgb(128' 128' 128)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pen = new Pen(Color.FromArgb(16' Color.White)))                  {                      g.DrawLine(pen' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pen' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pen = new Pen(Color.FromArgb(16' Color.White)))                  {                      g.DrawLine(pen' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pen' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pen = new Pen(Color.FromArgb(16' Color.White)))                  {                      g.DrawLine(pen' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pen' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGalleryImage,The following statement contains a magic number: if (item != null && image != null)                  {                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.X + itemMargin.Width' bounds.Y + itemMargin.Height' bounds.Width - 2 * itemMargin.Width' bounds.Height - 2 * itemMargin.Height - mReflectionSize)' 50.0f' 100.0f);                      DrawImageWithReflection(g' image' pos' mReflectionSize);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGalleryImage,The following statement contains a magic number: if (item != null && image != null)                  {                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.X + itemMargin.Width' bounds.Y + itemMargin.Height' bounds.Width - 2 * itemMargin.Width' bounds.Height - 2 * itemMargin.Height - mReflectionSize)' 50.0f' 100.0f);                      DrawImageWithReflection(g' image' pos' mReflectionSize);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(Color.FromArgb(64' 64' 64)))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(Color.FromArgb(64' 64' 64)))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(Color.FromArgb(64' 64' 64)))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(Color.FromArgb(64' 64' 64)))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(Color.FromArgb(64' 64' 64)))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: bounds.Width -= 2;
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                        bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font'                              Brushes.White' Brushes.White);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                          using (Brush bText = new SolidBrush(Color.White))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bCaption' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (Brush bCaption = new SolidBrush(Color.FromArgb(196' 196' 196)))                                  using (Brush bText = new SolidBrush(Color.White))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bCaption' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(160' 96' 144' 240)' Color.FromArgb(32' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  {                      g.FillRectangle(brush' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(160' 96' 144' 240)' Color.FromArgb(32' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  {                      g.FillRectangle(brush' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(160' 96' 144' 240)' Color.FromArgb(32' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  {                      g.FillRectangle(brush' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(160' 96' 144' 240)' Color.FromArgb(32' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  {                      g.FillRectangle(brush' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(160' 96' 144' 240)' Color.FromArgb(32' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  {                      g.FillRectangle(brush' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(160' 96' 144' 240)' Color.FromArgb(32' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  {                      g.FillRectangle(brush' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(160' 96' 144' 240)' Color.FromArgb(32' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  {                      g.FillRectangle(brush' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(160' 96' 144' 240)' Color.FromArgb(32' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  {                      g.FillRectangle(brush' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(96' 144' 240)' Color.FromArgb(128' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  using (Pen pen = new Pen(brush))                  {                      g.DrawRectangle(pen' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(96' 144' 240)' Color.FromArgb(128' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  using (Pen pen = new Pen(brush))                  {                      g.DrawRectangle(pen' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(96' 144' 240)' Color.FromArgb(128' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  using (Pen pen = new Pen(brush))                  {                      g.DrawRectangle(pen' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(96' 144' 240)' Color.FromArgb(128' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  using (Pen pen = new Pen(brush))                  {                      g.DrawRectangle(pen' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(96' 144' 240)' Color.FromArgb(128' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  using (Pen pen = new Pen(brush))                  {                      g.DrawRectangle(pen' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(96' 144' 240)' Color.FromArgb(128' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  using (Pen pen = new Pen(brush))                  {                      g.DrawRectangle(pen' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (Brush brush = new LinearGradientBrush(selection'                      Color.FromArgb(96' 144' 240)' Color.FromArgb(128' 96' 144' 240)'                      LinearGradientMode.ForwardDiagonal))                  using (Pen pen = new Pen(brush))                  {                      g.DrawRectangle(pen' selection);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawInsertionCaret,The following statement contains a magic number: using (Brush b = new SolidBrush(Color.FromArgb(96' 144' 240)))                  {                      g.FillRectangle(b' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawInsertionCaret,The following statement contains a magic number: using (Brush b = new SolidBrush(Color.FromArgb(96' 144' 240)))                  {                      g.FillRectangle(b' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawInsertionCaret,The following statement contains a magic number: using (Brush b = new SolidBrush(Color.FromArgb(96' 144' 240)))                  {                      g.FillRectangle(b' bounds);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The following statement contains a magic number: bounds.Inflate(0' -4);
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The following statement contains a magic number: using (Pen pSpep = new Pen(Color.FromArgb(64' 64' 64)))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Bottom - 1' bounds.Right - 1' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The following statement contains a magic number: using (Pen pSpep = new Pen(Color.FromArgb(64' 64' 64)))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Bottom - 1' bounds.Right - 1' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The following statement contains a magic number: using (Pen pSpep = new Pen(Color.FromArgb(64' 64' 64)))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Bottom - 1' bounds.Right - 1' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The following statement contains a magic number: if (bounds.Width > 4)                  {                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          using (SolidBrush bText = new SolidBrush(Color.White))                          {                              g.DrawString(name' (ImageListView.GroupHeaderFont == null ? ImageListView.Font : ImageListView.GroupHeaderFont)' bText' bounds' sf);                          }                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawImageWithReflection,The following statement contains a magic number: if (img.Width > 32 && img.Height > 32)                  {                      int reflectionHeight = height / 2;                      if (reflectionHeight > reflection) reflectionHeight = reflection;                        Region prevClip = g.Clip;                      g.SetClip(new Rectangle(x' y + height + 1' width' reflectionHeight));                      g.DrawImage(img' x' y + height + height / 2 + 1' width' -height / 2);                      g.Clip = prevClip;                        using (Brush brush = new LinearGradientBrush(                          new Point(x' y + height + 1)' new Point(x' y + height + reflectionHeight + 1)'                          Color.FromArgb(128' 0' 0' 0)' Color.Black))                      {                          g.FillRectangle(brush' x' y + height + 1' width' reflectionHeight);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawImageWithReflection,The following statement contains a magic number: if (img.Width > 32 && img.Height > 32)                  {                      int reflectionHeight = height / 2;                      if (reflectionHeight > reflection) reflectionHeight = reflection;                        Region prevClip = g.Clip;                      g.SetClip(new Rectangle(x' y + height + 1' width' reflectionHeight));                      g.DrawImage(img' x' y + height + height / 2 + 1' width' -height / 2);                      g.Clip = prevClip;                        using (Brush brush = new LinearGradientBrush(                          new Point(x' y + height + 1)' new Point(x' y + height + reflectionHeight + 1)'                          Color.FromArgb(128' 0' 0' 0)' Color.Black))                      {                          g.FillRectangle(brush' x' y + height + 1' width' reflectionHeight);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawImageWithReflection,The following statement contains a magic number: if (img.Width > 32 && img.Height > 32)                  {                      int reflectionHeight = height / 2;                      if (reflectionHeight > reflection) reflectionHeight = reflection;                        Region prevClip = g.Clip;                      g.SetClip(new Rectangle(x' y + height + 1' width' reflectionHeight));                      g.DrawImage(img' x' y + height + height / 2 + 1' width' -height / 2);                      g.Clip = prevClip;                        using (Brush brush = new LinearGradientBrush(                          new Point(x' y + height + 1)' new Point(x' y + height + reflectionHeight + 1)'                          Color.FromArgb(128' 0' 0' 0)' Color.Black))                      {                          g.FillRectangle(brush' x' y + height + 1' width' reflectionHeight);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawImageWithReflection,The following statement contains a magic number: if (img.Width > 32 && img.Height > 32)                  {                      int reflectionHeight = height / 2;                      if (reflectionHeight > reflection) reflectionHeight = reflection;                        Region prevClip = g.Clip;                      g.SetClip(new Rectangle(x' y + height + 1' width' reflectionHeight));                      g.DrawImage(img' x' y + height + height / 2 + 1' width' -height / 2);                      g.Clip = prevClip;                        using (Brush brush = new LinearGradientBrush(                          new Point(x' y + height + 1)' new Point(x' y + height + reflectionHeight + 1)'                          Color.FromArgb(128' 0' 0' 0)' Color.Black))                      {                          g.FillRectangle(brush' x' y + height + 1' width' reflectionHeight);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawImageWithReflection,The following statement contains a magic number: if (img.Width > 32 && img.Height > 32)                  {                      int reflectionHeight = height / 2;                      if (reflectionHeight > reflection) reflectionHeight = reflection;                        Region prevClip = g.Clip;                      g.SetClip(new Rectangle(x' y + height + 1' width' reflectionHeight));                      g.DrawImage(img' x' y + height + height / 2 + 1' width' -height / 2);                      g.Clip = prevClip;                        using (Brush brush = new LinearGradientBrush(                          new Point(x' y + height + 1)' new Point(x' y + height + reflectionHeight + 1)'                          Color.FromArgb(128' 0' 0' 0)' Color.Black))                      {                          g.FillRectangle(brush' x' y + height + 1' width' reflectionHeight);                      }                  }
Magic Number,ImageGlass.ImageListView,NoirRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawImageWithReflection,The following statement contains a magic number: if (img.Width > 32 && img.Height > 32)                  {                      int reflectionHeight = height / 2;                      if (reflectionHeight > reflection) reflectionHeight = reflection;                        Region prevClip = g.Clip;                      g.SetClip(new Rectangle(x' y + height + 1' width' reflectionHeight));                      g.DrawImage(img' x' y + height + height / 2 + 1' width' -height / 2);                      g.Clip = prevClip;                        using (Brush brush = new LinearGradientBrush(                          new Point(x' y + height + 1)' new Point(x' y + height + reflectionHeight + 1)'                          Color.FromArgb(128' 0' 0' 0)' Color.Black))                      {                          g.FillRectangle(brush' x' y + height + 1' width' reflectionHeight);                      }                  }
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemSize = new Size();                      mTextHeight = (int)(5.8f * (float)CaptionFont.Height);                        // Calculate item size                      Size itemPadding = new Size(4' 4);                      itemSize.Width = ImageListView.ThumbnailSize.Width + 4 * itemPadding.Width + mTileWidth;                      itemSize.Height = Math.Max(mTextHeight' ImageListView.ThumbnailSize.Height) + 2 * itemPadding.Height;                      return itemSize;                  }                  else                      return base.MeasureItem(view);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemSize = new Size();                      mTextHeight = (int)(5.8f * (float)CaptionFont.Height);                        // Calculate item size                      Size itemPadding = new Size(4' 4);                      itemSize.Width = ImageListView.ThumbnailSize.Width + 4 * itemPadding.Width + mTileWidth;                      itemSize.Height = Math.Max(mTextHeight' ImageListView.ThumbnailSize.Height) + 2 * itemPadding.Height;                      return itemSize;                  }                  else                      return base.MeasureItem(view);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemSize = new Size();                      mTextHeight = (int)(5.8f * (float)CaptionFont.Height);                        // Calculate item size                      Size itemPadding = new Size(4' 4);                      itemSize.Width = ImageListView.ThumbnailSize.Width + 4 * itemPadding.Width + mTileWidth;                      itemSize.Height = Math.Max(mTextHeight' ImageListView.ThumbnailSize.Height) + 2 * itemPadding.Height;                      return itemSize;                  }                  else                      return base.MeasureItem(view);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemSize = new Size();                      mTextHeight = (int)(5.8f * (float)CaptionFont.Height);                        // Calculate item size                      Size itemPadding = new Size(4' 4);                      itemSize.Width = ImageListView.ThumbnailSize.Width + 4 * itemPadding.Width + mTileWidth;                      itemSize.Height = Math.Max(mTextHeight' ImageListView.ThumbnailSize.Height) + 2 * itemPadding.Height;                      return itemSize;                  }                  else                      return base.MeasureItem(view);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,TilesRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == ImageGlass.ImageListView.View.Thumbnails)                  {                      Size itemPadding = new Size(4' 4);                        // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Paint background Disabled                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bDisabled' bounds' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                          (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                      {                          using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bSelected' bounds' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bGray64' bounds' 4);                          }                      }                      if (((state & ItemState.Hovered) != ItemState.None))                      {                          using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                          {                              Utility.FillRoundedRectangle(g' bHovered' bounds' 4);                          }                      }                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize)' 0.0f' 50.0f);                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      int lineHeight = CaptionFont.Height;                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + 2 * itemPadding.Width + ImageListView.ThumbnailSize.Width'                              bounds.Top + itemPadding.Height + (Math.Max(ImageListView.ThumbnailSize.Height' mTextHeight) - mTextHeight) / 2'                              mTileWidth' lineHeight);                          sf.Alignment = StringAlignment.Near;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          Color foreColor = ImageListView.Colors.ForeColor;                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              foreColor = ImageListView.Colors.DisabledForeColor;                          }                          using (Brush bItemFore = new SolidBrush(foreColor))                          {                              g.DrawString(item.Text' CaptionFont' bItemFore' rt' sf);                          }                          using (Brush bItemDetails = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          {                              rt.Offset(0' 1.5f * lineHeight);                              string fileType = item.GetSubItemText(ColumnType.FileType);                              if (!string.IsNullOrEmpty(fileType))                              {                                  g.DrawString(fileType' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              string resolution = item.GetSubItemText(ColumnType.Resolution);                              if (!string.IsNullOrEmpty(dimensions) || !string.IsNullOrEmpty(resolution))                              {                                  string text = "";                                  if (!string.IsNullOrEmpty(dimensions))                                      text += dimensions + " pixels ";                                  if (!string.IsNullOrEmpty(resolution))                                      text += resolution.Split(new char[] { ' '' 'x' }' StringSplitOptions.RemoveEmptyEntries)[0] + " dpi";                                  g.DrawString(text' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                              {                                  g.DrawString(fileSize' ImageListView.Font' bItemDetails' rt' sf);                                  rt.Offset(0' 1.1f * lineHeight);                              }                              string dateModified = item.GetSubItemText(ColumnType.DateModified);                              if (!string.IsNullOrEmpty(dateModified))                              {                                  g.DrawString(dateModified' ImageListView.Font' bItemDetails' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          ControlPaint.DrawFocusRectangle(g' bounds);                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Details)                      return base.MeasureItem(view);                  else                  {                      // Calculate item size                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3) + itemPadding.Height; // textHeight / 3 = vertical space between thumbnail and text                      return itemSize;                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Details)                      return base.MeasureItem(view);                  else                  {                      // Calculate item size                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3) + itemPadding.Height; // textHeight / 3 = vertical space between thumbnail and text                      return itemSize;                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Details)                      return base.MeasureItem(view);                  else                  {                      // Calculate item size                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3) + itemPadding.Height; // textHeight / 3 = vertical space between thumbnail and text                      return itemSize;                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Details)                      return base.MeasureItem(view);                  else                  {                      // Calculate item size                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3) + itemPadding.Height; // textHeight / 3 = vertical space between thumbnail and text                      return itemSize;                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Size itemPadding = new Size(4' 4);                        // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle border = new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize);                          Rectangle pos = Utility.GetSizedImageBounds(img' border);                          g.DrawImage(img' pos);                            // Draw image border                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.Highlight' 3))                              {                                  g.DrawRectangle(pen' border);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Pen pen = new Pen(SystemColors.GrayText' 3))                              {                                  pen.Alignment = PenAlignment.Center;                                  g.DrawRectangle(pen' border);                              }                          }                          else                          {                              using (Pen pGray128 = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                              {                                  g.DrawRectangle(pGray128' border);                              }                          }                      }                        // Draw item text                      SizeF szt = TextRenderer.MeasureText(g' item.Text' ImageListView.Font);                      RectangleF rt;                      using (StringFormat sf = new StringFormat())                      {                          rt = new RectangleF(bounds.Left + itemPadding.Width' bounds.Top + 3 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                          sf.Alignment = StringAlignment.Center;                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          rt.Width += 1;                          rt.Inflate(1' 2);                          if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                              rt.Inflate(-1' -1);                          if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.Highlight' rt);                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              g.FillRectangle(SystemBrushes.GrayText' rt);                          }                          if ((state & ItemState.Disabled) != ItemState.None)                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.GrayText' rt' sf);                          }                          else if (((state & ItemState.Selected) != ItemState.None))                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.HighlightText' rt' sf);                          }                          else                          {                              g.DrawString(item.Text' ImageListView.Font' SystemBrushes.WindowText' rt' sf);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle fRect = Rectangle.Round(rt);                          fRect.Inflate(1' 1);                          ControlPaint.DrawFocusRectangle(g' fRect);                      }                  }                  else // if (ImageListView.View == ImageGlass.ImageListView.View.Details)                  {                      if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.Highlight' bounds);                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          g.FillRectangle(SystemBrushes.GrayText' bounds);                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' uicolumns[0].Width - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              int iconOffset = 0;                              if (column.Type == ColumnType.Name)                              {                                  // Allocate space for checkbox and file icon                                  if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                      iconOffset += 2 * 16 + 3 * 2;                                  else if (ImageListView.ShowCheckBoxes)                                      iconOffset += 16 + 2 * 2;                                  else if (ImageListView.ShowFileIcons)                                      iconOffset += 16 + 2 * 2;                              }                              rt.X += iconOffset;                              rt.Width -= iconOffset;                                Brush forecolor = SystemBrushes.WindowText;                              if ((state & ItemState.Disabled) != ItemState.None)                                  forecolor = SystemBrushes.GrayText;                              else if ((state & ItemState.Selected) != ItemState.None)                                  forecolor = SystemBrushes.HighlightText;                                if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                  int rating = item.StarRating;                                  if (rating < 0) rating = 0;                                  if (rating > 5) rating = 5;                                  for (int i = 1; i <= rating; i++)                                      g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                  for (int i = rating + 1; i <= 5; i++)                                      g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                              }                              else if (column.Type == ColumnType.Custom)                                  g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' forecolor' rt' sf);                              else                                  g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' forecolor' rt' sf);                                rt.X -= iconOffset;                              rt.X += column.Width;                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGalleryImage,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin));                      // Draw image                      g.DrawImage(image' pos);                        // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          g.DrawRectangle(SystemPens.WindowText' pos);                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(Color.FromArgb(128' SystemColors.GrayText)))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(Color.FromArgb(128' SystemColors.GrayText)))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(Color.FromArgb(128' SystemColors.GrayText)))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: bounds.Width -= 2;
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pBorder = new Pen(SystemColors.WindowText))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                              fileType' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += y;                          bounds.Height -= y;                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                      ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                                  bounds.Y += y;                                  bounds.Height -= y;                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pBorder = new Pen(SystemColors.WindowText))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                              fileType' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += y;                          bounds.Height -= y;                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                      ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                                  bounds.Y += y;                                  bounds.Height -= y;                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pBorder = new Pen(SystemColors.WindowText))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                              fileType' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += y;                          bounds.Height -= y;                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                      ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                                  bounds.Y += y;                                  bounds.Height -= y;                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pBorder = new Pen(SystemColors.WindowText))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                              fileType' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += y;                          bounds.Height -= y;                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                      ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                                  bounds.Y += y;                                  bounds.Height -= y;                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pBorder = new Pen(SystemColors.WindowText))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                              fileType' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += y;                          bounds.Height -= y;                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                      ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                                  bounds.Y += y;                                  bounds.Height -= y;                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pBorder = new Pen(SystemColors.WindowText))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                              fileType' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += y;                          bounds.Height -= y;                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                      ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                                  bounds.Y += y;                                  bounds.Height -= y;                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pBorder = new Pen(SystemColors.WindowText))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                              fileType' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += y;                          bounds.Height -= y;                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                      ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                                  bounds.Y += y;                                  bounds.Height -= y;                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pBorder = new Pen(SystemColors.WindowText))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string text = item.GetSubItemText(ColumnType.Name);                          int y = Utility.DrawStringPair(g' bounds' ""' text' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += 2 * y;                          bounds.Height -= 2 * y;                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                              fileType' ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                          bounds.Y += y;                          bounds.Height -= y;                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                      ImageListView.Font' SystemBrushes.GrayText' SystemBrushes.WindowText);                                  bounds.Y += y;                                  bounds.Height -= y;                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds' Color.FromArgb(16' SystemColors.Highlight)' Color.FromArgb(64' SystemColors.Highlight)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds' Color.FromArgb(32' SystemColors.Control)' Color.FromArgb(196' SystemColors.Control)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds' Color.FromArgb(16' SystemColors.Highlight)' Color.FromArgb(64' SystemColors.Highlight)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds' Color.FromArgb(32' SystemColors.Control)' Color.FromArgb(196' SystemColors.Control)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds' Color.FromArgb(16' SystemColors.Highlight)' Color.FromArgb(64' SystemColors.Highlight)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds' Color.FromArgb(32' SystemColors.Control)' Color.FromArgb(196' SystemColors.Control)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.Focused && ((state & ColumnState.Hovered) == ColumnState.Hovered))                  {                      using (Brush bHovered = new LinearGradientBrush(bounds' Color.FromArgb(16' SystemColors.Highlight)' Color.FromArgb(64' SystemColors.Highlight)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bHovered' bounds);                      }                  }                  else                  {                      using (Brush bNormal = new LinearGradientBrush(bounds' Color.FromArgb(32' SystemColors.Control)' Color.FromArgb(196' SystemColors.Control)' LinearGradientMode.Vertical))                      {                          g.FillRectangle(bNormal' bounds);                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds' Color.FromArgb(196' SystemColors.Control)' Color.FromArgb(32' SystemColors.Control)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds' Color.FromArgb(196' SystemColors.Control)' Color.FromArgb(32' SystemColors.Control)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pSpep = new Pen(Color.FromArgb(32' SystemColors.Control)))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pSpep' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pSpep = new Pen(Color.FromArgb(32' SystemColors.Control)))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pSpep' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pSpep = new Pen(Color.FromArgb(32' SystemColors.Control)))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pSpep' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: int textOffset = 4;
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.SortOrder != SortOrder.None && ((state & ColumnState.SortColumn) != ColumnState.None))                  {                      Image img = null;                      if (ImageListView.SortOrder == SortOrder.Ascending || ImageListView.SortOrder == SortOrder.AscendingNatural)                          img = ImageListViewResources.SortAscending;                      else if (ImageListView.SortOrder == SortOrder.Descending || ImageListView.SortOrder == SortOrder.DescendingNatural)                          img = ImageListViewResources.SortDescending;                      if (img != null)                      {                          g.DrawImageUnscaled(img' bounds.X + 4' bounds.Top + (bounds.Height - img.Height) / 2);                          textOffset += img.Width;                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.SortOrder != SortOrder.None && ((state & ColumnState.SortColumn) != ColumnState.None))                  {                      Image img = null;                      if (ImageListView.SortOrder == SortOrder.Ascending || ImageListView.SortOrder == SortOrder.AscendingNatural)                          img = ImageListViewResources.SortAscending;                      else if (ImageListView.SortOrder == SortOrder.Descending || ImageListView.SortOrder == SortOrder.DescendingNatural)                          img = ImageListViewResources.SortDescending;                      if (img != null)                      {                          g.DrawImageUnscaled(img' bounds.X + 4' bounds.Top + (bounds.Height - img.Height) / 2);                          textOffset += img.Width;                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (bounds.Width > 4)                  {                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          g.DrawString(column.Text' (ImageListView.ColumnHeaderFont == null ? ImageListView.Font : ImageListView.ColumnHeaderFont)'                              SystemBrushes.WindowText' bounds' sf);                      }                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBack = new LinearGradientBrush(bounds' Color.FromArgb(32' SystemColors.Control)' Color.FromArgb(196' SystemColors.Control)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bBack' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBack = new LinearGradientBrush(bounds' Color.FromArgb(32' SystemColors.Control)' Color.FromArgb(196' SystemColors.Control)' LinearGradientMode.Vertical))                  {                      g.FillRectangle(bBack' bounds);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds' Color.FromArgb(196' SystemColors.Control)' Color.FromArgb(32' SystemColors.Control)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Brush bBorder = new LinearGradientBrush(bounds' Color.FromArgb(196' SystemColors.Control)' Color.FromArgb(32' SystemColors.Control)' LinearGradientMode.Vertical))                  using (Pen pBorder = new Pen(bBorder))                  {                      g.DrawLine(pBorder' bounds.Left' bounds.Top' bounds.Left' bounds.Bottom);                      g.DrawLine(pBorder' bounds.Left' bounds.Bottom - 1' bounds.Right' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pSpep = new Pen(Color.FromArgb(32' SystemColors.Control)))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pSpep = new Pen(Color.FromArgb(32' SystemColors.Control)))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawSelectionRectangle,The following statement contains a magic number: using (SolidBrush brush = new SolidBrush(Color.FromArgb(128' SystemColors.Highlight)))                  using (Pen pen = new Pen(SystemColors.Highlight))                  {                      g.FillRectangle(brush' selection);                      g.DrawRectangle(pen' selection);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The following statement contains a magic number: bounds.Inflate(0' -4);
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The following statement contains a magic number: using (Pen pSpep = new Pen(Color.FromArgb(128' SystemColors.GrayText)))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Bottom - 1' bounds.Right - 1' bounds.Bottom - 1);                  }
Magic Number,ImageGlass.ImageListView,XPRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The following statement contains a magic number: if (bounds.Width > 4)                  {                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          g.DrawString(name' (ImageListView.GroupHeaderFont == null ? ImageListView.Font : ImageListView.GroupHeaderFont)'                              SystemBrushes.WindowText' bounds' sf);                      }                  }
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Thumbnails)                      return ImageListView.ThumbnailSize + new Size(8' 8);                  else                      return base.MeasureItem(view);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == ImageGlass.ImageListView.View.Thumbnails)                      return ImageListView.ThumbnailSize + new Size(8' 8);                  else                      return base.MeasureItem(view);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ZoomingRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != ImageGlass.ImageListView.View.Details)                  {                      Rectangle controlBounds = ClientBounds;                        // Zoom on mouse over                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          bounds.Inflate((int)(bounds.Width * mZoomRatio)' (int)(bounds.Height * mZoomRatio));                          if (bounds.Bottom > controlBounds.Bottom)                              bounds.Y = controlBounds.Bottom - bounds.Height;                          if (bounds.Top < controlBounds.Top)                              bounds.Y = controlBounds.Top;                          if (bounds.Right > controlBounds.Right)                              bounds.X = controlBounds.Right - bounds.Width;                          if (bounds.Left < controlBounds.Left)                              bounds.X = controlBounds.Left;                      }                        // Get item image                      Image img = null;                      if ((state & ItemState.Hovered) != ItemState.None)                          img = GetImageAsync(item' new Size(bounds.Width - 8' bounds.Height - 8));                      if (img == null) img = item.GetCachedImage(CachedImageType.Thumbnail);                        int imageWidth = 0;                      int imageHeight = 0;                      if (img != null)                      {                          // Calculate image bounds                          Rectangle pos = Utility.GetSizedImageBounds(img' Rectangle.Inflate(bounds' -4' -4));                          imageWidth = pos.Width;                          imageHeight = pos.Height;                          int imageX = pos.X;                          int imageY = pos.Y;                            // Allocate space for item text                          if ((state & ItemState.Hovered) != ItemState.None &&                              (bounds.Height - imageHeight) / 2 < ImageListView.Font.Height + 8)                          {                              int delta = (ImageListView.Font.Height + 8) - (bounds.Height - imageHeight) / 2;                              bounds.Height += 2 * delta;                              imageY += delta;                                delta = 0;                              if (bounds.Bottom > controlBounds.Bottom)                                  delta = bounds.Y - (controlBounds.Bottom - bounds.Height);                              if (bounds.Top < controlBounds.Top)                                  delta = bounds.Y - controlBounds.Top;                                bounds.Y -= delta;                              imageY -= delta;                          }                            // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                            if ((state & ItemState.Disabled) != ItemState.None)                          {                              using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bDisabled' bounds' 5);                              }                          }                          else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                              (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                          {                              using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bSelected' bounds' 5);                              }                          }                          else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                          {                              using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bGray64' bounds' 5);                              }                          }                          if (((state & ItemState.Hovered) != ItemState.None))                          {                              using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                              {                                  Utility.FillRoundedRectangle(g' bHovered' bounds' 5);                              }                          }                            // Draw the image                          g.DrawImage(img' imageX' imageY' imageWidth' imageHeight);                            // Draw image border                          if (Math.Min(imageWidth' imageHeight) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' imageX' imageY' imageWidth' imageHeight);                              }                              if (System.Math.Min(imageWidth' imageHeight) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' imageX + 1' imageY + 1' imageWidth - 2' imageHeight - 2);                                  }                              }                          }                      }                      else                      {                          // Paint background                          if (ImageListView.Enabled)                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                          else                          {                              using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                              {                                  g.FillRectangle(bItemBack' bounds);                              }                          }                      }                        // Draw item text                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          RectangleF rt;                          using (StringFormat sf = new StringFormat())                          {                              rt = new RectangleF(bounds.Left + 4' bounds.Top + 4' bounds.Width - 8' (bounds.Height - imageHeight) / 2 - 8);                              sf.Alignment = StringAlignment.Center;                              sf.FormatFlags = StringFormatFlags.NoWrap;                              sf.LineAlignment = StringAlignment.Center;                              sf.Trimming = StringTrimming.EllipsisCharacter;                              using (Brush bItemFore = new SolidBrush(ImageListView.Colors.ForeColor))                              {                                  g.DrawString(item.Text' ImageListView.Font' bItemFore' rt' sf);                              }                              rt.Y = bounds.Bottom - (bounds.Height - imageHeight) / 2 + 4;                              string details = "";                              string dimensions = item.GetSubItemText(ColumnType.Dimensions);                              if (!string.IsNullOrEmpty(dimensions))                                  details += dimensions + " pixels ";                              string fileSize = item.GetSubItemText(ColumnType.FileSize);                              if (!string.IsNullOrEmpty(fileSize))                                  details += item.GetSubItemText(ColumnType.FileSize);                              using (Brush bGrayText = new SolidBrush(ImageListView.Colors.PaneLabelColor))                              {                                  g.DrawString(details' ImageListView.Font' bGrayText' rt' sf);                              }                          }                      }                        // Item border                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' 4);                      }                      if (((state & ItemState.Disabled) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                      else if ((state & ItemState.Selected) == ItemState.None)                      {                          using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                          {                              Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                        if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                      {                          using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                          {                              Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' 4);                          }                      }                  }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,ThemeRenderer,The following statement contains a magic number: if (VisualStylesEnabled)                  {                      // See http://msdn.microsoft.com/en-us/library/bb773210(VS.85).aspx                      // for part and state codes used below.                        // Check boxes                      rCheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedNormal);                      rUncheckedNormal = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedNormal);                      rCheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.CheckedDisabled);                      rUncheckedDisabled = GetRenderer(VisualStyleElement.Button.CheckBox.UncheckedDisabled);                      // File icons                      rFileIcon = GetRenderer(VisualStyleElement.Button.PushButton.Normal);                      // Column headers                      rColumnNormal = GetRenderer("Header"' 1' 1);                      rColumnHovered = GetRenderer("Header"' 1' 2);                      rColumnSorted = GetRenderer("Header"' 1' 4);                      rColumnSortedHovered = GetRenderer("Header"' 1' 5);                      rSortAscending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedUp);                      rSortDescending = GetRenderer(VisualStyleElement.Header.SortArrow.SortedDown);                      // Items                      rItemNormal = GetRenderer("Explorer::ListView"' 1' 1);                      rItemHovered = GetRenderer("Explorer::ListView"' 1' 2);                      rItemSelected = GetRenderer("Explorer::ListView"' 1' 3);                      rItemHoveredSelected = GetRenderer("Explorer::ListView"' 1' 6);                      rItemSelectedHidden = GetRenderer("Explorer::ListView"' 1' 5);                      rItemDisabled = GetRenderer("Explorer::ListView"' 1' 4);                      // Groups                      rGroupNormal = GetRenderer("Explorer::ListView"' 6' 1);                      rGroupLine = GetRenderer("Explorer::ListView"' 7' 1);                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null && rSort != null)                  {                      // Background                      rBack.DrawBackground(g' bounds' bounds);                      // Sort arrow                      if (order != SortOrder.None)                      {                          Size sz = rSort.GetPartSize(g' System.Windows.Forms.VisualStyles.ThemeSizeType.True);                          Rectangle sortBounds = new Rectangle(new Point(0' 0)' sz);                          sortBounds.Offset(bounds.X + (bounds.Width - sz.Width) / 2' 0);                          rSort.DrawBackground(g' sortBounds' sortBounds);                      }                        // Text                      if (bounds.Width > 4)                      {                          Rectangle textBounds = bounds;                          textBounds.Inflate(-3' 0);                          TextRenderer.DrawText(g' column.Text'                              SystemFonts.MenuFont' textBounds' SystemColors.ControlText'                              TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                  }                  else                      base.DrawColumnHeader(g' column' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null && rSort != null)                  {                      // Background                      rBack.DrawBackground(g' bounds' bounds);                      // Sort arrow                      if (order != SortOrder.None)                      {                          Size sz = rSort.GetPartSize(g' System.Windows.Forms.VisualStyles.ThemeSizeType.True);                          Rectangle sortBounds = new Rectangle(new Point(0' 0)' sz);                          sortBounds.Offset(bounds.X + (bounds.Width - sz.Width) / 2' 0);                          rSort.DrawBackground(g' sortBounds' sortBounds);                      }                        // Text                      if (bounds.Width > 4)                      {                          Rectangle textBounds = bounds;                          textBounds.Inflate(-3' 0);                          TextRenderer.DrawText(g' column.Text'                              SystemFonts.MenuFont' textBounds' SystemColors.ControlText'                              TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                  }                  else                      base.DrawColumnHeader(g' column' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null && rSort != null)                  {                      // Background                      rBack.DrawBackground(g' bounds' bounds);                      // Sort arrow                      if (order != SortOrder.None)                      {                          Size sz = rSort.GetPartSize(g' System.Windows.Forms.VisualStyles.ThemeSizeType.True);                          Rectangle sortBounds = new Rectangle(new Point(0' 0)' sz);                          sortBounds.Offset(bounds.X + (bounds.Width - sz.Width) / 2' 0);                          rSort.DrawBackground(g' sortBounds' sortBounds);                      }                        // Text                      if (bounds.Width > 4)                      {                          Rectangle textBounds = bounds;                          textBounds.Inflate(-3' 0);                          TextRenderer.DrawText(g' column.Text'                              SystemFonts.MenuFont' textBounds' SystemColors.ControlText'                              TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                  }                  else                      base.DrawColumnHeader(g' column' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (VisualStylesEnabled && view != View.Details)                  {                      //sz.Width += 6;                      //sz.Height += 6;                      int textHeight = ImageListView.Font.Height;                        sz.Width += textHeight * 2 / 5;                      sz.Height -= textHeight / 2;                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (VisualStylesEnabled && view != View.Details)                  {                      //sz.Width += 6;                      //sz.Height += 6;                      int textHeight = ImageListView.Font.Height;                        sz.Width += textHeight * 2 / 5;                      sz.Height -= textHeight / 2;                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (VisualStylesEnabled && view != View.Details)                  {                      //sz.Width += 6;                      //sz.Height += 6;                      int textHeight = ImageListView.Font.Height;                        sz.Width += textHeight * 2 / 5;                      sz.Height -= textHeight / 2;                  }
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (VisualStylesEnabled && rBack != null)                  {                      // Do not draw the background of normal items                      if (((state & ItemState.Hovered) != ItemState.None) || ((state & ItemState.Selected) != ItemState.None))                          rBack.DrawBackground(g' bounds' bounds);                        // Size itemPadding = new Size(7' 7);                      Size itemPadding = new Size(5' 5);                        // Draw the image                      if (ImageListView.View != View.Details)                      {                          Image img = item.GetCachedImage(CachedImageType.Thumbnail);                          if (img != null)                          {                              //Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                                Rectangle pos = Utility.GetSizedImageBounds(img'                                  new Rectangle(bounds.Location + itemPadding'                                  new Size(bounds.Width - 2 * itemPadding.Width' bounds.Height - 2 * itemPadding.Width)));                                // Image background                              Rectangle imgback = pos;                              imgback.Inflate(3' 3);                                //Fill background                              //g.FillRectangle(SystemBrushes.Window' imgback);                                // Image border                              //if (img.Width > 32 && img.Height > 32)                              //{                              //    using (Pen pen = new Pen(Color.FromArgb(224' 224' 244)' 2))                              //    {                              //        g.DrawRectangle(pen' imgback.X' imgback.Y' imgback.Width' imgback.Height);                              //    }                              //}                                // Image                              g.DrawImage(img' pos);                          }                            // Draw item text                          //Color foreColor = SystemColors.ControlText;                          //if ((state & ItemState.Disabled) != ItemState.None)                          //    foreColor = SystemColors.GrayText;                          //Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                          //Rectangle rt = new Rectangle(                          //    bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height'                          //    ImageListView.ThumbnailSize.Width' szt.Height);                          //TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          //    TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                      }                      else // if (ImageListView.View == View.Details)                      {                          List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                            // Separators                           int x = bounds.Left - 2;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(Color.FromArgb(32' 128' 128' 128)))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                          Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          Rectangle rt = new Rectangle(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          Color foreColor = SystemColors.ControlText;                          if ((state & ItemState.Disabled) != ItemState.None)                              foreColor = SystemColors.GrayText;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              using (Brush bItemFore = new SolidBrush(SystemColors.ControlText))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                  else                                      TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          Rectangle focusBounds = bounds;                          focusBounds.Inflate(-2' -2);                          ControlPaint.DrawFocusRectangle(g' focusBounds);                      }                    }                  else                      base.DrawItem(g' item' state' bounds);
Magic Number,ImageGlass.ImageListView,ThemeRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGroupHeader,The following statement contains a magic number: if (VisualStylesEnabled && rGroupNormal != null && rGroupLine != null)                  {                      bounds.Inflate(-3' 0);                        // Background                      rGroupNormal.DrawBackground(g' bounds' bounds);                        // Text                      TextRenderer.DrawText(g' name'                          SystemFonts.MenuFont' bounds' SystemColors.ControlText'                          TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.PreserveGraphicsClipping);                        // Border                      Rectangle lineBounds = new Rectangle(bounds.Left' bounds.Bottom - 1' bounds.Width' 1);                      rGroupLine.DrawBackground(g' lineBounds' lineBounds);                  }                  else                      base.DrawGroupHeader(g' name' bounds);
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                      return base.MeasureItem(view);                  else                  {                      // Reference text height                      int textHeight = ImageListView.Font.Height;                        Size itemSize = new Size();                        itemSize.Height = ImageListView.ThumbnailSize.Height + textHeight + 4 * 3;                      itemSize.Width = ImageListView.ThumbnailSize.Width + 2 * 3;                        return itemSize;                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                      return base.MeasureItem(view);                  else                  {                      // Reference text height                      int textHeight = ImageListView.Font.Height;                        Size itemSize = new Size();                        itemSize.Height = ImageListView.ThumbnailSize.Height + textHeight + 4 * 3;                      itemSize.Width = ImageListView.ThumbnailSize.Width + 2 * 3;                        return itemSize;                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                      return base.MeasureItem(view);                  else                  {                      // Reference text height                      int textHeight = ImageListView.Font.Height;                        Size itemSize = new Size();                        itemSize.Height = ImageListView.ThumbnailSize.Height + textHeight + 4 * 3;                      itemSize.Width = ImageListView.ThumbnailSize.Width + 2 * 3;                        return itemSize;                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                      return base.MeasureItem(view);                  else                  {                      // Reference text height                      int textHeight = ImageListView.Font.Height;                        Size itemSize = new Size();                        itemSize.Height = ImageListView.ThumbnailSize.Height + textHeight + 4 * 3;                      itemSize.Width = ImageListView.ThumbnailSize.Width + 2 * 3;                        return itemSize;                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: int offset = 4;
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: int width = bounds.Width - 2 * offset;
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.SortOrder != SortOrder.None && ((state & ColumnState.SortColumn) != ColumnState.None))                  {                      Image img = null;                      if (ImageListView.SortOrder == SortOrder.Ascending)                          img = ImageListViewResources.SortAscending;                      else if (ImageListView.SortOrder == SortOrder.Descending)                          img = ImageListViewResources.SortDescending;                      if (img != null)                      {                          g.DrawImageUnscaled(img' bounds.Right - offset - img.Width' bounds.Top + (bounds.Height - img.Height) / 2);                          width -= img.Width + offset;                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnHeader,The following statement contains a magic number: if (bounds.Width > 4)                  {                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ColumnHeaderForeColor))                          {                              g.DrawString(column.Text' (ImageListView.ColumnHeaderFont == null ? ImageListView.Font : ImageListView.ColumnHeaderFont)' bText' bounds' sf);                          }                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pBorder = new Pen(Color.FromArgb(252' 252' 252)))                  {                      g.DrawRectangle(pBorder' bounds.Left + 1' bounds.Top' bounds.Width - 2' bounds.Height - 2);                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      bool alternate = (item.Index % 2 == 1);                      List<ImageListView.ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Paint background                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          // Disabled                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1'                              ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1'                              ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                      {                          // Not focused and selected                          using (Brush bItemBack = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1'                              ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          // Not selected                          using (Brush bItemBack = new SolidBrush(alternate ?                              ImageListView.Colors.AlternateBackColor : ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                            // Shade sort column                          int x = bounds.Left - 1;                          foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                          {                              if (ImageListView.SortOrder != SortOrder.None &&                                  ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                                  ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                              {                                  Rectangle subItemBounds = bounds;                                  subItemBounds.X = x;                                  subItemBounds.Width = column.Width;                                  using (Brush bSort = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                                  {                                      g.FillRectangle(bSort' subItemBounds);                                  }                                  break;                              }                              x += column.Width;                          }                        }                        // Separators                       int xs = bounds.Left - 1;                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          xs += column.Width;                          if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                          {                              using (Pen pSep = new Pen(ImageListView.Colors.ColumnSeparatorColor))                              {                                  g.DrawLine(pSep' xs' bounds.Top' xs' bounds.Bottom);                              }                          }                      }                        // Sub items                      Color foreColor = ImageListView.Colors.CellForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      else if (alternate)                          foreColor = ImageListView.Colors.AlternateCellForeColor;                        int offset = 2;                      int firstWidth = 0;                      if (uicolumns.Count > 0)                          firstWidth = uicolumns[0].Width;                      Rectangle rt = new Rectangle(bounds.Left + offset' bounds.Top' firstWidth - 2 * offset' bounds.Height);                      foreach (ImageListView.ImageListViewColumnHeader column in uicolumns)                      {                          rt.Width = column.Width - 2 * offset;                          int iconOffset = 0;                          if (column.Type == ColumnType.Name)                          {                              // Allocate space for checkbox and file icon                              if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                  iconOffset += 2 * 16 + 3 * 2;                              else if (ImageListView.ShowCheckBoxes)                                  iconOffset += 16 + 2 * 2;                              else if (ImageListView.ShowFileIcons)                                  iconOffset += 16 + 2 * 2;                          }                          rt.X += iconOffset;                          rt.Width -= iconOffset;                          // Rating stars                          if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                          {                              int rating = item.GetSimpleRating();                              if (rating > 0)                              {                                  int w = ImageListView.RatingImage.Width;                                  int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                    for (int i = 1; i <= 5; i++)                                  {                                      if (rating >= i)                                          g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                      else                                          g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                  }                              }                          }                          else if (column.Type == ColumnType.Custom)                              TextRenderer.DrawText(g' item.GetSubItemText(column.Guid)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                          else                              TextRenderer.DrawText(g' item.GetSubItemText(column.Type)' ImageListView.Font' rt' foreColor'                                  TextFormatFlags.EndEllipsis | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                            rt.X -= iconOffset;                          rt.X += column.Width;                      }                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                          ControlPaint.DrawFocusRectangle(g' bounds);                  }                  else // if (ImageListView.View != View.Details)                  {                      // Paint background                      if (ImageListView.Enabled)                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.BackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                      else                      {                          using (Brush bItemBack = new SolidBrush(ImageListView.Colors.DisabledBackColor))                          {                              g.FillRectangle(bItemBack' bounds);                          }                      }                        // Get thumbnail                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                        // Reference text height                      int textHeight = ImageListView.Font.Height;                        // Calculate bounds                      Rectangle textBounds = new Rectangle(bounds.Left + 3' bounds.Bottom - (textHeight + 3)' bounds.Width - 2 * 3' textHeight);                      Rectangle imgBounds;                      if (img != null)                          imgBounds = new Rectangle(bounds.Left + (bounds.Width - img.Width) / 2'                              bounds.Bottom - (img.Height + textHeight + 3 * 3)' img.Width' img.Height);                      else                          imgBounds = new Rectangle(bounds.Left + 3' bounds.Top + 3' ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height);                      Rectangle textOutline = Rectangle.Inflate(textBounds' 3' 3);                      Rectangle imgOutline = Rectangle.Inflate(imgBounds' 3' 3);                      textOutline.Width -= 1;                      textOutline.Height -= 1;                        // Paint background                      if ((((state & ItemState.Disabled) != ItemState.None)))                      {                          // Disabled                          using (Brush bBack = new SolidBrush(ImageListView.Colors.DisabledColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.SelectedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                      else if ((!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)))                      {                          // Not focused and selected                          using (Brush bBack = new SolidBrush(ImageListView.Colors.UnFocusedColor1))                          {                              Utility.FillRoundedRectangle(g' bBack' textOutline' 4);                              Utility.FillRoundedRectangle(g' bBack' imgOutline' 4);                          }                      }                        // Draw image                      if (img != null)                      {                          g.DrawImage(img' imgBounds.Location);                      }                        // Image border                      using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pBorder' imgOutline.Left' imgOutline.Top' imgOutline.Width - 1' imgOutline.Height - 1' 3);                      }                        // Hovered state                      if ((state & ItemState.Hovered) != ItemState.None)                      {                          using (Brush bGlow = new SolidBrush(Color.FromArgb(24' Color.White)))                          {                              Utility.FillRoundedRectangle(g' bGlow' imgOutline' 4);                          }                      }                        // Item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                          foreColor = ImageListView.Colors.DisabledForeColor;                      else if (ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.SelectedForeColor;                      else if (!ImageListView.Focused && (state & ItemState.Selected) != ItemState.None)                          foreColor = ImageListView.Colors.UnFocusedForeColor;                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' textBounds' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsClipping);                        // Focus rectangle                      if (ImageListView.Focused && ((state & ItemState.Focused) != ItemState.None))                      {                          textOutline.Offset(1' 1);                          textOutline.Width -= 1;                          textOutline.Height -= 1;                          ControlPaint.DrawFocusRectangle(g' textOutline);                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGalleryImage,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin));                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (pos.Width > 32 && pos.Height > 32)                      {                          using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                  }
Magic Number,ImageGlass.ImageListView,MeerkatRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderers.cs,DrawGalleryImage,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin));                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (pos.Width > 32 && pos.Height > 32)                      {                          using (Pen pBorder = new Pen(ImageListView.Colors.BorderColor))                          {                              g.DrawRectangle(pBorder' pos);                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Rating)                  {                      if (mImageListView.RatingImage != null)                          width = mImageListView.RatingImage.Width * 5;                  }                  else if (mType == ColumnType.Custom)                  {                      foreach (ImageListViewItem item in mImageListView.Items)                      {                          int itemwidth = TextRenderer.MeasureText(item.GetSubItemText(mGuid)' mImageListView.Font).Width;                          width = System.Math.Max(width' itemwidth);                      }                  }                  else                  {                      foreach (ImageListViewItem item in mImageListView.Items)                      {                          int itemwidth = TextRenderer.MeasureText(item.GetSubItemText(Type)' mImageListView.Font).Width;                          width = System.Math.Max(width' itemwidth);                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: if (mType == ColumnType.Name)                  {                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                          width += 2 * 16 + 3 * 2;                      else if (ImageListView.ShowCheckBoxes)                          width += 16 + 2 * 2;                      else if (ImageListView.ShowFileIcons)                          width += 16 + 2 * 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewColumnHeader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewColumnHeader.cs,AutoFit,The following statement contains a magic number: Width = width + 8;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateRating,The following statement contains a magic number: if (mRating >= 1 && mRating <= 12)                  mStarRating = 1;              else if (mRating >= 13 && mRating <= 37)                  mStarRating = 2;              else if (mRating >= 38 && mRating <= 62)                  mStarRating = 3;              else if (mRating >= 63 && mRating <= 87)                  mStarRating = 4;              else if (mRating >= 88 && mRating <= 99)                  mStarRating = 5;              else                  mStarRating = 0;
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,GetCachedImage,The following statement contains a magic number: if (imageType == CachedImageType.SmallIcon || imageType == CachedImageType.LargeIcon)              {                  if (string.IsNullOrEmpty(extension))                      return mImageListView.DefaultImage;                    CacheState state = mImageListView.shellInfoCache.GetCacheState(extension);                  if (state == CacheState.Cached)                  {                      if (imageType == CachedImageType.SmallIcon)                          return mImageListView.shellInfoCache.GetSmallIcon(extension);                      else                          return mImageListView.shellInfoCache.GetLargeIcon(extension);                  }                  else if (state == CacheState.Error)                  {                      if (mImageListView.RetryOnError)                      {                          mImageListView.shellInfoCache.Remove(extension);                          mImageListView.shellInfoCache.Add(extension);                      }                      return mImageListView.ErrorImage;                  }                  else                  {                      mImageListView.shellInfoCache.Add(extension);                      return mImageListView.DefaultImage;                  }              }              else              {                  Image img = null;                  CacheState state = ThumbnailCacheState;                    if (state == CacheState.Error)                  {                      if (string.IsNullOrEmpty(extension))                          return mImageListView.ErrorImage;                        if (mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 32 && mImageListView.ThumbnailSize.Height > 32)                          img = mImageListView.shellInfoCache.GetLargeIcon(extension);                      if (img == null && mImageListView.ShellIconFallback)                          img = mImageListView.shellInfoCache.GetSmallIcon(extension);                      if (img == null)                          img = mImageListView.ErrorImage;                      return img;                  }                    img = mImageListView.thumbnailCache.GetImage(Guid' mImageListView.ThumbnailSize' mImageListView.UseEmbeddedThumbnails'                      mImageListView.AutoRotateThumbnails' mImageListView.UseWIC == UseWIC.Auto || mImageListView.UseWIC == UseWIC.ThumbnailsOnly' false);                    if (state == CacheState.Cached)                      return img;                    mImageListView.thumbnailCache.Add(Guid' mAdaptor' mVirtualItemKey' mImageListView.ThumbnailSize'                      mImageListView.UseEmbeddedThumbnails' mImageListView.AutoRotateThumbnails'                      (mImageListView.UseWIC == UseWIC.Auto || mImageListView.UseWIC == UseWIC.ThumbnailsOnly));                    if (img == null && string.IsNullOrEmpty(extension))                      return mImageListView.DefaultImage;                    if (img == null && mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 16 && mImageListView.ThumbnailSize.Height > 16)                      img = mImageListView.shellInfoCache.GetLargeIcon(extension);                  if (img == null && mImageListView.ShellIconFallback)                      img = mImageListView.shellInfoCache.GetSmallIcon(extension);                  if (img == null)                      img = mImageListView.DefaultImage;                    return img;              }
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,GetCachedImage,The following statement contains a magic number: if (imageType == CachedImageType.SmallIcon || imageType == CachedImageType.LargeIcon)              {                  if (string.IsNullOrEmpty(extension))                      return mImageListView.DefaultImage;                    CacheState state = mImageListView.shellInfoCache.GetCacheState(extension);                  if (state == CacheState.Cached)                  {                      if (imageType == CachedImageType.SmallIcon)                          return mImageListView.shellInfoCache.GetSmallIcon(extension);                      else                          return mImageListView.shellInfoCache.GetLargeIcon(extension);                  }                  else if (state == CacheState.Error)                  {                      if (mImageListView.RetryOnError)                      {                          mImageListView.shellInfoCache.Remove(extension);                          mImageListView.shellInfoCache.Add(extension);                      }                      return mImageListView.ErrorImage;                  }                  else                  {                      mImageListView.shellInfoCache.Add(extension);                      return mImageListView.DefaultImage;                  }              }              else              {                  Image img = null;                  CacheState state = ThumbnailCacheState;                    if (state == CacheState.Error)                  {                      if (string.IsNullOrEmpty(extension))                          return mImageListView.ErrorImage;                        if (mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 32 && mImageListView.ThumbnailSize.Height > 32)                          img = mImageListView.shellInfoCache.GetLargeIcon(extension);                      if (img == null && mImageListView.ShellIconFallback)                          img = mImageListView.shellInfoCache.GetSmallIcon(extension);                      if (img == null)                          img = mImageListView.ErrorImage;                      return img;                  }                    img = mImageListView.thumbnailCache.GetImage(Guid' mImageListView.ThumbnailSize' mImageListView.UseEmbeddedThumbnails'                      mImageListView.AutoRotateThumbnails' mImageListView.UseWIC == UseWIC.Auto || mImageListView.UseWIC == UseWIC.ThumbnailsOnly' false);                    if (state == CacheState.Cached)                      return img;                    mImageListView.thumbnailCache.Add(Guid' mAdaptor' mVirtualItemKey' mImageListView.ThumbnailSize'                      mImageListView.UseEmbeddedThumbnails' mImageListView.AutoRotateThumbnails'                      (mImageListView.UseWIC == UseWIC.Auto || mImageListView.UseWIC == UseWIC.ThumbnailsOnly));                    if (img == null && string.IsNullOrEmpty(extension))                      return mImageListView.DefaultImage;                    if (img == null && mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 16 && mImageListView.ThumbnailSize.Height > 16)                      img = mImageListView.shellInfoCache.GetLargeIcon(extension);                  if (img == null && mImageListView.ShellIconFallback)                      img = mImageListView.shellInfoCache.GetSmallIcon(extension);                  if (img == null)                      img = mImageListView.DefaultImage;                    return img;              }
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,GetCachedImage,The following statement contains a magic number: if (imageType == CachedImageType.SmallIcon || imageType == CachedImageType.LargeIcon)              {                  if (string.IsNullOrEmpty(extension))                      return mImageListView.DefaultImage;                    CacheState state = mImageListView.shellInfoCache.GetCacheState(extension);                  if (state == CacheState.Cached)                  {                      if (imageType == CachedImageType.SmallIcon)                          return mImageListView.shellInfoCache.GetSmallIcon(extension);                      else                          return mImageListView.shellInfoCache.GetLargeIcon(extension);                  }                  else if (state == CacheState.Error)                  {                      if (mImageListView.RetryOnError)                      {                          mImageListView.shellInfoCache.Remove(extension);                          mImageListView.shellInfoCache.Add(extension);                      }                      return mImageListView.ErrorImage;                  }                  else                  {                      mImageListView.shellInfoCache.Add(extension);                      return mImageListView.DefaultImage;                  }              }              else              {                  Image img = null;                  CacheState state = ThumbnailCacheState;                    if (state == CacheState.Error)                  {                      if (string.IsNullOrEmpty(extension))                          return mImageListView.ErrorImage;                        if (mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 32 && mImageListView.ThumbnailSize.Height > 32)                          img = mImageListView.shellInfoCache.GetLargeIcon(extension);                      if (img == null && mImageListView.ShellIconFallback)                          img = mImageListView.shellInfoCache.GetSmallIcon(extension);                      if (img == null)                          img = mImageListView.ErrorImage;                      return img;                  }                    img = mImageListView.thumbnailCache.GetImage(Guid' mImageListView.ThumbnailSize' mImageListView.UseEmbeddedThumbnails'                      mImageListView.AutoRotateThumbnails' mImageListView.UseWIC == UseWIC.Auto || mImageListView.UseWIC == UseWIC.ThumbnailsOnly' false);                    if (state == CacheState.Cached)                      return img;                    mImageListView.thumbnailCache.Add(Guid' mAdaptor' mVirtualItemKey' mImageListView.ThumbnailSize'                      mImageListView.UseEmbeddedThumbnails' mImageListView.AutoRotateThumbnails'                      (mImageListView.UseWIC == UseWIC.Auto || mImageListView.UseWIC == UseWIC.ThumbnailsOnly));                    if (img == null && string.IsNullOrEmpty(extension))                      return mImageListView.DefaultImage;                    if (img == null && mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 16 && mImageListView.ThumbnailSize.Height > 16)                      img = mImageListView.shellInfoCache.GetLargeIcon(extension);                  if (img == null && mImageListView.ShellIconFallback)                      img = mImageListView.shellInfoCache.GetSmallIcon(extension);                  if (img == null)                      img = mImageListView.DefaultImage;                    return img;              }
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,GetCachedImage,The following statement contains a magic number: if (imageType == CachedImageType.SmallIcon || imageType == CachedImageType.LargeIcon)              {                  if (string.IsNullOrEmpty(extension))                      return mImageListView.DefaultImage;                    CacheState state = mImageListView.shellInfoCache.GetCacheState(extension);                  if (state == CacheState.Cached)                  {                      if (imageType == CachedImageType.SmallIcon)                          return mImageListView.shellInfoCache.GetSmallIcon(extension);                      else                          return mImageListView.shellInfoCache.GetLargeIcon(extension);                  }                  else if (state == CacheState.Error)                  {                      if (mImageListView.RetryOnError)                      {                          mImageListView.shellInfoCache.Remove(extension);                          mImageListView.shellInfoCache.Add(extension);                      }                      return mImageListView.ErrorImage;                  }                  else                  {                      mImageListView.shellInfoCache.Add(extension);                      return mImageListView.DefaultImage;                  }              }              else              {                  Image img = null;                  CacheState state = ThumbnailCacheState;                    if (state == CacheState.Error)                  {                      if (string.IsNullOrEmpty(extension))                          return mImageListView.ErrorImage;                        if (mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 32 && mImageListView.ThumbnailSize.Height > 32)                          img = mImageListView.shellInfoCache.GetLargeIcon(extension);                      if (img == null && mImageListView.ShellIconFallback)                          img = mImageListView.shellInfoCache.GetSmallIcon(extension);                      if (img == null)                          img = mImageListView.ErrorImage;                      return img;                  }                    img = mImageListView.thumbnailCache.GetImage(Guid' mImageListView.ThumbnailSize' mImageListView.UseEmbeddedThumbnails'                      mImageListView.AutoRotateThumbnails' mImageListView.UseWIC == UseWIC.Auto || mImageListView.UseWIC == UseWIC.ThumbnailsOnly' false);                    if (state == CacheState.Cached)                      return img;                    mImageListView.thumbnailCache.Add(Guid' mAdaptor' mVirtualItemKey' mImageListView.ThumbnailSize'                      mImageListView.UseEmbeddedThumbnails' mImageListView.AutoRotateThumbnails'                      (mImageListView.UseWIC == UseWIC.Auto || mImageListView.UseWIC == UseWIC.ThumbnailsOnly));                    if (img == null && string.IsNullOrEmpty(extension))                      return mImageListView.DefaultImage;                    if (img == null && mImageListView.ShellIconFallback && mImageListView.ThumbnailSize.Width > 16 && mImageListView.ThumbnailSize.Height > 16)                      img = mImageListView.shellInfoCache.GetLargeIcon(extension);                  if (img == null && mImageListView.ShellIconFallback)                      img = mImageListView.shellInfoCache.GetSmallIcon(extension);                  if (img == null)                      img = mImageListView.DefaultImage;                    return img;              }
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateGroup,The following statement contains a magic number: switch (column.Type)              {                  case ColumnType.DateAccessed:                      groupInfo = Utility.GroupTextDate(DateAccessed);                      break;                  case ColumnType.DateCreated:                      groupInfo = Utility.GroupTextDate(DateCreated);                      break;                  case ColumnType.DateModified:                      groupInfo = Utility.GroupTextDate(DateModified);                      break;                  case ColumnType.Dimensions:                      groupInfo = Utility.GroupTextDimension(Dimensions);                      break;                  case ColumnType.FileName:                      groupInfo = Utility.GroupTextAlpha(FileName);                      break;                  case ColumnType.FilePath:                      groupInfo = Utility.GroupTextAlpha(FilePath);                      break;                  case ColumnType.FileSize:                      groupInfo = Utility.GroupTextFileSize(FileSize);                      break;                  case ColumnType.FileType:                      groupInfo = Utility.GroupTextAlpha(FileType);                      break;                  case ColumnType.Name:                      groupInfo = Utility.GroupTextAlpha(Text);                      break;                  case ColumnType.ImageDescription:                      groupInfo = Utility.GroupTextAlpha(ImageDescription);                      break;                  case ColumnType.EquipmentModel:                      groupInfo = Utility.GroupTextAlpha(EquipmentModel);                      break;                  case ColumnType.DateTaken:                      groupInfo = Utility.GroupTextDate(DateTaken);                      break;                  case ColumnType.Artist:                      groupInfo = Utility.GroupTextAlpha(Artist);                      break;                  case ColumnType.Copyright:                      groupInfo = Utility.GroupTextAlpha(Copyright);                      break;                  case ColumnType.UserComment:                      groupInfo = Utility.GroupTextAlpha(UserComment);                      break;                  case ColumnType.Software:                      groupInfo = Utility.GroupTextAlpha(Software);                      break;                  case ColumnType.Custom:                      groupInfo = Utility.GroupTextAlpha(GetSubItemText(column.Guid));                      break;                  case ColumnType.ISOSpeed:                      groupInfo = new Utility.Tuple<int' string>(ISOSpeed' ISOSpeed.ToString());                      break;                  case ColumnType.Rating:                      groupInfo = new Utility.Tuple<int' string>(Rating / 5' (Rating / 5).ToString());                      break;                  case ColumnType.FocalLength:                      groupInfo = new Utility.Tuple<int' string>((int)FocalLength' FocalLength.ToString());                      break;                  case ColumnType.ExposureTime:                      groupInfo = new Utility.Tuple<int' string>((int)ExposureTime' ExposureTime.ToString());                      break;                  case ColumnType.FNumber:                      groupInfo = new Utility.Tuple<int' string>((int)FNumber' FNumber.ToString());                      break;                  case ColumnType.Resolution:                      groupInfo = new Utility.Tuple<int' string>((int)Resolution.Width' Resolution.Width.ToString());                      break;                  default:                      groupInfo = new Utility.Tuple<int' string>(0' "Unknown");                      break;              }
Magic Number,ImageGlass.ImageListView,ImageListViewItem,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewItem.cs,UpdateGroup,The following statement contains a magic number: switch (column.Type)              {                  case ColumnType.DateAccessed:                      groupInfo = Utility.GroupTextDate(DateAccessed);                      break;                  case ColumnType.DateCreated:                      groupInfo = Utility.GroupTextDate(DateCreated);                      break;                  case ColumnType.DateModified:                      groupInfo = Utility.GroupTextDate(DateModified);                      break;                  case ColumnType.Dimensions:                      groupInfo = Utility.GroupTextDimension(Dimensions);                      break;                  case ColumnType.FileName:                      groupInfo = Utility.GroupTextAlpha(FileName);                      break;                  case ColumnType.FilePath:                      groupInfo = Utility.GroupTextAlpha(FilePath);                      break;                  case ColumnType.FileSize:                      groupInfo = Utility.GroupTextFileSize(FileSize);                      break;                  case ColumnType.FileType:                      groupInfo = Utility.GroupTextAlpha(FileType);                      break;                  case ColumnType.Name:                      groupInfo = Utility.GroupTextAlpha(Text);                      break;                  case ColumnType.ImageDescription:                      groupInfo = Utility.GroupTextAlpha(ImageDescription);                      break;                  case ColumnType.EquipmentModel:                      groupInfo = Utility.GroupTextAlpha(EquipmentModel);                      break;                  case ColumnType.DateTaken:                      groupInfo = Utility.GroupTextDate(DateTaken);                      break;                  case ColumnType.Artist:                      groupInfo = Utility.GroupTextAlpha(Artist);                      break;                  case ColumnType.Copyright:                      groupInfo = Utility.GroupTextAlpha(Copyright);                      break;                  case ColumnType.UserComment:                      groupInfo = Utility.GroupTextAlpha(UserComment);                      break;                  case ColumnType.Software:                      groupInfo = Utility.GroupTextAlpha(Software);                      break;                  case ColumnType.Custom:                      groupInfo = Utility.GroupTextAlpha(GetSubItemText(column.Guid));                      break;                  case ColumnType.ISOSpeed:                      groupInfo = new Utility.Tuple<int' string>(ISOSpeed' ISOSpeed.ToString());                      break;                  case ColumnType.Rating:                      groupInfo = new Utility.Tuple<int' string>(Rating / 5' (Rating / 5).ToString());                      break;                  case ColumnType.FocalLength:                      groupInfo = new Utility.Tuple<int' string>((int)FocalLength' FocalLength.ToString());                      break;                  case ColumnType.ExposureTime:                      groupInfo = new Utility.Tuple<int' string>((int)ExposureTime' ExposureTime.ToString());                      break;                  case ColumnType.FNumber:                      groupInfo = new Utility.Tuple<int' string>((int)FNumber' FNumber.ToString());                      break;                  case ColumnType.Resolution:                      groupInfo = new Utility.Tuple<int' string>((int)Resolution.Width' Resolution.Width.ToString());                      break;                  default:                      groupInfo = new Utility.Tuple<int' string>(0' "Unknown");                      break;              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetItemBounds,The following statement contains a magic number: if (mImageListView.showGroups)              {                  foreach (ImageListView.ImageListViewGroup group in mImageListView.groups)                  {                      if (itemIndex >= group.FirstItemIndex && itemIndex <= group.LastItemIndex)                      {                          location = group.itemBounds.Location;                          location.X += cachedItemMargin.Width / 2;                          location.Y += cachedItemMargin.Height / 2;                            if (mImageListView.View == View.Gallery)                              location.X += (itemIndex - group.FirstItemIndex) * mItemSizeWithMargin.Width;                          else                          {                              location.X += ((itemIndex - group.FirstItemIndex) % mDisplayedCols) * mItemSizeWithMargin.Width;                              location.Y += ((itemIndex - group.FirstItemIndex) / mDisplayedCols) * mItemSizeWithMargin.Height;                          }                          break;                      }                  }              }              else              {                  location = mItemAreaBounds.Location;                  location.X += cachedItemMargin.Width / 2 - mImageListView.ViewOffset.X;                  location.Y += cachedItemMargin.Height / 2 - mImageListView.ViewOffset.Y;                    if (mImageListView.View == View.Gallery)                      location.X += itemIndex * mItemSizeWithMargin.Width;                  else                  {                      location.X += (itemIndex % mDisplayedCols) * mItemSizeWithMargin.Width;                      location.Y += (itemIndex / mDisplayedCols) * mItemSizeWithMargin.Height;                  }              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetItemBounds,The following statement contains a magic number: if (mImageListView.showGroups)              {                  foreach (ImageListView.ImageListViewGroup group in mImageListView.groups)                  {                      if (itemIndex >= group.FirstItemIndex && itemIndex <= group.LastItemIndex)                      {                          location = group.itemBounds.Location;                          location.X += cachedItemMargin.Width / 2;                          location.Y += cachedItemMargin.Height / 2;                            if (mImageListView.View == View.Gallery)                              location.X += (itemIndex - group.FirstItemIndex) * mItemSizeWithMargin.Width;                          else                          {                              location.X += ((itemIndex - group.FirstItemIndex) % mDisplayedCols) * mItemSizeWithMargin.Width;                              location.Y += ((itemIndex - group.FirstItemIndex) / mDisplayedCols) * mItemSizeWithMargin.Height;                          }                          break;                      }                  }              }              else              {                  location = mItemAreaBounds.Location;                  location.X += cachedItemMargin.Width / 2 - mImageListView.ViewOffset.X;                  location.Y += cachedItemMargin.Height / 2 - mImageListView.ViewOffset.Y;                    if (mImageListView.View == View.Gallery)                      location.X += itemIndex * mItemSizeWithMargin.Width;                  else                  {                      location.X += (itemIndex % mDisplayedCols) * mItemSizeWithMargin.Width;                      location.Y += (itemIndex / mDisplayedCols) * mItemSizeWithMargin.Height;                  }              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetItemBounds,The following statement contains a magic number: if (mImageListView.showGroups)              {                  foreach (ImageListView.ImageListViewGroup group in mImageListView.groups)                  {                      if (itemIndex >= group.FirstItemIndex && itemIndex <= group.LastItemIndex)                      {                          location = group.itemBounds.Location;                          location.X += cachedItemMargin.Width / 2;                          location.Y += cachedItemMargin.Height / 2;                            if (mImageListView.View == View.Gallery)                              location.X += (itemIndex - group.FirstItemIndex) * mItemSizeWithMargin.Width;                          else                          {                              location.X += ((itemIndex - group.FirstItemIndex) % mDisplayedCols) * mItemSizeWithMargin.Width;                              location.Y += ((itemIndex - group.FirstItemIndex) / mDisplayedCols) * mItemSizeWithMargin.Height;                          }                          break;                      }                  }              }              else              {                  location = mItemAreaBounds.Location;                  location.X += cachedItemMargin.Width / 2 - mImageListView.ViewOffset.X;                  location.Y += cachedItemMargin.Height / 2 - mImageListView.ViewOffset.Y;                    if (mImageListView.View == View.Gallery)                      location.X += itemIndex * mItemSizeWithMargin.Width;                  else                  {                      location.X += (itemIndex % mDisplayedCols) * mItemSizeWithMargin.Width;                      location.Y += (itemIndex / mDisplayedCols) * mItemSizeWithMargin.Height;                  }              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetItemBounds,The following statement contains a magic number: if (mImageListView.showGroups)              {                  foreach (ImageListView.ImageListViewGroup group in mImageListView.groups)                  {                      if (itemIndex >= group.FirstItemIndex && itemIndex <= group.LastItemIndex)                      {                          location = group.itemBounds.Location;                          location.X += cachedItemMargin.Width / 2;                          location.Y += cachedItemMargin.Height / 2;                            if (mImageListView.View == View.Gallery)                              location.X += (itemIndex - group.FirstItemIndex) * mItemSizeWithMargin.Width;                          else                          {                              location.X += ((itemIndex - group.FirstItemIndex) % mDisplayedCols) * mItemSizeWithMargin.Width;                              location.Y += ((itemIndex - group.FirstItemIndex) / mDisplayedCols) * mItemSizeWithMargin.Height;                          }                          break;                      }                  }              }              else              {                  location = mItemAreaBounds.Location;                  location.X += cachedItemMargin.Width / 2 - mImageListView.ViewOffset.X;                  location.Y += cachedItemMargin.Height / 2 - mImageListView.ViewOffset.Y;                    if (mImageListView.View == View.Gallery)                      location.X += itemIndex * mItemSizeWithMargin.Width;                  else                  {                      location.X += (itemIndex % mDisplayedCols) * mItemSizeWithMargin.Width;                      location.Y += (itemIndex / mDisplayedCols) * mItemSizeWithMargin.Height;                  }              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetItemBoundsWithMargin,The following statement contains a magic number: rec.Inflate(cachedItemMargin.Width / 2' cachedItemMargin.Height / 2);
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetItemBoundsWithMargin,The following statement contains a magic number: rec.Inflate(cachedItemMargin.Width / 2' cachedItemMargin.Height / 2);
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetCheckBoxBounds,The following statement contains a magic number: Rectangle bounds = GetWidgetBounds(GetItemBounds(itemIndex)' new Size(16' 16)'                  mImageListView.CheckBoxPadding' mImageListView.CheckBoxAlignment);
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetCheckBoxBounds,The following statement contains a magic number: Rectangle bounds = GetWidgetBounds(GetItemBounds(itemIndex)' new Size(16' 16)'                  mImageListView.CheckBoxPadding' mImageListView.CheckBoxAlignment);
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetCheckBoxBounds,The following statement contains a magic number: if (mImageListView.View != View.Details && mImageListView.CheckBoxAlignment == mImageListView.IconAlignment &&                  mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)              {                  ContentAlignment alignment = mImageListView.CheckBoxAlignment;                  if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                      bounds.X -= 8 + mImageListView.IconPadding.Width / 2;                  else if (alignment == ContentAlignment.BottomRight || alignment == ContentAlignment.MiddleRight || alignment == ContentAlignment.TopRight)                      bounds.X -= 16 + mImageListView.IconPadding.Width;              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetCheckBoxBounds,The following statement contains a magic number: if (mImageListView.View != View.Details && mImageListView.CheckBoxAlignment == mImageListView.IconAlignment &&                  mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)              {                  ContentAlignment alignment = mImageListView.CheckBoxAlignment;                  if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                      bounds.X -= 8 + mImageListView.IconPadding.Width / 2;                  else if (alignment == ContentAlignment.BottomRight || alignment == ContentAlignment.MiddleRight || alignment == ContentAlignment.TopRight)                      bounds.X -= 16 + mImageListView.IconPadding.Width;              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetCheckBoxBounds,The following statement contains a magic number: if (mImageListView.View != View.Details && mImageListView.CheckBoxAlignment == mImageListView.IconAlignment &&                  mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)              {                  ContentAlignment alignment = mImageListView.CheckBoxAlignment;                  if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                      bounds.X -= 8 + mImageListView.IconPadding.Width / 2;                  else if (alignment == ContentAlignment.BottomRight || alignment == ContentAlignment.MiddleRight || alignment == ContentAlignment.TopRight)                      bounds.X -= 16 + mImageListView.IconPadding.Width;              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetIconBounds,The following statement contains a magic number: Rectangle bounds = GetWidgetBounds(GetItemBounds(itemIndex)' new Size(16' 16)'                  mImageListView.IconPadding' mImageListView.IconAlignment);
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetIconBounds,The following statement contains a magic number: Rectangle bounds = GetWidgetBounds(GetItemBounds(itemIndex)' new Size(16' 16)'                  mImageListView.IconPadding' mImageListView.IconAlignment);
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetIconBounds,The following statement contains a magic number: if (mImageListView.View == View.Details && mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)                  bounds.X += 16 + 2;              else if (mImageListView.CheckBoxAlignment == mImageListView.IconAlignment &&                  mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)              {                  ContentAlignment alignment = mImageListView.CheckBoxAlignment;                  if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.TopLeft)                      bounds.X += 16 + mImageListView.IconPadding.Width;                  else if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                      bounds.X += 8 + mImageListView.IconPadding.Width / 2;              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetIconBounds,The following statement contains a magic number: if (mImageListView.View == View.Details && mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)                  bounds.X += 16 + 2;              else if (mImageListView.CheckBoxAlignment == mImageListView.IconAlignment &&                  mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)              {                  ContentAlignment alignment = mImageListView.CheckBoxAlignment;                  if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.TopLeft)                      bounds.X += 16 + mImageListView.IconPadding.Width;                  else if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                      bounds.X += 8 + mImageListView.IconPadding.Width / 2;              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetIconBounds,The following statement contains a magic number: if (mImageListView.View == View.Details && mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)                  bounds.X += 16 + 2;              else if (mImageListView.CheckBoxAlignment == mImageListView.IconAlignment &&                  mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)              {                  ContentAlignment alignment = mImageListView.CheckBoxAlignment;                  if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.TopLeft)                      bounds.X += 16 + mImageListView.IconPadding.Width;                  else if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                      bounds.X += 8 + mImageListView.IconPadding.Width / 2;              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetIconBounds,The following statement contains a magic number: if (mImageListView.View == View.Details && mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)                  bounds.X += 16 + 2;              else if (mImageListView.CheckBoxAlignment == mImageListView.IconAlignment &&                  mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)              {                  ContentAlignment alignment = mImageListView.CheckBoxAlignment;                  if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.TopLeft)                      bounds.X += 16 + mImageListView.IconPadding.Width;                  else if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                      bounds.X += 8 + mImageListView.IconPadding.Width / 2;              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetIconBounds,The following statement contains a magic number: if (mImageListView.View == View.Details && mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)                  bounds.X += 16 + 2;              else if (mImageListView.CheckBoxAlignment == mImageListView.IconAlignment &&                  mImageListView.ShowCheckBoxes && mImageListView.ShowFileIcons)              {                  ContentAlignment alignment = mImageListView.CheckBoxAlignment;                  if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.TopLeft)                      bounds.X += 16 + mImageListView.IconPadding.Width;                  else if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                      bounds.X += 8 + mImageListView.IconPadding.Width / 2;              }
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The following statement contains a magic number: if (mImageListView.View == View.Details)                  bounds.Inflate(-2' -2);              else                  bounds.Inflate(-padding.Width' -padding.Height);
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The following statement contains a magic number: if (mImageListView.View == View.Details)                  bounds.Inflate(-2' -2);              else                  bounds.Inflate(-padding.Width' -padding.Height);
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The following statement contains a magic number: if (mImageListView.View == View.Details)                  x = bounds.Left;              else if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.TopLeft)                  x = bounds.Left;              else if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                  x = bounds.Left + bounds.Width / 2 - size.Width / 2;              else // if (alignment == ContentAlignment.BottomRight || alignment == ContentAlignment.MiddleRight || alignment == ContentAlignment.TopRight)                  x = bounds.Right - size.Width;
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The following statement contains a magic number: if (mImageListView.View == View.Details)                  x = bounds.Left;              else if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.TopLeft)                  x = bounds.Left;              else if (alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.TopCenter)                  x = bounds.Left + bounds.Width / 2 - size.Width / 2;              else // if (alignment == ContentAlignment.BottomRight || alignment == ContentAlignment.MiddleRight || alignment == ContentAlignment.TopRight)                  x = bounds.Right - size.Width;
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The following statement contains a magic number: if (mImageListView.View == View.Details)                  y = bounds.Top + bounds.Height / 2 - size.Height / 2;              else if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.BottomRight)                  y = bounds.Bottom - size.Height;              else if (alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.MiddleRight)                  y = bounds.Top + bounds.Height / 2 - size.Height / 2;              else // if (alignment == ContentAlignment.TopLeft || alignment == ContentAlignment.TopCenter || alignment == ContentAlignment.TopRight)                  y = bounds.Top;
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The following statement contains a magic number: if (mImageListView.View == View.Details)                  y = bounds.Top + bounds.Height / 2 - size.Height / 2;              else if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.BottomRight)                  y = bounds.Bottom - size.Height;              else if (alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.MiddleRight)                  y = bounds.Top + bounds.Height / 2 - size.Height / 2;              else // if (alignment == ContentAlignment.TopLeft || alignment == ContentAlignment.TopCenter || alignment == ContentAlignment.TopRight)                  y = bounds.Top;
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The following statement contains a magic number: if (mImageListView.View == View.Details)                  y = bounds.Top + bounds.Height / 2 - size.Height / 2;              else if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.BottomRight)                  y = bounds.Bottom - size.Height;              else if (alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.MiddleRight)                  y = bounds.Top + bounds.Height / 2 - size.Height / 2;              else // if (alignment == ContentAlignment.TopLeft || alignment == ContentAlignment.TopCenter || alignment == ContentAlignment.TopRight)                  y = bounds.Top;
Magic Number,ImageGlass.ImageListView,ImageListViewLayoutManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewLayoutManager.cs,GetWidgetBounds,The following statement contains a magic number: if (mImageListView.View == View.Details)                  y = bounds.Top + bounds.Height / 2 - size.Height / 2;              else if (alignment == ContentAlignment.BottomLeft || alignment == ContentAlignment.BottomCenter || alignment == ContentAlignment.BottomRight)                  y = bounds.Bottom - size.Height;              else if (alignment == ContentAlignment.MiddleLeft || alignment == ContentAlignment.MiddleCenter || alignment == ContentAlignment.MiddleRight)                  y = bounds.Top + bounds.Height / 2 - size.Height / 2;              else // if (alignment == ContentAlignment.TopLeft || alignment == ContentAlignment.TopCenter || alignment == ContentAlignment.TopRight)                  y = bounds.Top;
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderGroupHeaders,The following statement contains a magic number: foreach (ImageListViewGroup group in ImageListView.groups.GetDisplayedGroups())                  {                      if (Clip)                      {                          Rectangle clip = Rectangle.Intersect(group.headerBounds' ImageListView.layoutManager.ItemAreaBounds);                          g.SetClip(clip);                      }                      else                          g.SetClip(ImageListView.layoutManager.ClientArea);                        if (ImageListView.View == View.Gallery)                      {                          g.TranslateTransform(group.headerBounds.Left' group.headerBounds.Bottom);                          g.RotateTransform(270);                          DrawGroupHeader(g' group.Name' new Rectangle(0' 0' group.headerBounds.Height' group.headerBounds.Width));                          g.ResetTransform();                      }                      else                          DrawGroupHeader(g' group.Name' group.headerBounds);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderGalleryImage,The following statement contains a magic number: if (item != null && bounds.Width > 4 && bounds.Height > 4)                  {                      image = GetGalleryImageAsync(item' bounds.Size);                      if (image == null) image = item.GetCachedImage(CachedImageType.Thumbnail);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderGalleryImage,The following statement contains a magic number: if (item != null && bounds.Width > 4 && bounds.Height > 4)                  {                      image = GetGalleryImageAsync(item' bounds.Size);                      if (image == null) image = item.GetCachedImage(CachedImageType.Thumbnail);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderPane,The following statement contains a magic number: if (item != null && bounds.Width > 4 && bounds.Height > 4)                  {                      image = GetGalleryImageAsync(item' new Size(bounds.Width' 65535));                      if (image == null) image = item.GetCachedImage(CachedImageType.Thumbnail);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderPane,The following statement contains a magic number: if (item != null && bounds.Width > 4 && bounds.Height > 4)                  {                      image = GetGalleryImageAsync(item' new Size(bounds.Width' 65535));                      if (image == null) image = item.GetCachedImage(CachedImageType.Thumbnail);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderPane,The following statement contains a magic number: if (item != null && bounds.Width > 4 && bounds.Height > 4)                  {                      image = GetGalleryImageAsync(item' new Size(bounds.Width' 65535));                      if (image == null) image = item.GetCachedImage(CachedImageType.Thumbnail);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderInsertionCaret,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(0' ImageListView.layoutManager.ItemSizeWithMargin.Height);                      bounds.Offset(0' -1);                      bounds.Height = 2;                  }                  else                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(ImageListView.layoutManager.ItemSizeWithMargin.Width' 0);                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      bounds.Offset(-(itemMargin.Width - 2) / 2 - 2' 0);                      bounds.Width = 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderInsertionCaret,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(0' ImageListView.layoutManager.ItemSizeWithMargin.Height);                      bounds.Offset(0' -1);                      bounds.Height = 2;                  }                  else                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(ImageListView.layoutManager.ItemSizeWithMargin.Width' 0);                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      bounds.Offset(-(itemMargin.Width - 2) / 2 - 2' 0);                      bounds.Width = 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderInsertionCaret,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(0' ImageListView.layoutManager.ItemSizeWithMargin.Height);                      bounds.Offset(0' -1);                      bounds.Height = 2;                  }                  else                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(ImageListView.layoutManager.ItemSizeWithMargin.Width' 0);                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      bounds.Offset(-(itemMargin.Width - 2) / 2 - 2' 0);                      bounds.Width = 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderInsertionCaret,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(0' ImageListView.layoutManager.ItemSizeWithMargin.Height);                      bounds.Offset(0' -1);                      bounds.Height = 2;                  }                  else                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(ImageListView.layoutManager.ItemSizeWithMargin.Width' 0);                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      bounds.Offset(-(itemMargin.Width - 2) / 2 - 2' 0);                      bounds.Width = 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,RenderInsertionCaret,The following statement contains a magic number: if (ImageListView.View == View.Details)                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(0' ImageListView.layoutManager.ItemSizeWithMargin.Height);                      bounds.Offset(0' -1);                      bounds.Height = 2;                  }                  else                  {                      if (ImageListView.navigationManager.DropToRight)                          bounds.Offset(ImageListView.layoutManager.ItemSizeWithMargin.Width' 0);                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      bounds.Offset(-(itemMargin.Width - 2) / 2 - 2' 0);                      bounds.Width = 2;                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureGroupHeaderHeight,The following statement contains a magic number: if (ImageListView.disposed || ImageListView.GroupHeaderFont == null)                      return 24;                  else                      return System.Math.Max(ImageListView.GroupHeaderFont.Height + 8' 24);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureGroupHeaderHeight,The following statement contains a magic number: if (ImageListView.disposed || ImageListView.GroupHeaderFont == null)                      return 24;                  else                      return System.Math.Max(ImageListView.GroupHeaderFont.Height + 8' 24);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureGroupHeaderHeight,The following statement contains a magic number: if (ImageListView.disposed || ImageListView.GroupHeaderFont == null)                      return 24;                  else                      return System.Math.Max(ImageListView.GroupHeaderFont.Height + 8' 24);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureColumnHeaderHeight,The following statement contains a magic number: if (ImageListView.disposed || ImageListView.ColumnHeaderFont == null)                      return 24;                  else                      return System.Math.Max(ImageListView.ColumnHeaderFont.Height + 4' 24);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureColumnHeaderHeight,The following statement contains a magic number: if (ImageListView.disposed || ImageListView.ColumnHeaderFont == null)                      return 24;                  else                      return System.Math.Max(ImageListView.ColumnHeaderFont.Height + 4' 24);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureColumnHeaderHeight,The following statement contains a magic number: if (ImageListView.disposed || ImageListView.ColumnHeaderFont == null)                      return 24;                  else                      return System.Math.Max(ImageListView.ColumnHeaderFont.Height + 4' 24);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItemMargin,The following statement contains a magic number: if (view == View.Details)                      return new Size(2' 0);                  else                      return new Size(4' 4);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItemMargin,The following statement contains a magic number: if (view == View.Details)                      return new Size(2' 0);                  else                      return new Size(4' 4);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItemMargin,The following statement contains a magic number: if (view == View.Details)                      return new Size(2' 0);                  else                      return new Size(4' 4);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                  {                      // Calculate total column width                      int colWidth = 0;                      foreach (ImageListViewColumnHeader column in ImageListView.Columns)                          if (column.Visible) colWidth += column.Width;                        itemSize = new Size(colWidth' textHeight + 2 * textHeight / 6); // textHeight / 6 = vertical space between item border and text                  }                  else                  {                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3); // textHeight / 3 = vertical space between thumbnail and text                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                  {                      // Calculate total column width                      int colWidth = 0;                      foreach (ImageListViewColumnHeader column in ImageListView.Columns)                          if (column.Visible) colWidth += column.Width;                        itemSize = new Size(colWidth' textHeight + 2 * textHeight / 6); // textHeight / 6 = vertical space between item border and text                  }                  else                  {                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3); // textHeight / 3 = vertical space between thumbnail and text                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                  {                      // Calculate total column width                      int colWidth = 0;                      foreach (ImageListViewColumnHeader column in ImageListView.Columns)                          if (column.Visible) colWidth += column.Width;                        itemSize = new Size(colWidth' textHeight + 2 * textHeight / 6); // textHeight / 6 = vertical space between item border and text                  }                  else                  {                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3); // textHeight / 3 = vertical space between thumbnail and text                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                  {                      // Calculate total column width                      int colWidth = 0;                      foreach (ImageListViewColumnHeader column in ImageListView.Columns)                          if (column.Visible) colWidth += column.Width;                        itemSize = new Size(colWidth' textHeight + 2 * textHeight / 6); // textHeight / 6 = vertical space between item border and text                  }                  else                  {                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3); // textHeight / 3 = vertical space between thumbnail and text                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                  {                      // Calculate total column width                      int colWidth = 0;                      foreach (ImageListViewColumnHeader column in ImageListView.Columns)                          if (column.Visible) colWidth += column.Width;                        itemSize = new Size(colWidth' textHeight + 2 * textHeight / 6); // textHeight / 6 = vertical space between item border and text                  }                  else                  {                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3); // textHeight / 3 = vertical space between thumbnail and text                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,MeasureItem,The following statement contains a magic number: if (view == View.Details)                  {                      // Calculate total column width                      int colWidth = 0;                      foreach (ImageListViewColumnHeader column in ImageListView.Columns)                          if (column.Visible) colWidth += column.Width;                        itemSize = new Size(colWidth' textHeight + 2 * textHeight / 6); // textHeight / 6 = vertical space between item border and text                  }                  else                  {                      Size itemPadding = new Size(4' 4);                      itemSize = ImageListView.ThumbnailSize + itemPadding + itemPadding;                      itemSize.Height += textHeight + System.Math.Max(4' textHeight / 3); // textHeight / 3 = vertical space between thumbnail and text                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawBackground,The following statement contains a magic number: if (ImageListView.BackgroundImage != null)                  {                      Image img = ImageListView.BackgroundImage;                        if (ImageListView.BackgroundImageLayout == ImageLayout.None)                      {                          g.DrawImageUnscaled(img' ImageListView.layoutManager.ItemAreaBounds.Location);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Center)                      {                          int x = bounds.Left + (bounds.Width - img.Width) / 2;                          int y = bounds.Top + (bounds.Height - img.Height) / 2;                          g.DrawImageUnscaled(img' x' y);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Stretch)                      {                          g.DrawImage(img' bounds);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Tile)                      {                          using (Brush imgBrush = new TextureBrush(img' WrapMode.Tile))                          {                              g.FillRectangle(imgBrush' bounds);                          }                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Zoom)                      {                          float xscale = (float)bounds.Width / (float)img.Width;                          float yscale = (float)bounds.Height / (float)img.Height;                          float scale = Math.Min(xscale' yscale);                          int width = (int)(((float)img.Width) * scale);                          int height = (int)(((float)img.Height) * scale);                          int x = bounds.Left + (bounds.Width - width) / 2;                          int y = bounds.Top + (bounds.Height - height) / 2;                          g.DrawImage(img' x' y' width' height);                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawBackground,The following statement contains a magic number: if (ImageListView.BackgroundImage != null)                  {                      Image img = ImageListView.BackgroundImage;                        if (ImageListView.BackgroundImageLayout == ImageLayout.None)                      {                          g.DrawImageUnscaled(img' ImageListView.layoutManager.ItemAreaBounds.Location);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Center)                      {                          int x = bounds.Left + (bounds.Width - img.Width) / 2;                          int y = bounds.Top + (bounds.Height - img.Height) / 2;                          g.DrawImageUnscaled(img' x' y);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Stretch)                      {                          g.DrawImage(img' bounds);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Tile)                      {                          using (Brush imgBrush = new TextureBrush(img' WrapMode.Tile))                          {                              g.FillRectangle(imgBrush' bounds);                          }                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Zoom)                      {                          float xscale = (float)bounds.Width / (float)img.Width;                          float yscale = (float)bounds.Height / (float)img.Height;                          float scale = Math.Min(xscale' yscale);                          int width = (int)(((float)img.Width) * scale);                          int height = (int)(((float)img.Height) * scale);                          int x = bounds.Left + (bounds.Width - width) / 2;                          int y = bounds.Top + (bounds.Height - height) / 2;                          g.DrawImage(img' x' y' width' height);                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawBackground,The following statement contains a magic number: if (ImageListView.BackgroundImage != null)                  {                      Image img = ImageListView.BackgroundImage;                        if (ImageListView.BackgroundImageLayout == ImageLayout.None)                      {                          g.DrawImageUnscaled(img' ImageListView.layoutManager.ItemAreaBounds.Location);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Center)                      {                          int x = bounds.Left + (bounds.Width - img.Width) / 2;                          int y = bounds.Top + (bounds.Height - img.Height) / 2;                          g.DrawImageUnscaled(img' x' y);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Stretch)                      {                          g.DrawImage(img' bounds);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Tile)                      {                          using (Brush imgBrush = new TextureBrush(img' WrapMode.Tile))                          {                              g.FillRectangle(imgBrush' bounds);                          }                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Zoom)                      {                          float xscale = (float)bounds.Width / (float)img.Width;                          float yscale = (float)bounds.Height / (float)img.Height;                          float scale = Math.Min(xscale' yscale);                          int width = (int)(((float)img.Width) * scale);                          int height = (int)(((float)img.Height) * scale);                          int x = bounds.Left + (bounds.Width - width) / 2;                          int y = bounds.Top + (bounds.Height - height) / 2;                          g.DrawImage(img' x' y' width' height);                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawBackground,The following statement contains a magic number: if (ImageListView.BackgroundImage != null)                  {                      Image img = ImageListView.BackgroundImage;                        if (ImageListView.BackgroundImageLayout == ImageLayout.None)                      {                          g.DrawImageUnscaled(img' ImageListView.layoutManager.ItemAreaBounds.Location);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Center)                      {                          int x = bounds.Left + (bounds.Width - img.Width) / 2;                          int y = bounds.Top + (bounds.Height - img.Height) / 2;                          g.DrawImageUnscaled(img' x' y);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Stretch)                      {                          g.DrawImage(img' bounds);                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Tile)                      {                          using (Brush imgBrush = new TextureBrush(img' WrapMode.Tile))                          {                              g.FillRectangle(imgBrush' bounds);                          }                      }                      else if (ImageListView.BackgroundImageLayout == ImageLayout.Zoom)                      {                          float xscale = (float)bounds.Width / (float)img.Width;                          float yscale = (float)bounds.Height / (float)img.Height;                          float scale = Math.Min(xscale' yscale);                          int width = (int)(((float)img.Width) * scale);                          int height = (int)(((float)img.Height) * scale);                          int x = bounds.Left + (bounds.Width - width) / 2;                          int y = bounds.Top + (bounds.Height - height) / 2;                          g.DrawImage(img' x' y' width' height);                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: Size itemPadding = new Size(4' 4);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: Size itemPadding = new Size(4' 4);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: bool alternate = (item.Index % 2 == 1);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if ((state & ItemState.Disabled) != ItemState.None)                  {                      using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bDisabled' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background Selected                  else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                      (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                  {                      using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bSelected' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background unfocused                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bGray64' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if ((state & ItemState.Disabled) != ItemState.None)                  {                      using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bDisabled' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background Selected                  else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                      (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                  {                      using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bSelected' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background unfocused                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bGray64' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if ((state & ItemState.Disabled) != ItemState.None)                  {                      using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bDisabled' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background Selected                  else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                      (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                  {                      using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bSelected' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background unfocused                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bGray64' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if ((state & ItemState.Disabled) != ItemState.None)                  {                      using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bDisabled' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background Selected                  else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                      (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                  {                      using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bSelected' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background unfocused                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bGray64' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if ((state & ItemState.Disabled) != ItemState.None)                  {                      using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bDisabled' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background Selected                  else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                      (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                  {                      using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bSelected' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background unfocused                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bGray64' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if ((state & ItemState.Disabled) != ItemState.None)                  {                      using (Brush bDisabled = new LinearGradientBrush(bounds' ImageListView.Colors.DisabledColor1' ImageListView.Colors.DisabledColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bDisabled' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background Selected                  else if ((ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None)) ||                      (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None) && ((state & ItemState.Hovered) != ItemState.None)))                  {                      using (Brush bSelected = new LinearGradientBrush(bounds' ImageListView.Colors.SelectedColor1' ImageListView.Colors.SelectedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bSelected' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                    // Paint background unfocused                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Brush bGray64 = new LinearGradientBrush(bounds' ImageListView.Colors.UnFocusedColor1' ImageListView.Colors.UnFocusedColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bGray64' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if ((state & ItemState.Hovered) != ItemState.None)                  {                      using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bHovered' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if ((state & ItemState.Hovered) != ItemState.None)                  {                      using (Brush bHovered = new LinearGradientBrush(bounds' ImageListView.Colors.HoverColor1' ImageListView.Colors.HoverColor2' LinearGradientMode.Vertical))                      {                          Utility.FillRoundedRectangle(g' bHovered' bounds' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      // Draw the image                      Image img = item.GetCachedImage(CachedImageType.Thumbnail);                      if (img != null)                      {                          Rectangle pos = Utility.GetSizedImageBounds(img' new Rectangle(bounds.Location + itemPadding' ImageListView.ThumbnailSize));                          g.DrawImage(img' pos);                          // Draw image border                          if (Math.Min(pos.Width' pos.Height) > 32)                          {                              using (Pen pOuterBorder = new Pen(ImageListView.Colors.ImageOuterBorderColor))                              {                                  g.DrawRectangle(pOuterBorder' pos);                              }                              if (System.Math.Min(ImageListView.ThumbnailSize.Width' ImageListView.ThumbnailSize.Height) > 32)                              {                                  using (Pen pInnerBorder = new Pen(ImageListView.Colors.ImageInnerBorderColor))                                  {                                      g.DrawRectangle(pInnerBorder' Rectangle.Inflate(pos' -1' -1));                                  }                              }                          }                      }                        // Draw item text                      Color foreColor = ImageListView.Colors.ForeColor;                      if ((state & ItemState.Disabled) != ItemState.None)                      {                          foreColor = ImageListView.Colors.DisabledForeColor;                      }                      else if ((state & ItemState.Selected) != ItemState.None)                      {                          if (ImageListView.Focused)                              foreColor = ImageListView.Colors.SelectedForeColor;                          else                              foreColor = ImageListView.Colors.UnFocusedForeColor;                      }                      Size szt = TextRenderer.MeasureText(item.Text' ImageListView.Font);                      Rectangle rt = new Rectangle(bounds.Left + itemPadding.Width' bounds.Top + 2 * itemPadding.Height + ImageListView.ThumbnailSize.Height' ImageListView.ThumbnailSize.Width' szt.Height);                      TextRenderer.DrawText(g' item.Text' ImageListView.Font' rt' foreColor'                          TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine);                  }                  else // if (ImageListView.View == View.Details)                  {                      List<ImageListViewColumnHeader> uicolumns = ImageListView.Columns.GetDisplayedColumns();                        // Shade sort column                      int x = bounds.Left - 1;                      foreach (ImageListViewColumnHeader column in uicolumns)                      {                          if (ImageListView.SortOrder != SortOrder.None &&                              ImageListView.SortColumn >= 0 && ImageListView.SortColumn < ImageListView.Columns.Count &&                              (state & ItemState.Hovered) == ItemState.None && (state & ItemState.Selected) == ItemState.None &&                              ImageListView.Columns[ImageListView.SortColumn].Guid == column.Guid)                          {                              Rectangle subItemBounds = bounds;                              subItemBounds.X = x;                              subItemBounds.Width = column.Width;                              using (Brush bGray16 = new SolidBrush(ImageListView.Colors.ColumnSelectColor))                              {                                  g.FillRectangle(bGray16' subItemBounds);                              }                              break;                          }                          x += column.Width;                      }                        // Separators                       if (!ImageListView.GroupsVisible)                      {                          x = bounds.Left - 1;                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              x += column.Width;                              if (!ReferenceEquals(column' uicolumns[uicolumns.Count - 1]))                              {                                  using (Pen pGray32 = new Pen(ImageListView.Colors.ColumnSeparatorColor))                                  {                                      g.DrawLine(pGray32' x' bounds.Top' x' bounds.Bottom);                                  }                              }                          }                      }                        Size offset = new Size(2' (bounds.Height - ImageListView.Font.Height) / 2);                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          // Sub text                          int firstWidth = 0;                          if (uicolumns.Count > 0)                              firstWidth = uicolumns[0].Width;                          RectangleF rt = new RectangleF(bounds.Left + offset.Width' bounds.Top + offset.Height' firstWidth - 2 * offset.Width' bounds.Height - 2 * offset.Height);                          foreach (ImageListViewColumnHeader column in uicolumns)                          {                              rt.Width = column.Width - 2 * offset.Width;                              Color foreColor = ImageListView.Colors.CellForeColor;                              if ((state & ItemState.Disabled) != ItemState.None)                              {                                  foreColor = ImageListView.Colors.DisabledForeColor;                              }                              else if ((state & ItemState.Selected) != ItemState.None)                              {                                  if (ImageListView.Focused)                                      foreColor = ImageListView.Colors.SelectedForeColor;                                  else                                      foreColor = ImageListView.Colors.UnFocusedForeColor;                              }                              else if (alternate)                                  foreColor = ImageListView.Colors.AlternateCellForeColor;                              using (Brush bItemFore = new SolidBrush(foreColor))                              {                                  int iconOffset = 0;                                  if (column.Type == ColumnType.Name)                                  {                                      // Allocate space for checkbox and file icon                                      if (ImageListView.ShowCheckBoxes && ImageListView.ShowFileIcons)                                          iconOffset += 2 * 16 + 3 * 2;                                      else if (ImageListView.ShowCheckBoxes)                                          iconOffset += 16 + 2 * 2;                                      else if (ImageListView.ShowFileIcons)                                          iconOffset += 16 + 2 * 2;                                  }                                  rt.X += iconOffset;                                  rt.Width -= iconOffset;                                  // Rating stars                                  if (column.Type == ColumnType.Rating && ImageListView.RatingImage != null && ImageListView.EmptyRatingImage != null)                                  {                                      int rating = item.GetSimpleRating();                                      if (rating > 0)                                      {                                          int w = ImageListView.RatingImage.Width;                                          int y = (int)(rt.Top + (rt.Height - ImageListView.RatingImage.Height) / 2.0f);                                            for (int i = 1; i <= 5; i++)                                          {                                              if (rating >= i)                                                  g.DrawImage(ImageListView.RatingImage' rt.Left + (i - 1) * w' y);                                              else                                                  g.DrawImage(ImageListView.EmptyRatingImage' rt.Left + (i - 1) * w' y);                                          }                                      }                                  }                                  else if (column.Type == ColumnType.Custom)                                      g.DrawString(item.GetSubItemText(column.Guid)' ImageListView.Font' bItemFore' rt' sf);                                  else                                      g.DrawString(item.GetSubItemText(column.Type)' ImageListView.Font' bItemFore' rt' sf);                                    rt.X -= iconOffset;                              }                              rt.X += column.Width;                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.View != View.Details)                  {                      using (Pen pWhite128 = new Pen(Color.FromArgb(128' ImageListView.Colors.ControlBackColor)))                      {                          Utility.DrawRoundedRectangle(g' pWhite128' bounds.Left + 1' bounds.Top + 1' bounds.Width - 3' bounds.Height - 3' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (((state & ItemState.Disabled) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.View != View.Details && (state & ItemState.Selected) == ItemState.None)                  {                      using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (((state & ItemState.Disabled) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.View != View.Details && (state & ItemState.Selected) == ItemState.None)                  {                      using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (((state & ItemState.Disabled) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.View != View.Details && (state & ItemState.Selected) == ItemState.None)                  {                      using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (((state & ItemState.Disabled) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.View != View.Details && (state & ItemState.Selected) == ItemState.None)                  {                      using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (((state & ItemState.Disabled) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.View != View.Details && (state & ItemState.Selected) == ItemState.None)                  {                      using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (((state & ItemState.Disabled) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.View != View.Details && (state & ItemState.Selected) == ItemState.None)                  {                      using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (((state & ItemState.Disabled) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.View != View.Details && (state & ItemState.Selected) == ItemState.None)                  {                      using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (((state & ItemState.Disabled) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.DisabledBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pHighlight128 = new Pen(ImageListView.Colors.SelectedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (!ImageListView.Focused && ((state & ItemState.Selected) != ItemState.None))                  {                      using (Pen pGray128 = new Pen(ImageListView.Colors.UnFocusedBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray128' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }                  else if (ImageListView.View != View.Details && (state & ItemState.Selected) == ItemState.None)                  {                      using (Pen pGray64 = new Pen(ImageListView.Colors.BorderColor))                      {                          Utility.DrawRoundedRectangle(g' pGray64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                  {                      using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawItem,The following statement contains a magic number: if (ImageListView.Focused && ((state & ItemState.Hovered) != ItemState.None))                  {                      using (Pen pHighlight64 = new Pen(ImageListView.Colors.HoverBorderColor))                      {                          Utility.DrawRoundedRectangle(g' pHighlight64' bounds.Left' bounds.Top' bounds.Width - 1' bounds.Height - 1' (ImageListView.View == View.Details ? 2 : 4));                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawGroupHeader,The following statement contains a magic number: bounds.Inflate(0' -4);
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawGroupHeader,The following statement contains a magic number: if (bounds.Width > 4)                  {                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ColumnHeaderForeColor))                          {                              g.DrawString(name' (ImageListView.GroupHeaderFont == null ? ImageListView.Font : ImageListView.GroupHeaderFont)' bText' bounds' sf);                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pSpep = new Pen(ImageListView.Colors.ColumnHeaderBackColor1))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pSpep' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The following statement contains a magic number: using (Pen pSpep = new Pen(ImageListView.Colors.ColumnHeaderBackColor1))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                      g.DrawLine(pSpep' bounds.Right - 1' bounds.Top + 1' bounds.Right - 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The following statement contains a magic number: int textOffset = 4;
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.SortOrder != SortOrder.None && ((state & ColumnState.SortColumn) != ColumnState.None))                  {                      Image img = null;                      if (ImageListView.SortOrder == SortOrder.Ascending || ImageListView.SortOrder == SortOrder.AscendingNatural)                          img = ImageListViewResources.SortAscending;                      else if (ImageListView.SortOrder == SortOrder.Descending || ImageListView.SortOrder == SortOrder.DescendingNatural)                          img = ImageListViewResources.SortDescending;                      if (img != null)                      {                          g.DrawImageUnscaled(img' bounds.X + 4' bounds.Top + (bounds.Height - img.Height) / 2);                          textOffset += img.Width;                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The following statement contains a magic number: if (ImageListView.SortOrder != SortOrder.None && ((state & ColumnState.SortColumn) != ColumnState.None))                  {                      Image img = null;                      if (ImageListView.SortOrder == SortOrder.Ascending || ImageListView.SortOrder == SortOrder.AscendingNatural)                          img = ImageListViewResources.SortAscending;                      else if (ImageListView.SortOrder == SortOrder.Descending || ImageListView.SortOrder == SortOrder.DescendingNatural)                          img = ImageListViewResources.SortDescending;                      if (img != null)                      {                          g.DrawImageUnscaled(img' bounds.X + 4' bounds.Top + (bounds.Height - img.Height) / 2);                          textOffset += img.Width;                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnHeader,The following statement contains a magic number: if (bounds.Width > 4)                  {                      using (StringFormat sf = new StringFormat())                      {                          sf.FormatFlags = StringFormatFlags.NoWrap;                          sf.Alignment = StringAlignment.Near;                          sf.LineAlignment = StringAlignment.Center;                          sf.Trimming = StringTrimming.EllipsisCharacter;                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ColumnHeaderForeColor))                          {                              g.DrawString(column.Text' (ImageListView.ColumnHeaderFont == null ? ImageListView.Font : ImageListView.ColumnHeaderFont)' bText' bounds' sf);                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(ImageListView.Colors.PaneSeparatorColor))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: using (Brush bBorder = new SolidBrush(ImageListView.Colors.PaneSeparatorColor))                  {                      g.FillRectangle(bBorder' bounds.Right - 2' bounds.Top' 2' bounds.Height);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: bounds.Width -= 2;
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.ImageOuterBorderColor))                          {                              g.DrawRectangle(pGray128' pos);                          }                          using (Pen pWhite128 = new Pen(ImageListView.Colors.ImageInnerBorderColor))                          {                              g.DrawRectangle(pWhite128' Rectangle.Inflate(pos' -1' -1));                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string itemText = item.GetSubItemText(ColumnType.Name);                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ""' itemText' ImageListView.Font' bLabel' bText);                              bounds.Y += 2 * y;                              bounds.Height -= 2 * y;                          }                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bLabel' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                                  using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bLabel' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.ImageOuterBorderColor))                          {                              g.DrawRectangle(pGray128' pos);                          }                          using (Pen pWhite128 = new Pen(ImageListView.Colors.ImageInnerBorderColor))                          {                              g.DrawRectangle(pWhite128' Rectangle.Inflate(pos' -1' -1));                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string itemText = item.GetSubItemText(ColumnType.Name);                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ""' itemText' ImageListView.Font' bLabel' bText);                              bounds.Y += 2 * y;                              bounds.Height -= 2 * y;                          }                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bLabel' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                                  using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bLabel' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.ImageOuterBorderColor))                          {                              g.DrawRectangle(pGray128' pos);                          }                          using (Pen pWhite128 = new Pen(ImageListView.Colors.ImageInnerBorderColor))                          {                              g.DrawRectangle(pWhite128' Rectangle.Inflate(pos' -1' -1));                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string itemText = item.GetSubItemText(ColumnType.Name);                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ""' itemText' ImageListView.Font' bLabel' bText);                              bounds.Y += 2 * y;                              bounds.Height -= 2 * y;                          }                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bLabel' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                                  using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bLabel' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.ImageOuterBorderColor))                          {                              g.DrawRectangle(pGray128' pos);                          }                          using (Pen pWhite128 = new Pen(ImageListView.Colors.ImageInnerBorderColor))                          {                              g.DrawRectangle(pWhite128' Rectangle.Inflate(pos' -1' -1));                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string itemText = item.GetSubItemText(ColumnType.Name);                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ""' itemText' ImageListView.Font' bLabel' bText);                              bounds.Y += 2 * y;                              bounds.Height -= 2 * y;                          }                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bLabel' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                                  using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bLabel' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.ImageOuterBorderColor))                          {                              g.DrawRectangle(pGray128' pos);                          }                          using (Pen pWhite128 = new Pen(ImageListView.Colors.ImageInnerBorderColor))                          {                              g.DrawRectangle(pWhite128' Rectangle.Inflate(pos' -1' -1));                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string itemText = item.GetSubItemText(ColumnType.Name);                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ""' itemText' ImageListView.Font' bLabel' bText);                              bounds.Y += 2 * y;                              bounds.Height -= 2 * y;                          }                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bLabel' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                                  using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bLabel' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.ImageOuterBorderColor))                          {                              g.DrawRectangle(pGray128' pos);                          }                          using (Pen pWhite128 = new Pen(ImageListView.Colors.ImageInnerBorderColor))                          {                              g.DrawRectangle(pWhite128' Rectangle.Inflate(pos' -1' -1));                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string itemText = item.GetSubItemText(ColumnType.Name);                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ""' itemText' ImageListView.Font' bLabel' bText);                              bounds.Y += 2 * y;                              bounds.Height -= 2 * y;                          }                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bLabel' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                                  using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bLabel' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.ImageOuterBorderColor))                          {                              g.DrawRectangle(pGray128' pos);                          }                          using (Pen pWhite128 = new Pen(ImageListView.Colors.ImageInnerBorderColor))                          {                              g.DrawRectangle(pWhite128' Rectangle.Inflate(pos' -1' -1));                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string itemText = item.GetSubItemText(ColumnType.Name);                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ""' itemText' ImageListView.Font' bLabel' bText);                              bounds.Y += 2 * y;                              bounds.Height -= 2 * y;                          }                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bLabel' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                                  using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bLabel' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawPane,The following statement contains a magic number: if (item != null && image != null)                  {                      // Calculate image bounds                      Size itemMargin = MeasureItemMargin(ImageListView.View);                      Rectangle pos = Utility.GetSizedImageBounds(image' new Rectangle(bounds.Location + itemMargin' bounds.Size - itemMargin - itemMargin)' 50.0f' 0.0f);                      // Draw image                      g.DrawImage(image' pos);                      // Draw image border                      if (Math.Min(pos.Width' pos.Height) > 32)                      {                          using (Pen pGray128 = new Pen(ImageListView.Colors.ImageOuterBorderColor))                          {                              g.DrawRectangle(pGray128' pos);                          }                          using (Pen pWhite128 = new Pen(ImageListView.Colors.ImageInnerBorderColor))                          {                              g.DrawRectangle(pWhite128' Rectangle.Inflate(pos' -1' -1));                          }                      }                      bounds.X += itemMargin.Width;                      bounds.Width -= 2 * itemMargin.Width;                      bounds.Y = pos.Height + 16;                      bounds.Height -= pos.Height + 16;                        // Item text                      if (ImageListView.Columns.HasType(ColumnType.Name) && ImageListView.Columns[ColumnType.Name].Visible && bounds.Height > 0)                      {                          string itemText = item.GetSubItemText(ColumnType.Name);                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ""' itemText' ImageListView.Font' bLabel' bText);                              bounds.Y += 2 * y;                              bounds.Height -= 2 * y;                          }                      }                        // File type                      string fileType = item.GetSubItemText(ColumnType.FileType);                      if (ImageListView.Columns.HasType(ColumnType.FileType) && ImageListView.Columns[ColumnType.FileType].Visible && bounds.Height > 0 && !string.IsNullOrEmpty(fileType))                      {                          using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                          using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                          {                              int y = Utility.DrawStringPair(g' bounds' ImageListView.Columns[ColumnType.FileType].Text + ": "'                                  fileType' ImageListView.Font' bLabel' bText);                              bounds.Y += y;                              bounds.Height -= y;                          }                      }                        // Metatada                      foreach (ImageListView.ImageListViewColumnHeader column in ImageListView.Columns)                      {                          if (column.Type == ColumnType.ImageDescription)                          {                              bounds.Y += 8;                              bounds.Height -= 8;                          }                            if (bounds.Height <= 0) break;                            if (column.Visible &&                              column.Type != ColumnType.Custom &&                              column.Type != ColumnType.FileType &&                              column.Type != ColumnType.DateAccessed &&                              column.Type != ColumnType.FileName &&                              column.Type != ColumnType.FilePath &&                              column.Type != ColumnType.Name)                          {                              string caption = column.Text;                              string text = item.GetSubItemText(column.Type);                              if (!string.IsNullOrEmpty(text))                              {                                  using (SolidBrush bLabel = new SolidBrush(ImageListView.Colors.PaneLabelColor))                                  using (SolidBrush bText = new SolidBrush(ImageListView.Colors.ForeColor))                                  {                                      int y = Utility.DrawStringPair(g' bounds' caption + ": "' text'                                          ImageListView.Font' bLabel' bText);                                      bounds.Y += y;                                      bounds.Height -= y;                                  }                              }                          }                      }                  }
Magic Number,ImageGlass.ImageListView,ImageListViewRenderer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewRenderer.cs,DrawColumnExtender,The following statement contains a magic number: using (Pen pSpep = new Pen(ImageListView.Colors.ColumnHeaderBackColor1))                  {                      g.DrawLine(pSpep' bounds.Left + 1' bounds.Top + 1' bounds.Left + 1' bounds.Bottom - 2);                  }
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,ImageListViewNavigationManager,The following statement contains a magic number: scrollTimer.Interval = 100;
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The following statement contains a magic number: if (DraggingSeperator)                  {                      int delta = e.Location.X - lastSeparatorDragLocation.X;                      int colwidth = SelectedSeparator.Width + delta;                      if (colwidth > 16)                          lastSeparatorDragLocation = e.Location;                      else                      {                          lastSeparatorDragLocation = new Point(e.Location.X - colwidth + 16' e.Location.Y);                          colwidth = 16;                      }                      SelectedSeparator.Width = colwidth;                        HoveredItem = null;                      HoveredColumn = SelectedSeparator;                      HoveredSeparator = SelectedSeparator;                      mImageListView.Refresh();                  }                  else if (ResizingPane)                  {                      int delta = e.Location.X - lastPaneResizeLocation.X;                      int width = mImageListView.mPaneWidth + delta;                      if (width > 2)                          lastPaneResizeLocation = e.Location;                      else                      {                          lastPaneResizeLocation = new Point(e.Location.X - width + 2' e.Location.Y);                          width = 2;                      }                      mImageListView.mPaneWidth = width;                        HoveredItem = null;                      HoveredColumn = null;                      HoveredSeparator = null;                      mImageListView.Refresh();                        mImageListView.OnPaneResizing(new PaneResizingEventArgs(width));                  }                  else if (MouseSelecting)                  {                      if (!ShiftKey && !ControlKey)                          mImageListView.SelectedItems.Clear(false);                        // Create the selection rectangle                      Point viewOffset = mImageListView.ViewOffset;                      Point pt1 = new Point(lastMouseDownLocation.X - (viewOffset.X - lastViewOffset.X)'                          lastMouseDownLocation.Y - (viewOffset.Y - lastViewOffset.Y));                      Point pt2 = new Point(e.Location.X' e.Location.Y);                      SelectionRectangle = new Rectangle(Math.Min(pt1.X' pt2.X)' Math.Min(pt1.Y' pt2.Y)' Math.Abs(pt1.X - pt2.X)' Math.Abs(pt1.Y - pt2.Y));                        // Determine which items are highlighted                      highlightedItems.Clear();                      if (mImageListView.showGroups)                      {                          foreach (ImageListViewGroup group in mImageListView.groups)                          {                              List<int> indices = group.ItemIndicesInRectangle(SelectionRectangle' mImageListView.ScrollOrientation' mImageListView.layoutManager.ItemSizeWithMargin);                                foreach (int i in indices)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                      }                      else                      {                          // Normalize to item area coordinates                          pt1 = new Point(SelectionRectangle.Left' SelectionRectangle.Top);                          pt2 = new Point(SelectionRectangle.Right' SelectionRectangle.Bottom);                          Point itemAreaOffset = new Point(-mImageListView.layoutManager.ItemAreaBounds.Left'                              -mImageListView.layoutManager.ItemAreaBounds.Top);                          pt1.Offset(itemAreaOffset);                          pt2.Offset(itemAreaOffset);                            int startRow = (int)Math.Floor((float)(Math.Min(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int endRow = (int)Math.Floor((float)(Math.Max(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int startCol = (int)Math.Floor((float)(Math.Min(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          int endCol = (int)Math.Floor((float)(Math.Max(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              (startRow >= 0 || endRow >= 0))                          {                              for (int i = startCol; i <= endCol; i++)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              (startCol >= 0 || endCol >= 0) && (startRow >= 0 || endRow >= 0) &&                              (startCol <= mImageListView.layoutManager.Cols - 1 || endCol <= mImageListView.layoutManager.Cols - 1))                          {                              startCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' startCol));                              endCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' endCol));                              for (int row = startRow; row <= endRow; row++)                              {                                  for (int col = startCol; col <= endCol; col++)                                  {                                      int i = row * mImageListView.layoutManager.Cols + col;                                      if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                          !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                          mImageListView.Items[i].Enabled)                                          highlightedItems.Add(mImageListView.Items[i]'                                              (ControlKey ? !mImageListView.Items[i].Selected : true));                                  }                              }                          }                      }                        HoveredColumn = null;                      HoveredSeparator = null;                      SelectedSeparator = null;                        mImageListView.Refresh();                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inItemArea && lastMouseDownInItemArea &&                      (LeftButton || RightButton) &&                      ((Math.Abs(e.Location.X - lastMouseDownLocation.X) > SelectionTolerance ||                      Math.Abs(e.Location.Y - lastMouseDownLocation.Y) > SelectionTolerance)))                  {                      if (mImageListView.MultiSelect && !lastMouseDownOverItem && HoveredItem == null)                      {                          // Start mouse selection                          MouseSelecting = true;                          SelectionRectangle = new Rectangle(lastMouseDownLocation' new Size(0' 0));                          mImageListView.Refresh();                      }                      else if (lastMouseDownOverItem && HoveredItem != null && mImageListView.AllowDrag)                      {                          // Start drag&drop                          if (!HoveredItem.Selected)                          {                              mImageListView.SelectedItems.Clear(false);                              HoveredItem.mSelected = true;                              mImageListView.OnSelectionChangedInternal();                              DropTarget = null;                              mImageListView.Refresh(true);                          }                            // Set drag data                          List<string> filenames = new List<string>();                          foreach (ImageListViewItem item in mImageListView.SelectedItems)                          {                              // Get the source image                              string sourceFile = item.Adaptor.GetSourceImage(item.VirtualItemKey);                              if (!string.IsNullOrEmpty(sourceFile))                                  filenames.Add(sourceFile);                          }                          DataObject data = new DataObject(DataFormats.FileDrop' filenames.ToArray());                          DropTarget = null;                          selfDragging = true;                          mImageListView.DoDragDrop(data' DragDropEffects.All);                          selfDragging = false;                            // Since the MouseUp event will be eaten by DoDragDrop we will not receive                          // the MouseUp event. We need to manually update mouse button flags after                          // the drop.                          if ((Control.MouseButtons & MouseButtons.Left) == MouseButtons.None)                              LeftButton = false;                          if ((Control.MouseButtons & MouseButtons.Right) == MouseButtons.None)                              RightButton = false;                      }                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inHeaderArea && lastMouseDownInColumnHeaderArea && lastMouseDownOverSeparator && LeftButton &&                      mImageListView.AllowColumnResize && HoveredSeparator != null)                  {                      // Start dragging a separator                      DraggingSeperator = true;                      SelectedSeparator = HoveredSeparator;                      lastSeparatorDragLocation = e.Location;                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inPaneArea && lastMouseDownInPaneArea && lastMouseDownOverPaneBorder && LeftButton &&                      mImageListView.AllowPaneResize && HoveredPaneBorder != false)                  {                      // Start dragging the pane                      ResizingPane = true;                      lastPaneResizeLocation = e.Location;                  }                  else if (!ReferenceEquals(HoveredItem' oldHoveredItem) ||                      (HoveredSubItem != oldHoveredSubItem) ||                      !ReferenceEquals(HoveredColumn' oldHoveredColumn) ||                      !ReferenceEquals(HoveredSeparator' oldHoveredSeparator))                  {                      // Hovered item changed                      if (!ReferenceEquals(HoveredItem' oldHoveredItem) || (HoveredSubItem != oldHoveredSubItem))                          mImageListView.OnItemHover(new ItemHoverEventArgs(HoveredItem' HoveredSubItem' oldHoveredItem' oldHoveredSubItem));                        if (!ReferenceEquals(HoveredColumn' oldHoveredColumn))                          mImageListView.OnColumnHover(new ColumnHoverEventArgs(HoveredColumn' oldHoveredColumn));                        mImageListView.Refresh();                  }
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The following statement contains a magic number: if (DraggingSeperator)                  {                      int delta = e.Location.X - lastSeparatorDragLocation.X;                      int colwidth = SelectedSeparator.Width + delta;                      if (colwidth > 16)                          lastSeparatorDragLocation = e.Location;                      else                      {                          lastSeparatorDragLocation = new Point(e.Location.X - colwidth + 16' e.Location.Y);                          colwidth = 16;                      }                      SelectedSeparator.Width = colwidth;                        HoveredItem = null;                      HoveredColumn = SelectedSeparator;                      HoveredSeparator = SelectedSeparator;                      mImageListView.Refresh();                  }                  else if (ResizingPane)                  {                      int delta = e.Location.X - lastPaneResizeLocation.X;                      int width = mImageListView.mPaneWidth + delta;                      if (width > 2)                          lastPaneResizeLocation = e.Location;                      else                      {                          lastPaneResizeLocation = new Point(e.Location.X - width + 2' e.Location.Y);                          width = 2;                      }                      mImageListView.mPaneWidth = width;                        HoveredItem = null;                      HoveredColumn = null;                      HoveredSeparator = null;                      mImageListView.Refresh();                        mImageListView.OnPaneResizing(new PaneResizingEventArgs(width));                  }                  else if (MouseSelecting)                  {                      if (!ShiftKey && !ControlKey)                          mImageListView.SelectedItems.Clear(false);                        // Create the selection rectangle                      Point viewOffset = mImageListView.ViewOffset;                      Point pt1 = new Point(lastMouseDownLocation.X - (viewOffset.X - lastViewOffset.X)'                          lastMouseDownLocation.Y - (viewOffset.Y - lastViewOffset.Y));                      Point pt2 = new Point(e.Location.X' e.Location.Y);                      SelectionRectangle = new Rectangle(Math.Min(pt1.X' pt2.X)' Math.Min(pt1.Y' pt2.Y)' Math.Abs(pt1.X - pt2.X)' Math.Abs(pt1.Y - pt2.Y));                        // Determine which items are highlighted                      highlightedItems.Clear();                      if (mImageListView.showGroups)                      {                          foreach (ImageListViewGroup group in mImageListView.groups)                          {                              List<int> indices = group.ItemIndicesInRectangle(SelectionRectangle' mImageListView.ScrollOrientation' mImageListView.layoutManager.ItemSizeWithMargin);                                foreach (int i in indices)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                      }                      else                      {                          // Normalize to item area coordinates                          pt1 = new Point(SelectionRectangle.Left' SelectionRectangle.Top);                          pt2 = new Point(SelectionRectangle.Right' SelectionRectangle.Bottom);                          Point itemAreaOffset = new Point(-mImageListView.layoutManager.ItemAreaBounds.Left'                              -mImageListView.layoutManager.ItemAreaBounds.Top);                          pt1.Offset(itemAreaOffset);                          pt2.Offset(itemAreaOffset);                            int startRow = (int)Math.Floor((float)(Math.Min(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int endRow = (int)Math.Floor((float)(Math.Max(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int startCol = (int)Math.Floor((float)(Math.Min(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          int endCol = (int)Math.Floor((float)(Math.Max(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              (startRow >= 0 || endRow >= 0))                          {                              for (int i = startCol; i <= endCol; i++)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              (startCol >= 0 || endCol >= 0) && (startRow >= 0 || endRow >= 0) &&                              (startCol <= mImageListView.layoutManager.Cols - 1 || endCol <= mImageListView.layoutManager.Cols - 1))                          {                              startCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' startCol));                              endCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' endCol));                              for (int row = startRow; row <= endRow; row++)                              {                                  for (int col = startCol; col <= endCol; col++)                                  {                                      int i = row * mImageListView.layoutManager.Cols + col;                                      if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                          !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                          mImageListView.Items[i].Enabled)                                          highlightedItems.Add(mImageListView.Items[i]'                                              (ControlKey ? !mImageListView.Items[i].Selected : true));                                  }                              }                          }                      }                        HoveredColumn = null;                      HoveredSeparator = null;                      SelectedSeparator = null;                        mImageListView.Refresh();                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inItemArea && lastMouseDownInItemArea &&                      (LeftButton || RightButton) &&                      ((Math.Abs(e.Location.X - lastMouseDownLocation.X) > SelectionTolerance ||                      Math.Abs(e.Location.Y - lastMouseDownLocation.Y) > SelectionTolerance)))                  {                      if (mImageListView.MultiSelect && !lastMouseDownOverItem && HoveredItem == null)                      {                          // Start mouse selection                          MouseSelecting = true;                          SelectionRectangle = new Rectangle(lastMouseDownLocation' new Size(0' 0));                          mImageListView.Refresh();                      }                      else if (lastMouseDownOverItem && HoveredItem != null && mImageListView.AllowDrag)                      {                          // Start drag&drop                          if (!HoveredItem.Selected)                          {                              mImageListView.SelectedItems.Clear(false);                              HoveredItem.mSelected = true;                              mImageListView.OnSelectionChangedInternal();                              DropTarget = null;                              mImageListView.Refresh(true);                          }                            // Set drag data                          List<string> filenames = new List<string>();                          foreach (ImageListViewItem item in mImageListView.SelectedItems)                          {                              // Get the source image                              string sourceFile = item.Adaptor.GetSourceImage(item.VirtualItemKey);                              if (!string.IsNullOrEmpty(sourceFile))                                  filenames.Add(sourceFile);                          }                          DataObject data = new DataObject(DataFormats.FileDrop' filenames.ToArray());                          DropTarget = null;                          selfDragging = true;                          mImageListView.DoDragDrop(data' DragDropEffects.All);                          selfDragging = false;                            // Since the MouseUp event will be eaten by DoDragDrop we will not receive                          // the MouseUp event. We need to manually update mouse button flags after                          // the drop.                          if ((Control.MouseButtons & MouseButtons.Left) == MouseButtons.None)                              LeftButton = false;                          if ((Control.MouseButtons & MouseButtons.Right) == MouseButtons.None)                              RightButton = false;                      }                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inHeaderArea && lastMouseDownInColumnHeaderArea && lastMouseDownOverSeparator && LeftButton &&                      mImageListView.AllowColumnResize && HoveredSeparator != null)                  {                      // Start dragging a separator                      DraggingSeperator = true;                      SelectedSeparator = HoveredSeparator;                      lastSeparatorDragLocation = e.Location;                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inPaneArea && lastMouseDownInPaneArea && lastMouseDownOverPaneBorder && LeftButton &&                      mImageListView.AllowPaneResize && HoveredPaneBorder != false)                  {                      // Start dragging the pane                      ResizingPane = true;                      lastPaneResizeLocation = e.Location;                  }                  else if (!ReferenceEquals(HoveredItem' oldHoveredItem) ||                      (HoveredSubItem != oldHoveredSubItem) ||                      !ReferenceEquals(HoveredColumn' oldHoveredColumn) ||                      !ReferenceEquals(HoveredSeparator' oldHoveredSeparator))                  {                      // Hovered item changed                      if (!ReferenceEquals(HoveredItem' oldHoveredItem) || (HoveredSubItem != oldHoveredSubItem))                          mImageListView.OnItemHover(new ItemHoverEventArgs(HoveredItem' HoveredSubItem' oldHoveredItem' oldHoveredSubItem));                        if (!ReferenceEquals(HoveredColumn' oldHoveredColumn))                          mImageListView.OnColumnHover(new ColumnHoverEventArgs(HoveredColumn' oldHoveredColumn));                        mImageListView.Refresh();                  }
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The following statement contains a magic number: if (DraggingSeperator)                  {                      int delta = e.Location.X - lastSeparatorDragLocation.X;                      int colwidth = SelectedSeparator.Width + delta;                      if (colwidth > 16)                          lastSeparatorDragLocation = e.Location;                      else                      {                          lastSeparatorDragLocation = new Point(e.Location.X - colwidth + 16' e.Location.Y);                          colwidth = 16;                      }                      SelectedSeparator.Width = colwidth;                        HoveredItem = null;                      HoveredColumn = SelectedSeparator;                      HoveredSeparator = SelectedSeparator;                      mImageListView.Refresh();                  }                  else if (ResizingPane)                  {                      int delta = e.Location.X - lastPaneResizeLocation.X;                      int width = mImageListView.mPaneWidth + delta;                      if (width > 2)                          lastPaneResizeLocation = e.Location;                      else                      {                          lastPaneResizeLocation = new Point(e.Location.X - width + 2' e.Location.Y);                          width = 2;                      }                      mImageListView.mPaneWidth = width;                        HoveredItem = null;                      HoveredColumn = null;                      HoveredSeparator = null;                      mImageListView.Refresh();                        mImageListView.OnPaneResizing(new PaneResizingEventArgs(width));                  }                  else if (MouseSelecting)                  {                      if (!ShiftKey && !ControlKey)                          mImageListView.SelectedItems.Clear(false);                        // Create the selection rectangle                      Point viewOffset = mImageListView.ViewOffset;                      Point pt1 = new Point(lastMouseDownLocation.X - (viewOffset.X - lastViewOffset.X)'                          lastMouseDownLocation.Y - (viewOffset.Y - lastViewOffset.Y));                      Point pt2 = new Point(e.Location.X' e.Location.Y);                      SelectionRectangle = new Rectangle(Math.Min(pt1.X' pt2.X)' Math.Min(pt1.Y' pt2.Y)' Math.Abs(pt1.X - pt2.X)' Math.Abs(pt1.Y - pt2.Y));                        // Determine which items are highlighted                      highlightedItems.Clear();                      if (mImageListView.showGroups)                      {                          foreach (ImageListViewGroup group in mImageListView.groups)                          {                              List<int> indices = group.ItemIndicesInRectangle(SelectionRectangle' mImageListView.ScrollOrientation' mImageListView.layoutManager.ItemSizeWithMargin);                                foreach (int i in indices)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                      }                      else                      {                          // Normalize to item area coordinates                          pt1 = new Point(SelectionRectangle.Left' SelectionRectangle.Top);                          pt2 = new Point(SelectionRectangle.Right' SelectionRectangle.Bottom);                          Point itemAreaOffset = new Point(-mImageListView.layoutManager.ItemAreaBounds.Left'                              -mImageListView.layoutManager.ItemAreaBounds.Top);                          pt1.Offset(itemAreaOffset);                          pt2.Offset(itemAreaOffset);                            int startRow = (int)Math.Floor((float)(Math.Min(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int endRow = (int)Math.Floor((float)(Math.Max(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int startCol = (int)Math.Floor((float)(Math.Min(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          int endCol = (int)Math.Floor((float)(Math.Max(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              (startRow >= 0 || endRow >= 0))                          {                              for (int i = startCol; i <= endCol; i++)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              (startCol >= 0 || endCol >= 0) && (startRow >= 0 || endRow >= 0) &&                              (startCol <= mImageListView.layoutManager.Cols - 1 || endCol <= mImageListView.layoutManager.Cols - 1))                          {                              startCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' startCol));                              endCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' endCol));                              for (int row = startRow; row <= endRow; row++)                              {                                  for (int col = startCol; col <= endCol; col++)                                  {                                      int i = row * mImageListView.layoutManager.Cols + col;                                      if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                          !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                          mImageListView.Items[i].Enabled)                                          highlightedItems.Add(mImageListView.Items[i]'                                              (ControlKey ? !mImageListView.Items[i].Selected : true));                                  }                              }                          }                      }                        HoveredColumn = null;                      HoveredSeparator = null;                      SelectedSeparator = null;                        mImageListView.Refresh();                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inItemArea && lastMouseDownInItemArea &&                      (LeftButton || RightButton) &&                      ((Math.Abs(e.Location.X - lastMouseDownLocation.X) > SelectionTolerance ||                      Math.Abs(e.Location.Y - lastMouseDownLocation.Y) > SelectionTolerance)))                  {                      if (mImageListView.MultiSelect && !lastMouseDownOverItem && HoveredItem == null)                      {                          // Start mouse selection                          MouseSelecting = true;                          SelectionRectangle = new Rectangle(lastMouseDownLocation' new Size(0' 0));                          mImageListView.Refresh();                      }                      else if (lastMouseDownOverItem && HoveredItem != null && mImageListView.AllowDrag)                      {                          // Start drag&drop                          if (!HoveredItem.Selected)                          {                              mImageListView.SelectedItems.Clear(false);                              HoveredItem.mSelected = true;                              mImageListView.OnSelectionChangedInternal();                              DropTarget = null;                              mImageListView.Refresh(true);                          }                            // Set drag data                          List<string> filenames = new List<string>();                          foreach (ImageListViewItem item in mImageListView.SelectedItems)                          {                              // Get the source image                              string sourceFile = item.Adaptor.GetSourceImage(item.VirtualItemKey);                              if (!string.IsNullOrEmpty(sourceFile))                                  filenames.Add(sourceFile);                          }                          DataObject data = new DataObject(DataFormats.FileDrop' filenames.ToArray());                          DropTarget = null;                          selfDragging = true;                          mImageListView.DoDragDrop(data' DragDropEffects.All);                          selfDragging = false;                            // Since the MouseUp event will be eaten by DoDragDrop we will not receive                          // the MouseUp event. We need to manually update mouse button flags after                          // the drop.                          if ((Control.MouseButtons & MouseButtons.Left) == MouseButtons.None)                              LeftButton = false;                          if ((Control.MouseButtons & MouseButtons.Right) == MouseButtons.None)                              RightButton = false;                      }                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inHeaderArea && lastMouseDownInColumnHeaderArea && lastMouseDownOverSeparator && LeftButton &&                      mImageListView.AllowColumnResize && HoveredSeparator != null)                  {                      // Start dragging a separator                      DraggingSeperator = true;                      SelectedSeparator = HoveredSeparator;                      lastSeparatorDragLocation = e.Location;                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inPaneArea && lastMouseDownInPaneArea && lastMouseDownOverPaneBorder && LeftButton &&                      mImageListView.AllowPaneResize && HoveredPaneBorder != false)                  {                      // Start dragging the pane                      ResizingPane = true;                      lastPaneResizeLocation = e.Location;                  }                  else if (!ReferenceEquals(HoveredItem' oldHoveredItem) ||                      (HoveredSubItem != oldHoveredSubItem) ||                      !ReferenceEquals(HoveredColumn' oldHoveredColumn) ||                      !ReferenceEquals(HoveredSeparator' oldHoveredSeparator))                  {                      // Hovered item changed                      if (!ReferenceEquals(HoveredItem' oldHoveredItem) || (HoveredSubItem != oldHoveredSubItem))                          mImageListView.OnItemHover(new ItemHoverEventArgs(HoveredItem' HoveredSubItem' oldHoveredItem' oldHoveredSubItem));                        if (!ReferenceEquals(HoveredColumn' oldHoveredColumn))                          mImageListView.OnColumnHover(new ColumnHoverEventArgs(HoveredColumn' oldHoveredColumn));                        mImageListView.Refresh();                  }
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The following statement contains a magic number: if (DraggingSeperator)                  {                      int delta = e.Location.X - lastSeparatorDragLocation.X;                      int colwidth = SelectedSeparator.Width + delta;                      if (colwidth > 16)                          lastSeparatorDragLocation = e.Location;                      else                      {                          lastSeparatorDragLocation = new Point(e.Location.X - colwidth + 16' e.Location.Y);                          colwidth = 16;                      }                      SelectedSeparator.Width = colwidth;                        HoveredItem = null;                      HoveredColumn = SelectedSeparator;                      HoveredSeparator = SelectedSeparator;                      mImageListView.Refresh();                  }                  else if (ResizingPane)                  {                      int delta = e.Location.X - lastPaneResizeLocation.X;                      int width = mImageListView.mPaneWidth + delta;                      if (width > 2)                          lastPaneResizeLocation = e.Location;                      else                      {                          lastPaneResizeLocation = new Point(e.Location.X - width + 2' e.Location.Y);                          width = 2;                      }                      mImageListView.mPaneWidth = width;                        HoveredItem = null;                      HoveredColumn = null;                      HoveredSeparator = null;                      mImageListView.Refresh();                        mImageListView.OnPaneResizing(new PaneResizingEventArgs(width));                  }                  else if (MouseSelecting)                  {                      if (!ShiftKey && !ControlKey)                          mImageListView.SelectedItems.Clear(false);                        // Create the selection rectangle                      Point viewOffset = mImageListView.ViewOffset;                      Point pt1 = new Point(lastMouseDownLocation.X - (viewOffset.X - lastViewOffset.X)'                          lastMouseDownLocation.Y - (viewOffset.Y - lastViewOffset.Y));                      Point pt2 = new Point(e.Location.X' e.Location.Y);                      SelectionRectangle = new Rectangle(Math.Min(pt1.X' pt2.X)' Math.Min(pt1.Y' pt2.Y)' Math.Abs(pt1.X - pt2.X)' Math.Abs(pt1.Y - pt2.Y));                        // Determine which items are highlighted                      highlightedItems.Clear();                      if (mImageListView.showGroups)                      {                          foreach (ImageListViewGroup group in mImageListView.groups)                          {                              List<int> indices = group.ItemIndicesInRectangle(SelectionRectangle' mImageListView.ScrollOrientation' mImageListView.layoutManager.ItemSizeWithMargin);                                foreach (int i in indices)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                      }                      else                      {                          // Normalize to item area coordinates                          pt1 = new Point(SelectionRectangle.Left' SelectionRectangle.Top);                          pt2 = new Point(SelectionRectangle.Right' SelectionRectangle.Bottom);                          Point itemAreaOffset = new Point(-mImageListView.layoutManager.ItemAreaBounds.Left'                              -mImageListView.layoutManager.ItemAreaBounds.Top);                          pt1.Offset(itemAreaOffset);                          pt2.Offset(itemAreaOffset);                            int startRow = (int)Math.Floor((float)(Math.Min(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int endRow = (int)Math.Floor((float)(Math.Max(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int startCol = (int)Math.Floor((float)(Math.Min(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          int endCol = (int)Math.Floor((float)(Math.Max(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              (startRow >= 0 || endRow >= 0))                          {                              for (int i = startCol; i <= endCol; i++)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              (startCol >= 0 || endCol >= 0) && (startRow >= 0 || endRow >= 0) &&                              (startCol <= mImageListView.layoutManager.Cols - 1 || endCol <= mImageListView.layoutManager.Cols - 1))                          {                              startCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' startCol));                              endCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' endCol));                              for (int row = startRow; row <= endRow; row++)                              {                                  for (int col = startCol; col <= endCol; col++)                                  {                                      int i = row * mImageListView.layoutManager.Cols + col;                                      if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                          !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                          mImageListView.Items[i].Enabled)                                          highlightedItems.Add(mImageListView.Items[i]'                                              (ControlKey ? !mImageListView.Items[i].Selected : true));                                  }                              }                          }                      }                        HoveredColumn = null;                      HoveredSeparator = null;                      SelectedSeparator = null;                        mImageListView.Refresh();                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inItemArea && lastMouseDownInItemArea &&                      (LeftButton || RightButton) &&                      ((Math.Abs(e.Location.X - lastMouseDownLocation.X) > SelectionTolerance ||                      Math.Abs(e.Location.Y - lastMouseDownLocation.Y) > SelectionTolerance)))                  {                      if (mImageListView.MultiSelect && !lastMouseDownOverItem && HoveredItem == null)                      {                          // Start mouse selection                          MouseSelecting = true;                          SelectionRectangle = new Rectangle(lastMouseDownLocation' new Size(0' 0));                          mImageListView.Refresh();                      }                      else if (lastMouseDownOverItem && HoveredItem != null && mImageListView.AllowDrag)                      {                          // Start drag&drop                          if (!HoveredItem.Selected)                          {                              mImageListView.SelectedItems.Clear(false);                              HoveredItem.mSelected = true;                              mImageListView.OnSelectionChangedInternal();                              DropTarget = null;                              mImageListView.Refresh(true);                          }                            // Set drag data                          List<string> filenames = new List<string>();                          foreach (ImageListViewItem item in mImageListView.SelectedItems)                          {                              // Get the source image                              string sourceFile = item.Adaptor.GetSourceImage(item.VirtualItemKey);                              if (!string.IsNullOrEmpty(sourceFile))                                  filenames.Add(sourceFile);                          }                          DataObject data = new DataObject(DataFormats.FileDrop' filenames.ToArray());                          DropTarget = null;                          selfDragging = true;                          mImageListView.DoDragDrop(data' DragDropEffects.All);                          selfDragging = false;                            // Since the MouseUp event will be eaten by DoDragDrop we will not receive                          // the MouseUp event. We need to manually update mouse button flags after                          // the drop.                          if ((Control.MouseButtons & MouseButtons.Left) == MouseButtons.None)                              LeftButton = false;                          if ((Control.MouseButtons & MouseButtons.Right) == MouseButtons.None)                              RightButton = false;                      }                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inHeaderArea && lastMouseDownInColumnHeaderArea && lastMouseDownOverSeparator && LeftButton &&                      mImageListView.AllowColumnResize && HoveredSeparator != null)                  {                      // Start dragging a separator                      DraggingSeperator = true;                      SelectedSeparator = HoveredSeparator;                      lastSeparatorDragLocation = e.Location;                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inPaneArea && lastMouseDownInPaneArea && lastMouseDownOverPaneBorder && LeftButton &&                      mImageListView.AllowPaneResize && HoveredPaneBorder != false)                  {                      // Start dragging the pane                      ResizingPane = true;                      lastPaneResizeLocation = e.Location;                  }                  else if (!ReferenceEquals(HoveredItem' oldHoveredItem) ||                      (HoveredSubItem != oldHoveredSubItem) ||                      !ReferenceEquals(HoveredColumn' oldHoveredColumn) ||                      !ReferenceEquals(HoveredSeparator' oldHoveredSeparator))                  {                      // Hovered item changed                      if (!ReferenceEquals(HoveredItem' oldHoveredItem) || (HoveredSubItem != oldHoveredSubItem))                          mImageListView.OnItemHover(new ItemHoverEventArgs(HoveredItem' HoveredSubItem' oldHoveredItem' oldHoveredSubItem));                        if (!ReferenceEquals(HoveredColumn' oldHoveredColumn))                          mImageListView.OnColumnHover(new ColumnHoverEventArgs(HoveredColumn' oldHoveredColumn));                        mImageListView.Refresh();                  }
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The following statement contains a magic number: if (DraggingSeperator)                  {                      int delta = e.Location.X - lastSeparatorDragLocation.X;                      int colwidth = SelectedSeparator.Width + delta;                      if (colwidth > 16)                          lastSeparatorDragLocation = e.Location;                      else                      {                          lastSeparatorDragLocation = new Point(e.Location.X - colwidth + 16' e.Location.Y);                          colwidth = 16;                      }                      SelectedSeparator.Width = colwidth;                        HoveredItem = null;                      HoveredColumn = SelectedSeparator;                      HoveredSeparator = SelectedSeparator;                      mImageListView.Refresh();                  }                  else if (ResizingPane)                  {                      int delta = e.Location.X - lastPaneResizeLocation.X;                      int width = mImageListView.mPaneWidth + delta;                      if (width > 2)                          lastPaneResizeLocation = e.Location;                      else                      {                          lastPaneResizeLocation = new Point(e.Location.X - width + 2' e.Location.Y);                          width = 2;                      }                      mImageListView.mPaneWidth = width;                        HoveredItem = null;                      HoveredColumn = null;                      HoveredSeparator = null;                      mImageListView.Refresh();                        mImageListView.OnPaneResizing(new PaneResizingEventArgs(width));                  }                  else if (MouseSelecting)                  {                      if (!ShiftKey && !ControlKey)                          mImageListView.SelectedItems.Clear(false);                        // Create the selection rectangle                      Point viewOffset = mImageListView.ViewOffset;                      Point pt1 = new Point(lastMouseDownLocation.X - (viewOffset.X - lastViewOffset.X)'                          lastMouseDownLocation.Y - (viewOffset.Y - lastViewOffset.Y));                      Point pt2 = new Point(e.Location.X' e.Location.Y);                      SelectionRectangle = new Rectangle(Math.Min(pt1.X' pt2.X)' Math.Min(pt1.Y' pt2.Y)' Math.Abs(pt1.X - pt2.X)' Math.Abs(pt1.Y - pt2.Y));                        // Determine which items are highlighted                      highlightedItems.Clear();                      if (mImageListView.showGroups)                      {                          foreach (ImageListViewGroup group in mImageListView.groups)                          {                              List<int> indices = group.ItemIndicesInRectangle(SelectionRectangle' mImageListView.ScrollOrientation' mImageListView.layoutManager.ItemSizeWithMargin);                                foreach (int i in indices)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                      }                      else                      {                          // Normalize to item area coordinates                          pt1 = new Point(SelectionRectangle.Left' SelectionRectangle.Top);                          pt2 = new Point(SelectionRectangle.Right' SelectionRectangle.Bottom);                          Point itemAreaOffset = new Point(-mImageListView.layoutManager.ItemAreaBounds.Left'                              -mImageListView.layoutManager.ItemAreaBounds.Top);                          pt1.Offset(itemAreaOffset);                          pt2.Offset(itemAreaOffset);                            int startRow = (int)Math.Floor((float)(Math.Min(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int endRow = (int)Math.Floor((float)(Math.Max(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int startCol = (int)Math.Floor((float)(Math.Min(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          int endCol = (int)Math.Floor((float)(Math.Max(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              (startRow >= 0 || endRow >= 0))                          {                              for (int i = startCol; i <= endCol; i++)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              (startCol >= 0 || endCol >= 0) && (startRow >= 0 || endRow >= 0) &&                              (startCol <= mImageListView.layoutManager.Cols - 1 || endCol <= mImageListView.layoutManager.Cols - 1))                          {                              startCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' startCol));                              endCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' endCol));                              for (int row = startRow; row <= endRow; row++)                              {                                  for (int col = startCol; col <= endCol; col++)                                  {                                      int i = row * mImageListView.layoutManager.Cols + col;                                      if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                          !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                          mImageListView.Items[i].Enabled)                                          highlightedItems.Add(mImageListView.Items[i]'                                              (ControlKey ? !mImageListView.Items[i].Selected : true));                                  }                              }                          }                      }                        HoveredColumn = null;                      HoveredSeparator = null;                      SelectedSeparator = null;                        mImageListView.Refresh();                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inItemArea && lastMouseDownInItemArea &&                      (LeftButton || RightButton) &&                      ((Math.Abs(e.Location.X - lastMouseDownLocation.X) > SelectionTolerance ||                      Math.Abs(e.Location.Y - lastMouseDownLocation.Y) > SelectionTolerance)))                  {                      if (mImageListView.MultiSelect && !lastMouseDownOverItem && HoveredItem == null)                      {                          // Start mouse selection                          MouseSelecting = true;                          SelectionRectangle = new Rectangle(lastMouseDownLocation' new Size(0' 0));                          mImageListView.Refresh();                      }                      else if (lastMouseDownOverItem && HoveredItem != null && mImageListView.AllowDrag)                      {                          // Start drag&drop                          if (!HoveredItem.Selected)                          {                              mImageListView.SelectedItems.Clear(false);                              HoveredItem.mSelected = true;                              mImageListView.OnSelectionChangedInternal();                              DropTarget = null;                              mImageListView.Refresh(true);                          }                            // Set drag data                          List<string> filenames = new List<string>();                          foreach (ImageListViewItem item in mImageListView.SelectedItems)                          {                              // Get the source image                              string sourceFile = item.Adaptor.GetSourceImage(item.VirtualItemKey);                              if (!string.IsNullOrEmpty(sourceFile))                                  filenames.Add(sourceFile);                          }                          DataObject data = new DataObject(DataFormats.FileDrop' filenames.ToArray());                          DropTarget = null;                          selfDragging = true;                          mImageListView.DoDragDrop(data' DragDropEffects.All);                          selfDragging = false;                            // Since the MouseUp event will be eaten by DoDragDrop we will not receive                          // the MouseUp event. We need to manually update mouse button flags after                          // the drop.                          if ((Control.MouseButtons & MouseButtons.Left) == MouseButtons.None)                              LeftButton = false;                          if ((Control.MouseButtons & MouseButtons.Right) == MouseButtons.None)                              RightButton = false;                      }                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inHeaderArea && lastMouseDownInColumnHeaderArea && lastMouseDownOverSeparator && LeftButton &&                      mImageListView.AllowColumnResize && HoveredSeparator != null)                  {                      // Start dragging a separator                      DraggingSeperator = true;                      SelectedSeparator = HoveredSeparator;                      lastSeparatorDragLocation = e.Location;                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inPaneArea && lastMouseDownInPaneArea && lastMouseDownOverPaneBorder && LeftButton &&                      mImageListView.AllowPaneResize && HoveredPaneBorder != false)                  {                      // Start dragging the pane                      ResizingPane = true;                      lastPaneResizeLocation = e.Location;                  }                  else if (!ReferenceEquals(HoveredItem' oldHoveredItem) ||                      (HoveredSubItem != oldHoveredSubItem) ||                      !ReferenceEquals(HoveredColumn' oldHoveredColumn) ||                      !ReferenceEquals(HoveredSeparator' oldHoveredSeparator))                  {                      // Hovered item changed                      if (!ReferenceEquals(HoveredItem' oldHoveredItem) || (HoveredSubItem != oldHoveredSubItem))                          mImageListView.OnItemHover(new ItemHoverEventArgs(HoveredItem' HoveredSubItem' oldHoveredItem' oldHoveredSubItem));                        if (!ReferenceEquals(HoveredColumn' oldHoveredColumn))                          mImageListView.OnColumnHover(new ColumnHoverEventArgs(HoveredColumn' oldHoveredColumn));                        mImageListView.Refresh();                  }
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,MouseMove,The following statement contains a magic number: if (DraggingSeperator)                  {                      int delta = e.Location.X - lastSeparatorDragLocation.X;                      int colwidth = SelectedSeparator.Width + delta;                      if (colwidth > 16)                          lastSeparatorDragLocation = e.Location;                      else                      {                          lastSeparatorDragLocation = new Point(e.Location.X - colwidth + 16' e.Location.Y);                          colwidth = 16;                      }                      SelectedSeparator.Width = colwidth;                        HoveredItem = null;                      HoveredColumn = SelectedSeparator;                      HoveredSeparator = SelectedSeparator;                      mImageListView.Refresh();                  }                  else if (ResizingPane)                  {                      int delta = e.Location.X - lastPaneResizeLocation.X;                      int width = mImageListView.mPaneWidth + delta;                      if (width > 2)                          lastPaneResizeLocation = e.Location;                      else                      {                          lastPaneResizeLocation = new Point(e.Location.X - width + 2' e.Location.Y);                          width = 2;                      }                      mImageListView.mPaneWidth = width;                        HoveredItem = null;                      HoveredColumn = null;                      HoveredSeparator = null;                      mImageListView.Refresh();                        mImageListView.OnPaneResizing(new PaneResizingEventArgs(width));                  }                  else if (MouseSelecting)                  {                      if (!ShiftKey && !ControlKey)                          mImageListView.SelectedItems.Clear(false);                        // Create the selection rectangle                      Point viewOffset = mImageListView.ViewOffset;                      Point pt1 = new Point(lastMouseDownLocation.X - (viewOffset.X - lastViewOffset.X)'                          lastMouseDownLocation.Y - (viewOffset.Y - lastViewOffset.Y));                      Point pt2 = new Point(e.Location.X' e.Location.Y);                      SelectionRectangle = new Rectangle(Math.Min(pt1.X' pt2.X)' Math.Min(pt1.Y' pt2.Y)' Math.Abs(pt1.X - pt2.X)' Math.Abs(pt1.Y - pt2.Y));                        // Determine which items are highlighted                      highlightedItems.Clear();                      if (mImageListView.showGroups)                      {                          foreach (ImageListViewGroup group in mImageListView.groups)                          {                              List<int> indices = group.ItemIndicesInRectangle(SelectionRectangle' mImageListView.ScrollOrientation' mImageListView.layoutManager.ItemSizeWithMargin);                                foreach (int i in indices)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                      }                      else                      {                          // Normalize to item area coordinates                          pt1 = new Point(SelectionRectangle.Left' SelectionRectangle.Top);                          pt2 = new Point(SelectionRectangle.Right' SelectionRectangle.Bottom);                          Point itemAreaOffset = new Point(-mImageListView.layoutManager.ItemAreaBounds.Left'                              -mImageListView.layoutManager.ItemAreaBounds.Top);                          pt1.Offset(itemAreaOffset);                          pt2.Offset(itemAreaOffset);                            int startRow = (int)Math.Floor((float)(Math.Min(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int endRow = (int)Math.Floor((float)(Math.Max(pt1.Y' pt2.Y) + viewOffset.Y) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Height);                          int startCol = (int)Math.Floor((float)(Math.Min(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          int endCol = (int)Math.Floor((float)(Math.Max(pt1.X' pt2.X) + viewOffset.X) /                              (float)mImageListView.layoutManager.ItemSizeWithMargin.Width);                          if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              (startRow >= 0 || endRow >= 0))                          {                              for (int i = startCol; i <= endCol; i++)                              {                                  if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                      !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                      mImageListView.Items[i].Enabled)                                      highlightedItems.Add(mImageListView.Items[i]'                                          (ControlKey ? !mImageListView.Items[i].Selected : true));                              }                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              (startCol >= 0 || endCol >= 0) && (startRow >= 0 || endRow >= 0) &&                              (startCol <= mImageListView.layoutManager.Cols - 1 || endCol <= mImageListView.layoutManager.Cols - 1))                          {                              startCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' startCol));                              endCol = Math.Min(mImageListView.layoutManager.Cols - 1' Math.Max(0' endCol));                              for (int row = startRow; row <= endRow; row++)                              {                                  for (int col = startCol; col <= endCol; col++)                                  {                                      int i = row * mImageListView.layoutManager.Cols + col;                                      if (i >= 0 && i <= mImageListView.Items.Count - 1 &&                                          !highlightedItems.ContainsKey(mImageListView.Items[i]) &&                                          mImageListView.Items[i].Enabled)                                          highlightedItems.Add(mImageListView.Items[i]'                                              (ControlKey ? !mImageListView.Items[i].Selected : true));                                  }                              }                          }                      }                        HoveredColumn = null;                      HoveredSeparator = null;                      SelectedSeparator = null;                        mImageListView.Refresh();                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inItemArea && lastMouseDownInItemArea &&                      (LeftButton || RightButton) &&                      ((Math.Abs(e.Location.X - lastMouseDownLocation.X) > SelectionTolerance ||                      Math.Abs(e.Location.Y - lastMouseDownLocation.Y) > SelectionTolerance)))                  {                      if (mImageListView.MultiSelect && !lastMouseDownOverItem && HoveredItem == null)                      {                          // Start mouse selection                          MouseSelecting = true;                          SelectionRectangle = new Rectangle(lastMouseDownLocation' new Size(0' 0));                          mImageListView.Refresh();                      }                      else if (lastMouseDownOverItem && HoveredItem != null && mImageListView.AllowDrag)                      {                          // Start drag&drop                          if (!HoveredItem.Selected)                          {                              mImageListView.SelectedItems.Clear(false);                              HoveredItem.mSelected = true;                              mImageListView.OnSelectionChangedInternal();                              DropTarget = null;                              mImageListView.Refresh(true);                          }                            // Set drag data                          List<string> filenames = new List<string>();                          foreach (ImageListViewItem item in mImageListView.SelectedItems)                          {                              // Get the source image                              string sourceFile = item.Adaptor.GetSourceImage(item.VirtualItemKey);                              if (!string.IsNullOrEmpty(sourceFile))                                  filenames.Add(sourceFile);                          }                          DataObject data = new DataObject(DataFormats.FileDrop' filenames.ToArray());                          DropTarget = null;                          selfDragging = true;                          mImageListView.DoDragDrop(data' DragDropEffects.All);                          selfDragging = false;                            // Since the MouseUp event will be eaten by DoDragDrop we will not receive                          // the MouseUp event. We need to manually update mouse button flags after                          // the drop.                          if ((Control.MouseButtons & MouseButtons.Left) == MouseButtons.None)                              LeftButton = false;                          if ((Control.MouseButtons & MouseButtons.Right) == MouseButtons.None)                              RightButton = false;                      }                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inHeaderArea && lastMouseDownInColumnHeaderArea && lastMouseDownOverSeparator && LeftButton &&                      mImageListView.AllowColumnResize && HoveredSeparator != null)                  {                      // Start dragging a separator                      DraggingSeperator = true;                      SelectedSeparator = HoveredSeparator;                      lastSeparatorDragLocation = e.Location;                  }                  else if (!MouseSelecting && !DraggingSeperator && !ResizingPane &&                      inPaneArea && lastMouseDownInPaneArea && lastMouseDownOverPaneBorder && LeftButton &&                      mImageListView.AllowPaneResize && HoveredPaneBorder != false)                  {                      // Start dragging the pane                      ResizingPane = true;                      lastPaneResizeLocation = e.Location;                  }                  else if (!ReferenceEquals(HoveredItem' oldHoveredItem) ||                      (HoveredSubItem != oldHoveredSubItem) ||                      !ReferenceEquals(HoveredColumn' oldHoveredColumn) ||                      !ReferenceEquals(HoveredSeparator' oldHoveredSeparator))                  {                      // Hovered item changed                      if (!ReferenceEquals(HoveredItem' oldHoveredItem) || (HoveredSubItem != oldHoveredSubItem))                          mImageListView.OnItemHover(new ItemHoverEventArgs(HoveredItem' HoveredSubItem' oldHoveredItem' oldHoveredSubItem));                        if (!ReferenceEquals(HoveredColumn' oldHoveredColumn))                          mImageListView.OnColumnHover(new ColumnHoverEventArgs(HoveredColumn' oldHoveredColumn));                        mImageListView.Refresh();                  }
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,DragOver,The following statement contains a magic number: if (e.Data.GetDataPresent(DataFormats.FileDrop) &&                      (mImageListView.AllowDrop || (mImageListView.AllowDrag && selfDragging)))                  {                      if (mImageListView.Items.Count == 0)                      {                          if (selfDragging)                              e.Effect = DragDropEffects.None;                          else                              e.Effect = DragDropEffects.Copy;                      }                      else                      {                          // Calculate the location of the insertion cursor                          Point pt = new Point(e.X' e.Y);                          pt = mImageListView.PointToClient(pt);                            // Do we need to scroll the view?                          if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              pt.Y > mImageListView.ClientRectangle.Bottom - 20)                          {                              scrollTimer.Tag = -SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              pt.Y < mImageListView.ClientRectangle.Top + 20)                          {                              scrollTimer.Tag = SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              pt.X > mImageListView.ClientRectangle.Right - 20)                          {                              scrollTimer.Tag = -SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              pt.X < mImageListView.ClientRectangle.Left + 20)                          {                              scrollTimer.Tag = SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else                              scrollTimer.Enabled = false;                            // Normalize to item area coordinates                          pt.X -= mImageListView.layoutManager.ItemAreaBounds.Left;                          pt.Y -= mImageListView.layoutManager.ItemAreaBounds.Top;                            // Row and column mouse is over                          bool dragCaretOnRight = false;                          int index = 0;                            if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll)                          {                              index = (pt.X + mImageListView.ViewOffset.X) / mImageListView.layoutManager.ItemSizeWithMargin.Width;                          }                          else                          {                              int col = pt.X / mImageListView.layoutManager.ItemSizeWithMargin.Width;                              int row = (pt.Y + mImageListView.ViewOffset.Y) / mImageListView.layoutManager.ItemSizeWithMargin.Height;                              if (col > mImageListView.layoutManager.Cols - 1)                              {                                  col = mImageListView.layoutManager.Cols - 1;                                  dragCaretOnRight = true;                              }                              index = row * mImageListView.layoutManager.Cols + col;                          }                            if (index < 0) index = 0;                          if (index > mImageListView.Items.Count - 1)                          {                              index = mImageListView.Items.Count - 1;                              dragCaretOnRight = true;                          }                            ImageListViewItem dragDropTarget = mImageListView.Items[index];                            if (selfDragging && (dragDropTarget.Selected ||                              (!dragCaretOnRight && index > 0 && mImageListView.Items[index - 1].Selected) ||                              (dragCaretOnRight && index < mImageListView.Items.Count - 1 && mImageListView.Items[index + 1].Selected)))                          {                              e.Effect = DragDropEffects.None;                                dragDropTarget = null;                          }                          else if (selfDragging)                              e.Effect = DragDropEffects.Move;                          else                              e.Effect = DragDropEffects.Copy;                            if (!ReferenceEquals(dragDropTarget' DropTarget) || dragCaretOnRight != DropToRight)                          {                              DropTarget = dragDropTarget;                              DropToRight = dragCaretOnRight;                              mImageListView.Refresh(true);                          }                      }                  }                  else                      e.Effect = DragDropEffects.None;
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,DragOver,The following statement contains a magic number: if (e.Data.GetDataPresent(DataFormats.FileDrop) &&                      (mImageListView.AllowDrop || (mImageListView.AllowDrag && selfDragging)))                  {                      if (mImageListView.Items.Count == 0)                      {                          if (selfDragging)                              e.Effect = DragDropEffects.None;                          else                              e.Effect = DragDropEffects.Copy;                      }                      else                      {                          // Calculate the location of the insertion cursor                          Point pt = new Point(e.X' e.Y);                          pt = mImageListView.PointToClient(pt);                            // Do we need to scroll the view?                          if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              pt.Y > mImageListView.ClientRectangle.Bottom - 20)                          {                              scrollTimer.Tag = -SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              pt.Y < mImageListView.ClientRectangle.Top + 20)                          {                              scrollTimer.Tag = SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              pt.X > mImageListView.ClientRectangle.Right - 20)                          {                              scrollTimer.Tag = -SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              pt.X < mImageListView.ClientRectangle.Left + 20)                          {                              scrollTimer.Tag = SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else                              scrollTimer.Enabled = false;                            // Normalize to item area coordinates                          pt.X -= mImageListView.layoutManager.ItemAreaBounds.Left;                          pt.Y -= mImageListView.layoutManager.ItemAreaBounds.Top;                            // Row and column mouse is over                          bool dragCaretOnRight = false;                          int index = 0;                            if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll)                          {                              index = (pt.X + mImageListView.ViewOffset.X) / mImageListView.layoutManager.ItemSizeWithMargin.Width;                          }                          else                          {                              int col = pt.X / mImageListView.layoutManager.ItemSizeWithMargin.Width;                              int row = (pt.Y + mImageListView.ViewOffset.Y) / mImageListView.layoutManager.ItemSizeWithMargin.Height;                              if (col > mImageListView.layoutManager.Cols - 1)                              {                                  col = mImageListView.layoutManager.Cols - 1;                                  dragCaretOnRight = true;                              }                              index = row * mImageListView.layoutManager.Cols + col;                          }                            if (index < 0) index = 0;                          if (index > mImageListView.Items.Count - 1)                          {                              index = mImageListView.Items.Count - 1;                              dragCaretOnRight = true;                          }                            ImageListViewItem dragDropTarget = mImageListView.Items[index];                            if (selfDragging && (dragDropTarget.Selected ||                              (!dragCaretOnRight && index > 0 && mImageListView.Items[index - 1].Selected) ||                              (dragCaretOnRight && index < mImageListView.Items.Count - 1 && mImageListView.Items[index + 1].Selected)))                          {                              e.Effect = DragDropEffects.None;                                dragDropTarget = null;                          }                          else if (selfDragging)                              e.Effect = DragDropEffects.Move;                          else                              e.Effect = DragDropEffects.Copy;                            if (!ReferenceEquals(dragDropTarget' DropTarget) || dragCaretOnRight != DropToRight)                          {                              DropTarget = dragDropTarget;                              DropToRight = dragCaretOnRight;                              mImageListView.Refresh(true);                          }                      }                  }                  else                      e.Effect = DragDropEffects.None;
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,DragOver,The following statement contains a magic number: if (e.Data.GetDataPresent(DataFormats.FileDrop) &&                      (mImageListView.AllowDrop || (mImageListView.AllowDrag && selfDragging)))                  {                      if (mImageListView.Items.Count == 0)                      {                          if (selfDragging)                              e.Effect = DragDropEffects.None;                          else                              e.Effect = DragDropEffects.Copy;                      }                      else                      {                          // Calculate the location of the insertion cursor                          Point pt = new Point(e.X' e.Y);                          pt = mImageListView.PointToClient(pt);                            // Do we need to scroll the view?                          if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              pt.Y > mImageListView.ClientRectangle.Bottom - 20)                          {                              scrollTimer.Tag = -SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              pt.Y < mImageListView.ClientRectangle.Top + 20)                          {                              scrollTimer.Tag = SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              pt.X > mImageListView.ClientRectangle.Right - 20)                          {                              scrollTimer.Tag = -SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              pt.X < mImageListView.ClientRectangle.Left + 20)                          {                              scrollTimer.Tag = SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else                              scrollTimer.Enabled = false;                            // Normalize to item area coordinates                          pt.X -= mImageListView.layoutManager.ItemAreaBounds.Left;                          pt.Y -= mImageListView.layoutManager.ItemAreaBounds.Top;                            // Row and column mouse is over                          bool dragCaretOnRight = false;                          int index = 0;                            if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll)                          {                              index = (pt.X + mImageListView.ViewOffset.X) / mImageListView.layoutManager.ItemSizeWithMargin.Width;                          }                          else                          {                              int col = pt.X / mImageListView.layoutManager.ItemSizeWithMargin.Width;                              int row = (pt.Y + mImageListView.ViewOffset.Y) / mImageListView.layoutManager.ItemSizeWithMargin.Height;                              if (col > mImageListView.layoutManager.Cols - 1)                              {                                  col = mImageListView.layoutManager.Cols - 1;                                  dragCaretOnRight = true;                              }                              index = row * mImageListView.layoutManager.Cols + col;                          }                            if (index < 0) index = 0;                          if (index > mImageListView.Items.Count - 1)                          {                              index = mImageListView.Items.Count - 1;                              dragCaretOnRight = true;                          }                            ImageListViewItem dragDropTarget = mImageListView.Items[index];                            if (selfDragging && (dragDropTarget.Selected ||                              (!dragCaretOnRight && index > 0 && mImageListView.Items[index - 1].Selected) ||                              (dragCaretOnRight && index < mImageListView.Items.Count - 1 && mImageListView.Items[index + 1].Selected)))                          {                              e.Effect = DragDropEffects.None;                                dragDropTarget = null;                          }                          else if (selfDragging)                              e.Effect = DragDropEffects.Move;                          else                              e.Effect = DragDropEffects.Copy;                            if (!ReferenceEquals(dragDropTarget' DropTarget) || dragCaretOnRight != DropToRight)                          {                              DropTarget = dragDropTarget;                              DropToRight = dragCaretOnRight;                              mImageListView.Refresh(true);                          }                      }                  }                  else                      e.Effect = DragDropEffects.None;
Magic Number,ImageGlass.ImageListView,ImageListViewNavigationManager,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewNavigationManager.cs,DragOver,The following statement contains a magic number: if (e.Data.GetDataPresent(DataFormats.FileDrop) &&                      (mImageListView.AllowDrop || (mImageListView.AllowDrag && selfDragging)))                  {                      if (mImageListView.Items.Count == 0)                      {                          if (selfDragging)                              e.Effect = DragDropEffects.None;                          else                              e.Effect = DragDropEffects.Copy;                      }                      else                      {                          // Calculate the location of the insertion cursor                          Point pt = new Point(e.X' e.Y);                          pt = mImageListView.PointToClient(pt);                            // Do we need to scroll the view?                          if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              pt.Y > mImageListView.ClientRectangle.Bottom - 20)                          {                              scrollTimer.Tag = -SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.VerticalScroll &&                              pt.Y < mImageListView.ClientRectangle.Top + 20)                          {                              scrollTimer.Tag = SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              pt.X > mImageListView.ClientRectangle.Right - 20)                          {                              scrollTimer.Tag = -SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll &&                              pt.X < mImageListView.ClientRectangle.Left + 20)                          {                              scrollTimer.Tag = SystemInformation.MouseWheelScrollDelta;                              scrollTimer.Enabled = true;                          }                          else                              scrollTimer.Enabled = false;                            // Normalize to item area coordinates                          pt.X -= mImageListView.layoutManager.ItemAreaBounds.Left;                          pt.Y -= mImageListView.layoutManager.ItemAreaBounds.Top;                            // Row and column mouse is over                          bool dragCaretOnRight = false;                          int index = 0;                            if (mImageListView.ScrollOrientation == ScrollOrientation.HorizontalScroll)                          {                              index = (pt.X + mImageListView.ViewOffset.X) / mImageListView.layoutManager.ItemSizeWithMargin.Width;                          }                          else                          {                              int col = pt.X / mImageListView.layoutManager.ItemSizeWithMargin.Width;                              int row = (pt.Y + mImageListView.ViewOffset.Y) / mImageListView.layoutManager.ItemSizeWithMargin.Height;                              if (col > mImageListView.layoutManager.Cols - 1)                              {                                  col = mImageListView.layoutManager.Cols - 1;                                  dragCaretOnRight = true;                              }                              index = row * mImageListView.layoutManager.Cols + col;                          }                            if (index < 0) index = 0;                          if (index > mImageListView.Items.Count - 1)                          {                              index = mImageListView.Items.Count - 1;                              dragCaretOnRight = true;                          }                            ImageListViewItem dragDropTarget = mImageListView.Items[index];                            if (selfDragging && (dragDropTarget.Selected ||                              (!dragCaretOnRight && index > 0 && mImageListView.Items[index - 1].Selected) ||                              (dragCaretOnRight && index < mImageListView.Items.Count - 1 && mImageListView.Items[index + 1].Selected)))                          {                              e.Effect = DragDropEffects.None;                                dragDropTarget = null;                          }                          else if (selfDragging)                              e.Effect = DragDropEffects.Move;                          else                              e.Effect = DragDropEffects.Copy;                            if (!ReferenceEquals(dragDropTarget' DropTarget) || dragCaretOnRight != DropToRight)                          {                              DropTarget = dragDropTarget;                              DropToRight = dragCaretOnRight;                              mImageListView.Refresh(true);                          }                      }                  }                  else                      e.Effect = DragDropEffects.None;
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetThumbnailBmp,The following statement contains a magic number: try              {                  double scale;                  if (rotate % 180 != 0)                  {                      scale = Math.Min(size.Height / (double)image.Width'                          size.Width / (double)image.Height);                  }                  else                  {                      scale = Math.Min(size.Width / (double)image.Width'                          size.Height / (double)image.Height);                  }                    thumb = ScaleDownRotateBitmap(image' scale' rotate);              }              catch              {                  if (thumb != null)                      thumb.Dispose();                  thumb = null;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetThumbnailBmp,The following statement contains a magic number: try              {                  double scale;                  if (rotate % 180 != 0)                  {                      scale = Math.Min(size.Height / (double)source.Width'                          size.Width / (double)source.Height);                  }                  else                  {                      scale = Math.Min(size.Width / (double)source.Width'                          size.Height / (double)source.Height);                  }                    thumb = ScaleDownRotateBitmap(source' scale' rotate);              }              catch              {                  if (thumb != null)                      thumb.Dispose();                  thumb = null;              }              finally              {                  if (source != null)                      source.Dispose();                  source = null;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: if (data != null)              {                  try                  {                      // read orientation metadata                      object obj = GetMetadataObject(data' WICPathOrientation);                      if (obj == null)                          return 0;                      ushort orientationFlag = (ushort)obj;                      if (orientationFlag == 1)                          return 0;                      else if (orientationFlag == 2)                          return -360;                      else if (orientationFlag == 3)                          return 180;                      else if (orientationFlag == 4)                          return -180;                      else if (orientationFlag == 5)                          return -90;                      else if (orientationFlag == 6)                          return 90;                      else if (orientationFlag == 7)                          return -270;                      else if (orientationFlag == 8)                          return 270;                  }                  catch                  {                      ;                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetThumbnail,The following statement contains a magic number: if (bmp.Thumbnail != null)              {                  try                  {                      BitmapSource sourceWpf = bmp.Thumbnail;                      double scale;                      if (rotate % 180 != 0)                      {                          scale = Math.Min(size.Height / (double)sourceWpf.PixelWidth'                              size.Width / (double)sourceWpf.PixelHeight);                      }                      else                      {                          scale = Math.Min(size.Width / (double)sourceWpf.PixelWidth'                              size.Height / (double)sourceWpf.PixelHeight);                      }                      if (bmp.Decoder == null ||                          (bmp.Decoder.Preview == null && bmp.Decoder.Frames == null) ||                          useEmbeddedThumbnails == UseEmbeddedThumbnails.Always)                      {                          // Take the thumbnail if nothing else is available or if ALWAYS                          thumb = ConvertToBitmap(ScaleDownRotateBitmap(sourceWpf' scale' rotate));                      }                      else if (useEmbeddedThumbnails == UseEmbeddedThumbnails.Auto)                      {                          // Check that the embedded thumbnail is large enough.                          if ((float)scale <= 1.0f)                          {                              thumb = ConvertToBitmap(ScaleDownRotateBitmap(sourceWpf' scale' rotate));                          }                      }                  }                  catch                  {                      if (thumb != null)                      {                          thumb.Dispose();                          thumb = null;                      }                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetThumbnail,The following statement contains a magic number: if (bmp.Decoder != null &&                  bmp.Decoder.Preview != null &&                  thumb == null)              {                  try                  {                      BitmapSource sourceWpf = bmp.Decoder.Preview;                      double scale;                      if (rotate % 180 != 0)                      {                          scale = Math.Min(size.Height / (double)sourceWpf.PixelWidth'                              size.Width / (double)sourceWpf.PixelHeight);                      }                      else                      {                          scale = Math.Min(size.Width / (double)sourceWpf.PixelWidth'                              size.Height / (double)sourceWpf.PixelHeight);                      }                      if (bmp.Decoder.Frames == null ||                          useEmbeddedThumbnails == UseEmbeddedThumbnails.Always)                      {                          // Take the thumbnail if nothing else is available or if ALWAYS                          thumb = ConvertToBitmap(ScaleDownRotateBitmap(sourceWpf' scale' rotate));                      }                      else if (useEmbeddedThumbnails == UseEmbeddedThumbnails.Auto)                      {                          // Check that the embedded thumbnail is large enough.                          if ((float)scale <= 1.0f)                          {                              thumb = ConvertToBitmap(ScaleDownRotateBitmap(sourceWpf' scale' rotate));                          }                      }                  }                  catch                  {                      if (thumb != null)                      {                          thumb.Dispose();                          thumb = null;                      }                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetThumbnail,The following statement contains a magic number: if (bmp.Decoder != null &&                  bmp.Decoder.Frames != null &&                  thumb == null)              {                  try                  {                      BitmapSource sourceWpf = bmp.Decoder.Frames[0];                      double scale;                      if (rotate % 180 != 0)                      {                          scale = Math.Min(size.Height / (double)sourceWpf.PixelWidth'                              size.Width / (double)sourceWpf.PixelHeight);                      }                      else                      {                          scale = Math.Min(size.Width / (double)sourceWpf.PixelWidth'                              size.Height / (double)sourceWpf.PixelHeight);                      }                      thumb = ConvertToBitmap(ScaleDownRotateBitmap(sourceWpf' scale' rotate));                  }                  catch                  {                      if (thumb != null)                      {                          thumb.Dispose();                          thumb = null;                      }                  }              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: if (angle % 90 != 0)              {                  throw new ArgumentException("Rotation angle should be a multiple of 90 degrees."' "angle");              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: if (Math.Abs(angle) % 360 != 0)                  transform.Children.Add(new RotateTransform(Math.Abs(angle)));
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetRotation,The following statement contains a magic number: try              {                  foreach (PropertyItem prop in img.PropertyItems)                  {                      if (prop.Id == TagOrientation)                      {                          ushort orientationFlag = BitConverter.ToUInt16(prop.Value' 0);                          if (orientationFlag == 1)                              return 0;                          else if (orientationFlag == 2)                              return -360;                          else if (orientationFlag == 3)                              return 180;                          else if (orientationFlag == 4)                              return -180;                          else if (orientationFlag == 5)                              return -90;                          else if (orientationFlag == 6)                              return 90;                          else if (orientationFlag == 7)                              return -270;                          else if (orientationFlag == 8)                              return 270;                      }                  }              }              catch              {                  ;              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: if (angle % 90 != 0)              {                  throw new ArgumentException("Rotation angle should be a multiple of 90 degrees."' "angle");              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: int thumbWidth = Math.Abs(angle) % 180 == 0 ? width : height;
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: int thumbHeight = Math.Abs(angle) % 180 == 0 ? height : width;
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(thumb))              {                  g.PixelOffsetMode = PixelOffsetMode.None;                  g.InterpolationMode = InterpolationMode.HighQualityBicubic;                  g.Clear(System.Drawing.Color.Transparent);                    g.TranslateTransform(-sourceWidth / 2' -sourceHeight / 2' MatrixOrder.Append);                  if (Math.Abs(angle) % 360 != 0)                      g.RotateTransform(Math.Abs(angle)' MatrixOrder.Append);                  if (angle < 0)                      xScale = -xScale;                  g.ScaleTransform((float)xScale' (float)yScale' MatrixOrder.Append);                  g.TranslateTransform(thumbWidth / 2' thumbHeight / 2' MatrixOrder.Append);                    g.DrawImage(source' 0' 0);              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(thumb))              {                  g.PixelOffsetMode = PixelOffsetMode.None;                  g.InterpolationMode = InterpolationMode.HighQualityBicubic;                  g.Clear(System.Drawing.Color.Transparent);                    g.TranslateTransform(-sourceWidth / 2' -sourceHeight / 2' MatrixOrder.Append);                  if (Math.Abs(angle) % 360 != 0)                      g.RotateTransform(Math.Abs(angle)' MatrixOrder.Append);                  if (angle < 0)                      xScale = -xScale;                  g.ScaleTransform((float)xScale' (float)yScale' MatrixOrder.Append);                  g.TranslateTransform(thumbWidth / 2' thumbHeight / 2' MatrixOrder.Append);                    g.DrawImage(source' 0' 0);              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(thumb))              {                  g.PixelOffsetMode = PixelOffsetMode.None;                  g.InterpolationMode = InterpolationMode.HighQualityBicubic;                  g.Clear(System.Drawing.Color.Transparent);                    g.TranslateTransform(-sourceWidth / 2' -sourceHeight / 2' MatrixOrder.Append);                  if (Math.Abs(angle) % 360 != 0)                      g.RotateTransform(Math.Abs(angle)' MatrixOrder.Append);                  if (angle < 0)                      xScale = -xScale;                  g.ScaleTransform((float)xScale' (float)yScale' MatrixOrder.Append);                  g.TranslateTransform(thumbWidth / 2' thumbHeight / 2' MatrixOrder.Append);                    g.DrawImage(source' 0' 0);              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(thumb))              {                  g.PixelOffsetMode = PixelOffsetMode.None;                  g.InterpolationMode = InterpolationMode.HighQualityBicubic;                  g.Clear(System.Drawing.Color.Transparent);                    g.TranslateTransform(-sourceWidth / 2' -sourceHeight / 2' MatrixOrder.Append);                  if (Math.Abs(angle) % 360 != 0)                      g.RotateTransform(Math.Abs(angle)' MatrixOrder.Append);                  if (angle < 0)                      xScale = -xScale;                  g.ScaleTransform((float)xScale' (float)yScale' MatrixOrder.Append);                  g.TranslateTransform(thumbWidth / 2' thumbHeight / 2' MatrixOrder.Append);                    g.DrawImage(source' 0' 0);              }
Magic Number,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,ScaleDownRotateBitmap,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(thumb))              {                  g.PixelOffsetMode = PixelOffsetMode.None;                  g.InterpolationMode = InterpolationMode.HighQualityBicubic;                  g.Clear(System.Drawing.Color.Transparent);                    g.TranslateTransform(-sourceWidth / 2' -sourceHeight / 2' MatrixOrder.Append);                  if (Math.Abs(angle) % 360 != 0)                      g.RotateTransform(Math.Abs(angle)' MatrixOrder.Append);                  if (angle < 0)                      xScale = -xScale;                  g.ScaleTransform((float)xScale' (float)yScale' MatrixOrder.Append);                  g.TranslateTransform(thumbWidth / 2' thumbHeight / 2' MatrixOrder.Append);                    g.DrawImage(source' 0' 0);              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,FormatSize,The following statement contains a magic number: double mod = 1024;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,FormatSize,The following statement contains a magic number: return string.Format("{0} {1}"' Math.Round(sized' 2)' units[i]);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDate,The following statement contains a magic number: if (secs < 0)              {                  order = 0;                  txt = "Not Yet";              }              else if (secs < 60)              {                  order = 1;                  txt = "Just now";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day)              {                  order = 2;                  txt = "Today";              }              else if (date.Year == now.Year && date.Month == now.Month && date.Day == now.Day - 1)              {                  order = 3;                  txt = "Yesterday";              }              else if (date > weekStart)              {                  order = 4;                  txt = "This week";              }              else if (date > weekStart.AddDays(-7))              {                  order = 5;                  txt = "Last week";              }              else if (date > weekStart.AddDays(-14))              {                  order = 6;                  txt = "Two weeks ago";              }              else if (date > weekStart.AddDays(-21))              {                  order = 7;                  txt = "Three weeks ago";              }              else if (date > monthStart)              {                  order = 8;                  txt = "Earlier this month";              }              else if (date > monthStart.AddMonths(-1))              {                  order = 9;                  txt = "Last month";              }              else if (date > yearStart)              {                  order = 10;                  txt = "Earlier this year";              }              else if (date > yearStart.AddYears(-1))              {                  order = 11;                  txt = "Last year";              }              else              {                  order = 12;                  txt = "Older";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextFileSize,The following statement contains a magic number: if (size < 10 * 1024)              {                  order = 0;                  txt = "< 10 KB";              }              else if (size < 100 * 1024)              {                  order = 1;                  txt = "10 - 100 KB";              }              else if (size < 1024 * 1024)              {                  order = 2;                  txt = "100 KB - 1 MB";              }              else if (size < 10 * 1024 * 1024)              {                  order = 3;                  txt = "1 - 10 MB";              }              else if (size < 100 * 1024 * 1024)              {                  order = 4;                  txt = "10 - 100 MB";              }              else if (size < 1024 * 1024 * 1024)              {                  order = 5;                  txt = "100 MB - 1 GB";              }              else              {                  order = 6;                  txt = "> 1 GB";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GroupTextDimension,The following statement contains a magic number: if (size.Width <= 32 && size.Height <= 32)              {                  order = 0;                  txt = "Icon";              }              else if (size.Width <= 240 && size.Height <= 240)              {                  order = 1;                  txt = "Small";              }              else if (size.Width <= 640 && size.Height <= 640)              {                  order = 2;                  txt = "Medium";              }              else if (size.Width <= 1280 && size.Height <= 1280)              {                  order = 3;                  txt = "Large";              }              else              {                  order = 4;                  txt = "Very large";              }
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: byte[] header = new byte[10];
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: string bmpHeader = Encoding.ASCII.GetString(header' 0' 2);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: string tiffHeader = Encoding.ASCII.GetString(header' 0' 4);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x89 && header[1] == 0x50 && header[2] == 0x4E && header[3] == 0x47 &&                  header[4] == 0x0D && header[5] == 0x0A && header[6] == 0x1A && header[7] == 0x0A)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x89 && header[1] == 0x50 && header[2] == 0x4E && header[3] == 0x47 &&                  header[4] == 0x0D && header[5] == 0x0A && header[6] == 0x1A && header[7] == 0x0A)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x89 && header[1] == 0x50 && header[2] == 0x4E && header[3] == 0x47 &&                  header[4] == 0x0D && header[5] == 0x0A && header[6] == 0x1A && header[7] == 0x0A)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x89 && header[1] == 0x50 && header[2] == 0x4E && header[3] == 0x47 &&                  header[4] == 0x0D && header[5] == 0x0A && header[6] == 0x1A && header[7] == 0x0A)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x89 && header[1] == 0x50 && header[2] == 0x4E && header[3] == 0x47 &&                  header[4] == 0x0D && header[5] == 0x0A && header[6] == 0x1A && header[7] == 0x0A)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x89 && header[1] == 0x50 && header[2] == 0x4E && header[3] == 0x47 &&                  header[4] == 0x0D && header[5] == 0x0A && header[6] == 0x1A && header[7] == 0x0A)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: string gifHeader = Encoding.ASCII.GetString(header' 0' 4);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0xD7 && header[1] == 0xCD && header[2] == 0xC6 && header[3] == 0x9A)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0xD7 && header[1] == 0xCD && header[2] == 0xC6 && header[3] == 0x9A)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x01 && header[1] == 0x00 && header[2] == 0x00 && header[3] == 0x00)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x01 && header[1] == 0x00 && header[2] == 0x00 && header[3] == 0x00)                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x01 && header[3] == 0x00) // ICO                  return true;              else if (header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x02 && header[3] == 0x00) // CUR                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x01 && header[3] == 0x00) // ICO                  return true;              else if (header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x02 && header[3] == 0x00) // CUR                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x01 && header[3] == 0x00) // ICO                  return true;              else if (header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x02 && header[3] == 0x00) // CUR                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: if (header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x01 && header[3] == 0x00) // ICO                  return true;              else if (header[0] == 0x00 && header[1] == 0x00 && header[2] == 0x02 && header[3] == 0x00) // CUR                  return true;
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: string hdrHeader = Encoding.ASCII.GetString(header' 2' 8);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,IsImage,The following statement contains a magic number: string hdrHeader = Encoding.ASCII.GetString(header' 2' 8);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x + width - 2 * radius' y' 2 * radius' 2 * radius' 270.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x + width - 2 * radius' y' 2 * radius' 2 * radius' 270.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x + width - 2 * radius' y' 2 * radius' 2 * radius' 270.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x + width - 2 * radius' y + height - 2 * radius' 2 * radius' 2 * radius' 0.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x + width - 2 * radius' y + height - 2 * radius' 2 * radius' 2 * radius' 0.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x + width - 2 * radius' y + height - 2 * radius' 2 * radius' 2 * radius' 0.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x + width - 2 * radius' y + height - 2 * radius' 2 * radius' 2 * radius' 0.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x' y + height - 2 * radius' 2 * radius' 2 * radius' 90.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x' y + height - 2 * radius' 2 * radius' 2 * radius' 90.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x' y + height - 2 * radius' 2 * radius' 2 * radius' 90.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x' y' 2 * radius' 2 * radius' 180.0f' 90.0f);
Magic Number,ImageGlass.ImageListView,Utility,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\Utility.cs,GetRoundedRectanglePath,The following statement contains a magic number: if (radius > 0)                  path.AddArc(x' y' 2 * radius' 2 * radius' 180.0f' 90.0f);
Duplicate Code,ImageGlass.ImageListView,ImageListView,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ImageListViewGroupCollection.cs,HitTest,The method contains a code clone-set at the following line numbers (starting from the method definition): ((77' 97)' (128' 148))
Duplicate Code,ImageGlass.ImageListView,ThumbnailExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\ThumbnailExtractor.cs,GetThumbnail,The method contains a code clone-set at the following line numbers (starting from the method definition): ((22' 45)' (66' 89))
Missing Default,ImageGlass.ImageListView,MetadataExtractor,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageListView\MetadataExtractor.cs,InitViaBmp,The following switch statement is missing a default case: switch (prop.Id)                      {                          case TagImageDescription:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  ImageDescription = str;                              }                              break;                          case TagArtist:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Artist = str;                              }                              break;                          case TagEquipmentManufacturer:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentManufacturer = str;                              }                              break;                          case TagEquipmentModel:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  EquipmentModel = str;                              }                              break;                          case TagDateTimeOriginal:                              dateTime = ExifDateTime(prop.Value);                              if (dateTime != DateTime.MinValue)                              {                                  DateTaken = dateTime;                              }                              break;                          case TagExposureTime:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      ExposureTime = dVal;                                  }                              }                              break;                          case TagFNumber:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FNumber = dVal;                                  }                              }                              break;                          case TagISOSpeed:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal != 0)                                  {                                      ISOSpeed = iVal;                                  }                              }                              break;                          case TagCopyright:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Copyright = str;                              }                              break;                          case TagRating:                              if (Rating == 0 && prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  if (iVal == 1)                                      Rating = 1;                                  else if (iVal == 2)                                      Rating = 25;                                  else if (iVal == 3)                                      Rating = 50;                                  else if (iVal == 4)                                      Rating = 75;                                  else if (iVal == 5)                                      Rating = 99;                              }                              break;                          case TagRatingPercent:                              if (prop.Value.Length == 2)                              {                                  iVal = ExifUShort(prop.Value);                                  Rating = iVal;                              }                              break;                          case TagUserComment:                              str = ExifAscii(prop.Value);                              if (str != String.Empty)                              {                                  Comment = str;                              }                              break;                          case TagSoftware:                              str = ExifAscii(prop.Value).Trim();                              if (str != String.Empty)                              {                                  Software = str;                              }                              break;                          case TagFocalLength:                              if (prop.Value.Length == 8)                              {                                  dVal = ExifDouble(prop.Value);                                  if (dVal != 0.0)                                  {                                      FocalLength = dVal;                                  }                              }                              break;                      }
