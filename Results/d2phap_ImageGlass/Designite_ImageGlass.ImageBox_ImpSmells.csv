Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,OnPaint,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,PointToImage,Cyclomatic complexity of the method is 8
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateGridTileImage,Cyclomatic complexity of the method is 12
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawBackground,Cyclomatic complexity of the method is 11
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawImageBorder,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,Cyclomatic complexity of the method is 68
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageBorderOffset,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ShouldShowScrollbar,Cyclomatic complexity of the method is 11
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ProcessImageShortcuts,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ProcessScrollingShortcuts,Cyclomatic complexity of the method is 12
Complex Method,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetZoomLevel,Cyclomatic complexity of the method is 14
Complex Method,ImageGlass,ImageBoxMouseWheelMessageFilter,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBoxMouseWheelMessageFilter.cs,PreFilterMessage,Cyclomatic complexity of the method is 11
Long Parameter List,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 5 parameters.
Long Parameter List,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 6 parameters.
Long Parameter List,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 7 parameters.
Long Parameter List,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 8 parameters.
Long Parameter List,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 9 parameters.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,IsInputKey,The length of the statement  "	if ((keyData & Keys.Right) == Keys.Right | (keyData & Keys.Left) == Keys.Left | (keyData & Keys.Up) == Keys.Up | (keyData & Keys.Down) == Keys.Down) { " is 150.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The length of the statement  "		if (!hScroll && !vScroll)// if no scrolling is present' tinker the view port so that the image and any applicable borders all fit inside " is 136.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetScaledRectangle,The length of the statement  "	return new Rectangle ((int)(source.Left * ZoomFactor)' (int)(source.Top * ZoomFactor)' (int)(source.Width * ZoomFactor)' (int)(source.Height * ZoomFactor)); " is 156.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetScaledRectangle,The length of the statement  "	return new RectangleF ((float)(source.Left * ZoomFactor)' (float)(source.Top * ZoomFactor)' (float)(source.Width * ZoomFactor)' (float)(source.Height * ZoomFactor)); " is 165.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetSelectedImage,The length of the statement  "		rect = FitRectangle (new Rectangle ((int)SelectionRegion.X' (int)SelectionRegion.Y' (int)SelectionRegion.Width' (int)SelectionRegion.Height)); " is 142.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The length of the statement  "	flags = TextFormatFlags.NoPrefix | TextFormatFlags.WordEllipsis | TextFormatFlags.WordBreak | TextFormatFlags.NoPadding; " is 120.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The length of the statement  "				graphics.FillRectangle (brush' x - padding.Left' y - padding.Top' width + padding.Horizontal' height + padding.Vertical); " is 121.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The length of the statement  "		//bounds = new Rectangle(bounds.Left + padding.Left' bounds.Top + padding.Top' bounds.Width - padding.Horizontal' bounds.Height - padding.Vertical); " is 148.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ProcessMouseZoom,The length of the statement  "	PerformZoom (isZoomIn ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut' ImageBoxActionSources.User' true' cursorPosition); " is 132.
Long Statement,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,PerformActualSize,The length of the statement  "	SetZoom (100' ImageBoxZoomActions.ActualSize | (Zoom < 100 ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut)' source); " is 128.
Complex Conditional,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,OnMouseUp,The conditional expression  "!doNotProcessClick && AllowZoom && AllowClickZoom && !IsPanning && SizeMode == ImageBoxSizeMode.Normal"  is complex.
Virtual Method Call from Constructor,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ImageBox,The constructor "ImageBox" calls a virtual method "ActualSize".
Empty Catch Block,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,StartAnimating,The method has an empty catch block.
Empty Catch Block,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawImage,The method has an empty catch block.
Empty Catch Block,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawImage,The method has an empty catch block.
Magic Number,ImageGlass,HighResolutionGifAnimator,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\HighResolutionGifAnimator.cs,HighResolutionGifAnimator,The following statement contains a magic number: ourMinTickTimeInMilliseconds = 20;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ImageBox,The following statement contains a magic number: DropShadowSize = 3;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ImageBox,The following statement contains a magic number: GridCellSize = 8;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ImageBox,The following statement contains a magic number: PixelGridThreshold = 5;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateCheckerBoxTile,The following statement contains a magic number: width = cellSize * 2;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateCheckerBoxTile,The following statement contains a magic number: height = cellSize * 2;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateCheckerBoxTile,The following statement contains a magic number: return ImageBox.CreateCheckerBoxTile (8' Color.Gainsboro' Color.WhiteSmoke);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	Point offset;  	int width;  	int height;  	bool hScroll;  	bool vScroll;  	innerRectangle = GetInsideViewPort (true);  	hScroll = HScroll;  	vScroll = VScroll;  	if (!hScroll && !vScroll)// if no scrolling is present' tinker the view port so that the image and any applicable borders all fit inside  	 {  		innerRectangle.Inflate (-GetImageBorderOffset ()' -GetImageBorderOffset ());  	}  	if (SizeMode != ImageBoxSizeMode.Stretch) {  		if (AutoCenter) {  			int x;  			int y;  			x = !hScroll ? (innerRectangle.Width - (ScaledImageWidth + Padding.Horizontal)) / 2 : 0;  			y = !vScroll ? (innerRectangle.Height - (ScaledImageHeight + Padding.Vertical)) / 2 : 0;  			offset = new Point (x' y);  		} else {  			offset = Point.Empty;  		}  		width = Math.Min (ScaledImageWidth - Math.Abs (AutoScrollPosition.X)' innerRectangle.Width);  		height = Math.Min (ScaledImageHeight - Math.Abs (AutoScrollPosition.Y)' innerRectangle.Height);  	} else {  		offset = Point.Empty;  		width = innerRectangle.Width;  		height = innerRectangle.Height;  	}  	viewPort = new Rectangle (offset.X + innerRectangle.Left' offset.Y + innerRectangle.Top' width' height);  } else {  	viewPort = Rectangle.Empty;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	Point offset;  	int width;  	int height;  	bool hScroll;  	bool vScroll;  	innerRectangle = GetInsideViewPort (true);  	hScroll = HScroll;  	vScroll = VScroll;  	if (!hScroll && !vScroll)// if no scrolling is present' tinker the view port so that the image and any applicable borders all fit inside  	 {  		innerRectangle.Inflate (-GetImageBorderOffset ()' -GetImageBorderOffset ());  	}  	if (SizeMode != ImageBoxSizeMode.Stretch) {  		if (AutoCenter) {  			int x;  			int y;  			x = !hScroll ? (innerRectangle.Width - (ScaledImageWidth + Padding.Horizontal)) / 2 : 0;  			y = !vScroll ? (innerRectangle.Height - (ScaledImageHeight + Padding.Vertical)) / 2 : 0;  			offset = new Point (x' y);  		} else {  			offset = Point.Empty;  		}  		width = Math.Min (ScaledImageWidth - Math.Abs (AutoScrollPosition.X)' innerRectangle.Width);  		height = Math.Min (ScaledImageHeight - Math.Abs (AutoScrollPosition.Y)' innerRectangle.Height);  	} else {  		offset = Point.Empty;  		width = innerRectangle.Width;  		height = innerRectangle.Height;  	}  	viewPort = new Rectangle (offset.X + innerRectangle.Left' offset.Y + innerRectangle.Top' width' height);  } else {  	viewPort = Rectangle.Empty;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (SizeMode != ImageBoxSizeMode.Stretch) {  	if (AutoCenter) {  		int x;  		int y;  		x = !hScroll ? (innerRectangle.Width - (ScaledImageWidth + Padding.Horizontal)) / 2 : 0;  		y = !vScroll ? (innerRectangle.Height - (ScaledImageHeight + Padding.Vertical)) / 2 : 0;  		offset = new Point (x' y);  	} else {  		offset = Point.Empty;  	}  	width = Math.Min (ScaledImageWidth - Math.Abs (AutoScrollPosition.X)' innerRectangle.Width);  	height = Math.Min (ScaledImageHeight - Math.Abs (AutoScrollPosition.Y)' innerRectangle.Height);  } else {  	offset = Point.Empty;  	width = innerRectangle.Width;  	height = innerRectangle.Height;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (SizeMode != ImageBoxSizeMode.Stretch) {  	if (AutoCenter) {  		int x;  		int y;  		x = !hScroll ? (innerRectangle.Width - (ScaledImageWidth + Padding.Horizontal)) / 2 : 0;  		y = !vScroll ? (innerRectangle.Height - (ScaledImageHeight + Padding.Vertical)) / 2 : 0;  		offset = new Point (x' y);  	} else {  		offset = Point.Empty;  	}  	width = Math.Min (ScaledImageWidth - Math.Abs (AutoScrollPosition.X)' innerRectangle.Width);  	height = Math.Min (ScaledImageHeight - Math.Abs (AutoScrollPosition.Y)' innerRectangle.Height);  } else {  	offset = Point.Empty;  	width = innerRectangle.Width;  	height = innerRectangle.Height;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (AutoCenter) {  	int x;  	int y;  	x = !hScroll ? (innerRectangle.Width - (ScaledImageWidth + Padding.Horizontal)) / 2 : 0;  	y = !vScroll ? (innerRectangle.Height - (ScaledImageHeight + Padding.Vertical)) / 2 : 0;  	offset = new Point (x' y);  } else {  	offset = Point.Empty;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (AutoCenter) {  	int x;  	int y;  	x = !hScroll ? (innerRectangle.Width - (ScaledImageWidth + Padding.Horizontal)) / 2 : 0;  	y = !vScroll ? (innerRectangle.Height - (ScaledImageHeight + Padding.Vertical)) / 2 : 0;  	offset = new Point (x' y);  } else {  	offset = Point.Empty;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: x = !hScroll ? (innerRectangle.Width - (ScaledImageWidth + Padding.Horizontal)) / 2 : 0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: y = !vScroll ? (innerRectangle.Height - (ScaledImageHeight + Padding.Vertical)) / 2 : 0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  		zoom = 100.0;  	} else {  		if (ViewSize.Width > ViewSize.Height) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  				zoom = aspectRatio * 100.0;  			}  		} else {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  				zoom = aspectRatio * 100.0;  			}  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  		zoom = 100.0;  	} else {  		if (ViewSize.Width > ViewSize.Height) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  				zoom = aspectRatio * 100.0;  			}  		} else {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  				zoom = aspectRatio * 100.0;  			}  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  		zoom = 100.0;  	} else {  		if (ViewSize.Width > ViewSize.Height) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  				zoom = aspectRatio * 100.0;  			}  		} else {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  				zoom = aspectRatio * 100.0;  			}  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  		zoom = 100.0;  	} else {  		if (ViewSize.Width > ViewSize.Height) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  				zoom = aspectRatio * 100.0;  			}  		} else {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  				zoom = aspectRatio * 100.0;  			}  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  		zoom = 100.0;  	} else {  		if (ViewSize.Width > ViewSize.Height) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  				zoom = aspectRatio * 100.0;  			}  		} else {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  				zoom = aspectRatio * 100.0;  			}  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  		zoom = 100.0;  	} else {  		if (ViewSize.Width > ViewSize.Height) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  				zoom = aspectRatio * 100.0;  			}  		} else {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  				zoom = aspectRatio * 100.0;  			}  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (!ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	innerRectangle = GetInsideViewPort (true);  	if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  		zoom = 100.0;  	} else {  		if (ViewSize.Width > ViewSize.Height) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  				zoom = aspectRatio * 100.0;  			}  		} else {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  			if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  				aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  				zoom = aspectRatio * 100.0;  			}  		}  	}  	Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  	zoom = 100.0;  } else {  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  	zoom = 100.0;  } else {  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  	zoom = 100.0;  } else {  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  	zoom = 100.0;  } else {  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  	zoom = 100.0;  } else {  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  	zoom = 100.0;  } else {  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width <= innerRectangle.Width && ViewSize.Height <= innerRectangle.Height) {  	zoom = 100.0;  } else {  	if (ViewSize.Width > ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	} else {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: zoom = 100.0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (ViewSize.Width > ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  } else {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Height / ViewSize.Height;  	zoom = aspectRatio * 100.0;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: if (innerRectangle.Width < ((ViewSize.Width * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Width / ViewSize.Width;  	zoom = aspectRatio * 100.0;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToRegion,The following statement contains a magic number: cx = (int)(rectangle.X + (rectangle.Width / 2));  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToRegion,The following statement contains a magic number: cy = (int)(rectangle.Y + (rectangle.Height / 2));  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToRegion,The following statement contains a magic number: Zoom = (int)(zoomFactor * 100);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateGridTileImage,The following statement contains a magic number: switch (GridScale) {  case ImageBoxGridScale.Medium:  	scale = 1.5F;  	break;  case ImageBoxGridScale.Large:  	scale = 2;  	break;  case ImageBoxGridScale.Tiny:  	scale = 0.5F;  	break;  default:  	scale = 1;  	break;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateGridTileImage,The following statement contains a magic number: scale = 2;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawGlowShadow,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	int glowSize;  	int feather;  	path.AddRectangle (viewPort);  	glowSize = DropShadowSize * 3;  	feather = 50;  	for (int i = 1; i <= glowSize; i += 2) {  		int alpha;  		alpha = feather - ((feather / glowSize) * i);  		using (Pen pen = new Pen (Color.FromArgb (alpha' ImageBorderColor)' i) {  			LineJoin = LineJoin.Round  		}) {  			g.DrawPath (pen' path);  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawGlowShadow,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	int glowSize;  	int feather;  	path.AddRectangle (viewPort);  	glowSize = DropShadowSize * 3;  	feather = 50;  	for (int i = 1; i <= glowSize; i += 2) {  		int alpha;  		alpha = feather - ((feather / glowSize) * i);  		using (Pen pen = new Pen (Color.FromArgb (alpha' ImageBorderColor)' i) {  			LineJoin = LineJoin.Round  		}) {  			g.DrawPath (pen' path);  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawGlowShadow,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	int glowSize;  	int feather;  	path.AddRectangle (viewPort);  	glowSize = DropShadowSize * 3;  	feather = 50;  	for (int i = 1; i <= glowSize; i += 2) {  		int alpha;  		alpha = feather - ((feather / glowSize) * i);  		using (Pen pen = new Pen (Color.FromArgb (alpha' ImageBorderColor)' i) {  			LineJoin = LineJoin.Round  		}) {  			g.DrawPath (pen' path);  		}  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawGlowShadow,The following statement contains a magic number: glowSize = DropShadowSize * 3;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawGlowShadow,The following statement contains a magic number: feather = 50;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawGlowShadow,The following statement contains a magic number: for (int i = 1; i <= glowSize; i += 2) {  	int alpha;  	alpha = feather - ((feather / glowSize) * i);  	using (Pen pen = new Pen (Color.FromArgb (alpha' ImageBorderColor)' i) {  		LineJoin = LineJoin.Round  	}) {  		g.DrawPath (pen' path);  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawGlowShadow,The following statement contains a magic number: i += 2
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: if (padding.Horizontal != 0 || padding.Vertical != 0) {  	Size size;  	int x;  	int y;  	int width;  	int height;  	size = TextRenderer.MeasureText (graphics' text' font' bounds.Size' flags);  	width = size.Width;  	height = size.Height;  	switch (textAlign) {  	case ContentAlignment.TopLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.MiddleLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.BottomLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	default:  		throw new ArgumentOutOfRangeException ("textAlign");  	}  	if (backColor != Color.Empty && backColor.A > 0) {  		using (Brush brush = new SolidBrush (backColor)) {  			graphics.FillRectangle (brush' x - padding.Left' y - padding.Top' width + padding.Horizontal' height + padding.Vertical);  		}  	}  	bounds = new Rectangle (x' y' width' height);  	//bounds = new Rectangle(bounds.Left + padding.Left' bounds.Top + padding.Top' bounds.Width - padding.Horizontal' bounds.Height - padding.Vertical);  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: if (padding.Horizontal != 0 || padding.Vertical != 0) {  	Size size;  	int x;  	int y;  	int width;  	int height;  	size = TextRenderer.MeasureText (graphics' text' font' bounds.Size' flags);  	width = size.Width;  	height = size.Height;  	switch (textAlign) {  	case ContentAlignment.TopLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.MiddleLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.BottomLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	default:  		throw new ArgumentOutOfRangeException ("textAlign");  	}  	if (backColor != Color.Empty && backColor.A > 0) {  		using (Brush brush = new SolidBrush (backColor)) {  			graphics.FillRectangle (brush' x - padding.Left' y - padding.Top' width + padding.Horizontal' height + padding.Vertical);  		}  	}  	bounds = new Rectangle (x' y' width' height);  	//bounds = new Rectangle(bounds.Left + padding.Left' bounds.Top + padding.Top' bounds.Width - padding.Horizontal' bounds.Height - padding.Vertical);  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: if (padding.Horizontal != 0 || padding.Vertical != 0) {  	Size size;  	int x;  	int y;  	int width;  	int height;  	size = TextRenderer.MeasureText (graphics' text' font' bounds.Size' flags);  	width = size.Width;  	height = size.Height;  	switch (textAlign) {  	case ContentAlignment.TopLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.MiddleLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.BottomLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	default:  		throw new ArgumentOutOfRangeException ("textAlign");  	}  	if (backColor != Color.Empty && backColor.A > 0) {  		using (Brush brush = new SolidBrush (backColor)) {  			graphics.FillRectangle (brush' x - padding.Left' y - padding.Top' width + padding.Horizontal' height + padding.Vertical);  		}  	}  	bounds = new Rectangle (x' y' width' height);  	//bounds = new Rectangle(bounds.Left + padding.Left' bounds.Top + padding.Top' bounds.Width - padding.Horizontal' bounds.Height - padding.Vertical);  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: if (padding.Horizontal != 0 || padding.Vertical != 0) {  	Size size;  	int x;  	int y;  	int width;  	int height;  	size = TextRenderer.MeasureText (graphics' text' font' bounds.Size' flags);  	width = size.Width;  	height = size.Height;  	switch (textAlign) {  	case ContentAlignment.TopLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.MiddleLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.BottomLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	default:  		throw new ArgumentOutOfRangeException ("textAlign");  	}  	if (backColor != Color.Empty && backColor.A > 0) {  		using (Brush brush = new SolidBrush (backColor)) {  			graphics.FillRectangle (brush' x - padding.Left' y - padding.Top' width + padding.Horizontal' height + padding.Vertical);  		}  	}  	bounds = new Rectangle (x' y' width' height);  	//bounds = new Rectangle(bounds.Left + padding.Left' bounds.Top + padding.Top' bounds.Width - padding.Horizontal' bounds.Height - padding.Vertical);  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: if (padding.Horizontal != 0 || padding.Vertical != 0) {  	Size size;  	int x;  	int y;  	int width;  	int height;  	size = TextRenderer.MeasureText (graphics' text' font' bounds.Size' flags);  	width = size.Width;  	height = size.Height;  	switch (textAlign) {  	case ContentAlignment.TopLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.MiddleLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.BottomLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	default:  		throw new ArgumentOutOfRangeException ("textAlign");  	}  	if (backColor != Color.Empty && backColor.A > 0) {  		using (Brush brush = new SolidBrush (backColor)) {  			graphics.FillRectangle (brush' x - padding.Left' y - padding.Top' width + padding.Horizontal' height + padding.Vertical);  		}  	}  	bounds = new Rectangle (x' y' width' height);  	//bounds = new Rectangle(bounds.Left + padding.Left' bounds.Top + padding.Top' bounds.Width - padding.Horizontal' bounds.Height - padding.Vertical);  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: if (padding.Horizontal != 0 || padding.Vertical != 0) {  	Size size;  	int x;  	int y;  	int width;  	int height;  	size = TextRenderer.MeasureText (graphics' text' font' bounds.Size' flags);  	width = size.Width;  	height = size.Height;  	switch (textAlign) {  	case ContentAlignment.TopLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.TopRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top;  		break;  	case ContentAlignment.MiddleLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.MiddleRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  		break;  	case ContentAlignment.BottomLeft:  		x = bounds.Left + padding.Left;  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomCenter:  		x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	case ContentAlignment.BottomRight:  		x = bounds.Right - (padding.Right + width);  		y = bounds.Bottom - (padding.Bottom + height);  		break;  	default:  		throw new ArgumentOutOfRangeException ("textAlign");  	}  	if (backColor != Color.Empty && backColor.A > 0) {  		using (Brush brush = new SolidBrush (backColor)) {  			graphics.FillRectangle (brush' x - padding.Left' y - padding.Top' width + padding.Horizontal' height + padding.Vertical);  		}  	}  	bounds = new Rectangle (x' y' width' height);  	//bounds = new Rectangle(bounds.Left + padding.Left' bounds.Top + padding.Top' bounds.Width - padding.Horizontal' bounds.Height - padding.Vertical);  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign) {  case ContentAlignment.TopLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.MiddleLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.BottomLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  default:  	throw new ArgumentOutOfRangeException ("textAlign");  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign) {  case ContentAlignment.TopLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.MiddleLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.BottomLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  default:  	throw new ArgumentOutOfRangeException ("textAlign");  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign) {  case ContentAlignment.TopLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.MiddleLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.BottomLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  default:  	throw new ArgumentOutOfRangeException ("textAlign");  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign) {  case ContentAlignment.TopLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.MiddleLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.BottomLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  default:  	throw new ArgumentOutOfRangeException ("textAlign");  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign) {  case ContentAlignment.TopLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.MiddleLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.BottomLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  default:  	throw new ArgumentOutOfRangeException ("textAlign");  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign) {  case ContentAlignment.TopLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.TopRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top;  	break;  case ContentAlignment.MiddleLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.MiddleRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  	break;  case ContentAlignment.BottomLeft:  	x = bounds.Left + padding.Left;  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomCenter:  	x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  case ContentAlignment.BottomRight:  	x = bounds.Right - (padding.Right + width);  	y = bounds.Bottom - (padding.Bottom + height);  	break;  default:  	throw new ArgumentOutOfRangeException ("textAlign");  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawSelection,The following statement contains a magic number: using (Brush brush = new SolidBrush (Color.FromArgb (128' SelectionColor))) {  	e.Graphics.FillRectangle (brush' rect);  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetInterpolationMode,The following statement contains a magic number: if (mode == InterpolationMode.Default) {  	// ReSharper disable once ConvertIfStatementToConditionalTernaryExpression  	if (Zoom < 100) {  		// TODO: Check to see if we should cherry pick other modes depending on how much the image is actually zoomed  		mode = InterpolationMode.HighQualityBicubic;  	} else {  		mode = InterpolationMode.NearestNeighbor;  	}  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetInterpolationMode,The following statement contains a magic number: if (Zoom < 100) {  	// TODO: Check to see if we should cherry pick other modes depending on how much the image is actually zoomed  	mode = InterpolationMode.HighQualityBicubic;  } else {  	mode = InterpolationMode.NearestNeighbor;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,UpdateScrollbars,The following statement contains a magic number: if (viewSize.Width > 0 && viewSize.Height > 0) {  	ImageBoxScrollProperties horizontal;  	ImageBoxScrollProperties vertical;  	Point autoScrollPosition;  	bool hScroll;  	bool vScroll;  	bool enabled;  	autoScrollPosition = AutoScrollPosition;  	hScroll = HScroll;  	vScroll = VScroll;  	enabled = Enabled;  	horizontal = HorizontalScroll;  	horizontal.Maximum = ScaledImageWidth;  	horizontal.LargeChange = viewSize.Width;  	horizontal.SmallChange = 10;  	horizontal.Value = -autoScrollPosition.X;  	horizontal.Visible = ShouldShowScrollbar (HorizontalScrollBarStyle' hScroll);  	horizontal.Enabled = enabled && hScroll;  	vertical = VerticalScroll;  	vertical.Maximum = ScaledImageHeight;  	vertical.LargeChange = viewSize.Height;  	vertical.SmallChange = 10;  	vertical.Value = -autoScrollPosition.Y;  	vertical.Visible = ShouldShowScrollbar (VerticalScrollBarStyle' vScroll);  	vertical.Enabled = enabled && vScroll;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,UpdateScrollbars,The following statement contains a magic number: if (viewSize.Width > 0 && viewSize.Height > 0) {  	ImageBoxScrollProperties horizontal;  	ImageBoxScrollProperties vertical;  	Point autoScrollPosition;  	bool hScroll;  	bool vScroll;  	bool enabled;  	autoScrollPosition = AutoScrollPosition;  	hScroll = HScroll;  	vScroll = VScroll;  	enabled = Enabled;  	horizontal = HorizontalScroll;  	horizontal.Maximum = ScaledImageWidth;  	horizontal.LargeChange = viewSize.Width;  	horizontal.SmallChange = 10;  	horizontal.Value = -autoScrollPosition.X;  	horizontal.Visible = ShouldShowScrollbar (HorizontalScrollBarStyle' hScroll);  	horizontal.Enabled = enabled && hScroll;  	vertical = VerticalScroll;  	vertical.Maximum = ScaledImageHeight;  	vertical.LargeChange = viewSize.Height;  	vertical.SmallChange = 10;  	vertical.Value = -autoScrollPosition.Y;  	vertical.Visible = ShouldShowScrollbar (VerticalScrollBarStyle' vScroll);  	vertical.Enabled = enabled && vScroll;  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,UpdateScrollbars,The following statement contains a magic number: horizontal.SmallChange = 10;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,UpdateScrollbars,The following statement contains a magic number: vertical.SmallChange = 10;  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,PerformActualSize,The following statement contains a magic number: SetZoom (100' ImageBoxZoomActions.ActualSize | (Zoom < 100 ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut)' source);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,PerformActualSize,The following statement contains a magic number: SetZoom (100' ImageBoxZoomActions.ActualSize | (Zoom < 100 ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut)' source);  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetZoomLevel,The following statement contains a magic number: switch (action) {  case ImageBoxZoomActions.None:  	result = Zoom;  	break;  case ImageBoxZoomActions.ZoomIn:  	result = ZoomLevels.NextZoom (Zoom);  	break;  case ImageBoxZoomActions.ZoomOut:  	result = ZoomLevels.PreviousZoom (Zoom);  	break;  case ImageBoxZoomActions.ActualSize:  	result = 100;  	break;  default:  	throw new ArgumentOutOfRangeException ("action");  }  
Magic Number,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetZoomLevel,The following statement contains a magic number: result = 100;  
Missing Default,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawBackground,The following switch statement is missing a default case: switch (GridDisplayMode) {  case ImageBoxGridDisplayMode.Image:  	Rectangle fillRectangle;  	fillRectangle = GetImageViewPort ();  	e.Graphics.FillRectangle (_texture' fillRectangle);  	break;  case ImageBoxGridDisplayMode.Client:  	e.Graphics.FillRectangle (_texture' innerRectangle);  	break;  }  
Missing Default,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawImageBorder,The following switch statement is missing a default case: switch (ImageBorderStyle) {  case ImageBoxBorderStyle.FixedSingleDropShadow:  	DrawDropShadow (graphics' viewPort);  	break;  case ImageBoxBorderStyle.FixedSingleGlowShadow:  	DrawGlowShadow (graphics' viewPort);  	break;  }  
Missing Default,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,OnSelected,The following switch statement is missing a default case: switch (SelectionMode) {  case ImageBoxSelectionMode.Zoom:  	if (SelectionRegion.Width > SelectionDeadZone && SelectionRegion.Height > SelectionDeadZone) {  		ZoomToRegion (SelectionRegion);  		SelectNone ();  	}  	break;  }  
Missing Default,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ProcessImageShortcuts,The following switch statement is missing a default case: switch (e.KeyCode) {  //case Keys.Home:  //    if (this.AllowZoom)  //    {  //        this.PerformActualSize(ImageBoxActionSources.User);  //    }  //    break;  //case Keys.PageDown:  case Keys.Oemplus:  	if (AllowZoom) {  		PerformZoomIn (ImageBoxActionSources.User' true);  	}  	break;  //case Keys.PageUp:  case Keys.OemMinus:  	if (AllowZoom) {  		PerformZoomOut (ImageBoxActionSources.User' true);  	}  	break;  }  
Missing Default,ImageGlass,ImageBox,F:\newReposMay17\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ProcessScrollingShortcuts,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Left:  	AdjustScroll (-(e.Modifiers == Keys.None ? HorizontalScroll.SmallChange : HorizontalScroll.LargeChange)' 0);  	break;  case Keys.Right:  	AdjustScroll (e.Modifiers == Keys.None ? HorizontalScroll.SmallChange : HorizontalScroll.LargeChange' 0);  	break;  case Keys.Up:  	AdjustScroll (0' -(e.Modifiers == Keys.None ? VerticalScroll.SmallChange : VerticalScroll.LargeChange));  	break;  case Keys.Down:  	AdjustScroll (0' e.Modifiers == Keys.None ? VerticalScroll.SmallChange : VerticalScroll.LargeChange);  	break;  }  
