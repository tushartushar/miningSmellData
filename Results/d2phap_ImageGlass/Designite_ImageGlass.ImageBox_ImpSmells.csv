Implementation smell,Namespace,Class,File,Method,Description
Long Method,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 106 lines of code.
Complex Method,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,OnPaint,Cyclomatic complexity of the method is 9
Complex Method,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,PointToImage,Cyclomatic complexity of the method is 8
Complex Method,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,Cyclomatic complexity of the method is 18
Long Parameter List,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 5 parameters. Parameters: graphics' text' font' foreColor' bounds
Long Parameter List,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 6 parameters. Parameters: graphics' text' font' foreColor' backColor' bounds
Long Parameter List,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 7 parameters. Parameters: graphics' text' font' foreColor' backColor' textAlign' bounds
Long Parameter List,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 8 parameters. Parameters: graphics' text' font' foreColor' backColor' textAlign' bounds' scaleText
Long Parameter List,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The method has 9 parameters. Parameters: graphics' text' font' foreColor' backColor' textAlign' bounds' scaleText' padding
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,IsInputKey,The length of the statement  "            if ((keyData & Keys.Right) == Keys.Right | (keyData & Keys.Left) == Keys.Left | (keyData & Keys.Up) == Keys.Up | (keyData & Keys.Down) == Keys.Down) " is 148.
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The length of the statement  "                if (!hScroll && !vScroll) // if no scrolling is present' tinker the view port so that the image and any applicable borders all fit inside " is 137.
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetScaledRectangle,The length of the statement  "            return new Rectangle((int)(source.Left * ZoomFactor)' (int)(source.Top * ZoomFactor)' (int)(source.Width * ZoomFactor)' (int)(source.Height * ZoomFactor)); " is 155.
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetScaledRectangle,The length of the statement  "            return new RectangleF((float)(source.Left * ZoomFactor)' (float)(source.Top * ZoomFactor)' (float)(source.Width * ZoomFactor)' (float)(source.Height * ZoomFactor)); " is 164.
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetSelectedImage,The length of the statement  "                rect = FitRectangle(new Rectangle((int)SelectionRegion.X' (int)SelectionRegion.Y' (int)SelectionRegion.Width' (int)SelectionRegion.Height)); " is 140.
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The length of the statement  "            flags = TextFormatFlags.NoPrefix | TextFormatFlags.WordEllipsis | TextFormatFlags.WordBreak | TextFormatFlags.NoPadding; " is 120.
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The length of the statement  "                        graphics.FillRectangle(brush' x - padding.Left' y - padding.Top' width + padding.Horizontal' height + padding.Vertical); " is 120.
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The length of the statement  "                //bounds = new Rectangle(bounds.Left + padding.Left' bounds.Top + padding.Top' bounds.Width - padding.Horizontal' bounds.Height - padding.Vertical); " is 148.
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ProcessMouseZoom,The length of the statement  "            PerformZoom(isZoomIn ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut' ImageBoxActionSources.User' true' cursorPosition); " is 131.
Long Statement,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,PerformActualSize,The length of the statement  "            SetZoom(100' ImageBoxZoomActions.ActualSize | (Zoom < 100 ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut)' source); " is 127.
Complex Conditional,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,OnMouseUp,The conditional expression  "!doNotProcessClick && AllowClickZoom && !IsPanning && SizeMode == ImageBoxSizeMode.Normal"  is complex.
Virtual Method Call from Constructor,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ImageBox,The constructor "ImageBox" calls a virtual method "ActualSize".
Empty Catch Block,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,StartAnimating,The method has an empty catch block.
Empty Catch Block,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawImage,The method has an empty catch block.
Empty Catch Block,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawImage,The method has an empty catch block.
Magic Number,ImageGlass,HighResolutionGifAnimator,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\HighResolutionGifAnimator.cs,SetTickTimeInMilliseconds,The following statement contains a magic number: int newTickValue = Math.Max(10' (value / 10) * 10);
Magic Number,ImageGlass,HighResolutionGifAnimator,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\HighResolutionGifAnimator.cs,SetTickTimeInMilliseconds,The following statement contains a magic number: int newTickValue = Math.Max(10' (value / 10) * 10);
Magic Number,ImageGlass,HighResolutionGifAnimator,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\HighResolutionGifAnimator.cs,SetTickTimeInMilliseconds,The following statement contains a magic number: int newTickValue = Math.Max(10' (value / 10) * 10);
Magic Number,ImageGlass,HighResolutionGifAnimator,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\HighResolutionGifAnimator.cs,HighResolutionGifAnimator,The following statement contains a magic number: ourMinTickTimeInMilliseconds = 20;
Magic Number,ImageGlass,GifImageData,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\HighResolutionGifAnimator.cs,GetCurrentDelayInMilliseconds,The following statement contains a magic number: return myFrameDelaysInCentiseconds[myCurrentFrame] * 10;
Magic Number,ImageGlass,GifImageData,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\HighResolutionGifAnimator.cs,PopulateFrameDelays,The following statement contains a magic number: myFrameDelaysInCentiseconds[i] = BitConverter.ToInt32(frameDelays' i * 4);
Magic Number,ImageGlass,GifImageData,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\HighResolutionGifAnimator.cs,PopulateFrameDelays,The following statement contains a magic number: myFrameDelaysInCentiseconds[i] = 10;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ImageBox,The following statement contains a magic number: DropShadowSize = 3;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ImageBox,The following statement contains a magic number: GridCellSize = 8;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ImageBox,The following statement contains a magic number: PixelGridThreshold = 5;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateCheckerBoxTile,The following statement contains a magic number: width = cellSize * 2;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateCheckerBoxTile,The following statement contains a magic number: height = cellSize * 2;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateCheckerBoxTile,The following statement contains a magic number: return ImageBox.CreateCheckerBoxTile(8' Color.Gainsboro' Color.WhiteSmoke);
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: x = !hScroll ? (innerRectangle.Width - (ScaledImageWidth + Padding.Horizontal)) / 2 : 0;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetImageViewPort,The following statement contains a magic number: y = !vScroll ? (innerRectangle.Height - (ScaledImageHeight + Padding.Vertical)) / 2 : 0;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToFit,The following statement contains a magic number: innerRectangle.Height < ((ViewSize.Height * zoom) / 100.0)
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomAuto,The following statement contains a magic number: zoom = 100.0;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToRegion,The following statement contains a magic number: cx = (int)(rectangle.X + (rectangle.Width / 2));
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToRegion,The following statement contains a magic number: cy = (int)(rectangle.Y + (rectangle.Height / 2));
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ZoomToRegion,The following statement contains a magic number: Zoom = zoomFactor * 100;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateGridTileImage,The following statement contains a magic number: switch (GridScale)              {                  case ImageBoxGridScale.Medium:                      scale = 1.5F;                      break;                    case ImageBoxGridScale.Large:                      scale = 2;                      break;                    case ImageBoxGridScale.Tiny:                      scale = 0.5F;                      break;                    default:                      scale = 1;                      break;              }
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateGridTileImage,The following statement contains a magic number: switch (GridScale)              {                  case ImageBoxGridScale.Medium:                      scale = 1.5F;                      break;                    case ImageBoxGridScale.Large:                      scale = 2;                      break;                    case ImageBoxGridScale.Tiny:                      scale = 0.5F;                      break;                    default:                      scale = 1;                      break;              }
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,CreateGridTileImage,The following statement contains a magic number: switch (GridScale)              {                  case ImageBoxGridScale.Medium:                      scale = 1.5F;                      break;                    case ImageBoxGridScale.Large:                      scale = 2;                      break;                    case ImageBoxGridScale.Tiny:                      scale = 0.5F;                      break;                    default:                      scale = 1;                      break;              }
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawGlowShadow,The following statement contains a magic number: glowSize = DropShadowSize * 3;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawGlowShadow,The following statement contains a magic number: feather = 50;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign)                  {                      case ContentAlignment.TopLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.MiddleLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.BottomLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      default:                          throw new ArgumentOutOfRangeException("textAlign");                  }
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign)                  {                      case ContentAlignment.TopLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.MiddleLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.BottomLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      default:                          throw new ArgumentOutOfRangeException("textAlign");                  }
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign)                  {                      case ContentAlignment.TopLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.MiddleLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.BottomLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      default:                          throw new ArgumentOutOfRangeException("textAlign");                  }
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign)                  {                      case ContentAlignment.TopLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.MiddleLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.BottomLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      default:                          throw new ArgumentOutOfRangeException("textAlign");                  }
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign)                  {                      case ContentAlignment.TopLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.MiddleLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.BottomLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      default:                          throw new ArgumentOutOfRangeException("textAlign");                  }
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawLabel,The following statement contains a magic number: switch (textAlign)                  {                      case ContentAlignment.TopLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.TopRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top;                          break;                      case ContentAlignment.MiddleLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.MiddleRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Top + padding.Top + ((bounds.Height - height) / 2);                          break;                      case ContentAlignment.BottomLeft:                          x = bounds.Left + padding.Left;                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomCenter:                          x = bounds.Left + padding.Left + (((bounds.Width - width) / 2) - padding.Right);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      case ContentAlignment.BottomRight:                          x = bounds.Right - (padding.Right + width);                          y = bounds.Bottom - (padding.Bottom + height);                          break;                      default:                          throw new ArgumentOutOfRangeException("textAlign");                  }
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetInterpolationMode,The following statement contains a magic number: Zoom < 100
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,UpdateScrollbars,The following statement contains a magic number: horizontal.SmallChange = 10;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,UpdateScrollbars,The following statement contains a magic number: vertical.SmallChange = 10;
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,PerformActualSize,The following statement contains a magic number: SetZoom(100' ImageBoxZoomActions.ActualSize | (Zoom < 100 ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut)' source);
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,PerformActualSize,The following statement contains a magic number: SetZoom(100' ImageBoxZoomActions.ActualSize | (Zoom < 100 ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut)' source);
Magic Number,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,GetZoomLevel,The following statement contains a magic number: switch (action)              {                  case ImageBoxZoomActions.None:                      result = Zoom;                      break;                  case ImageBoxZoomActions.ZoomIn:                      result = ZoomLevels.NextZoom((int)Zoom);                      break;                  case ImageBoxZoomActions.ZoomOut:                      result = ZoomLevels.PreviousZoom((int)Zoom);                      break;                  case ImageBoxZoomActions.ActualSize:                      result = 100;                      break;                  default:                      throw new ArgumentOutOfRangeException("action");              }
Missing Default,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawBackground,The following switch statement is missing a default case: switch (GridDisplayMode)                  {                      case ImageBoxGridDisplayMode.Image:                          Rectangle fillRectangle;                            fillRectangle = GetImageViewPort();                          e.Graphics.FillRectangle(_texture' fillRectangle);                          break;                        case ImageBoxGridDisplayMode.Client:                          e.Graphics.FillRectangle(_texture' innerRectangle);                          break;                  }
Missing Default,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,DrawImageBorder,The following switch statement is missing a default case: switch (ImageBorderStyle)                  {                      case ImageBoxBorderStyle.FixedSingleDropShadow:                          DrawDropShadow(graphics' viewPort);                          break;                      case ImageBoxBorderStyle.FixedSingleGlowShadow:                          DrawGlowShadow(graphics' viewPort);                          break;                  }
Missing Default,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,OnSelected,The following switch statement is missing a default case: switch (SelectionMode)              {                  case ImageBoxSelectionMode.Zoom:                      if (SelectionRegion.Width > SelectionDeadZone && SelectionRegion.Height > SelectionDeadZone)                      {                          ZoomToRegion(SelectionRegion);                          SelectNone();                      }                      break;              }
Missing Default,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ProcessImageShortcuts,The following switch statement is missing a default case: switch (e.KeyCode)              {                  //case Keys.Home:                  //    if (this.AllowZoom)                  //    {                  //        this.PerformActualSize(ImageBoxActionSources.User);                  //    }                  //    break;                    //case Keys.PageDown:                  case Keys.Oemplus:                      PerformZoomIn(ImageBoxActionSources.User' true);                      break;                    //case Keys.PageUp:                  case Keys.OemMinus:                      PerformZoomOut(ImageBoxActionSources.User' true);                      break;              }
Missing Default,ImageGlass,ImageBox,D:\research\architectureSmells\repos\d2phap_ImageGlass\Source\Components\ImageGlass.ImageBox\ImageBox.cs,ProcessScrollingShortcuts,The following switch statement is missing a default case: switch (e.KeyCode)              {                  case Keys.Left:                      AdjustScroll(-(e.Modifiers == Keys.None ? HorizontalScroll.SmallChange : HorizontalScroll.LargeChange)' 0);                      break;                    case Keys.Right:                      AdjustScroll(e.Modifiers == Keys.None ? HorizontalScroll.SmallChange : HorizontalScroll.LargeChange' 0);                      break;                    case Keys.Up:                      AdjustScroll(0' -(e.Modifiers == Keys.None ? VerticalScroll.SmallChange : VerticalScroll.LargeChange));                      break;                    case Keys.Down:                      AdjustScroll(0' e.Modifiers == Keys.None ? VerticalScroll.SmallChange : VerticalScroll.LargeChange);                      break;              }
