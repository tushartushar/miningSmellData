Implementation smell,Namespace,Class,File,Method,Description
Long Method,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The method has 129 lines of code.
Complex Method,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ExtractTitleTokens,Cyclomatic complexity of the method is 10
Long Parameter List,Snowflake.Emulator,EmulatorAdapter,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Emulator\EmulatorAdapter.cs,EmulatorAdapter,The method has 5 parameters. Parameters: provision' stoneProvider' collectionStore' biosManager' saveManager
Long Parameter List,Snowflake.Emulator,EmulatorInstance,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Emulator\EmulatorInstance.cs,EmulatorInstance,The method has 6 parameters. Parameters: emulatorAdapter' game' file' saveSlot' platform' controllerPorts
Long Parameter List,Snowflake.Extensibility.Provisioning,PluginProvision,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Extensibility\Provisioning\PluginProvision.cs,PluginProvision,The method has 10 parameters. Parameters: logger' pluginProperties' configurationStore' name' author' description' version' contentDirectory' commonResourceDirectory' resourceDirectory
Long Parameter List,Snowflake.Input.Controller,ControllerLayout,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Input\Controller\ControllerLayout.cs,ControllerLayout,The method has 5 parameters. Parameters: layoutId' platforms' friendlyName' layout' isRealDevice
Long Parameter List,Snowflake.Loader,Module,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Loader\Module.cs,Module,The method has 5 parameters. Parameters: name' entry' loader' author' moduleDirectory
Long Parameter List,Snowflake.Loader,ModuleDefinition,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Loader\Module.cs,ModuleDefinition,The method has 7 parameters. Parameters: name' entry' loader' frameworkVersion' author' version' loaderOptions
Long Parameter List,Snowflake.Platform,PlatformInfo,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Platform\PlatformInfo.cs,PlatformInfo,The method has 6 parameters. Parameters: platformId' name' metadata' fileTypes' biosFiles' maximumInputs
Long Parameter List,Snowflake.Shiragame,RomInfo,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Shiragame\RomInfo.cs,RomInfo,The method has 7 parameters. Parameters: platformId' crc32' md5' sha1' mimetype' fileName' region
Long Identifier,Snowflake.Emulator,EmulatedPort,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Emulator\EmulatedPort.cs,EmulatedPort,The length of the parameter mappedControllerElementCollection is 33.
Long Statement,Snowflake.Configuration.Input,InputSerializer,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\Input\InputSerializer.cs,Serialize,The length of the statement  "            stringBuilder.Append(this.ConfigurationSerializer.SerializeHeader(inputTemplate.Descriptor.SectionName.Replace("{N}"' inputTemplate.PlayerIndex.ToString()))); " is 158.
Long Statement,Snowflake.Configuration.Input,InputSerializer,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\Input\InputSerializer.cs,Serialize,The length of the statement  "                stringBuilder.AppendLine(this.ConfigurationSerializer.SerializeLine(config.OptionName.Replace("{N}"' inputTemplate.PlayerIndex.ToString())' inputOptions.Values[config.OptionKey].Value)); " is 186.
Long Statement,Snowflake.Configuration.Input,InputSerializer,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\Input\InputSerializer.cs,Serialize,The length of the statement  "                stringBuilder.AppendLine(this.SerializeInput(input.OptionName.Replace("{N}"' inputTemplate.PlayerIndex.ToString())' inputTemplate.Values[input.KeyName]' inputMapping)); " is 168.
Long Statement,Snowflake.Configuration.Input,InputSerializer,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\Input\InputSerializer.cs,Serialize,The length of the statement  "            stringBuilder.Append(this.ConfigurationSerializer.SerializeFooter(inputTemplate.Descriptor.SectionName.Replace("{N}"' inputTemplate.PlayerIndex.ToString()))); " is 158.
Long Statement,Snowflake.Configuration.Input,InputSerializer,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\Input\InputSerializer.cs,SerializeInput,The length of the statement  "                element == ControllerElement.NoElement ? this.ConfigurationSerializer.SerializeLine(key' this.ConfigurationSerializer.TypeMapper.ConvertValue((object)null)) " is 156.
Long Statement,Snowflake.Extensibility.Provisioning,JsonPluginProperties,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Extensibility\Provisioning\JsonPluginProperties.cs,GetDictionary,The length of the statement  "            return this.propertyRoot.Value<JToken>(key)?.ToObject<IDictionary<string' string>>() ?? new Dictionary<string' string>(); " is 121.
Long Statement,Snowflake.Input.Controller.Mapped,SqliteMappedControllerElementCollectionStore,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Input\Controller\Mapped\SqliteMappedControllerElementCollectionStore.cs,GetMappingProfile,The length of the statement  "                dynamic result = dbConnection.Query<dynamic>(@"SELECT * FROM mappings WHERE ControllerId = @controllerId AND DeviceId = @deviceId AND ProfileName = @profileName"' " is 162.
Long Statement,Snowflake.Input.Controller.Mapped,SqliteMappedControllerElementCollectionStore,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Input\Controller\Mapped\SqliteMappedControllerElementCollectionStore.cs,GetMappingProfile,The length of the statement  "                    if (element.Key == "DeviceId" || element.Key == "ControllerId" || element.Key == "ProfileName" || element.Value == null) " is 120.
Long Statement,Snowflake.Input.Controller.Mapped,SqliteMappedControllerElementCollectionStore,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Input\Controller\Mapped\SqliteMappedControllerElementCollectionStore.cs,GetProfileNames,The length of the statement  "                var result = dbConnection.Query<string>(@"SELECT ProfileName FROM mappings WHERE ControllerId = @controllerId AND DeviceId = @deviceId"' " is 136.
Long Statement,Snowflake.Input.Controller.Mapped,SqliteMappedControllerElementCollectionStore,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Input\Controller\Mapped\SqliteMappedControllerElementCollectionStore.cs,SetMappingProfile,The length of the statement  "                SqlMapper.Execute(dbConnection' $@"INSERT OR REPLACE INTO mappings ({query.Item2}) VALUES ({query.Item1})"' query.Item3); // will this work? " is 140.
Long Statement,Snowflake.Input.Controller.Mapped,SqliteMappedControllerElementCollectionStore,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Input\Controller\Mapped\SqliteMappedControllerElementCollectionStore.cs,BuildQuery,The length of the statement  "            return new Tuple<string' string' dynamic>(parameters.ToString()' parameters.Replace("@"' string.Empty).ToString()' queryObject); " is 128.
Long Statement,Snowflake.Loader,ServiceProvider,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Loader\ServiceProvider.cs,Get,The length of the statement  "            throw new InvalidOperationException($"Service container is not authorized to provide service {typeof(T).FullName} or service does not exist."); " is 143.
Long Statement,Snowflake.Records.File,SqliteFileLibrary,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\File\SqliteFileLibrary.cs,SearchByMetadata,The length of the statement  "            const string sql = @"SELECT * FROM files WHERE uuid IN (SELECT record FROM metadata WHERE key = @key AND value LIKE @likeValue); " is 128.
Long Statement,Snowflake.Records.File,SqliteFileLibrary,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\File\SqliteFileLibrary.cs,GetByMetadata,The length of the statement  "            const string sql = @"SELECT * FROM files WHERE uuid IN (SELECT record FROM metadata WHERE key = @key AND value = @exactValue); " is 126.
Long Statement,Snowflake.Records.Game,SqliteGameLibrary,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\Game\SqliteGameLibrary.cs,SearchByMetadata,The length of the statement  "                                    UNION ALL SELECT files.uuid FROM games_files JOIN files ON files.uuid = files_uuid AND games_uuid IN (SELECT uuid FROM games WHERE uuid IN  " is 138.
Long Statement,Snowflake.Records.Game,SqliteGameLibrary,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\Game\SqliteGameLibrary.cs,GetByMetadata,The length of the statement  "                                    UNION ALL SELECT files.uuid FROM games_files JOIN files ON files.uuid = files_uuid AND games_uuid IN (SELECT uuid FROM games WHERE uuid IN  " is 138.
Long Statement,Snowflake.Records.Game,SqliteGameLibrary,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\Game\SqliteGameLibrary.cs,GetAllRecords,The length of the statement  "                                        UNION ALL SELECT files.uuid FROM games_files JOIN files ON files.uuid = files_uuid AND games_uuid IN (SELECT uuid FROM games))"; " is 128.
Long Statement,Snowflake.Records.Metadata,SqliteMetadataLibrary,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\Metadata\SqliteMetadataLibrary.cs,GetAllForElement,The length of the statement  "            return this.QueryMetadata(@"SELECT * FROM metadata WHERE record = @target"' new { target }).ToDictionary(m => m.Key' m => m); " is 125.
Long Statement,Snowflake.Records.Metadata,SqliteMetadataLibrary,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\Metadata\SqliteMetadataLibrary.cs,Get,The length of the statement  "            return this.QueryMetadata(@"SELECT * FROM metadata WHERE uuid = @metadataId LIMIT 1"' new { metadataId }).FirstOrDefault(); " is 123.
Long Statement,Snowflake.Records,RecordLibraryJunction<TParent;TChildren>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\RecordLibraryJunction.cs,MakeRelation,The length of the statement  "            dbConnection.Execute($@"INSERT OR REPLACE into {this.JunctionName}({this.ParentLibrary.LibraryName}_uuid' {this.ChildLibrary.LibraryName}_uuid) " is 143.
Long Statement,Snowflake.Records,RecordLibraryJunction<TParent;TChildren>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\RecordLibraryJunction.cs,MakeRelation,The length of the statement  "                                   VALUES (@parentUuid' @childUuid)"' childRelation.Select(c => new { parentUuid = parentRelation.Guid' childUuid = c.Guid })); " is 124.
Long Statement,Snowflake.Records,RecordLibraryJunction<TParent;TChildren>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\RecordLibraryJunction.cs,DeleteAllRelations,The length of the statement  "            dbConnection.Execute($@"DELETE FROM {this.JunctionName} WHERE {this.ParentLibrary.LibraryName}_uuid = @Guid"' parentRelation); " is 126.
Long Statement,Snowflake.Records,RecordLibraryJunction<TParent;TChildren>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\RecordLibraryJunction.cs,DeleteAllRelations,The length of the statement  "            dbConnection.Execute($@"DELETE FROM {this.JunctionName} WHERE {this.ParentLibrary.LibraryName}_uuid = @Guid"' new { Guid = parentRelation }); " is 141.
Long Statement,Snowflake.Records,RecordLibraryJunction<TParent;TChildren>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Records\RecordLibraryJunction.cs,DeleteAllRelations,The length of the statement  "            dbConnection.Execute($@"DELETE FROM {this.JunctionName} WHERE {this.ParentLibrary.LibraryName}_uuid IN @Guids"' new { Guids = parentRelation }); " is 144.
Long Statement,Snowflake.Romfile.Tokenizer,StructuredFilenameTokenizer,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\StructuredFilenameTokenizer.cs,GetTitle,The length of the statement  "            return Regex.Match(this.filename' @"(\([^]]*\))*(\[[^]]*\])*([\w\+\~\@\!\#\$\%\^\&\*\;\'\'\""\?\-\.\-\s]+)").Groups[3].Value.Trim(); " is 132.
Complex Conditional,Snowflake.Input.Controller.Mapped,SqliteMappedControllerElementCollectionStore,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Input\Controller\Mapped\SqliteMappedControllerElementCollectionStore.cs,GetMappingProfile,The conditional expression  "element.Key == "DeviceId" || element.Key == "ControllerId" || element.Key == "ProfileName" || element.Value == null"  is complex.
Complex Conditional,Snowflake.Romfile.Tokenizer,GoodToolsTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\GoodToolsTokenClassifier.cs,ClassifyBracketsTokens,The conditional expression  "tokenValue == "M" || tokenValue == "hFFE" || tokenValue == "C" || tokenValue == "S" || tokenValue == "hMxx""  is complex.
Complex Conditional,Snowflake.Scraping,ScrapeJob,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Scraping\ScrapeJob.cs,Proceed,The conditional expression  "requiredChildren.GroupBy(p => p.Key).Count() != requiredChildrenDirectives.Count()                          || requiredRoots.GroupBy(p => p.Key).Count() != requiredRootDirectives.Count()                          || requiredSiblings.GroupBy(p => p.Key).Count() != requiredSiblingDirectives.Count()                          || this.Context.GetChildren(matchingSeed).Select(p => p.Content.Type)                          .Intersect(excludedChildrenDirectives).Any()                          || this.Context.GetRootSeeds().Select(p => p.Content.Type)                          .Intersect(excludedRootDirectives).Any()                          || this.Context.GetSiblings(matchingSeed).Select(p => p.Content.Type)                          .Intersect(excludedSiblingDirectives).Any()"  is complex.
Magic Number,Snowflake.Configuration,CollectionCircularInterceptor<T>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\ConfigurationCollection.cs,Intercept,The following statement contains a magic number: if (invocation.Method.Name == nameof(@this.GetEnumerator))              {                  invocation.ReturnValue = @this.GetEnumerator(); // inherit enumerator.              }              else              {                  switch (invocation.Method.Name.Substring(4))                  {                      case nameof(@this.Configuration):                          invocation.ReturnValue = @this.Configuration;                          break;                      case nameof(@this.Descriptor):                          invocation.ReturnValue = @this.Descriptor;                          break;                      case "Item": // circular indexer                          invocation.ReturnValue = @this[(string)invocation.Arguments[0]];                          break;                      default:                          invocation.Proceed();                          break;                  }              }
Magic Number,Snowflake.Configuration,CollectionInterceptor<T>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\ConfigurationCollection.cs,Intercept,The following statement contains a magic number: var propertyName = invocation.Method.Name.Substring(4);
Magic Number,Snowflake.Configuration.Interceptors,ConfigurationCircularInterceptor<T>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\Interceptors\ConfigurationCircularInterceptor.cs,Intercept,The following statement contains a magic number: switch (invocation.Method.Name.Substring(4))              {                  case nameof(@this.Configuration):                      invocation.ReturnValue = @this.Configuration;                      break;                  case nameof(@this.Descriptor):                      invocation.ReturnValue = @this.Descriptor;                      break;                  case nameof(@this.Values):                      invocation.ReturnValue = @this.Values;                      break;                  default:                      invocation.Proceed();                      break;              }
Magic Number,Snowflake.Configuration.Interceptors,ConfigurationInterceptor,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\Interceptors\ConfigurationInterceptor.cs,Intercept,The following statement contains a magic number: var propertyName = invocation.Method.Name.Substring(4);
Magic Number,Snowflake.Configuration.Interceptors,InputTemplateCircularInterceptor<T>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\Interceptors\InputTemplateCircularInterceptor.cs,Intercept,The following statement contains a magic number: switch (invocation.Method.Name.Substring(4))              {                  case nameof(@this.Configuration):                      invocation.ReturnValue = @this.Configuration;                      break;                  case nameof(@this.Options):                      invocation.ReturnValue = @this.Options;                      break;                  case nameof(@this.Values):                      invocation.ReturnValue = @this.Values;                      break;                  case nameof(@this.Descriptor):                      invocation.ReturnValue = @this.Descriptor;                      break;                  case nameof(@this.PlayerIndex):                      invocation.ReturnValue = @this.PlayerIndex;                      break;                  case nameof(@this.Template):                      invocation.ReturnValue = @this.Template;                      break;                  case "Item":                      if (invocation.Method.DeclaringType == typeof(IConfigurationSection))                      {                          if (invocation.Method.Name.StartsWith("set_"))                          {                              @this[(string)invocation.Arguments[0]] = invocation.Arguments[1];                          }                            if (invocation.Method.Name.StartsWith("get_"))                          {                              invocation.ReturnValue = @this[(string)invocation.Arguments[0]];                          }                            break;                      }                        if (invocation.Method.DeclaringType == typeof(IInputTemplate<T>))                      {                          if (invocation.Method.Name.StartsWith("set_"))                          {                              @this[(ControllerElement)invocation.Arguments[0]] = (ControllerElement)invocation.Arguments[1];                          }                      }                        break;                  default:                      invocation.Proceed();                      break;              }
Magic Number,Snowflake.Configuration.Interceptors,InputTemplateInterceptor<T>,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Configuration\Interceptors\InputTemplateInterceptor.cs,Intercept,The following statement contains a magic number: var propertyName = invocation.Method.Name.Substring(4);
Magic Number,Snowflake.Romfile.Tokenizer,StructuredFilenameTokenizer,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\StructuredFilenameTokenizer.cs,GetTitle,The following statement contains a magic number: return Regex.Match(this.filename' @"(\([^]]*\))*(\[[^]]*\])*([\w\+\~\@\!\#\$\%\^\&\*\;\'\'\""\?\-\.\-\s]+)").Groups[3].Value.Trim();
Magic Number,Snowflake.Romfile.Tokenizer,StructuredFilenameTokenizer,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\StructuredFilenameTokenizer.cs,GetParensTokens,The following statement contains a magic number: for (int i = 0; i < tagData.Count; i++)              {                  yield return (tagData[i].Groups[2].Value' i);              }
Magic Number,Snowflake.Romfile.Tokenizer,StructuredFilenameTokenizer,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\StructuredFilenameTokenizer.cs,GetBracketTokens,The following statement contains a magic number: for (int i = 0; i < tagData.Count; i++)              {                  yield return (tagData[i].Groups[2].Value' i);              }
Magic Number,Snowflake.Romfile.Tokenizer,GoodToolsTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\GoodToolsTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()))                  {                      yield return new StructuredFilenameToken(goodToolsCountryLookupTable[tokenValue.ToUpperInvariant()]'                         FieldType.Country'                         NamingConvention.GoodTools);                      continue;                  }                    switch (tokenValue)                  {                      case "1":                         yield return new StructuredFilenameToken("JP"'                             FieldType.Country'                             NamingConvention.GoodTools);                         yield return new StructuredFilenameToken("KR"'                             FieldType.Country'                             NamingConvention.GoodTools);                         continue;                      case "4":                         yield return new StructuredFilenameToken("US"'                             FieldType.Country'                             NamingConvention.GoodTools);                         yield return new StructuredFilenameToken("BR"'                              FieldType.Country'                              NamingConvention.GoodTools);                         continue;                      case "PD":                      case "Unl":                         yield return new StructuredFilenameToken(tokenValue'                            FieldType.CopyrightStatus'                            NamingConvention.GoodTools);                         continue;                      case "PC10":                      case "VS":                      case "M":                      case "Adam":                      case "BS":                      case "ST":                         yield return new StructuredFilenameToken(tokenValue'                            FieldType.System'                            NamingConvention.GoodTools);                         continue;                      case "5":                         yield return new StructuredFilenameToken("NTSC"'                            FieldType.Video'                            NamingConvention.GoodTools);                         break;                      case "8":                         yield return new StructuredFilenameToken("PAL"'                            FieldType.Video'                            NamingConvention.GoodTools);                         break;                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 &&                      int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.GoodTools);                      continue;                  }                    if (tokenValue.EndsWith("k") && tokenValue.Length == 3 &&                     int.TryParse(tokenValue.Substring(0' tokenValue.Length - 2)' out _))                      {                          yield return new StructuredFilenameToken(tokenValue'                                   FieldType.DumpInfo'                                   NamingConvention.GoodTools);                          continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,GoodToolsTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\GoodToolsTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()))                  {                      yield return new StructuredFilenameToken(goodToolsCountryLookupTable[tokenValue.ToUpperInvariant()]'                         FieldType.Country'                         NamingConvention.GoodTools);                      continue;                  }                    switch (tokenValue)                  {                      case "1":                         yield return new StructuredFilenameToken("JP"'                             FieldType.Country'                             NamingConvention.GoodTools);                         yield return new StructuredFilenameToken("KR"'                             FieldType.Country'                             NamingConvention.GoodTools);                         continue;                      case "4":                         yield return new StructuredFilenameToken("US"'                             FieldType.Country'                             NamingConvention.GoodTools);                         yield return new StructuredFilenameToken("BR"'                              FieldType.Country'                              NamingConvention.GoodTools);                         continue;                      case "PD":                      case "Unl":                         yield return new StructuredFilenameToken(tokenValue'                            FieldType.CopyrightStatus'                            NamingConvention.GoodTools);                         continue;                      case "PC10":                      case "VS":                      case "M":                      case "Adam":                      case "BS":                      case "ST":                         yield return new StructuredFilenameToken(tokenValue'                            FieldType.System'                            NamingConvention.GoodTools);                         continue;                      case "5":                         yield return new StructuredFilenameToken("NTSC"'                            FieldType.Video'                            NamingConvention.GoodTools);                         break;                      case "8":                         yield return new StructuredFilenameToken("PAL"'                            FieldType.Video'                            NamingConvention.GoodTools);                         break;                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 &&                      int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.GoodTools);                      continue;                  }                    if (tokenValue.EndsWith("k") && tokenValue.Length == 3 &&                     int.TryParse(tokenValue.Substring(0' tokenValue.Length - 2)' out _))                      {                          yield return new StructuredFilenameToken(tokenValue'                                   FieldType.DumpInfo'                                   NamingConvention.GoodTools);                          continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,GoodToolsTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\GoodToolsTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()))                  {                      yield return new StructuredFilenameToken(goodToolsCountryLookupTable[tokenValue.ToUpperInvariant()]'                         FieldType.Country'                         NamingConvention.GoodTools);                      continue;                  }                    switch (tokenValue)                  {                      case "1":                         yield return new StructuredFilenameToken("JP"'                             FieldType.Country'                             NamingConvention.GoodTools);                         yield return new StructuredFilenameToken("KR"'                             FieldType.Country'                             NamingConvention.GoodTools);                         continue;                      case "4":                         yield return new StructuredFilenameToken("US"'                             FieldType.Country'                             NamingConvention.GoodTools);                         yield return new StructuredFilenameToken("BR"'                              FieldType.Country'                              NamingConvention.GoodTools);                         continue;                      case "PD":                      case "Unl":                         yield return new StructuredFilenameToken(tokenValue'                            FieldType.CopyrightStatus'                            NamingConvention.GoodTools);                         continue;                      case "PC10":                      case "VS":                      case "M":                      case "Adam":                      case "BS":                      case "ST":                         yield return new StructuredFilenameToken(tokenValue'                            FieldType.System'                            NamingConvention.GoodTools);                         continue;                      case "5":                         yield return new StructuredFilenameToken("NTSC"'                            FieldType.Video'                            NamingConvention.GoodTools);                         break;                      case "8":                         yield return new StructuredFilenameToken("PAL"'                            FieldType.Video'                            NamingConvention.GoodTools);                         break;                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 &&                      int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.GoodTools);                      continue;                  }                    if (tokenValue.EndsWith("k") && tokenValue.Length == 3 &&                     int.TryParse(tokenValue.Substring(0' tokenValue.Length - 2)' out _))                      {                          yield return new StructuredFilenameToken(tokenValue'                                   FieldType.DumpInfo'                                   NamingConvention.GoodTools);                          continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,NoIntroTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\NoIntroTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.Contains("'"))                  {                      foreach (string subToken in tokenValue.Split("'").Select(t => t.Trim(' ')))                      {                          if (noIntroCountryLookupTable.Keys.Contains(subToken.ToUpperInvariant()))                          {                              yield return new StructuredFilenameToken(noIntroCountryLookupTable[subToken.ToUpperInvariant()]'                                  FieldType.Country'                                  NamingConvention.NoIntro);                              continue;                          }                            if (noIntroLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken.ToLowerInvariant()'                                  FieldType.Language'                                  NamingConvention.NoIntro);                          }                      }                  }                    if (noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()))                  {                      yield return new StructuredFilenameToken(noIntroCountryLookupTable[tokenValue.ToUpperInvariant()]'                          FieldType.Country'                          NamingConvention.NoIntro);                      continue;                  }                    if (noIntroLanguageLookupTable.Contains(tokenValue))                  {                      yield return new StructuredFilenameToken(tokenValue.ToLowerInvariant()'                          FieldType.Language'                          NamingConvention.NoIntro);                      continue;                  }                    if (tokenValue.StartsWith("v"))                  {                      yield return new StructuredFilenameToken(tokenValue.Substring(1)'                          FieldType.Version'                          NamingConvention.NoIntro);                      continue;                  }                    if (tokenValue.StartsWith("Rev "))                  {                      yield return new StructuredFilenameToken(tokenValue.Substring(4)'                          FieldType.Version'                          NamingConvention.NoIntro);                      continue;                  }                    if (tokenValue.StartsWith("Beta") || tokenValue.StartsWith("Proto") || tokenValue.StartsWith("Sample"))                  {                      yield return new StructuredFilenameToken(tokenValue'                         FieldType.DevelopmentStatus'                         NamingConvention.NoIntro);                      continue;                  }                    if (tokenValue == "Unl")                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.CopyrightStatus'                          NamingConvention.NoIntro);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.StartsWith("demo") && tokenPosition == 0)                  {                      hasDemo = true;                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Demo'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.StartsWith("19") || tokenValue.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Date'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.Contains("-"))                  {                      foreach (string subToken in tokenValue.Split("-"))                      {                          if (tosecLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Language'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (tosecCountryTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Country'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (subToken.StartsWith("19") || subToken.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Date'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                      }                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 && int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecLanguageLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                                 FieldType.Language'                                 NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCountryTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Country'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecVideoLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Video'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecSystemLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.System'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecDevLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCopyrightLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    foreach (string startsWith in tosecMediaLookupTable)                  {                      if (tokenValue.StartsWith(startsWith) && tokenPosition > (hasDemo ? 2 : 1))                      {                          if (tokenValue.Contains(" of "))                          {                              yield return new StructuredFilenameToken(tokenValue'                                    FieldType.MediaType'                                    NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            if (tokenValue.StartsWith("Side"))                          {                              yield return new StructuredFilenameToken(tokenValue'                                   FieldType.MediaType'                                   NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            continue;                      }                  }                    if ((tokenPosition == (hasDemo ? 2 : 1)) &&                      !NoIntroTokenClassifier.noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()) &&                      !GoodToolsTokenClassifier.goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpper()))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Publisher'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.StartsWith("demo") && tokenPosition == 0)                  {                      hasDemo = true;                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Demo'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.StartsWith("19") || tokenValue.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Date'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.Contains("-"))                  {                      foreach (string subToken in tokenValue.Split("-"))                      {                          if (tosecLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Language'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (tosecCountryTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Country'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (subToken.StartsWith("19") || subToken.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Date'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                      }                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 && int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecLanguageLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                                 FieldType.Language'                                 NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCountryTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Country'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecVideoLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Video'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecSystemLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.System'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecDevLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCopyrightLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    foreach (string startsWith in tosecMediaLookupTable)                  {                      if (tokenValue.StartsWith(startsWith) && tokenPosition > (hasDemo ? 2 : 1))                      {                          if (tokenValue.Contains(" of "))                          {                              yield return new StructuredFilenameToken(tokenValue'                                    FieldType.MediaType'                                    NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            if (tokenValue.StartsWith("Side"))                          {                              yield return new StructuredFilenameToken(tokenValue'                                   FieldType.MediaType'                                   NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            continue;                      }                  }                    if ((tokenPosition == (hasDemo ? 2 : 1)) &&                      !NoIntroTokenClassifier.noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()) &&                      !GoodToolsTokenClassifier.goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpper()))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Publisher'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.StartsWith("demo") && tokenPosition == 0)                  {                      hasDemo = true;                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Demo'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.StartsWith("19") || tokenValue.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Date'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.Contains("-"))                  {                      foreach (string subToken in tokenValue.Split("-"))                      {                          if (tosecLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Language'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (tosecCountryTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Country'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (subToken.StartsWith("19") || subToken.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Date'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                      }                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 && int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecLanguageLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                                 FieldType.Language'                                 NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCountryTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Country'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecVideoLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Video'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecSystemLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.System'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecDevLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCopyrightLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    foreach (string startsWith in tosecMediaLookupTable)                  {                      if (tokenValue.StartsWith(startsWith) && tokenPosition > (hasDemo ? 2 : 1))                      {                          if (tokenValue.Contains(" of "))                          {                              yield return new StructuredFilenameToken(tokenValue'                                    FieldType.MediaType'                                    NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            if (tokenValue.StartsWith("Side"))                          {                              yield return new StructuredFilenameToken(tokenValue'                                   FieldType.MediaType'                                   NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            continue;                      }                  }                    if ((tokenPosition == (hasDemo ? 2 : 1)) &&                      !NoIntroTokenClassifier.noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()) &&                      !GoodToolsTokenClassifier.goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpper()))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Publisher'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.StartsWith("demo") && tokenPosition == 0)                  {                      hasDemo = true;                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Demo'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.StartsWith("19") || tokenValue.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Date'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.Contains("-"))                  {                      foreach (string subToken in tokenValue.Split("-"))                      {                          if (tosecLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Language'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (tosecCountryTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Country'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (subToken.StartsWith("19") || subToken.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Date'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                      }                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 && int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecLanguageLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                                 FieldType.Language'                                 NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCountryTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Country'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecVideoLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Video'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecSystemLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.System'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecDevLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCopyrightLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    foreach (string startsWith in tosecMediaLookupTable)                  {                      if (tokenValue.StartsWith(startsWith) && tokenPosition > (hasDemo ? 2 : 1))                      {                          if (tokenValue.Contains(" of "))                          {                              yield return new StructuredFilenameToken(tokenValue'                                    FieldType.MediaType'                                    NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            if (tokenValue.StartsWith("Side"))                          {                              yield return new StructuredFilenameToken(tokenValue'                                   FieldType.MediaType'                                   NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            continue;                      }                  }                    if ((tokenPosition == (hasDemo ? 2 : 1)) &&                      !NoIntroTokenClassifier.noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()) &&                      !GoodToolsTokenClassifier.goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpper()))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Publisher'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.StartsWith("demo") && tokenPosition == 0)                  {                      hasDemo = true;                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Demo'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.StartsWith("19") || tokenValue.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Date'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.Contains("-"))                  {                      foreach (string subToken in tokenValue.Split("-"))                      {                          if (tosecLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Language'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (tosecCountryTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Country'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (subToken.StartsWith("19") || subToken.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Date'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                      }                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 && int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecLanguageLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                                 FieldType.Language'                                 NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCountryTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Country'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecVideoLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Video'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecSystemLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.System'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecDevLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCopyrightLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    foreach (string startsWith in tosecMediaLookupTable)                  {                      if (tokenValue.StartsWith(startsWith) && tokenPosition > (hasDemo ? 2 : 1))                      {                          if (tokenValue.Contains(" of "))                          {                              yield return new StructuredFilenameToken(tokenValue'                                    FieldType.MediaType'                                    NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            if (tokenValue.StartsWith("Side"))                          {                              yield return new StructuredFilenameToken(tokenValue'                                   FieldType.MediaType'                                   NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            continue;                      }                  }                    if ((tokenPosition == (hasDemo ? 2 : 1)) &&                      !NoIntroTokenClassifier.noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()) &&                      !GoodToolsTokenClassifier.goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpper()))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Publisher'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.StartsWith("demo") && tokenPosition == 0)                  {                      hasDemo = true;                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Demo'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.StartsWith("19") || tokenValue.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Date'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.Contains("-"))                  {                      foreach (string subToken in tokenValue.Split("-"))                      {                          if (tosecLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Language'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (tosecCountryTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Country'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (subToken.StartsWith("19") || subToken.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Date'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                      }                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 && int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecLanguageLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                                 FieldType.Language'                                 NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCountryTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Country'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecVideoLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Video'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecSystemLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.System'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecDevLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCopyrightLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    foreach (string startsWith in tosecMediaLookupTable)                  {                      if (tokenValue.StartsWith(startsWith) && tokenPosition > (hasDemo ? 2 : 1))                      {                          if (tokenValue.Contains(" of "))                          {                              yield return new StructuredFilenameToken(tokenValue'                                    FieldType.MediaType'                                    NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            if (tokenValue.StartsWith("Side"))                          {                              yield return new StructuredFilenameToken(tokenValue'                                   FieldType.MediaType'                                   NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            continue;                      }                  }                    if ((tokenPosition == (hasDemo ? 2 : 1)) &&                      !NoIntroTokenClassifier.noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()) &&                      !GoodToolsTokenClassifier.goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpper()))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Publisher'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.StartsWith("demo") && tokenPosition == 0)                  {                      hasDemo = true;                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Demo'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.StartsWith("19") || tokenValue.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Date'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.Contains("-"))                  {                      foreach (string subToken in tokenValue.Split("-"))                      {                          if (tosecLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Language'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (tosecCountryTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Country'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (subToken.StartsWith("19") || subToken.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Date'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                      }                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 && int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecLanguageLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                                 FieldType.Language'                                 NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCountryTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Country'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecVideoLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Video'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecSystemLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.System'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecDevLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCopyrightLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    foreach (string startsWith in tosecMediaLookupTable)                  {                      if (tokenValue.StartsWith(startsWith) && tokenPosition > (hasDemo ? 2 : 1))                      {                          if (tokenValue.Contains(" of "))                          {                              yield return new StructuredFilenameToken(tokenValue'                                    FieldType.MediaType'                                    NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            if (tokenValue.StartsWith("Side"))                          {                              yield return new StructuredFilenameToken(tokenValue'                                   FieldType.MediaType'                                   NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            continue;                      }                  }                    if ((tokenPosition == (hasDemo ? 2 : 1)) &&                      !NoIntroTokenClassifier.noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()) &&                      !GoodToolsTokenClassifier.goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpper()))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Publisher'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.StartsWith("demo") && tokenPosition == 0)                  {                      hasDemo = true;                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Demo'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.StartsWith("19") || tokenValue.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Date'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.Contains("-"))                  {                      foreach (string subToken in tokenValue.Split("-"))                      {                          if (tosecLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Language'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (tosecCountryTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Country'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (subToken.StartsWith("19") || subToken.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Date'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                      }                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 && int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecLanguageLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                                 FieldType.Language'                                 NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCountryTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Country'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecVideoLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Video'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecSystemLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.System'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecDevLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCopyrightLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    foreach (string startsWith in tosecMediaLookupTable)                  {                      if (tokenValue.StartsWith(startsWith) && tokenPosition > (hasDemo ? 2 : 1))                      {                          if (tokenValue.Contains(" of "))                          {                              yield return new StructuredFilenameToken(tokenValue'                                    FieldType.MediaType'                                    NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            if (tokenValue.StartsWith("Side"))                          {                              yield return new StructuredFilenameToken(tokenValue'                                   FieldType.MediaType'                                   NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            continue;                      }                  }                    if ((tokenPosition == (hasDemo ? 2 : 1)) &&                      !NoIntroTokenClassifier.noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()) &&                      !GoodToolsTokenClassifier.goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpper()))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Publisher'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ClassifyParensTokens,The following statement contains a magic number: foreach ((string tokenValue' int tokenPosition) in tokens)              {                  if (tokenValue.StartsWith("demo") && tokenPosition == 0)                  {                      hasDemo = true;                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Demo'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.StartsWith("19") || tokenValue.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Date'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tokenValue.Contains("-"))                  {                      foreach (string subToken in tokenValue.Split("-"))                      {                          if (tosecLanguageLookupTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Language'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (tosecCountryTable.Contains(subToken))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Country'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                            if (subToken.StartsWith("19") || subToken.StartsWith("20") && tokenPosition == (hasDemo ? 1 : 0))                          {                              yield return new StructuredFilenameToken(subToken'                                  FieldType.Date'                                  NamingConvention.TheOldSchoolEmulationCenter);                              continue;                          }                      }                  }                    if (tokenValue.StartsWith("M") && tokenValue.Length == 2 && int.TryParse(tokenValue.Substring(1)' out _))                  {                      yield return new StructuredFilenameToken(tokenValue'                               FieldType.Language'                               NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecLanguageLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                                 FieldType.Language'                                 NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCountryTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Country'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecVideoLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.Video'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecSystemLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.System'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecDevLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    if (tosecCopyrightLookupTable.Contains(tokenValue) && tokenPosition > (hasDemo ? 2 : 1))                  {                      yield return new StructuredFilenameToken(tokenValue'                          FieldType.DevelopmentStatus'                          NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    foreach (string startsWith in tosecMediaLookupTable)                  {                      if (tokenValue.StartsWith(startsWith) && tokenPosition > (hasDemo ? 2 : 1))                      {                          if (tokenValue.Contains(" of "))                          {                              yield return new StructuredFilenameToken(tokenValue'                                    FieldType.MediaType'                                    NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            if (tokenValue.StartsWith("Side"))                          {                              yield return new StructuredFilenameToken(tokenValue'                                   FieldType.MediaType'                                   NamingConvention.TheOldSchoolEmulationCenter);                              break;                          }                            continue;                      }                  }                    if ((tokenPosition == (hasDemo ? 2 : 1)) &&                      !NoIntroTokenClassifier.noIntroCountryLookupTable.Keys.Contains(tokenValue.ToUpperInvariant()) &&                      !GoodToolsTokenClassifier.goodToolsCountryLookupTable.Keys.Contains(tokenValue.ToUpper()))                  {                      yield return new StructuredFilenameToken(tokenValue'                              FieldType.Publisher'                              NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }              }
Magic Number,Snowflake.Romfile.Tokenizer,TosecTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\TosecTokenClassifier.cs,ExtractTitleTokens,The following statement contains a magic number: for (int i = 0; i < lastTokenIndex + 1; i++)              {                  string token = titleTokens[i];                  if (token.StartsWith("v") && token.Contains(".") && i == lastTokenIndex)                  {                      bool isVersion = true;                      foreach (char v in token.ToCharArray().Take(4))                      {                          if (v == 'v')                          {                              continue;                          }                            if (v == '.')                          {                              continue;                          }                            isVersion = int.TryParse(v.ToString()' out _);                      }                        if (isVersion)                      {                          yield return new StructuredFilenameToken(token.Substring(1)'                          FieldType.Version'                          NamingConvention.TheOldSchoolEmulationCenter);                          continue;                      }                  }                    if (token.StartsWith("v") && i == lastTokenIndex && long.TryParse(token.ToString().Substring(1)' out _))                  {                        yield return new StructuredFilenameToken(token.Substring(1)'                            FieldType.Version'                            NamingConvention.TheOldSchoolEmulationCenter);                        continue;                  }                    // the only game this will fail on is Guilty Gear Xrd Rev 2.                  if (token == "Rev" && i == lastTokenIndex - 1 && !titleBuilder                      .ToString().Contains("Guilty Gear Xrd")) // nice special case.                  {                      nextTokenIsRevision = true;                      continue;                  }                    if (nextTokenIsRevision)                  {                      yield return new StructuredFilenameToken(token'                             FieldType.Version'                             NamingConvention.TheOldSchoolEmulationCenter);                      continue;                  }                    titleBuilder.Append(token + " ");              }
Missing Default,Snowflake.Romfile.Tokenizer,GoodToolsTokenClassifier,C:\repos\SnowflakePowered_snowflake\src\Snowflake.Framework\Romfile\Tokenizer\TokenClassifiers\GoodToolsTokenClassifier.cs,ClassifyParensTokens,The following switch statement is missing a default case: switch (tokenValue)                  {                      case "1":                         yield return new StructuredFilenameToken("JP"'                             FieldType.Country'                             NamingConvention.GoodTools);                         yield return new StructuredFilenameToken("KR"'                             FieldType.Country'                             NamingConvention.GoodTools);                         continue;                      case "4":                         yield return new StructuredFilenameToken("US"'                             FieldType.Country'                             NamingConvention.GoodTools);                         yield return new StructuredFilenameToken("BR"'                              FieldType.Country'                              NamingConvention.GoodTools);                         continue;                      case "PD":                      case "Unl":                         yield return new StructuredFilenameToken(tokenValue'                            FieldType.CopyrightStatus'                            NamingConvention.GoodTools);                         continue;                      case "PC10":                      case "VS":                      case "M":                      case "Adam":                      case "BS":                      case "ST":                         yield return new StructuredFilenameToken(tokenValue'                            FieldType.System'                            NamingConvention.GoodTools);                         continue;                      case "5":                         yield return new StructuredFilenameToken("NTSC"'                            FieldType.Video'                            NamingConvention.GoodTools);                         break;                      case "8":                         yield return new StructuredFilenameToken("PAL"'                            FieldType.Video'                            NamingConvention.GoodTools);                         break;                  }
