Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cosmos.VS.Windows,AssemblyUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\AssemblyUC.xaml.cs,Display,The method has 154 lines of code.
Complex Method,Cosmos.VS.Windows,AssemblyUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\AssemblyUC.xaml.cs,Display,Cyclomatic complexity of the method is 13
Long Parameter List,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,UpdateRegisters,The method has 6 parameters. Parameters: aData' aOffset' a32' a16' a8Hi' a8Lo
Long Statement,Cosmos.VS.Windows,AssemblyUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\AssemblyUC.xaml.cs,Log,The length of the statement  "            //File.AppendAllText(@"c:\data\sources\AssemblyUC.log"' DateTime.Now.ToString("HH:mm:ss.ffffff: ") + String.Format(message' args) + Environment.NewLine); " is 153.
Long Statement,Cosmos.VS.Windows,CosmosMenuCmdSet,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\CosmosMenuCmdSet.cs,AddCommand,The length of the statement  "            OleMenuCommandService commandService = this.ServiceProvider.GetService(typeof(IMenuCommandService)) as OleMenuCommandService; " is 125.
Long Statement,Cosmos.VS.Windows,ConsoleUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ConsoleUC.xaml.cs,HandleChannelMessage,The length of the statement  "                mOut.WriteLine("Command '{0}' not recognized. Data = '{1}'"' aCommand' Encoding.ASCII.GetString(aData).Replace("\t"' "    ")); " is 126.
Long Statement,Cosmos.VS.Windows,InternalUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\InternalUC.xaml.cs,butnPingVSIP_Click,The length of the statement  "      MessageBox.Show("This only works if there is an active debug session' see comment in code for this event for more details."); " is 125.
Virtual Method Call from Constructor,Cosmos.VS.Windows,AssemblyUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\AssemblyUC.xaml.cs,AssemblyUC,The constructor "AssemblyUC" calls a virtual method "Update".
Empty Catch Block,Cosmos.VS.Windows,AssemblyUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\AssemblyUC.xaml.cs,OnASMCodeTextMouseUp,The method has an empty catch block.
Empty Catch Block,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,DoUpdate,The method has an empty catch block.
Magic Number,Cosmos.VS.Windows,AssemblyTW,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\AssemblyUC.xaml.cs,AssemblyTW,The following statement contains a magic number: BitmapResourceID = 301;
Magic Number,Cosmos.VS.Windows,AssemblyUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\AssemblyUC.xaml.cs,Display,The following statement contains a magic number: foreach (var xLine in mLines)              {                  string xDisplayLine = xLine.ToString();                    if (aFilter)                  {                      if (xLine is AsmLabel)                      {                          var xAsmLabel = (AsmLabel)xLine;                          xDisplayLine = xAsmLabel.Label + ":";                            // Skip ASM labels                          if (xAsmLabel.Comment.ToUpper() == "ASM")                          {                              continue;                          }                            if (!foundMETHOD_Prefix && xAsmLabel.Label.StartsWith("METHOD_"))                          {                              var xLabelParts = xAsmLabel.Label.Split('.');                              xLabelPrefixes.Add(xLabelParts[0] + ".");                              foundMETHOD_Prefix = true;                          }                          else if(!foundMethodName && !xAsmLabel.Label.StartsWith("METHOD_")                                                   && !xAsmLabel.Label.StartsWith("GUID_"))                          {                              var xLabelParts = xAsmLabel.Label.Split(':');                              xLabelPrefixes.Add(xLabelParts[0] + ".");                              foundMethodName = true;                          }                      }                      else                      {                          xDisplayLine = xLine.ToString();                      }                        // Replace all and not just labels so we get jumps' calls etc                      foreach(string xLabelPrefix in xLabelPrefixes)                      {                          xDisplayLine = xDisplayLine.Replace(xLabelPrefix' "");                      }                  }                    if (xLine is AsmLabel)                  {                      // Insert a blank line before labels' but not if its the top line                      if (tblkSource.Inlines.Count > 0)                      {                          tblkSource.Inlines.Add(new LineBreak());                          if (!foundCurrentLine)                          {                              mCurrentLineNumber++;                          }                            mCode.AppendLine();                      }                  }                  else                  {                      xDisplayLine = "\t" + xDisplayLine;                  }                    // Even though our code is often the source of the tab' it makes                  // more sense to do it this was because the number of space stays                  // in one place and also lets us differentiate from natural spaces.                  xDisplayLine = xDisplayLine.Replace("\t"' "  ");                    var xRun = new Run(xDisplayLine);                  xRun.FontFamily = xFont;                  mRunsToLines.Add(xRun' xLine);                    var gutterRect = new Rectangle()                  {                      Width = 11'                      Height = 11'                      Fill = Brushes.WhiteSmoke                  };                  tblkSource.Inlines.Add(gutterRect);                    // Set colour of line                  if (xLine is AsmLabel)                  {                      xRun.Foreground = Brushes.Black;                  }                  else if (xLine is AsmComment)                  {                      xRun.Foreground = Brushes.Green;                  }                  else if (xLine is AsmCode)                  {                      var xAsmCode = (AsmCode)xLine;                        gutterRect.MouseUp += gutterRect_MouseUp;                      gutterRect.Fill = Brushes.LightGray;                      mGutterRectsToCode.Add(gutterRect' xAsmCode);                      mGutterRectsToRun.Add(gutterRect' xRun);                      Log("Current AsmCodeLabel: '{0}'"' xAsmCode.AsmLabel);                      if (xAsmCode.LabelMatches(mCurrentLabel))                      {                          xRun.Foreground = Brushes.WhiteSmoke;                          xRun.Background = Brushes.DarkRed;                            Package.StateStorer.CurrLineId = GetLineId(xAsmCode);                          Package.StoreAllStates();                            foundCurrentLine = true;                          nextCodeDistFromCurrent = 0;                      }                      else                      {                          if (foundCurrentLine)                          {                              nextCodeDistFromCurrent++;                          }                            if(mASMBPs.Contains(GetLineId(xAsmCode)))                          {                              xRun.Background = Brushes.MediumVioletRed;                          }                          else if(Package.StateStorer.ContainsStatesForLine(GetLineId(xAsmCode)))                          {                              xRun.Background = Brushes.LightYellow;                          }                            xRun.Foreground = Brushes.Blue;                      }                        xRun.MouseUp += OnASMCodeTextMouseUp;                    }                  else                  { // Unknown type                      xRun.Foreground = Brushes.HotPink;                  }                    if (!foundCurrentLine)                  {                      mCurrentLineNumber++;                  }                  tblkSource.Inlines.Add(xRun);                  tblkSource.Inlines.Add(new LineBreak());                    mCode.AppendLine(xDisplayLine);              }
Magic Number,Cosmos.VS.Windows,AssemblyUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\AssemblyUC.xaml.cs,Display,The following statement contains a magic number: foreach (var xLine in mLines)              {                  string xDisplayLine = xLine.ToString();                    if (aFilter)                  {                      if (xLine is AsmLabel)                      {                          var xAsmLabel = (AsmLabel)xLine;                          xDisplayLine = xAsmLabel.Label + ":";                            // Skip ASM labels                          if (xAsmLabel.Comment.ToUpper() == "ASM")                          {                              continue;                          }                            if (!foundMETHOD_Prefix && xAsmLabel.Label.StartsWith("METHOD_"))                          {                              var xLabelParts = xAsmLabel.Label.Split('.');                              xLabelPrefixes.Add(xLabelParts[0] + ".");                              foundMETHOD_Prefix = true;                          }                          else if(!foundMethodName && !xAsmLabel.Label.StartsWith("METHOD_")                                                   && !xAsmLabel.Label.StartsWith("GUID_"))                          {                              var xLabelParts = xAsmLabel.Label.Split(':');                              xLabelPrefixes.Add(xLabelParts[0] + ".");                              foundMethodName = true;                          }                      }                      else                      {                          xDisplayLine = xLine.ToString();                      }                        // Replace all and not just labels so we get jumps' calls etc                      foreach(string xLabelPrefix in xLabelPrefixes)                      {                          xDisplayLine = xDisplayLine.Replace(xLabelPrefix' "");                      }                  }                    if (xLine is AsmLabel)                  {                      // Insert a blank line before labels' but not if its the top line                      if (tblkSource.Inlines.Count > 0)                      {                          tblkSource.Inlines.Add(new LineBreak());                          if (!foundCurrentLine)                          {                              mCurrentLineNumber++;                          }                            mCode.AppendLine();                      }                  }                  else                  {                      xDisplayLine = "\t" + xDisplayLine;                  }                    // Even though our code is often the source of the tab' it makes                  // more sense to do it this was because the number of space stays                  // in one place and also lets us differentiate from natural spaces.                  xDisplayLine = xDisplayLine.Replace("\t"' "  ");                    var xRun = new Run(xDisplayLine);                  xRun.FontFamily = xFont;                  mRunsToLines.Add(xRun' xLine);                    var gutterRect = new Rectangle()                  {                      Width = 11'                      Height = 11'                      Fill = Brushes.WhiteSmoke                  };                  tblkSource.Inlines.Add(gutterRect);                    // Set colour of line                  if (xLine is AsmLabel)                  {                      xRun.Foreground = Brushes.Black;                  }                  else if (xLine is AsmComment)                  {                      xRun.Foreground = Brushes.Green;                  }                  else if (xLine is AsmCode)                  {                      var xAsmCode = (AsmCode)xLine;                        gutterRect.MouseUp += gutterRect_MouseUp;                      gutterRect.Fill = Brushes.LightGray;                      mGutterRectsToCode.Add(gutterRect' xAsmCode);                      mGutterRectsToRun.Add(gutterRect' xRun);                      Log("Current AsmCodeLabel: '{0}'"' xAsmCode.AsmLabel);                      if (xAsmCode.LabelMatches(mCurrentLabel))                      {                          xRun.Foreground = Brushes.WhiteSmoke;                          xRun.Background = Brushes.DarkRed;                            Package.StateStorer.CurrLineId = GetLineId(xAsmCode);                          Package.StoreAllStates();                            foundCurrentLine = true;                          nextCodeDistFromCurrent = 0;                      }                      else                      {                          if (foundCurrentLine)                          {                              nextCodeDistFromCurrent++;                          }                            if(mASMBPs.Contains(GetLineId(xAsmCode)))                          {                              xRun.Background = Brushes.MediumVioletRed;                          }                          else if(Package.StateStorer.ContainsStatesForLine(GetLineId(xAsmCode)))                          {                              xRun.Background = Brushes.LightYellow;                          }                            xRun.Foreground = Brushes.Blue;                      }                        xRun.MouseUp += OnASMCodeTextMouseUp;                    }                  else                  { // Unknown type                      xRun.Foreground = Brushes.HotPink;                  }                    if (!foundCurrentLine)                  {                      mCurrentLineNumber++;                  }                  tblkSource.Inlines.Add(xRun);                  tblkSource.Inlines.Add(new LineBreak());                    mCode.AppendLine(xDisplayLine);              }
Magic Number,Cosmos.VS.Windows,AssemblyUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\AssemblyUC.xaml.cs,Display,The following statement contains a magic number: double offset = mCurrentLineNumber * 13.1;
Magic Number,Cosmos.VS.Windows,ConsoleTW,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ConsoleUC.xaml.cs,ConsoleTW,The following statement contains a magic number: BitmapResourceID = 301;
Magic Number,Cosmos.VS.Windows,DebuggerChannelUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\DebuggerChannelUC.cs,HandleChannelMessage,The following statement contains a magic number: HandleChannelMessage((byte)(aChannelAndCommand >> 8)' (byte)(aChannelAndCommand & 0xFF)' aData);
Magic Number,Cosmos.VS.Windows,InternalTW,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\InternalUC.xaml.cs,InternalTW,The following statement contains a magic number: BitmapResourceID = 301;
Magic Number,Cosmos.VS.Windows,MemoryViewUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\MemoryViewUC.xaml.cs,Split,The following statement contains a magic number: var xResult = new List<UInt32>(aData.Length / 4);
Magic Number,Cosmos.VS.Windows,MemoryViewUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\MemoryViewUC.xaml.cs,Split,The following statement contains a magic number: for (int i = 0; i < aData.Length; i = i + 4) {          UInt32 xValue = (UInt32)            (aData[i + 3] << 24 |            aData[i + 2] << 16 |            aData[i + 1] << 8 |            aData[i]);          xResult.Add(xValue);        }
Magic Number,Cosmos.VS.Windows,MemoryViewUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\MemoryViewUC.xaml.cs,Split,The following statement contains a magic number: for (int i = 0; i < aData.Length; i = i + 4) {          UInt32 xValue = (UInt32)            (aData[i + 3] << 24 |            aData[i + 2] << 16 |            aData[i + 1] << 8 |            aData[i]);          xResult.Add(xValue);        }
Magic Number,Cosmos.VS.Windows,MemoryViewUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\MemoryViewUC.xaml.cs,Split,The following statement contains a magic number: for (int i = 0; i < aData.Length; i = i + 4) {          UInt32 xValue = (UInt32)            (aData[i + 3] << 24 |            aData[i + 2] << 16 |            aData[i + 1] << 8 |            aData[i]);          xResult.Add(xValue);        }
Magic Number,Cosmos.VS.Windows,MemoryViewUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\MemoryViewUC.xaml.cs,Split,The following statement contains a magic number: for (int i = 0; i < aData.Length; i = i + 4) {          UInt32 xValue = (UInt32)            (aData[i + 3] << 24 |            aData[i + 2] << 16 |            aData[i + 1] << 8 |            aData[i]);          xResult.Add(xValue);        }
Magic Number,Cosmos.VS.Windows,MemoryViewUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\MemoryViewUC.xaml.cs,Split,The following statement contains a magic number: for (int i = 0; i < aData.Length; i = i + 4) {          UInt32 xValue = (UInt32)            (aData[i + 3] << 24 |            aData[i + 2] << 16 |            aData[i + 1] << 8 |            aData[i]);          xResult.Add(xValue);        }
Magic Number,Cosmos.VS.Windows,MemoryViewUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\MemoryViewUC.xaml.cs,Split,The following statement contains a magic number: for (int i = 0; i < aData.Length; i = i + 4) {          UInt32 xValue = (UInt32)            (aData[i + 3] << 24 |            aData[i + 2] << 16 |            aData[i + 1] << 8 |            aData[i]);          xResult.Add(xValue);        }
Magic Number,Cosmos.VS.Windows,RegistersTW,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,RegistersTW,The following statement contains a magic number: BitmapResourceID = 301;
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,UpdateRegisters,The following statement contains a magic number: a16.Value = a8Hi.Value << 8 | a8Lo.Value;
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,UpdateRegister32,The following statement contains a magic number: UInt32 x32 = (UInt32)                (aData[aOffset + 3] << 24 |                aData[aOffset + 2] << 16 |                aData[aOffset + 1] << 8 |                aData[aOffset]);
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,UpdateRegister32,The following statement contains a magic number: UInt32 x32 = (UInt32)                (aData[aOffset + 3] << 24 |                aData[aOffset + 2] << 16 |                aData[aOffset + 1] << 8 |                aData[aOffset]);
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,UpdateRegister32,The following statement contains a magic number: UInt32 x32 = (UInt32)                (aData[aOffset + 3] << 24 |                aData[aOffset + 2] << 16 |                aData[aOffset + 1] << 8 |                aData[aOffset]);
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,UpdateRegister32,The following statement contains a magic number: UInt32 x32 = (UInt32)                (aData[aOffset + 3] << 24 |                aData[aOffset + 2] << 16 |                aData[aOffset + 1] << 8 |                aData[aOffset]);
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,UpdateRegister32,The following statement contains a magic number: UInt32 x32 = (UInt32)                (aData[aOffset + 3] << 24 |                aData[aOffset + 2] << 16 |                aData[aOffset + 1] << 8 |                aData[aOffset]);
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,DoUpdate,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (mData == null)                      {                          dataEAX.Value = null;                          dataAX.Value = null;                          dataAH.Value = null;                          dataAL.Value = null;                            dataEBX.Value = null;                          dataBX.Value = null;                          dataBH.Value = null;                          dataBL.Value = null;                            dataECX.Value = null;                          dataCX.Value = null;                          dataCH.Value = null;                          dataCL.Value = null;                            dataEDX.Value = null;                          dataDX.Value = null;                          dataDH.Value = null;                          dataDL.Value = null;                            dataEBP.Value = null;                          mCurrEBP = 0x0;                            dataESI.Value = null;                          dataEDI.Value = null;                          dataESP.Value = null;                          dataEIP.Value = null;                      }                      else                      {                          try                          {                              UpdateRegisters(mData' 28' dataEAX' dataAX' dataAH' dataAL);                              UpdateRegisters(mData' 16' dataEBX' dataBX' dataBH' dataBL);                              UpdateRegisters(mData' 24' dataECX' dataCX' dataCH' dataCL);                              UpdateRegisters(mData' 20' dataEDX' dataDX' dataDH' dataDL);                              UpdateRegister32(mData' 8' dataEBP);                              UpdateRegister32(mData' 4' dataESI);                              UpdateRegister32(mData' 0' dataEDI);                              UpdateRegister32(mData' 32' dataESP);                              UpdateRegister32(mData' 36' dataEIP);                          }                          catch                          {                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,DoUpdate,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (mData == null)                      {                          dataEAX.Value = null;                          dataAX.Value = null;                          dataAH.Value = null;                          dataAL.Value = null;                            dataEBX.Value = null;                          dataBX.Value = null;                          dataBH.Value = null;                          dataBL.Value = null;                            dataECX.Value = null;                          dataCX.Value = null;                          dataCH.Value = null;                          dataCL.Value = null;                            dataEDX.Value = null;                          dataDX.Value = null;                          dataDH.Value = null;                          dataDL.Value = null;                            dataEBP.Value = null;                          mCurrEBP = 0x0;                            dataESI.Value = null;                          dataEDI.Value = null;                          dataESP.Value = null;                          dataEIP.Value = null;                      }                      else                      {                          try                          {                              UpdateRegisters(mData' 28' dataEAX' dataAX' dataAH' dataAL);                              UpdateRegisters(mData' 16' dataEBX' dataBX' dataBH' dataBL);                              UpdateRegisters(mData' 24' dataECX' dataCX' dataCH' dataCL);                              UpdateRegisters(mData' 20' dataEDX' dataDX' dataDH' dataDL);                              UpdateRegister32(mData' 8' dataEBP);                              UpdateRegister32(mData' 4' dataESI);                              UpdateRegister32(mData' 0' dataEDI);                              UpdateRegister32(mData' 32' dataESP);                              UpdateRegister32(mData' 36' dataEIP);                          }                          catch                          {                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,DoUpdate,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (mData == null)                      {                          dataEAX.Value = null;                          dataAX.Value = null;                          dataAH.Value = null;                          dataAL.Value = null;                            dataEBX.Value = null;                          dataBX.Value = null;                          dataBH.Value = null;                          dataBL.Value = null;                            dataECX.Value = null;                          dataCX.Value = null;                          dataCH.Value = null;                          dataCL.Value = null;                            dataEDX.Value = null;                          dataDX.Value = null;                          dataDH.Value = null;                          dataDL.Value = null;                            dataEBP.Value = null;                          mCurrEBP = 0x0;                            dataESI.Value = null;                          dataEDI.Value = null;                          dataESP.Value = null;                          dataEIP.Value = null;                      }                      else                      {                          try                          {                              UpdateRegisters(mData' 28' dataEAX' dataAX' dataAH' dataAL);                              UpdateRegisters(mData' 16' dataEBX' dataBX' dataBH' dataBL);                              UpdateRegisters(mData' 24' dataECX' dataCX' dataCH' dataCL);                              UpdateRegisters(mData' 20' dataEDX' dataDX' dataDH' dataDL);                              UpdateRegister32(mData' 8' dataEBP);                              UpdateRegister32(mData' 4' dataESI);                              UpdateRegister32(mData' 0' dataEDI);                              UpdateRegister32(mData' 32' dataESP);                              UpdateRegister32(mData' 36' dataEIP);                          }                          catch                          {                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,DoUpdate,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (mData == null)                      {                          dataEAX.Value = null;                          dataAX.Value = null;                          dataAH.Value = null;                          dataAL.Value = null;                            dataEBX.Value = null;                          dataBX.Value = null;                          dataBH.Value = null;                          dataBL.Value = null;                            dataECX.Value = null;                          dataCX.Value = null;                          dataCH.Value = null;                          dataCL.Value = null;                            dataEDX.Value = null;                          dataDX.Value = null;                          dataDH.Value = null;                          dataDL.Value = null;                            dataEBP.Value = null;                          mCurrEBP = 0x0;                            dataESI.Value = null;                          dataEDI.Value = null;                          dataESP.Value = null;                          dataEIP.Value = null;                      }                      else                      {                          try                          {                              UpdateRegisters(mData' 28' dataEAX' dataAX' dataAH' dataAL);                              UpdateRegisters(mData' 16' dataEBX' dataBX' dataBH' dataBL);                              UpdateRegisters(mData' 24' dataECX' dataCX' dataCH' dataCL);                              UpdateRegisters(mData' 20' dataEDX' dataDX' dataDH' dataDL);                              UpdateRegister32(mData' 8' dataEBP);                              UpdateRegister32(mData' 4' dataESI);                              UpdateRegister32(mData' 0' dataEDI);                              UpdateRegister32(mData' 32' dataESP);                              UpdateRegister32(mData' 36' dataEIP);                          }                          catch                          {                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,DoUpdate,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (mData == null)                      {                          dataEAX.Value = null;                          dataAX.Value = null;                          dataAH.Value = null;                          dataAL.Value = null;                            dataEBX.Value = null;                          dataBX.Value = null;                          dataBH.Value = null;                          dataBL.Value = null;                            dataECX.Value = null;                          dataCX.Value = null;                          dataCH.Value = null;                          dataCL.Value = null;                            dataEDX.Value = null;                          dataDX.Value = null;                          dataDH.Value = null;                          dataDL.Value = null;                            dataEBP.Value = null;                          mCurrEBP = 0x0;                            dataESI.Value = null;                          dataEDI.Value = null;                          dataESP.Value = null;                          dataEIP.Value = null;                      }                      else                      {                          try                          {                              UpdateRegisters(mData' 28' dataEAX' dataAX' dataAH' dataAL);                              UpdateRegisters(mData' 16' dataEBX' dataBX' dataBH' dataBL);                              UpdateRegisters(mData' 24' dataECX' dataCX' dataCH' dataCL);                              UpdateRegisters(mData' 20' dataEDX' dataDX' dataDH' dataDL);                              UpdateRegister32(mData' 8' dataEBP);                              UpdateRegister32(mData' 4' dataESI);                              UpdateRegister32(mData' 0' dataEDI);                              UpdateRegister32(mData' 32' dataESP);                              UpdateRegister32(mData' 36' dataEIP);                          }                          catch                          {                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,DoUpdate,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (mData == null)                      {                          dataEAX.Value = null;                          dataAX.Value = null;                          dataAH.Value = null;                          dataAL.Value = null;                            dataEBX.Value = null;                          dataBX.Value = null;                          dataBH.Value = null;                          dataBL.Value = null;                            dataECX.Value = null;                          dataCX.Value = null;                          dataCH.Value = null;                          dataCL.Value = null;                            dataEDX.Value = null;                          dataDX.Value = null;                          dataDH.Value = null;                          dataDL.Value = null;                            dataEBP.Value = null;                          mCurrEBP = 0x0;                            dataESI.Value = null;                          dataEDI.Value = null;                          dataESP.Value = null;                          dataEIP.Value = null;                      }                      else                      {                          try                          {                              UpdateRegisters(mData' 28' dataEAX' dataAX' dataAH' dataAL);                              UpdateRegisters(mData' 16' dataEBX' dataBX' dataBH' dataBL);                              UpdateRegisters(mData' 24' dataECX' dataCX' dataCH' dataCL);                              UpdateRegisters(mData' 20' dataEDX' dataDX' dataDH' dataDL);                              UpdateRegister32(mData' 8' dataEBP);                              UpdateRegister32(mData' 4' dataESI);                              UpdateRegister32(mData' 0' dataEDI);                              UpdateRegister32(mData' 32' dataESP);                              UpdateRegister32(mData' 36' dataEIP);                          }                          catch                          {                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,DoUpdate,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (mData == null)                      {                          dataEAX.Value = null;                          dataAX.Value = null;                          dataAH.Value = null;                          dataAL.Value = null;                            dataEBX.Value = null;                          dataBX.Value = null;                          dataBH.Value = null;                          dataBL.Value = null;                            dataECX.Value = null;                          dataCX.Value = null;                          dataCH.Value = null;                          dataCL.Value = null;                            dataEDX.Value = null;                          dataDX.Value = null;                          dataDH.Value = null;                          dataDL.Value = null;                            dataEBP.Value = null;                          mCurrEBP = 0x0;                            dataESI.Value = null;                          dataEDI.Value = null;                          dataESP.Value = null;                          dataEIP.Value = null;                      }                      else                      {                          try                          {                              UpdateRegisters(mData' 28' dataEAX' dataAX' dataAH' dataAL);                              UpdateRegisters(mData' 16' dataEBX' dataBX' dataBH' dataBL);                              UpdateRegisters(mData' 24' dataECX' dataCX' dataCH' dataCL);                              UpdateRegisters(mData' 20' dataEDX' dataDX' dataDH' dataDL);                              UpdateRegister32(mData' 8' dataEBP);                              UpdateRegister32(mData' 4' dataESI);                              UpdateRegister32(mData' 0' dataEDI);                              UpdateRegister32(mData' 32' dataESP);                              UpdateRegister32(mData' 36' dataEIP);                          }                          catch                          {                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,RegistersUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\RegistersUC.xaml.cs,DoUpdate,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (mData == null)                      {                          dataEAX.Value = null;                          dataAX.Value = null;                          dataAH.Value = null;                          dataAL.Value = null;                            dataEBX.Value = null;                          dataBX.Value = null;                          dataBH.Value = null;                          dataBL.Value = null;                            dataECX.Value = null;                          dataCX.Value = null;                          dataCH.Value = null;                          dataCL.Value = null;                            dataEDX.Value = null;                          dataDX.Value = null;                          dataDH.Value = null;                          dataDL.Value = null;                            dataEBP.Value = null;                          mCurrEBP = 0x0;                            dataESI.Value = null;                          dataEDI.Value = null;                          dataESP.Value = null;                          dataEIP.Value = null;                      }                      else                      {                          try                          {                              UpdateRegisters(mData' 28' dataEAX' dataAX' dataAH' dataAL);                              UpdateRegisters(mData' 16' dataEBX' dataBX' dataBH' dataBL);                              UpdateRegisters(mData' 24' dataECX' dataCX' dataCH' dataCL);                              UpdateRegisters(mData' 20' dataEDX' dataDX' dataDH' dataDL);                              UpdateRegister32(mData' 8' dataEBP);                              UpdateRegister32(mData' 4' dataESI);                              UpdateRegister32(mData' 0' dataEDI);                              UpdateRegister32(mData' 32' dataESP);                              UpdateRegister32(mData' 36' dataEIP);                          }                          catch                          {                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,CosmosWindowsPackage,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\CosmosWindowsPackage.cs,ProcessMessage,The following statement contains a magic number: while (true)              {                  lock (mCommand)                  {                      if (mCommand.Count == 0)                      {                          break;                      }                      xCmd = mCommand.Dequeue();                      xMsg = mMessage.Dequeue();                  }                  if (xCmd <= 127)                  {                      // debug channel                      switch (xCmd)                      {                          case Debugger2Windows.Noop:                              break;                            case Debugger2Windows.Stack:                              UpdateWindow(typeof(StackTW)' "STACK"' xMsg);                              break;                            case Debugger2Windows.Frame:                              UpdateWindow(typeof(StackTW)' "FRAME"' xMsg);                              break;                            case Debugger2Windows.Registers:                              UpdateWindow(typeof(RegistersTW)' null' xMsg);                              break;                            case Debugger2Windows.Quit:                              break;                            case Debugger2Windows.AssemblySource:                              UpdateWindow(typeof(AssemblyTW)' null' xMsg);                              break;                            case Debugger2Windows.PongVSIP:                              UpdateWindow(typeof(InternalTW)' null' Encoding.UTF8.GetBytes("Pong from VSIP"));                              break;                            case Debugger2Windows.PongDebugStub:                              UpdateWindow(typeof(InternalTW)' null' Encoding.UTF8.GetBytes("Pong from DebugStub"));                              break;                            case Debugger2Windows.OutputPane:                              System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                                                                                   (Action)delegate                                                                                   {                                                                                       Global.OutputPane.OutputString(Encoding.UTF8.GetString(xMsg));                                                                                   }                                  );                              break;                            case Debugger2Windows.OutputClear:                              System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                                                                                   (Action)delegate ()                                                                                           {                                                                                               Global.OutputPane.Clear();                                                                                               StateStorer.ClearState();                                                                                           });                              break;                      }                  }                  else                  {                      UpdateChannelWindows(xCmd' xMsg);                  }              }
Magic Number,Cosmos.VS.Windows,StackTW,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\StackUC.xaml.cs,StackTW,The following statement contains a magic number: BitmapResourceID = 301;
Magic Number,Cosmos.VS.Windows,StackUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\StackUC.xaml.cs,UpdateFrame,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (aData == null)                      {                          memvEBP.Clear();                      }                      else                      {                          try                          {                              var xValues = MemoryViewUC.Split(aData);                              int xCount = xValues.Count;                              memvEBP.Clear();                              for (int i = 0; i < xCount; i++)                              {                                  // We start at EBP + 8' because lower is not transmitted                                  // [EBP] is old EBP - not needed                                  // [EBP + 4] is saved EIP - not needed                                  memvEBP.Add("[EBP + " + (i * 4 + 8) + "]"' xValues[i]);                              }                          }                          catch                          {                              memvEBP.Clear();                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,StackUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\StackUC.xaml.cs,UpdateFrame,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (aData == null)                      {                          memvEBP.Clear();                      }                      else                      {                          try                          {                              var xValues = MemoryViewUC.Split(aData);                              int xCount = xValues.Count;                              memvEBP.Clear();                              for (int i = 0; i < xCount; i++)                              {                                  // We start at EBP + 8' because lower is not transmitted                                  // [EBP] is old EBP - not needed                                  // [EBP + 4] is saved EIP - not needed                                  memvEBP.Add("[EBP + " + (i * 4 + 8) + "]"' xValues[i]);                              }                          }                          catch                          {                              memvEBP.Clear();                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,StackUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\StackUC.xaml.cs,UpdateStack,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (aData == null)                      {                          memvESP.Clear();                      }                      else                      {                          try                          {                              var xValues = MemoryViewUC.Split(aData);                              int xCount = xValues.Count;                              memvESP.Clear();                              for (int i = 0; i < xCount; i++)                              {                                  memvESP.Add(("[EBP - " + ((xCount - i) * 4) + "]").PadRight(10) + " [ESP + " + (i * 4) + "]"' xValues[i]);                              }                          }                          catch                          {                              memvESP.Clear();                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,StackUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\StackUC.xaml.cs,UpdateStack,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (aData == null)                      {                          memvESP.Clear();                      }                      else                      {                          try                          {                              var xValues = MemoryViewUC.Split(aData);                              int xCount = xValues.Count;                              memvESP.Clear();                              for (int i = 0; i < xCount; i++)                              {                                  memvESP.Add(("[EBP - " + ((xCount - i) * 4) + "]").PadRight(10) + " [ESP + " + (i * 4) + "]"' xValues[i]);                              }                          }                          catch                          {                              memvESP.Clear();                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,StackUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\StackUC.xaml.cs,UpdateStack,The following statement contains a magic number: System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                  (Action)delegate()                  {                      if (aData == null)                      {                          memvESP.Clear();                      }                      else                      {                          try                          {                              var xValues = MemoryViewUC.Split(aData);                              int xCount = xValues.Count;                              memvESP.Clear();                              for (int i = 0; i < xCount; i++)                              {                                  memvESP.Add(("[EBP - " + ((xCount - i) * 4) + "]").PadRight(10) + " [ESP + " + (i * 4) + "]"' xValues[i]);                              }                          }                          catch                          {                              memvESP.Clear();                          }                      }                  }              );
Magic Number,Cosmos.VS.Windows,StackUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\StackUC.xaml.cs,SetCurrentState,The following statement contains a magic number: if (aData == null)              {                  Update("FRAME"' null);                  Update("STACK"' null);              }              else              {                  int mDataLength = BitConverter.ToInt32(aData' 0);                  byte[] aFrameData = new byte[mDataLength];                  byte[] aStackData = new byte[aData.Length - mDataLength - 4];                  Array.Copy(aData' 4' aFrameData' 0' aFrameData.Length);                  Array.Copy(aData' 4 + mDataLength' aStackData' 0' aStackData.Length);                  Update("FRAME"' aFrameData);                  Update("STACK"' aStackData);              }
Magic Number,Cosmos.VS.Windows,StackUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\StackUC.xaml.cs,SetCurrentState,The following statement contains a magic number: if (aData == null)              {                  Update("FRAME"' null);                  Update("STACK"' null);              }              else              {                  int mDataLength = BitConverter.ToInt32(aData' 0);                  byte[] aFrameData = new byte[mDataLength];                  byte[] aStackData = new byte[aData.Length - mDataLength - 4];                  Array.Copy(aData' 4' aFrameData' 0' aFrameData.Length);                  Array.Copy(aData' 4 + mDataLength' aStackData' 0' aStackData.Length);                  Update("FRAME"' aFrameData);                  Update("STACK"' aStackData);              }
Magic Number,Cosmos.VS.Windows,StackUC,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\ToolWindows\StackUC.xaml.cs,SetCurrentState,The following statement contains a magic number: if (aData == null)              {                  Update("FRAME"' null);                  Update("STACK"' null);              }              else              {                  int mDataLength = BitConverter.ToInt32(aData' 0);                  byte[] aFrameData = new byte[mDataLength];                  byte[] aStackData = new byte[aData.Length - mDataLength - 4];                  Array.Copy(aData' 4' aFrameData' 0' aFrameData.Length);                  Array.Copy(aData' 4 + mDataLength' aStackData' 0' aStackData.Length);                  Update("FRAME"' aFrameData);                  Update("STACK"' aStackData);              }
Missing Default,Cosmos.VS.Windows,CosmosWindowsPackage,C:\repos\CosmosOS_Cosmos\source\Cosmos.VS.Windows\CosmosWindowsPackage.cs,ProcessMessage,The following switch statement is missing a default case: switch (xCmd)                      {                          case Debugger2Windows.Noop:                              break;                            case Debugger2Windows.Stack:                              UpdateWindow(typeof(StackTW)' "STACK"' xMsg);                              break;                            case Debugger2Windows.Frame:                              UpdateWindow(typeof(StackTW)' "FRAME"' xMsg);                              break;                            case Debugger2Windows.Registers:                              UpdateWindow(typeof(RegistersTW)' null' xMsg);                              break;                            case Debugger2Windows.Quit:                              break;                            case Debugger2Windows.AssemblySource:                              UpdateWindow(typeof(AssemblyTW)' null' xMsg);                              break;                            case Debugger2Windows.PongVSIP:                              UpdateWindow(typeof(InternalTW)' null' Encoding.UTF8.GetBytes("Pong from VSIP"));                              break;                            case Debugger2Windows.PongDebugStub:                              UpdateWindow(typeof(InternalTW)' null' Encoding.UTF8.GetBytes("Pong from DebugStub"));                              break;                            case Debugger2Windows.OutputPane:                              System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                                                                                   (Action)delegate                                                                                   {                                                                                       Global.OutputPane.OutputString(Encoding.UTF8.GetString(xMsg));                                                                                   }                                  );                              break;                            case Debugger2Windows.OutputClear:                              System.Windows.Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal'                                                                                   (Action)delegate ()                                                                                           {                                                                                               Global.OutputPane.Clear();                                                                                               StateStorer.ClearState();                                                                                           });                              break;                      }
