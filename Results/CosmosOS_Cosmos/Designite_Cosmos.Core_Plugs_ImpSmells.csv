Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The method has 109 lines of code.
Long Method,Cosmos.Core_Plugs.System,BufferImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BufferImpl.cs,__Memmove,The method has 109 lines of code.
Long Method,Cosmos.Core_Plugs.System,SRImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\SRImpl.cs,InternalGetResourceString,The method has 103 lines of code.
Complex Method,Cosmos.Core_Plugs.System,BufferImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BufferImpl.cs,__Memmove,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.Core_Plugs.System,SRImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\SRImpl.cs,InternalGetResourceString,Cyclomatic complexity of the method is 25
Complex Method,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,nativeCompareOrdinalEx,Cyclomatic complexity of the method is 11
Long Parameter List,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,TrySZBinarySearch,The method has 5 parameters. Parameters: aArray' sourceIndex' count' value' retVal
Long Parameter List,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,TrySZLastIndexOf,The method has 5 parameters. Parameters: aArray' sourceIndex' count' value' retVal
Long Parameter List,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,TrySZIndexOf,The method has 5 parameters. Parameters: aArray' sourceIndex' count' value' retVal
Long Parameter List,Cosmos.Core_Plugs.System,BufferImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BufferImpl.cs,InternalBlockCopy,The method has 5 parameters. Parameters: src' srcOffset' dst' dstOffset' count
Long Parameter List,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,Ctor,The method has 5 parameters. Parameters: aThis' aChars' aStringEmpty' aStringLength' aFirstChar
Long Parameter List,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,Ctor,The method has 7 parameters. Parameters: aThis' aChars' start' length' aStringEmpty' aStringLength' aFirstChar
Long Parameter List,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,Ctor,The method has 5 parameters. Parameters: aThis' aChars' aStringEmpty' aStringLength' aFirstChar
Long Parameter List,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,Ctor,The method has 7 parameters. Parameters: aThis' aChars' start' length' aStringEmpty' aStringLength' aFirstChar
Long Parameter List,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,Ctor,The method has 6 parameters. Parameters: aThis' aChar' aLength' aStringEmpty' aStringLength' aFirstChar
Long Parameter List,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,Format,The method has 5 parameters. Parameters: aProvider' aFormat' aArg0' aArg1' aArg2
Long Parameter List,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,IndexOf,The method has 5 parameters. Parameters: aThis' aSubstring' aIdx' aLength' aComparison
Long Parameter List,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,nativeCompareOrdinalEx,The method has 5 parameters. Parameters: aStrA' aIndexA' aStrB' aIndexB' aCount
Long Parameter List,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,CompareOrdinalHelper,The method has 6 parameters. Parameters: strA' indexA' countA' strB' indexB' countB
Long Statement,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The length of the statement  "            //Global.mDebugger.SendInternal("size " + size + " is composed of " + BlocksNum + " block of 16 bytes with " + ByteRemaining + " remainder"); " is 141.
Long Statement,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,nativeCompareOrdinalEx,The length of the statement  "            //mDebugger.SendInternal($"nativeCompareOrdinalEx : aStrA|aIndexA = {aStrA}|{aIndexA}' aStrB|aIndexB = {aStrB}|{aIndexB}' aCount = {aCount}"); " is 142.
Long Statement,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,nativeCompareOrdinalEx,The length of the statement  "                mDebugger.SendInternal("nativeCompareOrdinalEx : xLengthA == xLengthB && aIndexA == aIndexB && aStrA is the same object asaStrB' returning 0"); " is 143.
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: xBlocksNum = Math.DivRem(size' 16' out xByteRemaining);
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: fixed (int* destPtr = dest)              {                  Fill((byte*)destPtr' value' dest.Length * 4);              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: fixed (ushort* destPtr = dest)              {                  /* Broadcast 'value' fill all the integer register (0x42 --> 0x42424242) */                  int valueFiller = value * 0x10001;                  Fill((byte*)destPtr' valueFiller' dest.Length * 2);              }
Magic Number,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following statement contains a magic number: fixed (short* destPtr = dest)              {                  /* Broadcast 'value' fill all the integer register (0x42 --> 0x42424242) */                  int valueFiller = (ushort)value * 0x10001;                  Fill((byte*)destPtr' valueFiller' dest.Length * 2);              }
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,Clear,The following statement contains a magic number: aArray += 3;
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,TrySZLastIndexOf,The following statement contains a magic number: aArray += 4;
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,TrySZIndexOf,The following statement contains a magic number: aArray += 4;
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,GetValue,The following statement contains a magic number: aThis += 3;
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,GetValue,The following statement contains a magic number: switch (xElementSize)              {                  case 1:                      return *((byte*) aThis);                  case 2:                      return *((ushort*) aThis);                  case 3:                      return (*aThis) & 0x0FFFFFFF;                  case 4:                      return *aThis;              }
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,GetValue,The following statement contains a magic number: switch (xElementSize)              {                  case 1:                      return *((byte*) aThis);                  case 2:                      return *((ushort*) aThis);                  case 3:                      return (*aThis) & 0x0FFFFFFF;                  case 4:                      return *aThis;              }
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,GetValue,The following statement contains a magic number: switch (xElementSize)              {                  case 1:                      return *((byte*) aThis);                  case 2:                      return *((ushort*) aThis);                  case 3:                      return (*aThis) & 0x0FFFFFFF;                  case 4:                      return *aThis;              }
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,SetValue,The following statement contains a magic number: aThis += 3;
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,SetValue,The following statement contains a magic number: switch (xElementSize)              {                  case 1:                      *((byte*) aThis) = (byte) aValue;                      return;                  case 2:                      *((ushort*) aThis) = (ushort) aValue;                      return;                  case 3:                      *((uint*) aThis) = (uint) aValue;                      return;                  case 4:                      *((uint*) aThis) = (uint) aValue;                      return;              }
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,SetValue,The following statement contains a magic number: switch (xElementSize)              {                  case 1:                      *((byte*) aThis) = (byte) aValue;                      return;                  case 2:                      *((ushort*) aThis) = (ushort) aValue;                      return;                  case 3:                      *((uint*) aThis) = (uint) aValue;                      return;                  case 4:                      *((uint*) aThis) = (uint) aValue;                      return;              }
Magic Number,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,SetValue,The following statement contains a magic number: switch (xElementSize)              {                  case 1:                      *((byte*) aThis) = (byte) aValue;                      return;                  case 2:                      *((ushort*) aThis) = (ushort) aValue;                      return;                  case 3:                      *((uint*) aThis) = (uint) aValue;                      return;                  case 4:                      *((uint*) aThis) = (uint) aValue;                      return;              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: Contract.Ensures(Contract.Result<byte[]>().Length == 2);
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: Contract.Ensures(Contract.Result<byte[]>().Length == 2);
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: byte[] bytes = new byte[2];
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: Contract.Ensures(Contract.Result<byte[]>().Length == 4);
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: byte[] bytes = new byte[4];
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: Contract.Ensures(Contract.Result<byte[]>().Length == 8);
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: byte[] bytes = new byte[8];
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: Contract.Ensures(Contract.Result<byte[]>().Length == 2);
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: Contract.Ensures(Contract.Result<byte[]>().Length == 4);
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: Contract.Ensures(Contract.Result<byte[]>().Length == 8);
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: Contract.Ensures(Contract.Result<byte[]>().Length == 4);
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,GetBytes,The following statement contains a magic number: Contract.Ensures(Contract.Result<byte[]>().Length == 8);
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt16,The following statement contains a magic number: if (startIndex > value.Length - 2)                  ThrowValueArgumentTooSmall();
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt16,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 2 == 0)                  {                      // data is aligned                       return *((short*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (short)((*pbyte) | (*(pbyte + 1) << 8));                  }                  else                  {                      return (short)((*pbyte << 8) | (*(pbyte + 1)));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt16,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 2 == 0)                  {                      // data is aligned                       return *((short*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (short)((*pbyte) | (*(pbyte + 1) << 8));                  }                  else                  {                      return (short)((*pbyte << 8) | (*(pbyte + 1)));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt16,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 2 == 0)                  {                      // data is aligned                       return *((short*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (short)((*pbyte) | (*(pbyte + 1) << 8));                  }                  else                  {                      return (short)((*pbyte << 8) | (*(pbyte + 1)));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: if (startIndex > value.Length - 4)                  ThrowValueArgumentTooSmall();
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt32,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 4 == 0)                  {                      // data is aligned                       return *((int*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      return (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                  }                  else                  {                      return (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: if (startIndex > value.Length - 8)                  ThrowValueArgumentTooSmall();
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BitConverterImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BitConverterImpl.cs,ToInt64,The following statement contains a magic number: fixed (byte* pbyte = &value[startIndex])              {                  if (startIndex % 8 == 0)                  {                      // data is aligned                       return *((long*)pbyte);                  }                  else if (BitConverter.IsLittleEndian)                  {                      int i1 = (*pbyte) | (*(pbyte + 1) << 8) | (*(pbyte + 2) << 16) | (*(pbyte + 3) << 24);                      int i2 = (*(pbyte + 4)) | (*(pbyte + 5) << 8) | (*(pbyte + 6) << 16) | (*(pbyte + 7) << 24);                      return (uint)i1 | ((long)i2 << 32);                  }                  else                  {                      int i1 = (*pbyte << 24) | (*(pbyte + 1) << 16) | (*(pbyte + 2) << 8) | (*(pbyte + 3));                      int i2 = (*(pbyte + 4) << 24) | (*(pbyte + 5) << 16) | (*(pbyte + 6) << 8) | (*(pbyte + 7));                      return (uint)i2 | ((long)i1 << 32);                  }              }
Magic Number,Cosmos.Core_Plugs.System,BufferImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\BufferImpl.cs,__Memmove,The following statement contains a magic number: const int wsize = 2;
Magic Number,Cosmos.Core_Plugs.System,DateTimeImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DateTimeImpl.cs,get_Now,The following statement contains a magic number: return new DateTime(                  100 * BCDtoBIN(raw[10]) + BCDtoBIN(raw[9])' //YEAR                  BCDtoBIN(raw[8])' //MONTH                  BCDtoBIN(raw[7])' //DAY                  BCDtoBIN(raw[4])' //HOUR                  BCDtoBIN(raw[2])' //MINUTE                  BCDtoBIN(raw[0]) //SECOND              );
Magic Number,Cosmos.Core_Plugs.System,DateTimeImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DateTimeImpl.cs,get_Now,The following statement contains a magic number: return new DateTime(                  100 * BCDtoBIN(raw[10]) + BCDtoBIN(raw[9])' //YEAR                  BCDtoBIN(raw[8])' //MONTH                  BCDtoBIN(raw[7])' //DAY                  BCDtoBIN(raw[4])' //HOUR                  BCDtoBIN(raw[2])' //MINUTE                  BCDtoBIN(raw[0]) //SECOND              );
Magic Number,Cosmos.Core_Plugs.System,DateTimeImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DateTimeImpl.cs,get_Now,The following statement contains a magic number: return new DateTime(                  100 * BCDtoBIN(raw[10]) + BCDtoBIN(raw[9])' //YEAR                  BCDtoBIN(raw[8])' //MONTH                  BCDtoBIN(raw[7])' //DAY                  BCDtoBIN(raw[4])' //HOUR                  BCDtoBIN(raw[2])' //MINUTE                  BCDtoBIN(raw[0]) //SECOND              );
Magic Number,Cosmos.Core_Plugs.System,DateTimeImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DateTimeImpl.cs,get_Now,The following statement contains a magic number: return new DateTime(                  100 * BCDtoBIN(raw[10]) + BCDtoBIN(raw[9])' //YEAR                  BCDtoBIN(raw[8])' //MONTH                  BCDtoBIN(raw[7])' //DAY                  BCDtoBIN(raw[4])' //HOUR                  BCDtoBIN(raw[2])' //MINUTE                  BCDtoBIN(raw[0]) //SECOND              );
Magic Number,Cosmos.Core_Plugs.System,DateTimeImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DateTimeImpl.cs,get_Now,The following statement contains a magic number: return new DateTime(                  100 * BCDtoBIN(raw[10]) + BCDtoBIN(raw[9])' //YEAR                  BCDtoBIN(raw[8])' //MONTH                  BCDtoBIN(raw[7])' //DAY                  BCDtoBIN(raw[4])' //HOUR                  BCDtoBIN(raw[2])' //MINUTE                  BCDtoBIN(raw[0]) //SECOND              );
Magic Number,Cosmos.Core_Plugs.System,DateTimeImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DateTimeImpl.cs,get_Now,The following statement contains a magic number: return new DateTime(                  100 * BCDtoBIN(raw[10]) + BCDtoBIN(raw[9])' //YEAR                  BCDtoBIN(raw[8])' //MONTH                  BCDtoBIN(raw[7])' //DAY                  BCDtoBIN(raw[4])' //HOUR                  BCDtoBIN(raw[2])' //MINUTE                  BCDtoBIN(raw[0]) //SECOND              );
Magic Number,Cosmos.Core_Plugs.System,DateTimeImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DateTimeImpl.cs,get_Now,The following statement contains a magic number: return new DateTime(                  100 * BCDtoBIN(raw[10]) + BCDtoBIN(raw[9])' //YEAR                  BCDtoBIN(raw[8])' //MONTH                  BCDtoBIN(raw[7])' //DAY                  BCDtoBIN(raw[4])' //HOUR                  BCDtoBIN(raw[2])' //MINUTE                  BCDtoBIN(raw[0]) //SECOND              );
Magic Number,Cosmos.Core_Plugs.System,DelegateImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DelegateImpl.cs,InternalAllocLike,The following statement contains a magic number: uint xNeededSize = 1024;
Magic Number,Cosmos.Core_Plugs.System,DelegateImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DelegateImpl.cs,InternalAllocLike,The following statement contains a magic number: xNeededSize += 12;
Magic Number,Cosmos.Core_Plugs.System,DelegateImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\DelegateImpl.cs,InternalAllocLike,The following statement contains a magic number: for (int i = 0; i < 1024; i++)              {                  xResult[i] = xDelegateAsByte[i];              }
Magic Number,Cosmos.Core_Plugs.System,ObjectImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ObjectImpl.cs,MemberwiseClone,The following statement contains a magic number: var xSize = ObjectUtils.FieldDataOffset + xThisPointer[2];
Magic Number,Cosmos.Core_Plugs.System,ObjectImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ObjectImpl.cs,MemberwiseClone,The following statement contains a magic number: ulong xReturn = ((ulong)xResult) << (sizeof(ulong) / 2 * 8);
Magic Number,Cosmos.Core_Plugs.System,ObjectImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ObjectImpl.cs,MemberwiseClone,The following statement contains a magic number: ulong xReturn = ((ulong)xResult) << (sizeof(ulong) / 2 * 8);
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,BuildBadCharTable,The following statement contains a magic number: var badShift = new int[256];
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,BuildBadCharTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  badShift[i] = needle.Length;              }
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,ToLower,The following statement contains a magic number: return ChangeCasing(aThis' 65' 90' 32);
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,ToLower,The following statement contains a magic number: return ChangeCasing(aThis' 65' 90' 32);
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,ToLower,The following statement contains a magic number: return ChangeCasing(aThis' 65' 90' 32);
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,ToUpper,The following statement contains a magic number: return ChangeCasing(aThis' 97' 122' -32);
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,ToUpper,The following statement contains a magic number: return ChangeCasing(aThis' 97' 122' -32);
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,ToUpper,The following statement contains a magic number: return ChangeCasing(aThis' 97' 122' -32);
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,ToUpper,The following statement contains a magic number: return ChangeCasing(aThis' 97' 122' -32);
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,ToUpper,The following statement contains a magic number: return ChangeCasing(aThis' 97' 122' -32);
Magic Number,Cosmos.Core_Plugs.System,StringImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\StringImpl.cs,ToUpper,The following statement contains a magic number: return ChangeCasing(aThis' 97' 122' -32);
Magic Number,Cosmos.Core_Plugs.System,TypeImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\TypeImpl.cs,GetTypeFromHandle,The following statement contains a magic number: uint x = (uint)(aHandle >> 32);
Missing Default,Cosmos.Core_Plugs.MemoryOperations,MemoryOperationsImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\MemoryOperations\MemoryOperationsImpl.cs,Fill,The following switch statement is missing a default case: switch (size)              {                  case 0:                      return;                    case 1:                      *dest = (byte)value;                      return;                    case 2:                      *(short*)dest = (short)value;                      return;                    case 3:                      *(short*)dest = (short)value;                      *(dest + 2) = (byte)value;                      return;                    case 4:                      *(int*)dest = value;                      return;                    case 5:                      *(int*)dest = value;                      *(dest + 4) = (byte)value;                      return;                    case 6:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      return;                    case 7:                      *(int*)dest = value;                      *(short*)(dest + 4) = (short)value;                      *(dest + 6) = (byte)value;                      return;                    case 8:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      return;                    case 9:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(dest + 8) = (byte)value;                      return;                    case 10:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      return;                    case 11:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(short*)(dest + 8) = (short)value;                      *(dest + 10) = (byte)value;                      return;                    case 12:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      return;                    case 13:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(dest + 12) = (byte)value;                      return;                    case 14:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (byte)value;                      return;                    case 15:                      *(int*)dest = value;                      *(int*)(dest + 4) = value;                      *(int*)(dest + 8) = value;                      *(short*)(dest + 12) = (short)value;                      *(dest + 14) = (byte)value;                      return;              }
Missing Default,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,GetValue,The following switch statement is missing a default case: switch (xElementSize)              {                  case 1:                      return *((byte*) aThis);                  case 2:                      return *((ushort*) aThis);                  case 3:                      return (*aThis) & 0x0FFFFFFF;                  case 4:                      return *aThis;              }
Missing Default,Cosmos.Core_Plugs.System,ArrayImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.Core_Plugs\System\ArrayImpl.cs,SetValue,The following switch statement is missing a default case: switch (xElementSize)              {                  case 1:                      *((byte*) aThis) = (byte) aValue;                      return;                  case 2:                      *((ushort*) aThis) = (ushort) aValue;                      return;                  case 3:                      *((uint*) aThis) = (uint) aValue;                      return;                  case 4:                      *((uint*) aThis) = (uint) aValue;                      return;              }
