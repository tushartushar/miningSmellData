Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cosmos.Hardware2,DeviceIDs,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,DeviceIDs,The method has 6376 lines of code.
Complex Method,Cosmos.Hardware2,ACPIManager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ACPIManager.cs,CheckForRSDP,Cyclomatic complexity of the method is 10
Complex Method,Cosmos.Hardware2,PCIBus,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,EnumerateBus,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,CompareTo,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,Cyclomatic complexity of the method is 9
Complex Method,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,WriteBlock,Cyclomatic complexity of the method is 8
Long Parameter List,Cosmos.Hardware2.Audio.Devices.ES1370.Managers,AK4531Manager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\Managers\AK4531Manager.cs,AK4531Manager,The method has 5 parameters. Parameters: dacEntity' aMem' dacPage' dacAddress' dacByteSize
Long Identifier,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,,The length of the parameter PCI_BASE_ADDRESS_MEM_TYPE_MASK is 30.
Long Statement,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,ReadReceiveBuffer,The length of the statement  "            DebugWriteLine("Received data from address " + valueReg.CurrentAddressOfPacketRead + " to address " + valueReg.CurrentBufferAddress); " is 133.
Long Statement,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,ReadReceiveBuffer,The length of the statement  "            valueReg.CurrentAddressOfPacketRead = (UInt16)(readPointer - 16); //TODO: Figure out if 16 is the correct value. For now it works. RxBufferOverflow is no longer thrown. " is 168.
Long Statement,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,HandleReceiveInterrupt,The length of the statement  "                    RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM); " is 289.
Long Statement,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,HandleReceiveInterrupt,The length of the statement  "                    RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM); " is 289.
Long Statement,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,WriteAddressToPCI,The length of the statement  "             * The address is stored in the Transmit Start Address which corresponds to the Transmit Status Descriptor we are currently using (0-3). " is 135.
Long Statement,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The length of the statement  "            //UInt32 field2 = (UInt32)((this.Identification << 16) | ((byte)(this.FragmentFlags)) << 12 | (this.FragmentOffset << 1)); " is 122.
Long Statement,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The length of the statement  "            //UInt32 field3 = (UInt32)((this.TimeToLive << 0) | (((byte)(this.Protocol)) << 8) | (UInt16)(this.HeaderChecksum << 16)); " is 122.
Long Statement,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,Initialize,The length of the statement  "                        ATA xATA = xATA = new ATA(String.Concat(mControllerNumbers[xControllerBaseAIdx]' " "' mDriveNames[xDrive])' xControllerBaseAIdx' xDrive); " is 137.
Long Statement,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The length of the statement  "            while (((IOReadByte(mController_Command) & (IDE_STATUSREG_BSY | IDE_STATUSREG_DRQ)) != IDE_STATUSREG_DRQ) && xSleepCount != 0) " is 126.
Virtual Method Call from Constructor,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,RTL8139,The constructor "RTL8139" calls a virtual method "Write8".
Virtual Method Call from Constructor,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,RTL8139,The constructor "RTL8139" calls a virtual method "Read8".
Magic Number,Cosmos.Hardware2,ACPIManager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ACPIManager.cs,Init,The following statement contains a magic number: if (rsdp != 0)              {                  Rsd = *((RSD*)rsdp);                      Found = true;                    //Console.WriteLine("Found Version "  + Rsd.Revision + " (" + Rsd.OemID + ") @ " + rsdp.ToHex(8));                    acpi_table_header* Rsdt = (acpi_table_header*)Rsd.RsdtAddress;                  uint i = Rsdt->length;                  i = (i - 36) / 4;                    Console.WriteLine(i + " entrys found");                    ACPITable = new uint[i];                    uint rsdt = Rsd.RsdtAddress;                  for (int j = 0; j < i; j++)                  {                      ACPITable[j] = *(uint*)(rsdt + 36 +j*4);                      acpi_table_header* header = (acpi_table_header*)ACPITable[j];                                                                  }                  Console.Read();                }              else              {                  Console.WriteLine("Not Found");              }
Magic Number,Cosmos.Hardware2,ACPIManager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ACPIManager.cs,Init,The following statement contains a magic number: if (rsdp != 0)              {                  Rsd = *((RSD*)rsdp);                      Found = true;                    //Console.WriteLine("Found Version "  + Rsd.Revision + " (" + Rsd.OemID + ") @ " + rsdp.ToHex(8));                    acpi_table_header* Rsdt = (acpi_table_header*)Rsd.RsdtAddress;                  uint i = Rsdt->length;                  i = (i - 36) / 4;                    Console.WriteLine(i + " entrys found");                    ACPITable = new uint[i];                    uint rsdt = Rsd.RsdtAddress;                  for (int j = 0; j < i; j++)                  {                      ACPITable[j] = *(uint*)(rsdt + 36 +j*4);                      acpi_table_header* header = (acpi_table_header*)ACPITable[j];                                                                  }                  Console.Read();                }              else              {                  Console.WriteLine("Not Found");              }
Magic Number,Cosmos.Hardware2,ACPIManager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ACPIManager.cs,Init,The following statement contains a magic number: if (rsdp != 0)              {                  Rsd = *((RSD*)rsdp);                      Found = true;                    //Console.WriteLine("Found Version "  + Rsd.Revision + " (" + Rsd.OemID + ") @ " + rsdp.ToHex(8));                    acpi_table_header* Rsdt = (acpi_table_header*)Rsd.RsdtAddress;                  uint i = Rsdt->length;                  i = (i - 36) / 4;                    Console.WriteLine(i + " entrys found");                    ACPITable = new uint[i];                    uint rsdt = Rsd.RsdtAddress;                  for (int j = 0; j < i; j++)                  {                      ACPITable[j] = *(uint*)(rsdt + 36 +j*4);                      acpi_table_header* header = (acpi_table_header*)ACPITable[j];                                                                  }                  Console.Read();                }              else              {                  Console.WriteLine("Not Found");              }
Magic Number,Cosmos.Hardware2,ACPIManager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ACPIManager.cs,Init,The following statement contains a magic number: if (rsdp != 0)              {                  Rsd = *((RSD*)rsdp);                      Found = true;                    //Console.WriteLine("Found Version "  + Rsd.Revision + " (" + Rsd.OemID + ") @ " + rsdp.ToHex(8));                    acpi_table_header* Rsdt = (acpi_table_header*)Rsd.RsdtAddress;                  uint i = Rsdt->length;                  i = (i - 36) / 4;                    Console.WriteLine(i + " entrys found");                    ACPITable = new uint[i];                    uint rsdt = Rsd.RsdtAddress;                  for (int j = 0; j < i; j++)                  {                      ACPITable[j] = *(uint*)(rsdt + 36 +j*4);                      acpi_table_header* header = (acpi_table_header*)ACPITable[j];                                                                  }                  Console.Read();                }              else              {                  Console.WriteLine("Not Found");              }
Magic Number,Cosmos.Hardware2,ACPIManager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ACPIManager.cs,RSDPAddress,The following statement contains a magic number: for (uint addr = 0xE0000; addr < 0x100000; addr += 4)                  if (CheckForRSDP(addr))                      return addr;
Magic Number,Cosmos.Hardware2,ACPIManager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ACPIManager.cs,RSDPAddress,The following statement contains a magic number: for (uint addr = ebda_address; addr < ebda_address + 1024; addr += 4)                  if (CheckForRSDP(addr))                      return addr;
Magic Number,Cosmos.Hardware2,ACPIManager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ACPIManager.cs,RSDPAddress,The following statement contains a magic number: for (uint addr = ebda_address; addr < ebda_address + 1024; addr += 4)                  if (CheckForRSDP(addr))                      return addr;
Magic Number,Cosmos.Hardware2,ACPIManager,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ACPIManager.cs,CheckForRSDP,The following statement contains a magic number: for (int i = 0; i < 20; i++)                  sum += *(check++);
Magic Number,Cosmos.Hardware2,Mouse,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Mouse.cs,WaitData,The following statement contains a magic number: for (int i = 0; i < 1000 & ((CPUBus.Read8(0x64) & 1) == 1); i++)                  ;
Magic Number,Cosmos.Hardware2,Mouse,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Mouse.cs,WaitSignal,The following statement contains a magic number: for (int i = 0; i < 1000 & ((CPUBus.Read8(0x64) & 2) != 0); i++)                  ;
Magic Number,Cosmos.Hardware2,Mouse,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Mouse.cs,WaitSignal,The following statement contains a magic number: for (int i = 0; i < 1000 & ((CPUBus.Read8(0x64) & 2) != 0); i++)                  ;
Magic Number,Cosmos.Hardware2,PCIBus,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,Init,The following statement contains a magic number: var xDevices = new List<PCIDevice>(16);
Magic Number,Cosmos.Hardware2,PCIBus,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,EnumerateBus,The following statement contains a magic number: for (byte xSlot = 0; xSlot < 32; xSlot++) {                                  byte xMaxFunctions = 1;                  for (byte xFunction = 0; xFunction < xMaxFunctions; xFunction++) {                      PCIDevice xPCIDevice = new PCIDeviceNormal(aBus' xSlot' xFunction);                      if (xPCIDevice.DeviceExists) {                          if (xPCIDevice.HeaderType == 2) { /* PCIHeaderType.Cardbus */                              xPCIDevice = new PCIDeviceCardBus(aBus' xSlot' xFunction);                          }                            if (xPCIDevice.HeaderType == 1) { /* PCIHeaderType.Bridge */                              xPCIDevice = new PCIDeviceBridge(aBus' xSlot' xFunction);                          }                          if (xPCIDevice is PCIDeviceBridge)                          {                              EnumerateBus(((PCIDeviceBridge)xPCIDevice).SecondaryBus' ref rDevices);                          }                          rDevices.Add(xPCIDevice);                          if (xPCIDevice.IsMultiFunction) {                              xMaxFunctions = 8;                          }                      }                  }              }
Magic Number,Cosmos.Hardware2,PCIBus,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,EnumerateBus,The following statement contains a magic number: for (byte xSlot = 0; xSlot < 32; xSlot++) {                                  byte xMaxFunctions = 1;                  for (byte xFunction = 0; xFunction < xMaxFunctions; xFunction++) {                      PCIDevice xPCIDevice = new PCIDeviceNormal(aBus' xSlot' xFunction);                      if (xPCIDevice.DeviceExists) {                          if (xPCIDevice.HeaderType == 2) { /* PCIHeaderType.Cardbus */                              xPCIDevice = new PCIDeviceCardBus(aBus' xSlot' xFunction);                          }                            if (xPCIDevice.HeaderType == 1) { /* PCIHeaderType.Bridge */                              xPCIDevice = new PCIDeviceBridge(aBus' xSlot' xFunction);                          }                          if (xPCIDevice is PCIDeviceBridge)                          {                              EnumerateBus(((PCIDeviceBridge)xPCIDevice).SecondaryBus' ref rDevices);                          }                          rDevices.Add(xPCIDevice);                          if (xPCIDevice.IsMultiFunction) {                              xMaxFunctions = 8;                          }                      }                  }              }
Magic Number,Cosmos.Hardware2,PCIBus,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,EnumerateBus,The following statement contains a magic number: for (byte xSlot = 0; xSlot < 32; xSlot++) {                                  byte xMaxFunctions = 1;                  for (byte xFunction = 0; xFunction < xMaxFunctions; xFunction++) {                      PCIDevice xPCIDevice = new PCIDeviceNormal(aBus' xSlot' xFunction);                      if (xPCIDevice.DeviceExists) {                          if (xPCIDevice.HeaderType == 2) { /* PCIHeaderType.Cardbus */                              xPCIDevice = new PCIDeviceCardBus(aBus' xSlot' xFunction);                          }                            if (xPCIDevice.HeaderType == 1) { /* PCIHeaderType.Bridge */                              xPCIDevice = new PCIDeviceBridge(aBus' xSlot' xFunction);                          }                          if (xPCIDevice is PCIDeviceBridge)                          {                              EnumerateBus(((PCIDeviceBridge)xPCIDevice).SecondaryBus' ref rDevices);                          }                          rDevices.Add(xPCIDevice);                          if (xPCIDevice.IsMultiFunction) {                              xMaxFunctions = 8;                          }                      }                  }              }
Magic Number,Cosmos.Hardware2,PCIDeviceCardBus,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,NumberOfBaseAddresses,The following statement contains a magic number: return 6;
Magic Number,Cosmos.Hardware2,PCIDeviceBridge,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,NumberOfBaseAddresses,The following statement contains a magic number: return 2;
Magic Number,Cosmos.Hardware2,PCIDeviceNormal,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,NumberOfBaseAddresses,The following statement contains a magic number: return 6;
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,GetBaseAddress,The following statement contains a magic number: return Read32((byte)(0x10 + index * 4));
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,GetBaseAddressInternal,The following statement contains a magic number: return Read32((byte)(0x10 + (index * 4)));
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,SetBaseAddressInternal,The following statement contains a magic number: Write32((byte)(0x10 + (index * 4))' value);
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,GetAddress,The following statement contains a magic number: return (UInt32)(                  // Bits 23-16                  ((UInt32)Bus << 16)                  // Bits 15-11                  | (((UInt32)Slot & 0x1F) << 11)                  // Bits 10-8                  | (((UInt32)Function & 0x07) << 8)                  // Bits 7-0                  | ((UInt32)aRegister & 0xFC)                  // Enable bit - must be set                  | 0x80000000);
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,GetAddress,The following statement contains a magic number: return (UInt32)(                  // Bits 23-16                  ((UInt32)Bus << 16)                  // Bits 15-11                  | (((UInt32)Slot & 0x1F) << 11)                  // Bits 10-8                  | (((UInt32)Function & 0x07) << 8)                  // Bits 7-0                  | ((UInt32)aRegister & 0xFC)                  // Enable bit - must be set                  | 0x80000000);
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,GetAddress,The following statement contains a magic number: return (UInt32)(                  // Bits 23-16                  ((UInt32)Bus << 16)                  // Bits 15-11                  | (((UInt32)Slot & 0x1F) << 11)                  // Bits 10-8                  | (((UInt32)Function & 0x07) << 8)                  // Bits 7-0                  | ((UInt32)aRegister & 0xFC)                  // Enable bit - must be set                  | 0x80000000);
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,Read16,The following statement contains a magic number: return (UInt16)(Kernel.CPUBus.Read32(ConfigData) >> ((aRegister % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,Read16,The following statement contains a magic number: return (UInt16)(Kernel.CPUBus.Read32(ConfigData) >> ((aRegister % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,Read8,The following statement contains a magic number: return (byte)(Kernel.CPUBus.Read32(ConfigData) >> ((aRegister % 4) * 8) & 0xFF);
Magic Number,Cosmos.Hardware2,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\PCIBus.cs,Read8,The following statement contains a magic number: return (byte)(Kernel.CPUBus.Read32(ConfigData) >> ((aRegister % 4) * 8) & 0xFF);
Magic Number,Cosmos.Hardware2,Device,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Device.cs,AddDriverInit,The following statement contains a magic number: if(mDriverInits==null)              {                  mDriverInits = new List<InitializeDriver>(4);              }
Magic Number,Cosmos.Hardware2,BinaryHelper,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\BinaryHelper.cs,GetByteFrom32bit,The following statement contains a magic number: if (offset > 24)                  throw new ArgumentException("Offset can not move outside the 32 bit range");
Magic Number,Cosmos.Hardware2,RTC,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\RTC.cs,WaitForReady,The following statement contains a magic number: do {  				IOWriteByte(AddressPort' 10);  			}  			while ((IOReadByte(DataPort) & 0x80) != 0);
Magic Number,Cosmos.Hardware2,RTC,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\RTC.cs,GetMinutes,The following statement contains a magic number: IOWriteByte(AddressPort' 2);
Magic Number,Cosmos.Hardware2,RTC,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\RTC.cs,GetHours,The following statement contains a magic number: IOWriteByte(AddressPort' 4);
Magic Number,Cosmos.Hardware2,RTC,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\RTC.cs,FromBCD,The following statement contains a magic number: return (byte)(((value >> 4) & 0x0F) * 10 + (value & 0x0F));
Magic Number,Cosmos.Hardware2,RTC,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\RTC.cs,FromBCD,The following statement contains a magic number: return (byte)(((value >> 4) & 0x0F) * 10 + (value & 0x0F));
Magic Number,Cosmos.Hardware2,Serial,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Serial.cs,InitSerial,The following statement contains a magic number: IOWriteByte((ushort)(xComAddr + 3)' 0x80);
Magic Number,Cosmos.Hardware2,Serial,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Serial.cs,InitSerial,The following statement contains a magic number: IOWriteByte((ushort)(xComAddr + 3)' 0x03);
Magic Number,Cosmos.Hardware2,Serial,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Serial.cs,InitSerial,The following statement contains a magic number: IOWriteByte((ushort)(xComAddr + 2)' 0xC7);
Magic Number,Cosmos.Hardware2,Serial,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Serial.cs,InitSerial,The following statement contains a magic number: IOWriteByte((ushort)(xComAddr + 4)' 0x0B);
Magic Number,Cosmos.Hardware2,Serial,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Serial.cs,IsSerialTransmitEmpty,The following statement contains a magic number: return (IOReadByte((ushort)(aSerialAddr + 5)) & 0x20);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,set_plane,The following statement contains a magic number: p &= 3;
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,set_plane,The following statement contains a magic number: CPUBus.Write8(VGA_GC_INDEX' 4);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,set_plane,The following statement contains a magic number: CPUBus.Write8(VGA_SEQ_INDEX' 2);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,get_fb_seg,The following statement contains a magic number: CPUBus.Write8(VGA_GC_INDEX' 6);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,get_fb_seg,The following statement contains a magic number: seg >>= 2;
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,get_fb_seg,The following statement contains a magic number: seg &= 3;
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,get_fb_seg,The following statement contains a magic number: switch (seg)              {                  case 0:                  case 1:                      seg = 0xA0000;                      break;                  case 2:                      seg = 0xB0000;                      break;                  case 3:                      seg = 0xB8000;                      break;              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,get_fb_seg,The following statement contains a magic number: switch (seg)              {                  case 0:                  case 1:                      seg = 0xA0000;                      break;                  case 2:                      seg = 0xB0000;                      break;                  case 3:                      seg = 0xB8000;                      break;              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_SEQ_INDEX' 2);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_SEQ_INDEX' 4);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_GC_INDEX' 4);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_GC_INDEX' 5);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_GC_INDEX' 6);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: set_plane(2);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: for (int i = 0; i < 256; i++)                  for (int j = 0; j < font_height; j++)                      *((byte*)(seg + i * 32 + j)) = font[i * font_height + j];
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: for (int i = 0; i < 256; i++)                  for (int j = 0; j < font_height; j++)                      *((byte*)(seg + i * 32 + j)) = font[i * font_height + j];
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_SEQ_INDEX' 2);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_SEQ_INDEX' 4);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_GC_INDEX' 4);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_GC_INDEX' 5);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,WriteFont,The following statement contains a magic number: CPUBus.Write8(VGA_GC_INDEX' 6);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize) {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize) {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize) {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize) {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize) {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize) {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetMode320x200x8,The following statement contains a magic number: PixelWidth = 320;
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetMode320x200x8,The following statement contains a magic number: PixelHeight = 200;
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetMode320x200x8,The following statement contains a magic number: Colors = 256;
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetMode640x480x4,The following statement contains a magic number: PixelWidth = 640;
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetMode640x480x4,The following statement contains a magic number: PixelHeight = 480;
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetMode640x480x4,The following statement contains a magic number: Colors = 16;
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: byte* address = (byte*)(0xa0000 + y * 320 + x >> 1);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: if ((x & 1) == 0)              {                  *address = (byte)(((byte)((*address) & 0xf)) | (byte)(c << 4));              }              else              {                  *address = (byte)(((byte)((*address) & 0xf0)) | (byte)c);              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetPixel320x200x8,The following statement contains a magic number: *(byte*)(0xa0000 + y * 320 + x) = (byte)(c & 0xff);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,GetPixel320x200x8,The following statement contains a magic number: return *(byte*)(0xa0000 + y * 320 + x);
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: if (Colors == 256)              {                  for (byte i = 0; i < 64; i++)                  {                      SetPaletteEntry(i' i' 0' 0);                      SetPaletteEntry(i + 64' 63' i' 0);                      SetPaletteEntry(i + 128' 63' 63' i);                      SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));                    }              }              else              {                  for (byte i = 0; i < Colors; i++)                  {                      byte ii = (byte)((int)i * 64 / Colors);                      SetPaletteEntry(i' ii' ii' ii);                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Test,The following statement contains a magic number: for (uint y = 0; y < PixelHeight; y++)              {                  for (uint x = 0; x < PixelWidth; x++)                  {                      byte m = (byte)(x + y);                        //SetPixel(x' y' m);                        *(byte*)(0xa0000 + y * 320 + x) = m;                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,Clear,The following statement contains a magic number: for (uint y = 0; y < PixelHeight; y++)              {                  for (uint x = 0; x < PixelWidth; x++)                  {                      *(byte*)(0xa0000 + (y * 320) + x) = (byte)(colour & 0xFF) ;                  }              }
Magic Number,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,SetPalette,The following statement contains a magic number: for (int i=0;i<pallete.Length; i++)                  CPUBus.Write8(0x3C9' (byte)(pallete[i] >> 2));
Magic Number,Cosmos.Hardware2.Audio.Devices.ES1370.Registers,ControlRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\Registers\ControlRegister.cs,ToString,The following statement contains a magic number: return this.CONTROL.ToBinary(8);
Magic Number,Cosmos.Hardware2.Audio.Devices.ES1370.Registers,InterruptStatusRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\Registers\InterruptStatusRegister.cs,ToString,The following statement contains a magic number: return this.ISR.ToBinary(16);
Magic Number,Cosmos.Hardware2.Audio.Devices.ES1370,ES1370,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\ES1370.cs,getDAC2DividendRatio,The following statement contains a magic number: int offset = (((num) & 0x1fff) << 16);
Magic Number,Cosmos.Hardware2.Audio.Devices.ES1370,ES1370,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\ES1370.cs,setDAC2ClockInDividendRatio,The following statement contains a magic number: int offset = (((num) >> 16) & 0x1fff);
Magic Number,Cosmos.Hardware2.Audio.Devices.ES1370,ES1370,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\ES1370.cs,getDAC1ClockDividendRatio,The following statement contains a magic number: int offset = (((num) & 0x03) << 12);
Magic Number,Cosmos.Hardware2.Audio.Devices.ES1370,ES1370,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\ES1370.cs,setVoiceCodeFromCCBNum,The following statement contains a magic number: int offset = (((num) >> 5) & 0x03);
Magic Number,Cosmos.Hardware2.Audio.Devices.ES1370,ES1370,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\ES1370.cs,setTxUARTInterruptInFromNum,The following statement contains a magic number: byte offset = (byte)(((num) >> 5) & 0x03);
Magic Number,Cosmos.Hardware2.Audio.Devices.ES1370,ES1370,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\ES1370.cs,getTxUARTInterruptOutFromNum,The following statement contains a magic number: byte offset = (byte)(((num) & 0x03 ) << 5);
Magic Number,Cosmos.Hardware2.Audio.Devices.ES1370,ES1370,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Audio\Devices\ES1370\ES1370.cs,SRClockDivideByNum,The following statement contains a magic number: return (SRClock / n - 2);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: byte[] eeprom_mac = new byte[6];
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: eeprom_mac[1] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: eeprom_mac[2] = BinaryHelper.GetByteFrom32bit(result' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: eeprom_mac[2] = BinaryHelper.GetByteFrom32bit(result' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: eeprom_mac[3] = BinaryHelper.GetByteFrom32bit(result' 24);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: eeprom_mac[3] = BinaryHelper.GetByteFrom32bit(result' 24);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: eeprom_mac[4] = BinaryHelper.GetByteFrom32bit(result' 0);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: eeprom_mac[5] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: eeprom_mac[5] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock = new ManagedMemorySpace(28' 4);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock = new ManagedMemorySpace(28' 4);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mTxDescriptor = new ManagedMemorySpace(256' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mTxDescriptor = new ManagedMemorySpace(256' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mRxDescriptor = new ManagedMemorySpace(256' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mRxDescriptor = new ManagedMemorySpace(256' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x00' (0x4 << 28) | (0x4 << 20));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x00' (0x4 << 28) | (0x4 << 20));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x04' (uint)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x04' (uint)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x04' (uint)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x04' (uint)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x04' (uint)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x08' (uint)(eeprom_mac[4] | (eeprom_mac[5] << 8)));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x08' (uint)(eeprom_mac[4] | (eeprom_mac[5] << 8)));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: mInitBlock.Write32(0x08' (uint)(eeprom_mac[4] | (eeprom_mac[5] << 8)));
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16)(~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32)(buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16)(~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32)(buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16)(~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32)(buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16)(~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32)(buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16)(~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32)(buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mTxDescriptor.Write32(xOffset + 8' buffer.Offset);                  mTxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mTxDescriptor.Write32(xOffset + 8' buffer.Offset);                  mTxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mTxDescriptor.Write32(xOffset + 8' buffer.Offset);                  mTxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,AMDPCNet,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mTxDescriptor.Write32(xOffset + 8' buffer.Offset);                  mTxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,SendBytes,The following statement contains a magic number: if (mNextTXDesc >= 16)              {                  mNextTXDesc = 0;              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,SendBytes,The following statement contains a magic number: uint xOffset = (uint)(txd * 16);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,SendBytes,The following statement contains a magic number: UInt32 status = mTxDescriptor.Read32(xOffset + 4);
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,SendBytes,The following statement contains a magic number: if ((status & 0x80000000) == 0)              {                  for (uint b = 0; b < aData.Length; b++)                  {                      mTxBuffers[txd][b] = aData[b];                  }                  UInt16 buffer_len = (UInt16)(aData.Length < 64 ? 64 : aData.Length);                  buffer_len = (UInt16)(~buffer_len);                  buffer_len++;                    UInt32 flags = (UInt32)(buffer_len & 0x0FFF) | 0x0300F000 | 0x80000000;                    mTxDescriptor.Write32(xOffset + 4' flags);                  return true;              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,SendBytes,The following statement contains a magic number: if ((status & 0x80000000) == 0)              {                  for (uint b = 0; b < aData.Length; b++)                  {                      mTxBuffers[txd][b] = aData[b];                  }                  UInt16 buffer_len = (UInt16)(aData.Length < 64 ? 64 : aData.Length);                  buffer_len = (UInt16)(~buffer_len);                  buffer_len++;                    UInt32 flags = (UInt32)(buffer_len & 0x0FFF) | 0x0300F000 | 0x80000000;                    mTxDescriptor.Write32(xOffset + 4' flags);                  return true;              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,SendBytes,The following statement contains a magic number: if ((status & 0x80000000) == 0)              {                  for (uint b = 0; b < aData.Length; b++)                  {                      mTxBuffers[txd][b] = aData[b];                  }                  UInt16 buffer_len = (UInt16)(aData.Length < 64 ? 64 : aData.Length);                  buffer_len = (UInt16)(~buffer_len);                  buffer_len++;                    UInt32 flags = (UInt32)(buffer_len & 0x0FFF) | 0x0300F000 | 0x80000000;                    mTxDescriptor.Write32(xOffset + 4' flags);                  return true;              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint)(rxd * 16);                  status = mRxDescriptor.Read32(xOffset + 4);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16)(mRxDescriptor[xOffset + 0] & 0xFFF);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptor.Write32(xOffset + 4' status | 0x80000000);                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint)(rxd * 16);                  status = mRxDescriptor.Read32(xOffset + 4);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16)(mRxDescriptor[xOffset + 0] & 0xFFF);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptor.Write32(xOffset + 4' status | 0x80000000);                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint)(rxd * 16);                  status = mRxDescriptor.Read32(xOffset + 4);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16)(mRxDescriptor[xOffset + 0] & 0xFFF);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptor.Write32(xOffset + 4' status | 0x80000000);                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.AMDPCNetII,AMDPCNet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\AMDPCNetII\AMDPCNet.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint)(rxd * 16);                  status = mRxDescriptor.Read32(xOffset + 4);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16)(mRxDescriptor[xOffset + 0] & 0xFFF);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptor.Write32(xOffset + 4' status | 0x80000000);                  }              }
Magic Number,Cosmos.Hardware.Network.Devices.RTL8139,BinaryHelper,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\BinaryHelper.cs,GetByteFrom32bit,The following statement contains a magic number: if (offset > 24)                  throw new ArgumentException("Offset can not move outside the 32 bit range");
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,InitializeDriver,The following statement contains a magic number: mBuffer=new Queue<byte[]>(16);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,InitializeDriver,The following statement contains a magic number: SetEarlyTxThreshold(1024);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,InitReceiveBuffer,The following statement contains a magic number: RxBufferIdx = 3 & (~3);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,InitReceiveBuffer,The following statement contains a magic number: RxBufferIdx = 3 & (~3);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,InitTransmitBuffer,The following statement contains a magic number: TxBuffer0 = new byte[2048];
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,InitTransmitBuffer,The following statement contains a magic number: TxBuffer1 = new byte[2048];
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,InitTransmitBuffer,The following statement contains a magic number: TxBuffer2 = new byte[2048];
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,InitTransmitBuffer,The following statement contains a magic number: TxBuffer3 = new byte[2048];
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,ReadReceiveBuffer,The following statement contains a magic number: readPointer += 20;
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,ReadReceiveBuffer,The following statement contains a magic number: valueReg.CurrentAddressOfPacketRead = (UInt16)(readPointer - 16);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,HandleReceiveInterrupt,The following statement contains a magic number: while ((mem.Read8((uint)MainRegister.Bit.ChipCmd) & 0x01) == 0) {                  //DebugUtil.WriteBinary("RTL8139"'                  //                      "Full RxBuffer"'                  //                      RxBuffer);                  // iterate while buffer is not empty                  uint xStatus = BitConverter.ToUInt32(RxBuffer'                                                       RxBufferIdx);                  uint xLen = xStatus >> 16;                  if (xLen == 0xFFF0) {                      break;                  }                  if (xLen == 0) {                      break;                  }                  /* check for:                   * * Invalid Symbol error (100b-tx) = 0x20                   * * runt packet = 0x10                   * * long packet (>4k) = 0x8                   * * CRC error = 0x4                   * * frame alignment error = 0x2                   */                  if ((xStatus & 0x3E) != 0) {                      // handle error                          mem.Write8((uint)MainRegister.Bit.ChipCmd' 0x4); // only TX enabled                      // set up rx mode/configuration                      RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        RxBufferIdx = valueReg.CurrentBufferAddress;                      valueReg.CurrentAddressOfPacketRead = (ushort)RxBufferIdx;                        mem.Write8((uint)MainRegister.Bit.ChipCmd' 0xC); // both TX and RX enabled                        RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        // Enable interrupts                      imr.IMR = 0x7F;                      break;                  } else {                      xLen -= 4;                      RxBufferIdx += 4;                      var xBuff = new byte[xLen];                      for (uint i = 0; i < xLen; i++) {                          xBuff[i] = RxBuffer[i + RxBufferIdx];                      }                      mBuffer.Enqueue(xBuff);                      if (DataReceived != null)                      {                          DataReceived(xBuff);                      }                        RxBufferIdx += (ushort)((xLen + 4 + 3) & 0xFFFFFFFC);                      if (RxBufferIdx > RxBufferSize) {                          RxBufferIdx -= RxBufferSize;                      }                  }                  valueReg.CurrentAddressOfPacketRead = (ushort)(RxBufferIdx - 16);  //                break;              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,HandleReceiveInterrupt,The following statement contains a magic number: while ((mem.Read8((uint)MainRegister.Bit.ChipCmd) & 0x01) == 0) {                  //DebugUtil.WriteBinary("RTL8139"'                  //                      "Full RxBuffer"'                  //                      RxBuffer);                  // iterate while buffer is not empty                  uint xStatus = BitConverter.ToUInt32(RxBuffer'                                                       RxBufferIdx);                  uint xLen = xStatus >> 16;                  if (xLen == 0xFFF0) {                      break;                  }                  if (xLen == 0) {                      break;                  }                  /* check for:                   * * Invalid Symbol error (100b-tx) = 0x20                   * * runt packet = 0x10                   * * long packet (>4k) = 0x8                   * * CRC error = 0x4                   * * frame alignment error = 0x2                   */                  if ((xStatus & 0x3E) != 0) {                      // handle error                          mem.Write8((uint)MainRegister.Bit.ChipCmd' 0x4); // only TX enabled                      // set up rx mode/configuration                      RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        RxBufferIdx = valueReg.CurrentBufferAddress;                      valueReg.CurrentAddressOfPacketRead = (ushort)RxBufferIdx;                        mem.Write8((uint)MainRegister.Bit.ChipCmd' 0xC); // both TX and RX enabled                        RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        // Enable interrupts                      imr.IMR = 0x7F;                      break;                  } else {                      xLen -= 4;                      RxBufferIdx += 4;                      var xBuff = new byte[xLen];                      for (uint i = 0; i < xLen; i++) {                          xBuff[i] = RxBuffer[i + RxBufferIdx];                      }                      mBuffer.Enqueue(xBuff);                      if (DataReceived != null)                      {                          DataReceived(xBuff);                      }                        RxBufferIdx += (ushort)((xLen + 4 + 3) & 0xFFFFFFFC);                      if (RxBufferIdx > RxBufferSize) {                          RxBufferIdx -= RxBufferSize;                      }                  }                  valueReg.CurrentAddressOfPacketRead = (ushort)(RxBufferIdx - 16);  //                break;              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,HandleReceiveInterrupt,The following statement contains a magic number: while ((mem.Read8((uint)MainRegister.Bit.ChipCmd) & 0x01) == 0) {                  //DebugUtil.WriteBinary("RTL8139"'                  //                      "Full RxBuffer"'                  //                      RxBuffer);                  // iterate while buffer is not empty                  uint xStatus = BitConverter.ToUInt32(RxBuffer'                                                       RxBufferIdx);                  uint xLen = xStatus >> 16;                  if (xLen == 0xFFF0) {                      break;                  }                  if (xLen == 0) {                      break;                  }                  /* check for:                   * * Invalid Symbol error (100b-tx) = 0x20                   * * runt packet = 0x10                   * * long packet (>4k) = 0x8                   * * CRC error = 0x4                   * * frame alignment error = 0x2                   */                  if ((xStatus & 0x3E) != 0) {                      // handle error                          mem.Write8((uint)MainRegister.Bit.ChipCmd' 0x4); // only TX enabled                      // set up rx mode/configuration                      RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        RxBufferIdx = valueReg.CurrentBufferAddress;                      valueReg.CurrentAddressOfPacketRead = (ushort)RxBufferIdx;                        mem.Write8((uint)MainRegister.Bit.ChipCmd' 0xC); // both TX and RX enabled                        RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        // Enable interrupts                      imr.IMR = 0x7F;                      break;                  } else {                      xLen -= 4;                      RxBufferIdx += 4;                      var xBuff = new byte[xLen];                      for (uint i = 0; i < xLen; i++) {                          xBuff[i] = RxBuffer[i + RxBufferIdx];                      }                      mBuffer.Enqueue(xBuff);                      if (DataReceived != null)                      {                          DataReceived(xBuff);                      }                        RxBufferIdx += (ushort)((xLen + 4 + 3) & 0xFFFFFFFC);                      if (RxBufferIdx > RxBufferSize) {                          RxBufferIdx -= RxBufferSize;                      }                  }                  valueReg.CurrentAddressOfPacketRead = (ushort)(RxBufferIdx - 16);  //                break;              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,HandleReceiveInterrupt,The following statement contains a magic number: while ((mem.Read8((uint)MainRegister.Bit.ChipCmd) & 0x01) == 0) {                  //DebugUtil.WriteBinary("RTL8139"'                  //                      "Full RxBuffer"'                  //                      RxBuffer);                  // iterate while buffer is not empty                  uint xStatus = BitConverter.ToUInt32(RxBuffer'                                                       RxBufferIdx);                  uint xLen = xStatus >> 16;                  if (xLen == 0xFFF0) {                      break;                  }                  if (xLen == 0) {                      break;                  }                  /* check for:                   * * Invalid Symbol error (100b-tx) = 0x20                   * * runt packet = 0x10                   * * long packet (>4k) = 0x8                   * * CRC error = 0x4                   * * frame alignment error = 0x2                   */                  if ((xStatus & 0x3E) != 0) {                      // handle error                          mem.Write8((uint)MainRegister.Bit.ChipCmd' 0x4); // only TX enabled                      // set up rx mode/configuration                      RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        RxBufferIdx = valueReg.CurrentBufferAddress;                      valueReg.CurrentAddressOfPacketRead = (ushort)RxBufferIdx;                        mem.Write8((uint)MainRegister.Bit.ChipCmd' 0xC); // both TX and RX enabled                        RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        // Enable interrupts                      imr.IMR = 0x7F;                      break;                  } else {                      xLen -= 4;                      RxBufferIdx += 4;                      var xBuff = new byte[xLen];                      for (uint i = 0; i < xLen; i++) {                          xBuff[i] = RxBuffer[i + RxBufferIdx];                      }                      mBuffer.Enqueue(xBuff);                      if (DataReceived != null)                      {                          DataReceived(xBuff);                      }                        RxBufferIdx += (ushort)((xLen + 4 + 3) & 0xFFFFFFFC);                      if (RxBufferIdx > RxBufferSize) {                          RxBufferIdx -= RxBufferSize;                      }                  }                  valueReg.CurrentAddressOfPacketRead = (ushort)(RxBufferIdx - 16);  //                break;              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,HandleReceiveInterrupt,The following statement contains a magic number: while ((mem.Read8((uint)MainRegister.Bit.ChipCmd) & 0x01) == 0) {                  //DebugUtil.WriteBinary("RTL8139"'                  //                      "Full RxBuffer"'                  //                      RxBuffer);                  // iterate while buffer is not empty                  uint xStatus = BitConverter.ToUInt32(RxBuffer'                                                       RxBufferIdx);                  uint xLen = xStatus >> 16;                  if (xLen == 0xFFF0) {                      break;                  }                  if (xLen == 0) {                      break;                  }                  /* check for:                   * * Invalid Symbol error (100b-tx) = 0x20                   * * runt packet = 0x10                   * * long packet (>4k) = 0x8                   * * CRC error = 0x4                   * * frame alignment error = 0x2                   */                  if ((xStatus & 0x3E) != 0) {                      // handle error                          mem.Write8((uint)MainRegister.Bit.ChipCmd' 0x4); // only TX enabled                      // set up rx mode/configuration                      RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        RxBufferIdx = valueReg.CurrentBufferAddress;                      valueReg.CurrentAddressOfPacketRead = (ushort)RxBufferIdx;                        mem.Write8((uint)MainRegister.Bit.ChipCmd' 0xC); // both TX and RX enabled                        RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        // Enable interrupts                      imr.IMR = 0x7F;                      break;                  } else {                      xLen -= 4;                      RxBufferIdx += 4;                      var xBuff = new byte[xLen];                      for (uint i = 0; i < xLen; i++) {                          xBuff[i] = RxBuffer[i + RxBufferIdx];                      }                      mBuffer.Enqueue(xBuff);                      if (DataReceived != null)                      {                          DataReceived(xBuff);                      }                        RxBufferIdx += (ushort)((xLen + 4 + 3) & 0xFFFFFFFC);                      if (RxBufferIdx > RxBufferSize) {                          RxBufferIdx -= RxBufferSize;                      }                  }                  valueReg.CurrentAddressOfPacketRead = (ushort)(RxBufferIdx - 16);  //                break;              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,HandleReceiveInterrupt,The following statement contains a magic number: while ((mem.Read8((uint)MainRegister.Bit.ChipCmd) & 0x01) == 0) {                  //DebugUtil.WriteBinary("RTL8139"'                  //                      "Full RxBuffer"'                  //                      RxBuffer);                  // iterate while buffer is not empty                  uint xStatus = BitConverter.ToUInt32(RxBuffer'                                                       RxBufferIdx);                  uint xLen = xStatus >> 16;                  if (xLen == 0xFFF0) {                      break;                  }                  if (xLen == 0) {                      break;                  }                  /* check for:                   * * Invalid Symbol error (100b-tx) = 0x20                   * * runt packet = 0x10                   * * long packet (>4k) = 0x8                   * * CRC error = 0x4                   * * frame alignment error = 0x2                   */                  if ((xStatus & 0x3E) != 0) {                      // handle error                          mem.Write8((uint)MainRegister.Bit.ChipCmd' 0x4); // only TX enabled                      // set up rx mode/configuration                      RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        RxBufferIdx = valueReg.CurrentBufferAddress;                      valueReg.CurrentAddressOfPacketRead = (ushort)RxBufferIdx;                        mem.Write8((uint)MainRegister.Bit.ChipCmd' 0xC); // both TX and RX enabled                        RCR.RCR = (UInt32)(ReceiveConfigurationRegister.BitValue.RBLEN0 | ReceiveConfigurationRegister.BitValue.MXDMA0 | ReceiveConfigurationRegister.BitValue.MXDMA1 | ReceiveConfigurationRegister.BitValue.AB | ReceiveConfigurationRegister.BitValue.AM | ReceiveConfigurationRegister.BitValue.APM);                        // Enable interrupts                      imr.IMR = 0x7F;                      break;                  } else {                      xLen -= 4;                      RxBufferIdx += 4;                      var xBuff = new byte[xLen];                      for (uint i = 0; i < xLen; i++) {                          xBuff[i] = RxBuffer[i + RxBufferIdx];                      }                      mBuffer.Enqueue(xBuff);                      if (DataReceived != null)                      {                          DataReceived(xBuff);                      }                        RxBufferIdx += (ushort)((xLen + 4 + 3) & 0xFFFFFFFC);                      if (RxBufferIdx > RxBufferSize) {                          RxBufferIdx -= RxBufferSize;                      }                  }                  valueReg.CurrentAddressOfPacketRead = (ushort)(RxBufferIdx - 16);  //                break;              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139_Old,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\RTL8139_Old.cs,SetEarlyTxThreshold,The following statement contains a magic number: if (bytecount != 0 & (bytecount % 32 > 0))                  throw new ArgumentException("Early TX Threshold must be 0 or dividable by 32");
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,RTL8139,The following statement contains a magic number: byte[] eeprom_mac = new byte[6];
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,RTL8139,The following statement contains a magic number: for (uint b = 0; b < 6; b++)              {                  eeprom_mac[b] = io.Read8(b);              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,RTL8139,The following statement contains a magic number: rxBuffer = new ManagedMemorySpace(RxBufferSize + 2048 + 16' 4);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,RTL8139,The following statement contains a magic number: rxBuffer = new ManagedMemorySpace(RxBufferSize + 2048 + 16' 4);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,RTL8139,The following statement contains a magic number: rxBuffer = new ManagedMemorySpace(RxBufferSize + 2048 + 16' 4);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,ReadRawData,The following statement contains a magic number: int recv_size = packetLen - 4;
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,ReadRawData,The following statement contains a magic number: for (uint b = 0; b < recv_size; b++)              {                  recv_data[b] = rxBuffer[(uint)(capr + 4 + b)];              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,ReadRawData,The following statement contains a magic number: capr += (UInt16)((packetLen + 4 + 3) & 0xFFFFFFFC);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,ReadRawData,The following statement contains a magic number: capr += (UInt16)((packetLen + 4 + 3) & 0xFFFFFFFC);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,SendBytes,The following statement contains a magic number: if (mNextTXDesc >= 4)              {                  mNextTXDesc = 0;              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,SendBytes,The following statement contains a magic number: if (aData.Length < 64)              {                  txBuffer = new ManagedMemorySpace(64);                  for (uint b = 0; b < aData.Length; b++)                  {                      txBuffer[b] = aData[b];                  }              }              else              {                  txBuffer = new ManagedMemorySpace(aData);              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,SendBytes,The following statement contains a magic number: if (aData.Length < 64)              {                  txBuffer = new ManagedMemorySpace(64);                  for (uint b = 0; b < aData.Length; b++)                  {                      txBuffer[b] = aData[b];                  }              }              else              {                  txBuffer = new ManagedMemorySpace(aData);              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,SendBytes,The following statement contains a magic number: switch (txd)              {                  case 0:                      TransmitAddress1Register = txBuffer.Offset;                      TransmitDescriptor1Register = txBuffer.Size;                      break;                  case 1:                      TransmitAddress2Register = txBuffer.Offset;                      TransmitDescriptor2Register = txBuffer.Size;                      break;                  case 2:                      TransmitAddress3Register = txBuffer.Offset;                      TransmitDescriptor3Register = txBuffer.Size;                      break;                  case 3:                      TransmitAddress4Register = txBuffer.Offset;                      TransmitDescriptor4Register = txBuffer.Size;                      break;                  default:                      return false;              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139,RTL8139,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139\RTL8139.cs,SendBytes,The following statement contains a magic number: switch (txd)              {                  case 0:                      TransmitAddress1Register = txBuffer.Offset;                      TransmitDescriptor1Register = txBuffer.Size;                      break;                  case 1:                      TransmitAddress2Register = txBuffer.Offset;                      TransmitDescriptor2Register = txBuffer.Size;                      break;                  case 2:                      TransmitAddress3Register = txBuffer.Offset;                      TransmitDescriptor3Register = txBuffer.Size;                      break;                  case 3:                      TransmitAddress4Register = txBuffer.Offset;                      TransmitDescriptor4Register = txBuffer.Size;                      break;                  default:                      return false;              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,CommandRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\CommandRegister.cs,ToString,The following statement contains a magic number: return this.CR.ToBinary(8);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,ConfigurationRegister1,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\ConfigurationRegister1.cs,ToString,The following statement contains a magic number: return this.CONFIG1.ToBinary(8);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,InterruptMaskRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\InterruptMaskRegister.cs,ToString,The following statement contains a magic number: return this.IMR.ToBinary(16);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,InterruptStatusRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\InterruptStatusRegister.cs,ToString,The following statement contains a magic number: return this.ISR.ToBinary(16);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,MediaStatusRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\MediaStatusRegister.cs,ToString,The following statement contains a magic number: return this.MSR.ToBinary(8);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,ReceiveConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\ReceiveConfigurationRegister.cs,ToString,The following statement contains a magic number: return this.RCR.ToBinary(32);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,GetHWVERID,The following statement contains a magic number: byte mask = 249;
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,GetHWVERID,The following statement contains a magic number: byte hwverid = BinaryHelper.GetByteFrom32bit(this.TCR' (byte)(23));
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,ToString,The following statement contains a magic number: return this.TCR.ToBinary(32);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,GetHardwareRevision,The following statement contains a magic number: switch (hwverid)              {                  case 192: //11000000                      return "RTL8139";                  case 224: //11100000                      return "RTL8139A";                  case 225: //11100001                      return "RTL8139A-G";                  case 232: //11101000                      return "RTL8139C";                  case 233: //11101001                      return "RTL8139C+";                  case 240: //11110000                      return "RTL8139B";                  case 248: //11111000                      return "RTL8130";                  default:                      return "Unknown RTL813xxx revision (" + hwverid + ")";              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,GetHardwareRevision,The following statement contains a magic number: switch (hwverid)              {                  case 192: //11000000                      return "RTL8139";                  case 224: //11100000                      return "RTL8139A";                  case 225: //11100001                      return "RTL8139A-G";                  case 232: //11101000                      return "RTL8139C";                  case 233: //11101001                      return "RTL8139C+";                  case 240: //11110000                      return "RTL8139B";                  case 248: //11111000                      return "RTL8130";                  default:                      return "Unknown RTL813xxx revision (" + hwverid + ")";              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,GetHardwareRevision,The following statement contains a magic number: switch (hwverid)              {                  case 192: //11000000                      return "RTL8139";                  case 224: //11100000                      return "RTL8139A";                  case 225: //11100001                      return "RTL8139A-G";                  case 232: //11101000                      return "RTL8139C";                  case 233: //11101001                      return "RTL8139C+";                  case 240: //11110000                      return "RTL8139B";                  case 248: //11111000                      return "RTL8130";                  default:                      return "Unknown RTL813xxx revision (" + hwverid + ")";              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,GetHardwareRevision,The following statement contains a magic number: switch (hwverid)              {                  case 192: //11000000                      return "RTL8139";                  case 224: //11100000                      return "RTL8139A";                  case 225: //11100001                      return "RTL8139A-G";                  case 232: //11101000                      return "RTL8139C";                  case 233: //11101001                      return "RTL8139C+";                  case 240: //11110000                      return "RTL8139B";                  case 248: //11111000                      return "RTL8130";                  default:                      return "Unknown RTL813xxx revision (" + hwverid + ")";              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,GetHardwareRevision,The following statement contains a magic number: switch (hwverid)              {                  case 192: //11000000                      return "RTL8139";                  case 224: //11100000                      return "RTL8139A";                  case 225: //11100001                      return "RTL8139A-G";                  case 232: //11101000                      return "RTL8139C";                  case 233: //11101001                      return "RTL8139C+";                  case 240: //11110000                      return "RTL8139B";                  case 248: //11111000                      return "RTL8130";                  default:                      return "Unknown RTL813xxx revision (" + hwverid + ")";              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,GetHardwareRevision,The following statement contains a magic number: switch (hwverid)              {                  case 192: //11000000                      return "RTL8139";                  case 224: //11100000                      return "RTL8139A";                  case 225: //11100001                      return "RTL8139A-G";                  case 232: //11101000                      return "RTL8139C";                  case 233: //11101001                      return "RTL8139C+";                  case 240: //11110000                      return "RTL8139B";                  case 248: //11111000                      return "RTL8130";                  default:                      return "Unknown RTL813xxx revision (" + hwverid + ")";              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitConfigurationRegister,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitConfigurationRegister.cs,GetHardwareRevision,The following statement contains a magic number: switch (hwverid)              {                  case 192: //11000000                      return "RTL8139";                  case 224: //11100000                      return "RTL8139A";                  case 225: //11100001                      return "RTL8139A-G";                  case 232: //11101000                      return "RTL8139C";                  case 233: //11101001                      return "RTL8139C+";                  case 240: //11110000                      return "RTL8139B";                  case 248: //11111000                      return "RTL8130";                  default:                      return "Unknown RTL813xxx revision (" + hwverid + ")";              }
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitStatusDescriptor,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitStatusDescriptor.cs,ToString,The following statement contains a magic number: return this.TSD.ToBinary(32);
Magic Number,Cosmos.Hardware2.Network.Devices.RTL8139.Register,TransmitStatusDescriptor,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\RTL8139Old\Register\TransmitStatusDescriptor.cs,IncrementTSDescriptor,The following statement contains a magic number: const byte NumberOfDescriptors = 4;
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: byte[] eeprom_mac = new byte[6];
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: eeprom_mac[1] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: eeprom_mac[2] = BinaryHelper.GetByteFrom32bit(result' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: eeprom_mac[2] = BinaryHelper.GetByteFrom32bit(result' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: eeprom_mac[3] = BinaryHelper.GetByteFrom32bit(result' 24);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: eeprom_mac[3] = BinaryHelper.GetByteFrom32bit(result' 24);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: eeprom_mac[4] = BinaryHelper.GetByteFrom32bit(result' 0);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: eeprom_mac[5] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: eeprom_mac[5] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: mRxDescriptors = new ManagedMemorySpace(256' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: mRxDescriptors = new ManagedMemorySpace(256' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: mTxDescriptors = new ManagedMemorySpace(256' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: mTxDescriptors = new ManagedMemorySpace(256' 16);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptors.Write32(xOffset + 12' mRxDescriptors.Offset + xOffset + 16);                  mRxDescriptors.Write32(xOffset + 8' buffer.Offset);                  mRxDescriptors.Write32(xOffset + 4' buffer.Size);                  mRxDescriptors.Write32(xOffset' 0x80000000);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptors.Write32(xOffset + 12' mRxDescriptors.Offset + xOffset + 16);                  mRxDescriptors.Write32(xOffset + 8' buffer.Offset);                  mRxDescriptors.Write32(xOffset + 4' buffer.Size);                  mRxDescriptors.Write32(xOffset' 0x80000000);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptors.Write32(xOffset + 12' mRxDescriptors.Offset + xOffset + 16);                  mRxDescriptors.Write32(xOffset + 8' buffer.Offset);                  mRxDescriptors.Write32(xOffset + 4' buffer.Size);                  mRxDescriptors.Write32(xOffset' 0x80000000);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptors.Write32(xOffset + 12' mRxDescriptors.Offset + xOffset + 16);                  mRxDescriptors.Write32(xOffset + 8' buffer.Offset);                  mRxDescriptors.Write32(xOffset + 4' buffer.Size);                  mRxDescriptors.Write32(xOffset' 0x80000000);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptors.Write32(xOffset + 12' mRxDescriptors.Offset + xOffset + 16);                  mRxDescriptors.Write32(xOffset + 8' buffer.Offset);                  mRxDescriptors.Write32(xOffset + 4' buffer.Size);                  mRxDescriptors.Write32(xOffset' 0x80000000);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptors.Write32(xOffset + 12' mRxDescriptors.Offset + xOffset + 16);                  mRxDescriptors.Write32(xOffset + 8' buffer.Offset);                  mRxDescriptors.Write32(xOffset + 4' buffer.Size);                  mRxDescriptors.Write32(xOffset' 0x80000000);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemorySpace buffer = new ManagedMemorySpace(2048);                  mRxDescriptors.Write32(xOffset + 12' mRxDescriptors.Offset + xOffset + 16);                  mRxDescriptors.Write32(xOffset + 8' buffer.Offset);                  mRxDescriptors.Write32(xOffset + 4' buffer.Size);                  mRxDescriptors.Write32(xOffset' 0x80000000);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: mRxDescriptors.Write32(252' mRxDescriptors.Offset);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    mTxDescriptors.Write32(xOffset + 12' mTxDescriptors.Offset + xOffset + 16);                  mTxDescriptors.Write32(xOffset + 8' 0);                  mTxDescriptors.Write32(xOffset + 4' 0);                  mTxDescriptors.Write32(xOffset' 0);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    mTxDescriptors.Write32(xOffset + 12' mTxDescriptors.Offset + xOffset + 16);                  mTxDescriptors.Write32(xOffset + 8' 0);                  mTxDescriptors.Write32(xOffset + 4' 0);                  mTxDescriptors.Write32(xOffset' 0);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    mTxDescriptors.Write32(xOffset + 12' mTxDescriptors.Offset + xOffset + 16);                  mTxDescriptors.Write32(xOffset + 8' 0);                  mTxDescriptors.Write32(xOffset + 4' 0);                  mTxDescriptors.Write32(xOffset' 0);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    mTxDescriptors.Write32(xOffset + 12' mTxDescriptors.Offset + xOffset + 16);                  mTxDescriptors.Write32(xOffset + 8' 0);                  mTxDescriptors.Write32(xOffset + 4' 0);                  mTxDescriptors.Write32(xOffset' 0);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    mTxDescriptors.Write32(xOffset + 12' mTxDescriptors.Offset + xOffset + 16);                  mTxDescriptors.Write32(xOffset + 8' 0);                  mTxDescriptors.Write32(xOffset + 4' 0);                  mTxDescriptors.Write32(xOffset' 0);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    mTxDescriptors.Write32(xOffset + 12' mTxDescriptors.Offset + xOffset + 16);                  mTxDescriptors.Write32(xOffset + 8' 0);                  mTxDescriptors.Write32(xOffset + 4' 0);                  mTxDescriptors.Write32(xOffset' 0);              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,VT6102,The following statement contains a magic number: mTxDescriptors.Write32(252' mTxDescriptors.Offset);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,SendBytes,The following statement contains a magic number: if (mNextTXDesc >= 16)              {                  mNextTXDesc = 0;              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,SendBytes,The following statement contains a magic number: uint xOffset = (uint)(txd * 16);
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,SendBytes,The following statement contains a magic number: if (((txBuffer.Offset % 4) != 0) || (txBuffer.Size < 64) )              {                  txBuffer = new ManagedMemorySpace((uint)(aData.Length < 64 ? 64 : aData.Length)' 4);                  for (uint b = 0; b < aData.Length; b++)                  {                      txBuffer[b] = aData[b];                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,SendBytes,The following statement contains a magic number: if (((txBuffer.Offset % 4) != 0) || (txBuffer.Size < 64) )              {                  txBuffer = new ManagedMemorySpace((uint)(aData.Length < 64 ? 64 : aData.Length)' 4);                  for (uint b = 0; b < aData.Length; b++)                  {                      txBuffer[b] = aData[b];                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,SendBytes,The following statement contains a magic number: if (((txBuffer.Offset % 4) != 0) || (txBuffer.Size < 64) )              {                  txBuffer = new ManagedMemorySpace((uint)(aData.Length < 64 ? 64 : aData.Length)' 4);                  for (uint b = 0; b < aData.Length; b++)                  {                      txBuffer[b] = aData[b];                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,SendBytes,The following statement contains a magic number: if (((txBuffer.Offset % 4) != 0) || (txBuffer.Size < 64) )              {                  txBuffer = new ManagedMemorySpace((uint)(aData.Length < 64 ? 64 : aData.Length)' 4);                  for (uint b = 0; b < aData.Length; b++)                  {                      txBuffer[b] = aData[b];                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,SendBytes,The following statement contains a magic number: if (((txBuffer.Offset % 4) != 0) || (txBuffer.Size < 64) )              {                  txBuffer = new ManagedMemorySpace((uint)(aData.Length < 64 ? 64 : aData.Length)' 4);                  for (uint b = 0; b < aData.Length; b++)                  {                      txBuffer[b] = aData[b];                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,SendBytes,The following statement contains a magic number: if ((status & 0x80000000) == 0)              {                  mTxDescriptors.Write32(xOffset + 8' txBuffer.Offset);                  mTxDescriptors.Write32(xOffset + 4' txBuffer.Size | 0x600000 );                    mTxDescriptors.Write32(xOffset' status | 0x80000000);                  return true;              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,SendBytes,The following statement contains a magic number: if ((status & 0x80000000) == 0)              {                  mTxDescriptors.Write32(xOffset + 8' txBuffer.Offset);                  mTxDescriptors.Write32(xOffset + 4' txBuffer.Size | 0x600000 );                    mTxDescriptors.Write32(xOffset' status | 0x80000000);                  return true;              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint)(rxd * 16);                  status = mRxDescriptors.Read32(xOffset);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16)((status & 0xFFFF0000) >> 16);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptors.Write32(xOffset' status | 0x80000000);                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint)(rxd * 16);                  status = mRxDescriptors.Read32(xOffset);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16)((status & 0xFFFF0000) >> 16);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptors.Write32(xOffset' status | 0x80000000);                  }              }
Magic Number,Cosmos.Hardware2.Network.Devices.ViaRhine,VT6102,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\Devices\ViaRhine\VT6102.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint)(rxd * 16);                  status = mRxDescriptors.Read32(xOffset);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16)((status & 0xFFFF0000) >> 16);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptors.Write32(xOffset' status | 0x80000000);                  }              }
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: var xBroadcastArray = new byte[6];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[2] = 0xFF;
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[3] = 0xFF;
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[4] = 0xFF;
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[5] = 0xFF;
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: var xNoneArray = new byte[6];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[2] = 0xFF;
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[3] = 0xFF;
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[4] = 0xFF;
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[5] = 0xFF;
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: if (address == null || address.Length != 6)                  throw new ArgumentException("MACAddress is null or has wrong length"' "address");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = address[2];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = address[2];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = address[3];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = address[3];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = address[4];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = address[4];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = address[5];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = address[5];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: if (buffer == null || buffer.Length < (offset + 6))                  throw new ArgumentException("buffer does not contain enough data starting at offset"' "buffer");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = buffer[offset + 2];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = buffer[offset + 2];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = buffer[offset + 3];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = buffer[offset + 3];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = buffer[offset + 4];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = buffer[offset + 4];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = buffer[offset + 5];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = buffer[offset + 5];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,IsValid,The following statement contains a magic number: return bytes != null && bytes.Length ==6;
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,PutByte,The following statement contains a magic number: aChars[aIndex + 0] = xChars[(aByte >> 4) & 0xF];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: var xChars = new char[17];
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[2] = ':';
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 3' bytes[1]);
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[5] = ':';
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 6' bytes[2]);
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 6' bytes[2]);
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[8] = ':';
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 9' bytes[3]);
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 9' bytes[3]);
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[11] = ':';
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 12' bytes[4]);
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 12' bytes[4]);
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[14] = ':';
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 15' bytes[5]);
Magic Number,Cosmos.Hardware2.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 15' bytes[5]);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,IPv4Address,The following statement contains a magic number: address[2] = aThird;
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,IPv4Address,The following statement contains a magic number: address[3] = aFourth;
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,Parse,The following statement contains a magic number: if (fragments.Length == 4)              {                  byte first = byte.Parse(fragments[0]);                  byte second = byte.Parse(fragments[1]);                  byte third = byte.Parse(fragments[2]);                  byte fourth = byte.Parse(fragments[3]);                  return new IPv4Address(first' second' third' fourth);              }              else              {                  return null;              }
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,Parse,The following statement contains a magic number: if (fragments.Length == 4)              {                  byte first = byte.Parse(fragments[0]);                  byte second = byte.Parse(fragments[1]);                  byte third = byte.Parse(fragments[2]);                  byte fourth = byte.Parse(fragments[3]);                  return new IPv4Address(first' second' third' fourth);              }              else              {                  return null;              }
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,Parse,The following statement contains a magic number: if (fragments.Length == 4)              {                  byte first = byte.Parse(fragments[0]);                  byte second = byte.Parse(fragments[1]);                  byte third = byte.Parse(fragments[2]);                  byte fourth = byte.Parse(fragments[3]);                  return new IPv4Address(first' second' third' fourth);              }              else              {                  return null;              }
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,IsLoopbackAddress,The following statement contains a magic number: if (address[0] == 127)                  return true;              else                  return false;
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,ToString,The following statement contains a magic number: return                  address[0] +                  "." +                  address[1] +                  "." +                  address[2] +                  "." +                  address[3];
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,ToString,The following statement contains a magic number: return                  address[0] +                  "." +                  address[1] +                  "." +                  address[2] +                  "." +                  address[3];
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,To32BitNumber,The following statement contains a magic number: return (UInt32)((address[0] << 0) | (address[1] << 4) | (address[2] << 8) | (address[3] << 16));
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,To32BitNumber,The following statement contains a magic number: return (UInt32)((address[0] << 0) | (address[1] << 4) | (address[2] << 8) | (address[3] << 16));
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,To32BitNumber,The following statement contains a magic number: return (UInt32)((address[0] << 0) | (address[1] << 4) | (address[2] << 8) | (address[3] << 16));
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,To32BitNumber,The following statement contains a magic number: return (UInt32)((address[0] << 0) | (address[1] << 4) | (address[2] << 8) | (address[3] << 16));
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Address,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Address.cs,To32BitNumber,The following statement contains a magic number: return (UInt32)((address[0] << 0) | (address[1] << 4) | (address[2] << 8) | (address[3] << 16));
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,ToString,The following statement contains a magic number: sb.Append("Header length: " + this.HeaderLength + " (" + this.HeaderLength * 4 + " bytes)");
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,CalculateHeaderChecksum,The following statement contains a magic number: for (int index = 0; index < header.Length; index += 2)              {                  UInt16 word = (UInt16)(header[index + 1] + (header[index] << 8));                  words.Add(word);              }
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,CalculateHeaderChecksum,The following statement contains a magic number: for (int index = 0; index < header.Length; index += 2)              {                  UInt16 word = (UInt16)(header[index + 1] + (header[index] << 8));                  words.Add(word);              }
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,CalculateHeaderChecksum,The following statement contains a magic number: words[5] = 0;
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,CalculateHeaderLength,The following statement contains a magic number: return 5;
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,CalculateTotalLength,The following statement contains a magic number: byte header = (byte)(CalculateHeaderLength() * (byte)4);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: UInt32 xVersion = (UInt32)(this.Version << 28);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: UInt32 xHeaderLength = (UInt32)(this.HeaderLength << 24);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: UInt32 xTypeOfService = (UInt32)(this.TypeOfService << 16);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: UInt32 Identity = (UInt32)(this.Identification << 16);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: UInt32 Flags = (UInt32)((byte)(this.FragmentFlags)) << 14;
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: UInt32 xTimeToLive = (UInt32)(this.TimeToLive << 24);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: UInt32 xProtocol = (UInt32)((byte)this.Protocol << 16);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: for (int i = 0; i < fields.Count; i++)              {                  bytes.Add((byte)(fields[i] >> 0));                  bytes.Add((byte)(fields[i] >> 8));                  bytes.Add((byte)(fields[i] >> 16));                  bytes.Add((byte)(fields[i] >> 24));              }
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: for (int i = 0; i < fields.Count; i++)              {                  bytes.Add((byte)(fields[i] >> 0));                  bytes.Add((byte)(fields[i] >> 8));                  bytes.Add((byte)(fields[i] >> 16));                  bytes.Add((byte)(fields[i] >> 24));              }
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,GetHeaderBytes,The following statement contains a magic number: for (int i = 0; i < fields.Count; i++)              {                  bytes.Add((byte)(fields[i] >> 0));                  bytes.Add((byte)(fields[i] >> 8));                  bytes.Add((byte)(fields[i] >> 16));                  bytes.Add((byte)(fields[i] >> 24));              }
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,HostToNetworkOrder,The following statement contains a magic number: xResult = xTemp << 24;
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,HostToNetworkOrder,The following statement contains a magic number: xTemp = (byte)(data >> 8);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,HostToNetworkOrder,The following statement contains a magic number: xResult += xTemp << 16;
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,HostToNetworkOrder,The following statement contains a magic number: xTemp = (byte)(data >> 16);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,HostToNetworkOrder,The following statement contains a magic number: xResult += xTemp << 8;
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,HostToNetworkOrder,The following statement contains a magic number: xTemp = (byte)(data >> 24);
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,HostToNetwork,The following statement contains a magic number: return (ushort)((aValue << 8) | ((aValue >> 8) & 0xFF));
Magic Number,Cosmos.Hardware2.Network.TCPIPModel.NetworkLayer.IPv4,IPv4Packet,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\Network\TCPIPModel\IPv4Packet.cs,HostToNetwork,The following statement contains a magic number: return (ushort)((aValue << 8) | ((aValue >> 8) & 0xFF));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,GetControllerAddressCount,The following statement contains a magic number: return 2;
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_SectorCount = (ushort)(mController + 2);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_SectorNumber = (ushort)(mController + 3);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_CylinderLow = (ushort)(mController + 4);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_CylinderHigh = (ushort)(mController + 5);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_DeviceHead = (ushort)(mController + 6);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_PrimaryStatus = (ushort)(mController + 7);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_Command = (ushort)(mController + 7);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_AlternateStatus = (ushort)(mController2 + 6);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_DeviceControl = (ushort)(mController2 + 6);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ATA,The following statement contains a magic number: mController_DeviceAddress = (ushort)(mController2 + 7);
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,GetBlockCount,The following statement contains a magic number: IOWriteByte(mController_DeviceHead' (byte)((mDrive << 4) + (1 << 6)));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,GetBlockCount,The following statement contains a magic number: IOWriteByte(mController_DeviceHead' (byte)((mDrive << 4) + (1 << 6)));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,GetBlockCount,The following statement contains a magic number: xResult += (uint)IOReadByte(mController_CylinderLow) << 8;
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,GetBlockCount,The following statement contains a magic number: xResult += (uint)IOReadByte(mController_CylinderHigh) << 16;
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,GetBlockCount,The following statement contains a magic number: xResult += (uint)(IOReadByte(mController_DeviceHead) & 0xF) << 8;
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,HandleInterruptSecondary,The following statement contains a magic number: IOReadByte((ushort)(GetControllerAddress1(0) + 7));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,HandleInterruptPrimary,The following statement contains a magic number: IOReadByte((ushort)(GetControllerAddress1(1) + 7));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,Initialize,The following statement contains a magic number: for (byte xControllerBaseAIdx = 0; xControllerBaseAIdx < GetControllerAddressCount(); xControllerBaseAIdx++)              {                  var xOldValue = IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                  IOWriteByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS)' (byte)(xOldValue | 0x4));                  IOWriteByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS)' xOldValue);                    for (byte xDrive = 0; xDrive < 2; xDrive++)                  {                      IOWriteByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_DRIVEHEAD)'                           (byte)((xControllerBaseAIdx << 4) | 0xA0 | (xDrive << 4)));                      Console.Write("        Drive " + xDrive);                      // we should wait 400ns                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      // end wait 400ns                      if (IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS)) == 0x50)                      {                          ATA xATA = xATA = new ATA(String.Concat(mControllerNumbers[xControllerBaseAIdx]' " "' mDriveNames[xDrive])' xControllerBaseAIdx' xDrive);                          Device.Add(xATA);                      }                  }              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,Initialize,The following statement contains a magic number: for (byte xControllerBaseAIdx = 0; xControllerBaseAIdx < GetControllerAddressCount(); xControllerBaseAIdx++)              {                  var xOldValue = IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                  IOWriteByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS)' (byte)(xOldValue | 0x4));                  IOWriteByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS)' xOldValue);                    for (byte xDrive = 0; xDrive < 2; xDrive++)                  {                      IOWriteByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_DRIVEHEAD)'                           (byte)((xControllerBaseAIdx << 4) | 0xA0 | (xDrive << 4)));                      Console.Write("        Drive " + xDrive);                      // we should wait 400ns                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      // end wait 400ns                      if (IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS)) == 0x50)                      {                          ATA xATA = xATA = new ATA(String.Concat(mControllerNumbers[xControllerBaseAIdx]' " "' mDriveNames[xDrive])' xControllerBaseAIdx' xDrive);                          Device.Add(xATA);                      }                  }              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,Initialize,The following statement contains a magic number: for (byte xControllerBaseAIdx = 0; xControllerBaseAIdx < GetControllerAddressCount(); xControllerBaseAIdx++)              {                  var xOldValue = IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                  IOWriteByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS)' (byte)(xOldValue | 0x4));                  IOWriteByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS)' xOldValue);                    for (byte xDrive = 0; xDrive < 2; xDrive++)                  {                      IOWriteByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_DRIVEHEAD)'                           (byte)((xControllerBaseAIdx << 4) | 0xA0 | (xDrive << 4)));                      Console.Write("        Drive " + xDrive);                      // we should wait 400ns                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS));                      // end wait 400ns                      if (IOReadByte((ushort)(GetControllerAddress1(xControllerBaseAIdx) + ATA_STATUS)) == 0x50)                      {                          ATA xATA = xATA = new ATA(String.Concat(mControllerNumbers[xControllerBaseAIdx]' " "' mDriveNames[xDrive])' xControllerBaseAIdx' xDrive);                          Device.Add(xATA);                      }                  }              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The following statement contains a magic number: IOWriteByte(mController_DeviceHead' (byte)(mDrive << 4));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The following statement contains a magic number: IOWriteByte(mController_CylinderLow' (byte)(aBlock >> 8));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The following statement contains a magic number: IOWriteByte(mController_CylinderHigh' (byte)(aBlock >> 16));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The following statement contains a magic number: IOWriteByte(mController_DeviceHead' (byte)(0xE0 | (mDrive << 4) | ((byte)((aBlock >> 24) & 0x0F))));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The following statement contains a magic number: IOWriteByte(mController_DeviceHead' (byte)(0xE0 | (mDrive << 4) | ((byte)((aBlock >> 24) & 0x0F))));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  ushort xValue = IOReadWord(mController);                  aBuffer[i * 2] = (byte)xValue;                  aBuffer[(i * 2) + 1] = (byte)(xValue >> 8);              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  ushort xValue = IOReadWord(mController);                  aBuffer[i * 2] = (byte)xValue;                  aBuffer[(i * 2) + 1] = (byte)(xValue >> 8);              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  ushort xValue = IOReadWord(mController);                  aBuffer[i * 2] = (byte)xValue;                  aBuffer[(i * 2) + 1] = (byte)(xValue >> 8);              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,ReadBlock,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  ushort xValue = IOReadWord(mController);                  aBuffer[i * 2] = (byte)xValue;                  aBuffer[(i * 2) + 1] = (byte)(xValue >> 8);              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,WriteBlock,The following statement contains a magic number: IOWriteByte(mController_CylinderLow' (byte)(aBlock >> 8));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,WriteBlock,The following statement contains a magic number: IOWriteByte(mController_CylinderHigh' (byte)(aBlock >> 16));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,WriteBlock,The following statement contains a magic number: IOWriteByte(mController_DeviceHead' (byte)(0xE0 | (mDrive << 4) | (byte)(aBlock >> 24)));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,WriteBlock,The following statement contains a magic number: IOWriteByte(mController_DeviceHead' (byte)(0xE0 | (mDrive << 4) | (byte)(aBlock >> 24)));
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,WriteBlock,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  IOWriteWord(mController_Data' (ushort)((aContents[i * 2]) | (aContents[i * 2 + 1] << 8)));              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,WriteBlock,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  IOWriteWord(mController_Data' (ushort)((aContents[i * 2]) | (aContents[i * 2 + 1] << 8)));              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,WriteBlock,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  IOWriteWord(mController_Data' (ushort)((aContents[i * 2]) | (aContents[i * 2 + 1] << 8)));              }
Magic Number,Cosmos.Hardware2.Storage.ATA,ATA,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\ATA.cs,WriteBlock,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  IOWriteWord(mController_Data' (ushort)((aContents[i * 2]) | (aContents[i * 2 + 1] << 8)));              }
Missing Default,Cosmos.Hardware2,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware\VGAScreen.cs,get_fb_seg,The following switch statement is missing a default case: switch (seg)              {                  case 0:                  case 1:                      seg = 0xA0000;                      break;                  case 2:                      seg = 0xB0000;                      break;                  case 3:                      seg = 0xB8000;                      break;              }
