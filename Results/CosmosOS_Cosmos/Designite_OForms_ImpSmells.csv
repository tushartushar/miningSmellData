Implementation smell,Namespace,Class,File,Method,Description
Long Method,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The method has 112 lines of code.
Long Method,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,DoMouseMove,The method has 121 lines of code.
Long Statement,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,DrawWindowName,The length of the statement  "            //    Buffer.DrawString(new Vec2(bnds.Left + 2' bnds.Bottom + 2)' s' WindowManager.WindowFont' 10' Orvid.Graphics.FontSupport.FontStyle.Normal' TaskbarTextColor); " is 162.
Long Statement,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,DrawWindowName,The length of the statement  "            //    Buffer.DrawString(new Vec2(bnds.Left + 2' bnds.Bottom + 2)' w.Name' WindowManager.WindowFont' 10' Orvid.Graphics.FontSupport.FontStyle.Normal' TaskbarTextColor); " is 167.
Long Statement,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawHeader,The length of the statement  "            //HeaderBuffer.DrawString(new Vec2(3' 3)' Name' WindowManager.WindowFont' 10' Orvid.Graphics.FontSupport.FontStyle.Normal' Colors.Black); " is 137.
Long Statement,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The length of the statement  "            HeaderBuffer.DrawLine(new Vec2(iSize.X - WindowBorderSize - 4' WindowBorderSize + 3)' new Vec2(iSize.X - HeaderHeight + 4' HeaderHeight - 4)' Colors.Green); " is 156.
Long Statement,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The length of the statement  "            HeaderBuffer.DrawLine(new Vec2(iSize.X - HeaderHeight + 4' WindowBorderSize + 3)' new Vec2(iSize.X - WindowBorderSize - 4' HeaderHeight - 4)' Colors.Green); " is 156.
Long Statement,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,Draw,The length of the statement  "            WindowBuffer.DrawLine(new Vec2(WindowBorderSize' HeaderHeight)' new Vec2(iSize.X - WindowBorderSize - 1' HeaderHeight)' new Pixel(214' 211' 206' 255)); " is 151.
Virtual Method Call from Constructor,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,Taskbar,The constructor "Taskbar" calls a virtual method "Clear".
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: int loc = 20;
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,RedrawBuffer,The following statement contains a magic number: if (Windows.Length * (WindowButtonWidth + (2 * WindowButtonMargin)) < Manager.Size.X - 20)              {                  #region No Dynamic Size                  Vec2 tl;                  Vec2 tr;                  Vec2 br;                  Vec2 bl;                  Window w;                  for (uint ind = 0; ind < Windows.Length; ind++)                  {                      w = Windows[ind];                        tl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      tr = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                      );                      br = new Vec2(                          loc + WindowButtonMargin + WindowButtonWidth'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                      bl = new Vec2(                          loc + WindowButtonMargin'                          (TaskBarHeight - 2 - WindowButtonMargin)                      );                        WindowButtonBounds[ind] = new BoundingBox(                          loc + WindowButtonMargin'                          loc + WindowButtonMargin + WindowButtonWidth'                          Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                          Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                      );                        if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                      {                          Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                      }                      else                      {                          Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                          Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                      }                        DrawWindowName(WindowButtonBounds[ind]' w);                        loc += WindowButtonMargin + WindowButtonMargin + WindowButtonWidth;                  }                  #endregion              }              else              {                  #region Dynamic Size                  uint len = (uint)Manager.Size.X - 20;                  int ButtonWidth = (int)Math.Floor((double)((len / Windows.Length) - 2));                  if (ButtonWidth > 5)                  {                      Vec2 tl;                      Vec2 tr;                      Vec2 br;                      Vec2 bl;                      Window w;                      for (uint ind = 0; ind < Windows.Length; ind++)                      {                          w = Windows[ind];                            tl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          tr = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))                          );                          br = new Vec2(                              loc + WindowButtonMargin + ButtonWidth'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                          bl = new Vec2(                              loc + WindowButtonMargin'                              (TaskBarHeight - 2 - WindowButtonMargin)                          );                            WindowButtonBounds[ind] = new BoundingBox(                              loc + WindowButtonMargin'                              loc + WindowButtonMargin + ButtonWidth'                              Manager.Size.Y - (TaskBarHeight - (TaskBarHeight - 2 - WindowButtonMargin))'                              Manager.Size.Y - (TaskBarHeight - 2 - WindowButtonMargin)                          );                            if (w.IsActiveWindow && w.CurrentState != WindowState.Minimized)                          {                              Buffer.DrawRectangle(tl' br' WindowActiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowActiveLineColor);                          }                          else                          {                              Buffer.DrawRectangle(tl' br' WindowInactiveBackColor);                              Buffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' WindowInactiveLineColor);                          }                            DrawWindowName(WindowButtonBounds[ind]' w);                            loc += WindowButtonMargin + WindowButtonMargin + ButtonWidth;                      }                  }                  else                  {                      Buffer.DrawRectangle(new Vec2(24' 4)' new Vec2(Buffer.Width - 10' Buffer.Height - 4)' Colors.Cyan);                  }                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: Vec2 tl = new Vec2(iSize.X - HeaderHeight + 2' WindowBorderSize + 1);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: Vec2 tr = new Vec2(iSize.X - WindowBorderSize - 2' WindowBorderSize + 1);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: Vec2 br = new Vec2(iSize.X - WindowBorderSize - 2' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: Vec2 br = new Vec2(iSize.X - WindowBorderSize - 2' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: Vec2 bl = new Vec2(iSize.X - HeaderHeight + 2' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: Vec2 bl = new Vec2(iSize.X - HeaderHeight + 2' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(iSize.X - WindowBorderSize - 4' WindowBorderSize + 3)' new Vec2(iSize.X - HeaderHeight + 4' HeaderHeight - 4)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(iSize.X - WindowBorderSize - 4' WindowBorderSize + 3)' new Vec2(iSize.X - HeaderHeight + 4' HeaderHeight - 4)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(iSize.X - WindowBorderSize - 4' WindowBorderSize + 3)' new Vec2(iSize.X - HeaderHeight + 4' HeaderHeight - 4)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(iSize.X - WindowBorderSize - 4' WindowBorderSize + 3)' new Vec2(iSize.X - HeaderHeight + 4' HeaderHeight - 4)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(iSize.X - HeaderHeight + 4' WindowBorderSize + 3)' new Vec2(iSize.X - WindowBorderSize - 4' HeaderHeight - 4)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(iSize.X - HeaderHeight + 4' WindowBorderSize + 3)' new Vec2(iSize.X - WindowBorderSize - 4' HeaderHeight - 4)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(iSize.X - HeaderHeight + 4' WindowBorderSize + 3)' new Vec2(iSize.X - WindowBorderSize - 4' HeaderHeight - 4)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawCloseButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(iSize.X - HeaderHeight + 4' WindowBorderSize + 3)' new Vec2(iSize.X - WindowBorderSize - 4' HeaderHeight - 4)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: Vec2 tl = new Vec2(iSize.X - (HeaderHeight + HeaderHeight - 2)' WindowBorderSize + 1);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: Vec2 tr = new Vec2(iSize.X - (HeaderHeight + WindowBorderSize + 2)' WindowBorderSize + 1);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: Vec2 br = new Vec2(iSize.X - (HeaderHeight + WindowBorderSize + 2)' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: Vec2 br = new Vec2(iSize.X - (HeaderHeight + WindowBorderSize + 2)' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: Vec2 bl = new Vec2(iSize.X - (HeaderHeight + HeaderHeight - 2)' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: Vec2 bl = new Vec2(iSize.X - (HeaderHeight + HeaderHeight - 2)' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMaxRestButton,The following statement contains a magic number: if (CurrentState == WindowState.Maximized) // Draw Restore Button.              {                  #region Draw Restore Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 4' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 3)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 2' tl.Y + 5)'                      new Vec2(tl.X + 2' bl.Y - 2)'                      new Vec2(tr.X - 4' bl.Y - 2)'                      new Vec2(tr.X - 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 5)'                      new Vec2(tl.X + 4' tl.Y + 6)'                      new Vec2(tl.X + 2' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 6)'                      new Vec2(tr.X - 4' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 7)'                      new Vec2(tr.X - 2' tl.Y + 2)'                  }' Colors.Green);                  #endregion              }              else // Draw Maximize Button.              {                  #region Draw Maximize Button                  HeaderBuffer.DrawRectangle(tl' br' CurMaxButtonColor);                  HeaderBuffer.DrawLines(new Vec2[] { tl' tr' br' bl' tl }' Colors.Green);                  HeaderBuffer.DrawLines(new Vec2[] {                      new Vec2(tl.X + 2' tl.Y + 2)'                      new Vec2(tr.X - 2' tr.Y + 2)'                      new Vec2(br.X - 2' br.Y - 2)'                      new Vec2(bl.X + 2' bl.Y - 2)'                      new Vec2(tl.X + 2' tl.Y + 2)'                  }' Colors.Green);                  HeaderBuffer.DrawLine(new Vec2(tl.X + 2' tl.Y + 3)' new Vec2(tr.X - 2' tr.Y + 3)' Colors.Green);                  #endregion              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: Vec2 tl = new Vec2(iSize.X - (HeaderHeight + HeaderHeight + HeaderHeight - 2)' WindowBorderSize + 1);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: Vec2 tr = new Vec2(iSize.X - (HeaderHeight + HeaderHeight + WindowBorderSize + 2)' WindowBorderSize + 1);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: Vec2 br = new Vec2(iSize.X - (HeaderHeight + HeaderHeight + WindowBorderSize + 2)' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: Vec2 br = new Vec2(iSize.X - (HeaderHeight + HeaderHeight + WindowBorderSize + 2)' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: Vec2 bl = new Vec2(iSize.X - (HeaderHeight + HeaderHeight + HeaderHeight - 2)' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: Vec2 bl = new Vec2(iSize.X - (HeaderHeight + HeaderHeight + HeaderHeight - 2)' HeaderHeight - 2);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(br.X - 3' br.Y - 2)' new Vec2(bl.X + 3' bl.Y - 2)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(br.X - 3' br.Y - 2)' new Vec2(bl.X + 3' bl.Y - 2)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(br.X - 3' br.Y - 2)' new Vec2(bl.X + 3' bl.Y - 2)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(br.X - 3' br.Y - 2)' new Vec2(bl.X + 3' bl.Y - 2)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(br.X - 3' br.Y - 3)' new Vec2(bl.X + 3' bl.Y - 3)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(br.X - 3' br.Y - 3)' new Vec2(bl.X + 3' bl.Y - 3)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(br.X - 3' br.Y - 3)' new Vec2(bl.X + 3' bl.Y - 3)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,RedrawMinButton,The following statement contains a magic number: HeaderBuffer.DrawLine(new Vec2(br.X - 3' br.Y - 3)' new Vec2(bl.X + 3' bl.Y - 3)' Colors.Green);
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,ComputeBounds,The following statement contains a magic number: this.CloseButtonBounds = new BoundingBox(                  iLocation.X + (iSize.X - HeaderHeight + 2)'                  iLocation.X + (iSize.X - WindowBorderSize - 2)'                  iLocation.Y + (HeaderHeight - 2)'                  iLocation.Y + (WindowBorderSize + 1)              );
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,ComputeBounds,The following statement contains a magic number: this.CloseButtonBounds = new BoundingBox(                  iLocation.X + (iSize.X - HeaderHeight + 2)'                  iLocation.X + (iSize.X - WindowBorderSize - 2)'                  iLocation.Y + (HeaderHeight - 2)'                  iLocation.Y + (WindowBorderSize + 1)              );
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,ComputeBounds,The following statement contains a magic number: this.CloseButtonBounds = new BoundingBox(                  iLocation.X + (iSize.X - HeaderHeight + 2)'                  iLocation.X + (iSize.X - WindowBorderSize - 2)'                  iLocation.Y + (HeaderHeight - 2)'                  iLocation.Y + (WindowBorderSize + 1)              );
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,ComputeBounds,The following statement contains a magic number: this.MaxButtonBounds = new BoundingBox(                  iLocation.X + (iSize.X - (HeaderHeight + HeaderHeight - 2))'                  iLocation.X + (iSize.X - (HeaderHeight + WindowBorderSize + 2))'                  iLocation.Y + (HeaderHeight - 2)'                  iLocation.Y + (WindowBorderSize + 1)              );
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,ComputeBounds,The following statement contains a magic number: this.MaxButtonBounds = new BoundingBox(                  iLocation.X + (iSize.X - (HeaderHeight + HeaderHeight - 2))'                  iLocation.X + (iSize.X - (HeaderHeight + WindowBorderSize + 2))'                  iLocation.Y + (HeaderHeight - 2)'                  iLocation.Y + (WindowBorderSize + 1)              );
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,ComputeBounds,The following statement contains a magic number: this.MaxButtonBounds = new BoundingBox(                  iLocation.X + (iSize.X - (HeaderHeight + HeaderHeight - 2))'                  iLocation.X + (iSize.X - (HeaderHeight + WindowBorderSize + 2))'                  iLocation.Y + (HeaderHeight - 2)'                  iLocation.Y + (WindowBorderSize + 1)              );
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,ComputeBounds,The following statement contains a magic number: this.MinButtonBounds = new BoundingBox(                  iLocation.X + (iSize.X - (HeaderHeight + HeaderHeight + HeaderHeight - 2))'                  iLocation.X + (iSize.X - (HeaderHeight + HeaderHeight + WindowBorderSize + 2))'                  iLocation.Y + (HeaderHeight - 2)'                  iLocation.Y + (WindowBorderSize + 1)              );
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,ComputeBounds,The following statement contains a magic number: this.MinButtonBounds = new BoundingBox(                  iLocation.X + (iSize.X - (HeaderHeight + HeaderHeight + HeaderHeight - 2))'                  iLocation.X + (iSize.X - (HeaderHeight + HeaderHeight + WindowBorderSize + 2))'                  iLocation.Y + (HeaderHeight - 2)'                  iLocation.Y + (WindowBorderSize + 1)              );
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,ComputeBounds,The following statement contains a magic number: this.MinButtonBounds = new BoundingBox(                  iLocation.X + (iSize.X - (HeaderHeight + HeaderHeight + HeaderHeight - 2))'                  iLocation.X + (iSize.X - (HeaderHeight + HeaderHeight + WindowBorderSize + 2))'                  iLocation.Y + (HeaderHeight - 2)'                  iLocation.Y + (WindowBorderSize + 1)              );
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,Draw,The following statement contains a magic number: if (IsActiveWindow)              {                  if (FadingIn)                  {                      ContentBuffer.Clear(new Pixel(ClearColor.R' ClearColor.G' ClearColor.B' 128));                      FadingIn = false;                  }                  else                  {                      ContentBuffer.Clear(ClearColor);                  }              }              else              {                  ContentBuffer.Clear(ClearInactiveColor);              }
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,Draw,The following statement contains a magic number: WindowBuffer.DrawLine(new Vec2(WindowBorderSize' HeaderHeight)' new Vec2(iSize.X - WindowBorderSize - 1' HeaderHeight)' new Pixel(214' 211' 206' 255));
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,Draw,The following statement contains a magic number: WindowBuffer.DrawLine(new Vec2(WindowBorderSize' HeaderHeight)' new Vec2(iSize.X - WindowBorderSize - 1' HeaderHeight)' new Pixel(214' 211' 206' 255));
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,Draw,The following statement contains a magic number: WindowBuffer.DrawLine(new Vec2(WindowBorderSize' HeaderHeight)' new Vec2(iSize.X - WindowBorderSize - 1' HeaderHeight)' new Pixel(214' 211' 206' 255));
Magic Number,OForms.Windows,Window,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Window.cs,Draw,The following statement contains a magic number: WindowBuffer.DrawLine(new Vec2(WindowBorderSize' HeaderHeight)' new Vec2(iSize.X - WindowBorderSize - 1' HeaderHeight)' new Pixel(214' 211' 206' 255));
Duplicate Code,OForms.Windows,Taskbar,C:\repos\CosmosOS_Cosmos\Users\Orvid\OForms\Windows\Taskbar.cs,DoClick,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 50)' (51' 77))
