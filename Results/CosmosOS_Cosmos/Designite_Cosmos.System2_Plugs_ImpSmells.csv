Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cosmos.System_Plugs.System,ConsoleImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\ConsoleImpl.cs,ReadLine,Cyclomatic complexity of the method is 9
Complex Method,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,HasIllegalCharacters,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetDirectoryName,Cyclomatic complexity of the method is 8
Long Parameter List,Cosmos.System_Plugs.System,ConsoleImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\ConsoleImpl.cs,MoveBufferArea,The method has 9 parameters. Parameters: sourceLeft' sourceTop' sourceWidth' sourceHeight' targetLeft' targetTop' sourceChar' sourceForeColor' sourceBackColor
Long Parameter List,Cosmos.System_Plugs.System,ConsoleImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\ConsoleImpl.cs,Write,The method has 5 parameters. Parameters: format' arg0' arg1' arg2' arg3
Long Parameter List,Cosmos.System_Plugs.System,ConsoleImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\ConsoleImpl.cs,WriteLine,The method has 5 parameters. Parameters: format' arg0' arg1' arg2' arg3
Long Parameter List,Cosmos.System_Plugs.System.IO,FileStreamImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\FileStreamImpl.cs,Read,The method has 5 parameters. Parameters: aThis' aBuffer' aOffset' aCount' innerStream
Long Parameter List,Cosmos.System_Plugs.System.IO,FileStreamImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\FileStreamImpl.cs,Write,The method has 5 parameters. Parameters: aThis' aBuffer' aOffset' aCount' innerStream
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Atan2,The length of the statement  "            //return (((x + y) == x) ? (((x == 0F) & (y == 0F)) ? 0F : ((x >= 0F) ? pio2 : (-pio2))) : ((y < 0F) ? ((x >= 0F) ? ((pio2 * 2) - atans((-x) / y)) : (((-pio2) * 2) + atans(x / y))) : ((x > 0F) ? atans(x / y) : -atans((-x) / y)))); " is 230.
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The length of the statement  "                return (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * (c5 + (x2 * (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + (x2 * (c10 + (x2 * c11)))))))))))))))))))); " is 152.
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The length of the statement  "                return -(c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * (c5 + (x2 * (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + (x2 * (c10 + (x2 * c11)))))))))))))))))))); " is 153.
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cosh,The length of the statement  "            return ((x == 0F) ? 1F : ((x <= (ln2 / 2)) ? (1 + (_power((Exp(x) - 1)' 2) / (2 * Exp(x)))) : ((x <= 22F) ? ((Exp(x) + (1 / Exp(x))) / 2) : (0.5F * (Exp(x) + Exp(-x)))))); " is 171.
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The length of the statement  "                return ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))); " is 128.
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The length of the statement  "                return (1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))))); " is 134.
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The length of the statement  "                return (-1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))))); " is 135.
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The length of the statement  "                return -((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))); " is 129.
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,atanx,The length of the statement  "                value = ((((atan_p4 * argsq + atan_p3) * argsq + atan_p2) * argsq + atan_p1) * argsq + atan_p0) / (((((argsq + atan_q4) * argsq + atan_q3) * argsq + atan_q2) * argsq + atan_q1) * argsq + atan_q0); " is 196.
Long Statement,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,atanx,The length of the statement  "            //    (((((ArgSquared + atan_q4) * ArgSquared + atan_q3) * ArgSquared + atan_q2) * ArgSquared + atan_q1) * ArgSquared + atan_q0) * x); " is 134.
Long Statement,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,ChangeExtension,The length of the statement  "                Global.mFileSystemDebugger.SendInternal($"Path.ChangeExtension : aPath = {aPath}' aExtension = {aExtension}' returning {xText}"); " is 129.
Long Statement,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,CombineNoChecks,The length of the statement  "                Global.mFileSystemDebugger.SendInternal($"Path.CombineNoChecks : aPath1 = {aPath1}' aPath2 = {aPath2}' returning {xResult}"); " is 125.
Long Statement,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,CombineNoChecks,The length of the statement  "            Global.mFileSystemDebugger.SendInternal($"Path.CombineNoChecks : aPath1 = {aPath1}' aPath2 = {aPath2}' returning {xResult}"); " is 125.
Long Statement,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,IsPathRooted,The length of the statement  "                if ((xLength >= 1 && (aPath[0] == Path.DirectorySeparatorChar || aPath[0] == Path.AltDirectorySeparatorChar)) || (xLength >= 2 && aPath[1] == Path.VolumeSeparatorChar)) " is 168.
Long Statement,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetDirectoryName,The length of the statement  "                    while ((num2 > rootLength) && (aPath[--num2] != Path.DirectorySeparatorChar) && (aPath[num2] != Path.AltDirectorySeparatorChar)) " is 128.
Complex Conditional,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,IsPathRooted,The conditional expression  "(xLength >= 1 && (aPath[0] == Path.DirectorySeparatorChar || aPath[0] == Path.AltDirectorySeparatorChar)) || (xLength >= 2 && aPath[1] == Path.VolumeSeparatorChar)"  is complex.
Empty Catch Block,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetDirectoryName,The method has an empty catch block.
Empty Catch Block,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetDirectoryName,The method has an empty catch block.
Empty Catch Block,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetDirectoryName,The method has an empty catch block.
Magic Number,Cosmos.System_Plugs.System,ConsoleImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\ConsoleImpl.cs,get_WindowHeight,The following statement contains a magic number: if (xConsole == null)              {                  // for now:                  return 25;              }
Magic Number,Cosmos.System_Plugs.System,ConsoleImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\ConsoleImpl.cs,get_WindowWidth,The following statement contains a magic number: if (xConsole == null)              {                  // for now:                  return 85;              }
Magic Number,Cosmos.System_Plugs.System,ConsoleImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\ConsoleImpl.cs,Beep,The following statement contains a magic number: if (aFrequency < 37 || aFrequency > 32767)              {                  throw new ArgumentOutOfRangeException("Frequency must be between 37 and 32767Hz");              }
Magic Number,Cosmos.System_Plugs.System,ConsoleImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\ConsoleImpl.cs,Beep,The following statement contains a magic number: if (aFrequency < 37 || aFrequency > 32767)              {                  throw new ArgumentOutOfRangeException("Frequency must be between 37 and 32767Hz");              }
Magic Number,Cosmos.System_Plugs.System,ConsoleImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\ConsoleImpl.cs,ReadLine,The following statement contains a magic number: List<char> chars = new List<char>(32);
Magic Number,Cosmos.System_Plugs.System,Int16Impl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\Int16Impl.cs,Parse,The following statement contains a magic number: for (int i = z; i < s.Length; i++)              {                  Int16 ind = (Int16)digits.IndexOf(s[i]);                  if (ind == -1)                  {                      global::System.Console.Write("Digit '");                      global::System.Console.Write(s[i]);                      global::System.Console.WriteLine("' not found!");                      throw new FormatException();                  }                  result = (Int16)((result * 10) + ind);              }
Magic Number,Cosmos.System_Plugs.System,Int32Impl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\Int32Impl.cs,Parse,The following statement contains a magic number: for (int i = z; i < s.Length; i++)              {                  Int32 ind = (Int32)digits.IndexOf(s[i]);                  if (ind == -1)                  {                      throw new FormatException();                  }                  result = (Int32)((result * 10) + ind);              }
Magic Number,Cosmos.System_Plugs.System,Int64Impl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\Int64Impl.cs,Parse,The following statement contains a magic number: for (int i = z; i < s.Length; i++)              {                  Int64 ind = (Int64)digits.IndexOf(s[i]);                  if (ind == -1)                  {                      throw new FormatException();                  }                  result = (Int64)((result * 10) + ind);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Asin,The following statement contains a magic number: if (x > 0.7)              {                  temp = pio2 - Atan(temp / x);              }              else              {                  temp = Atan(x / temp);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Atan2,The following statement contains a magic number: if (y < 0.0F)              {                  if (x >= 0.0F)                      return ((pio2 * 2) - atans((-x) / y));                  return (((-pio2) * 2) + atans(x / y));              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Atan2,The following statement contains a magic number: if (y < 0.0F)              {                  if (x >= 0.0F)                      return ((pio2 * 2) - atans((-x) / y));                  return (((-pio2) * 2) + atans(x / y));              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: while (x > (2 * PI))              {                  x -= (2 * PI);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: while (x > (2 * PI))              {                  x -= (2 * PI);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: if ((x > (PI)) && (x < ((3F * PI) / 2)))              {                  quadrand = 2;                  x = x - PI;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: if ((x > (PI)) && (x < ((3F * PI) / 2)))              {                  quadrand = 2;                  x = x - PI;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: if ((x > ((3F * PI) / 2)))              {                  quadrand = 3;                  x = (2F * PI) - x;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: if ((x > ((3F * PI) / 2)))              {                  quadrand = 3;                  x = (2F * PI) - x;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c2 = -0.4999999999999999999991637437;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c3 = 0.04166666666666666665319411988;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c4 = -0.00138888888888888880310186415;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c5 = 0.00002480158730158702330045157;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c6 = -0.000000275573192239332256421489;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c7 = 0.000000002087675698165412591559;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c8 = -0.0000000000114707451267755432394;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c9 = 0.0000000000000477945439406649917;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c10 = -0.00000000000000015612263428827781;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: const double c11 = 0.00000000000000000039912654507924;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cos,The following statement contains a magic number: if (quadrand == 0 || quadrand == 3)              {                  return (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * (c5 + (x2 * (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + (x2 * (c10 + (x2 * c11))))))))))))))))))));              }              else              {                  return -(c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * (c5 + (x2 * (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + (x2 * (c10 + (x2 * c11))))))))))))))))))));              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cosh,The following statement contains a magic number: return ((x == 0F) ? 1F : ((x <= (ln2 / 2)) ? (1 + (_power((Exp(x) - 1)' 2) / (2 * Exp(x)))) : ((x <= 22F) ? ((Exp(x) + (1 / Exp(x))) / 2) : (0.5F * (Exp(x) + Exp(-x))))));
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cosh,The following statement contains a magic number: return ((x == 0F) ? 1F : ((x <= (ln2 / 2)) ? (1 + (_power((Exp(x) - 1)' 2) / (2 * Exp(x)))) : ((x <= 22F) ? ((Exp(x) + (1 / Exp(x))) / 2) : (0.5F * (Exp(x) + Exp(-x))))));
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cosh,The following statement contains a magic number: return ((x == 0F) ? 1F : ((x <= (ln2 / 2)) ? (1 + (_power((Exp(x) - 1)' 2) / (2 * Exp(x)))) : ((x <= 22F) ? ((Exp(x) + (1 / Exp(x))) / 2) : (0.5F * (Exp(x) + Exp(-x))))));
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Cosh,The following statement contains a magic number: return ((x == 0F) ? 1F : ((x <= (ln2 / 2)) ? (1 + (_power((Exp(x) - 1)' 2) / (2 * Exp(x)))) : ((x <= 22F) ? ((Exp(x) + (1 / Exp(x))) / 2) : (0.5F * (Exp(x) + Exp(-x))))));
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Exp,The following statement contains a magic number: while (x > 10.000F)              {                  m *= 22026.4657948067;                  x -= 10F;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Exp,The following statement contains a magic number: while (x > 00.100F)              {                  m *= 1.10517091807565; ;                  x -= 0.1F;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Exp,The following statement contains a magic number: while (x > 00.010F)              {                  m *= 1.01005016708417;                  x -= 0.01F;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Exp,The following statement contains a magic number: for (int y = 1; y <= 4; y++)              {                  c = _power(x' y);                  ex += c / (double)n;                  n *= (y + 1);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Log,The following statement contains a magic number: while (partial >= 2.22045e-016)              {                  if (x >= newBase)                  {                      fractional += partial;                      x = x / newBase;                  }                  partial *= 0.5F;                  x *= x;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Pow,The following statement contains a magic number: if (x <= 0.0F)              {                  double temp = 0F;                  long l;                  if (x == 0.0F && y <= 0.0F)                      throw new ArgumentException();                    l = (long)Floor(y);                  if (l != y)                      temp = Exp(y * Log(-x));                  if ((l % 2) == 1)                      temp = -temp;                    return (temp);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Round,The following statement contains a magic number: return ((Math.Floor(d) % 2 == 0) ? Math.Floor(d) : Math.Ceiling(d));
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Sin,The following statement contains a magic number: while (x > (2 * PI))              {                  x -= (2 * PI);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Sin,The following statement contains a magic number: while (x > (2 * PI))              {                  x -= (2 * PI);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Sinh,The following statement contains a magic number: if (x <= 22F)              {                  double Ex_1 = Tanh(x / 2) * (Exp(x) + 1);                  return ((Ex_1 + (Ex_1 / (Ex_1 - 1))) / 2);              }              else              {                  return (Exp(x) / 2);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Sinh,The following statement contains a magic number: if (x <= 22F)              {                  double Ex_1 = Tanh(x / 2) * (Exp(x) + 1);                  return ((Ex_1 + (Ex_1 / (Ex_1 - 1))) / 2);              }              else              {                  return (Exp(x) / 2);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Sinh,The following statement contains a magic number: if (x <= 22F)              {                  double Ex_1 = Tanh(x / 2) * (Exp(x) + 1);                  return ((Ex_1 + (Ex_1 / (Ex_1 - 1))) / 2);              }              else              {                  return (Exp(x) / 2);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Sqrt,The following statement contains a magic number: x1 -= 1L << 53;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Sqrt,The following statement contains a magic number: x1 += 1L << 61;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Sqrt,The following statement contains a magic number: for(i = 0; i < 5; i++)              {                  x2 = x2 - (x2 * x2 - x) / (2 * x2);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Sqrt,The following statement contains a magic number: for(i = 0; i < 5; i++)              {                  x2 = x2 - (x2 * x2 - x) / (2 * x2);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: while (x > (2 * PI))              {                  x -= (2 * PI);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: while (x > (2 * PI))              {                  x -= (2 * PI);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: byte octant = (byte)Floor(x * (1 / (PI / 4)));
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: const double c1 = 4130240.588996024013440146267;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: const double c2 = -349781.8562517381616631012487;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: const double c3 = 6170.317758142494245331944348;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: const double c4 = -27.94920941380194872760036319;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: const double c5 = 0.0175143807040383602666563058;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: const double c6 = 5258785.647179987798541780825;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: const double c7 = -1526650.549072940686776259893;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: const double c8 = 54962.51616062905361152230566;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: const double c9 = -497.495460280917265024506937;
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: if (octant == 0 || octant == 4)              {                  return ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))));              }              else if (octant == 1 || octant == 5)              {                  return (1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))));              }              else if (octant == 2 || octant == 6)              {                  return (-1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))));              }              else // octant == 3 || octant == 7              {                  return -((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))));              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: if (octant == 0 || octant == 4)              {                  return ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))));              }              else if (octant == 1 || octant == 5)              {                  return (1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))));              }              else if (octant == 2 || octant == 6)              {                  return (-1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))));              }              else // octant == 3 || octant == 7              {                  return -((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))));              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: if (octant == 0 || octant == 4)              {                  return ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))));              }              else if (octant == 1 || octant == 5)              {                  return (1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))));              }              else if (octant == 2 || octant == 6)              {                  return (-1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))));              }              else // octant == 3 || octant == 7              {                  return -((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))));              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following statement contains a magic number: if (octant == 0 || octant == 4)              {                  return ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))));              }              else if (octant == 1 || octant == 5)              {                  return (1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))));              }              else if (octant == 2 || octant == 6)              {                  return (-1 / ((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2)))))))));              }              else // octant == 3 || octant == 7              {                  return -((x * (c1 + (x2 * (c2 + (x2 * (c3 + (x2 * (c4 + (x2 * c5))))))))) / (c6 + (x2 * (c7 + (x2 * (c8 + (x2 * (c9 + x2))))))));              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,atanx,The following statement contains a magic number: if ((x > -.01) && (x < .01))              {                  value = (atan_p0 / atan_q0);              }              else              {                  argsq = x * x;                  value = ((((atan_p4 * argsq + atan_p3) * argsq + atan_p2) * argsq + atan_p1) * argsq + atan_p0) / (((((argsq + atan_q4) * argsq + atan_q3) * argsq + atan_q2) * argsq + atan_q1) * argsq + atan_q0);              }
Magic Number,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,atanx,The following statement contains a magic number: if ((x > -.01) && (x < .01))              {                  value = (atan_p0 / atan_q0);              }              else              {                  argsq = x * x;                  value = ((((atan_p4 * argsq + atan_p3) * argsq + atan_p2) * argsq + atan_p1) * argsq + atan_p0) / (((((argsq + atan_q4) * argsq + atan_q3) * argsq + atan_q2) * argsq + atan_q1) * argsq + atan_q0);              }
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: uint m_w = (uint)(seed >> 16);
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: uint m_z = (uint)(seed % 4294967296);
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: m_z = 36969 * (m_z & 65535) + (m_z >> 16);
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: m_z = 36969 * (m_z & 65535) + (m_z >> 16);
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: m_z = 36969 * (m_z & 65535) + (m_z >> 16);
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: m_w = 18000 * (m_w & 65535) + (m_w >> 16);
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: m_w = 18000 * (m_w & 65535) + (m_w >> 16);
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: m_w = 18000 * (m_w & 65535) + (m_w >> 16);
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: uint u = (m_z << 16) + m_w;
Magic Number,Cosmos.System_Plugs.System,RandomImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\RandomImpl.cs,GetUniform,The following statement contains a magic number: double uniform = (u + 1.0) * 2.328306435454494e-10;
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,IsPathRooted,The following statement contains a magic number: if (aPath != null)              {                  CheckInvalidPathChars(aPath);                  int xLength = aPath.Length;                  if ((xLength >= 1 && (aPath[0] == Path.DirectorySeparatorChar || aPath[0] == Path.AltDirectorySeparatorChar)) || (xLength >= 2 && aPath[1] == Path.VolumeSeparatorChar))                  {                      return true;                  }              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,IsRelative,The following statement contains a magic number: if (aPath.Length < 3)              {                  return true;              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,IsRelative,The following statement contains a magic number: if (aPath[2] != Path.DirectorySeparatorChar)              {                  return true;              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetRootLength,The following statement contains a magic number: if ((xLength >= 1) && IsDirectorySeparator(aPath[0]))              {                  i = 1;                  if ((xLength >= 2) && IsDirectorySeparator(aPath[1]))                  {                      i = 2;                      int xNum = 2;                      while (i < xLength)                      {                          if (((aPath[i] == Path.DirectorySeparatorChar) || (aPath[i] == Path.AltDirectorySeparatorChar)) && (--xNum <= 0))                          {                              break;                          }                          i++;                      }                  }              }              else if ((xLength >= 2) && (aPath[1] == VFSManager.GetVolumeSeparatorChar()))              {                  i = 2;                  if ((xLength >= 3) && IsDirectorySeparator(aPath[2]))                  {                      i++;                  }              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetRootLength,The following statement contains a magic number: if ((xLength >= 1) && IsDirectorySeparator(aPath[0]))              {                  i = 1;                  if ((xLength >= 2) && IsDirectorySeparator(aPath[1]))                  {                      i = 2;                      int xNum = 2;                      while (i < xLength)                      {                          if (((aPath[i] == Path.DirectorySeparatorChar) || (aPath[i] == Path.AltDirectorySeparatorChar)) && (--xNum <= 0))                          {                              break;                          }                          i++;                      }                  }              }              else if ((xLength >= 2) && (aPath[1] == VFSManager.GetVolumeSeparatorChar()))              {                  i = 2;                  if ((xLength >= 3) && IsDirectorySeparator(aPath[2]))                  {                      i++;                  }              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetRootLength,The following statement contains a magic number: if ((xLength >= 1) && IsDirectorySeparator(aPath[0]))              {                  i = 1;                  if ((xLength >= 2) && IsDirectorySeparator(aPath[1]))                  {                      i = 2;                      int xNum = 2;                      while (i < xLength)                      {                          if (((aPath[i] == Path.DirectorySeparatorChar) || (aPath[i] == Path.AltDirectorySeparatorChar)) && (--xNum <= 0))                          {                              break;                          }                          i++;                      }                  }              }              else if ((xLength >= 2) && (aPath[1] == VFSManager.GetVolumeSeparatorChar()))              {                  i = 2;                  if ((xLength >= 3) && IsDirectorySeparator(aPath[2]))                  {                      i++;                  }              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetRootLength,The following statement contains a magic number: if ((xLength >= 1) && IsDirectorySeparator(aPath[0]))              {                  i = 1;                  if ((xLength >= 2) && IsDirectorySeparator(aPath[1]))                  {                      i = 2;                      int xNum = 2;                      while (i < xLength)                      {                          if (((aPath[i] == Path.DirectorySeparatorChar) || (aPath[i] == Path.AltDirectorySeparatorChar)) && (--xNum <= 0))                          {                              break;                          }                          i++;                      }                  }              }              else if ((xLength >= 2) && (aPath[1] == VFSManager.GetVolumeSeparatorChar()))              {                  i = 2;                  if ((xLength >= 3) && IsDirectorySeparator(aPath[2]))                  {                      i++;                  }              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetRootLength,The following statement contains a magic number: if ((xLength >= 1) && IsDirectorySeparator(aPath[0]))              {                  i = 1;                  if ((xLength >= 2) && IsDirectorySeparator(aPath[1]))                  {                      i = 2;                      int xNum = 2;                      while (i < xLength)                      {                          if (((aPath[i] == Path.DirectorySeparatorChar) || (aPath[i] == Path.AltDirectorySeparatorChar)) && (--xNum <= 0))                          {                              break;                          }                          i++;                      }                  }              }              else if ((xLength >= 2) && (aPath[1] == VFSManager.GetVolumeSeparatorChar()))              {                  i = 2;                  if ((xLength >= 3) && IsDirectorySeparator(aPath[2]))                  {                      i++;                  }              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetRootLength,The following statement contains a magic number: if ((xLength >= 1) && IsDirectorySeparator(aPath[0]))              {                  i = 1;                  if ((xLength >= 2) && IsDirectorySeparator(aPath[1]))                  {                      i = 2;                      int xNum = 2;                      while (i < xLength)                      {                          if (((aPath[i] == Path.DirectorySeparatorChar) || (aPath[i] == Path.AltDirectorySeparatorChar)) && (--xNum <= 0))                          {                              break;                          }                          i++;                      }                  }              }              else if ((xLength >= 2) && (aPath[1] == VFSManager.GetVolumeSeparatorChar()))              {                  i = 2;                  if ((xLength >= 3) && IsDirectorySeparator(aPath[2]))                  {                      i++;                  }              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,GetRootLength,The following statement contains a magic number: if ((xLength >= 1) && IsDirectorySeparator(aPath[0]))              {                  i = 1;                  if ((xLength >= 2) && IsDirectorySeparator(aPath[1]))                  {                      i = 2;                      int xNum = 2;                      while (i < xLength)                      {                          if (((aPath[i] == Path.DirectorySeparatorChar) || (aPath[i] == Path.AltDirectorySeparatorChar)) && (--xNum <= 0))                          {                              break;                          }                          i++;                      }                  }              }              else if ((xLength >= 2) && (aPath[1] == VFSManager.GetVolumeSeparatorChar()))              {                  i = 2;                  if ((xLength >= 3) && IsDirectorySeparator(aPath[2]))                  {                      i++;                  }              }
Magic Number,Cosmos.System_Plugs.System.IO,PathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\IO\PathImpl.cs,NormalizePath,The following statement contains a magic number: if (IsDirectorySeparator(result[result.Length - 1]))              {                  Global.mFileSystemDebugger.SendInternal("Found directory seprator");                  if (result.Length > 3)                  {                      result = result.Remove(result.Length - 1);                  }              }
Missing Default,Cosmos.System_Plugs.System,MathImpl,C:\repos\CosmosOS_Cosmos\source\Cosmos.System2_Plugs\System\MathImpl.cs,Tan,The following switch statement is missing a default case: switch (octant)              {                  case 0:                      x = x * (4 / PI);                      break;                  case 1:                      x = ((PI / 2) - x) * (4 / PI);                      break;                  case 2:                      x = (x - (PI / 2)) * (4 / PI);                      break;                  case 3:                      x = (PI - x) * (4 / PI);                      break;                  case 4:                      x = (x - PI) * (4 / PI);                      break;                  case 5:                      x = ((3.5 * PI) - x) * (4 / PI);                      break;                  case 6:                      x = (x - (3.5 * PI)) * (4 / PI);                      break;                  case 7:                      x = ((2 * PI) - x) * (4 / PI);                      break;              }
