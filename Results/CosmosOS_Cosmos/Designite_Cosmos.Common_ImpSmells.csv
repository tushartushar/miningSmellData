Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,Cyclomatic complexity of the method is 11
Complex Method,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,Cyclomatic complexity of the method is 11
Long Parameter List,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,Compare,The method has 6 parameters. Parameters: aString1' aIndex1' aString2' aIndex2' aLength1' aLength2
Magic Number,Cosmos.Common,BinaryHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\BinaryHelper.cs,GetByteFrom32bit,The following statement contains a magic number: if (offset > 24)                  throw new ArgumentException("Offset can not move outside the 32 bit range");
Magic Number,Cosmos.Common,ByteToString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\ByteToString.cs,StrToByteArray,The following statement contains a magic number: byte[] byteArr = new byte[str.Length / 3];
Magic Number,Cosmos.Common,ByteToString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\ByteToString.cs,StrToByteArray,The following statement contains a magic number: do              {                  val = byte.Parse(str.Substring(i' 3));                  byteArr[j++] = val;                  i += 3;              }              while (i < str.Length);
Magic Number,Cosmos.Common,ByteToString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\ByteToString.cs,StrToByteArray,The following statement contains a magic number: do              {                  val = byte.Parse(str.Substring(i' 3));                  byteArr[j++] = val;                  i += 3;              }              while (i < str.Length);
Magic Number,Cosmos.Common,ByteToString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\ByteToString.cs,ByteArrToString,The following statement contains a magic number: for (int i = 0; i <= byteArr.GetUpperBound(0); i++)              {                  val = byteArr[i];                  if (val < (byte)10)                      tempStr += "00" + val.ToString();                  else if (val < (byte)100)                      tempStr += "0" + val.ToString();                  else                      tempStr += val.ToString();              }
Magic Number,Cosmos.Common,ByteToString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\ByteToString.cs,ByteArrToString,The following statement contains a magic number: for (int i = 0; i <= byteArr.GetUpperBound(0); i++)              {                  val = byteArr[i];                  if (val < (byte)10)                      tempStr += "00" + val.ToString();                  else if (val < (byte)100)                      tempStr += "0" + val.ToString();                  else                      tempStr += val.ToString();              }
Magic Number,Cosmos.Common,NumberHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\NumberHelper.cs,WriteNumber,The following statement contains a magic number: WriteNumber(aValue' 32' aZeroFill);
Magic Number,Cosmos.Common,NumberHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\NumberHelper.cs,WriteNumber,The following statement contains a magic number: if (aZeroFill)              {                  Console.WriteLine("0x" + aValue.ToHex(aBits / 4));              }              else              {                  Console.WriteLine("0x" + aValue.ToHex(aBits / 4).TrimStart('0'));              }
Magic Number,Cosmos.Common,NumberHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\NumberHelper.cs,WriteNumber,The following statement contains a magic number: if (aZeroFill)              {                  Console.WriteLine("0x" + aValue.ToHex(aBits / 4));              }              else              {                  Console.WriteLine("0x" + aValue.ToHex(aBits / 4).TrimStart('0'));              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (aValue == 0) {                  xResult = "0";              } else {                  uint xValue = aValue;                  while (xValue > 0) {                      uint xValue2 = xValue % 10;                      xResult = string.Concat(xChars[xValue2]' xResult);                      xValue /= 10;                  }              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (aValue == 0) {                  xResult = "0";              } else {                  uint xValue = aValue;                  while (xValue > 0) {                      uint xValue2 = xValue % 10;                      xResult = string.Concat(xChars[xValue2]' xResult);                      xValue /= 10;                  }              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (aValue == 0) {                  xResult = "0";              } else {                  int xValue = aValue;                    if (aValue < 0) {                      xValue *= -1;                  }                    while (xValue > 0) {                      int xValue2 = xValue % 10;                      xResult = string.Concat(xChars[xValue2]' xResult);                      xValue /= 10;                  }              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (aValue == 0) {                  xResult = "0";              } else {                  int xValue = aValue;                    if (aValue < 0) {                      xValue *= -1;                  }                    while (xValue > 0) {                      int xValue2 = xValue % 10;                      xResult = string.Concat(xChars[xValue2]' xResult);                      xValue /= 10;                  }              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (aValue == 0) {                  xResult = "0";                  mDebugger.SendInternal("xResult =");                  mDebugger.SendInternal(xResult);              } else {                  ulong xValue = aValue;                  mDebugger.SendInternal("xValue =");                  mDebugger.SendInternal(xValue);                  while (xValue > 0) {                      ulong xValue2 = xValue % 10;                      mDebugger.SendInternal("xValue2 =");                      mDebugger.SendInternal(xValue2);                      xResult = string.Concat(xChars[xValue2]' xResult);                      mDebugger.SendInternal("xResult =");                      mDebugger.SendInternal(xResult);                      xValue /= 10;                      mDebugger.SendInternal("xValue =");                      mDebugger.SendInternal(xValue);                  }              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (aValue == 0) {                  xResult = "0";                  mDebugger.SendInternal("xResult =");                  mDebugger.SendInternal(xResult);              } else {                  ulong xValue = aValue;                  mDebugger.SendInternal("xValue =");                  mDebugger.SendInternal(xValue);                  while (xValue > 0) {                      ulong xValue2 = xValue % 10;                      mDebugger.SendInternal("xValue2 =");                      mDebugger.SendInternal(xValue2);                      xResult = string.Concat(xChars[xValue2]' xResult);                      mDebugger.SendInternal("xResult =");                      mDebugger.SendInternal(xResult);                      xValue /= 10;                      mDebugger.SendInternal("xValue =");                      mDebugger.SendInternal(xValue);                  }              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (aValue == 0) {                  xResult = "0";                  mDebugger.SendInternal("xResult =");                  mDebugger.SendInternal(xResult);              } else {                  if (aValue < 0) {                      xValue *= -1;                  }                    mDebugger.SendInternal("xValue =");                  mDebugger.SendInternal(xValue);                  while (xValue > 0) {                      long xValue2 = xValue % 10;                      mDebugger.SendInternal("xValue2 =");                      mDebugger.SendInternal(xValue2);                      xResult = string.Concat(xChars[xValue2]' xResult);                      mDebugger.SendInternal("xResult =");                      mDebugger.SendInternal(xResult);                      xValue /= 10;                      mDebugger.SendInternal("xValue =");                      mDebugger.SendInternal(xValue);                  }              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (aValue == 0) {                  xResult = "0";                  mDebugger.SendInternal("xResult =");                  mDebugger.SendInternal(xResult);              } else {                  if (aValue < 0) {                      xValue *= -1;                  }                    mDebugger.SendInternal("xValue =");                  mDebugger.SendInternal(xValue);                  while (xValue > 0) {                      long xValue2 = xValue % 10;                      mDebugger.SendInternal("xValue2 =");                      mDebugger.SendInternal(xValue2);                      xResult = string.Concat(xChars[xValue2]' xResult);                      mDebugger.SendInternal("xResult =");                      mDebugger.SendInternal(xResult);                      xValue /= 10;                      mDebugger.SendInternal("xValue =");                      mDebugger.SendInternal(xValue);                  }              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: bool isNeg = (hexVal >> 31) != 0;
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: int exp = ((hexVal >> 23) & 0xFF);
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: switch (exp) {                  /*                   * INF or NaN?                   */                  case 0xFF:                      if (mantissa == 0) {                          if (isNeg)                              return "-∞";                          else                              return "∞";                      } else                          /* It could exist -NaN but this is always printed as NaN */                          return "NaN";                    /* 0 or denormalized float? */                  case 0x00:                      if (mantissa == 0)                          return "0";                      /* Denormalized float have always exp -126 */                      else                          exp = -126;                      break;                    /* Normalized float the exponent is unbiased and the implicit leading one is placed in the mantissa */                  default:                      exp -= 127;                      mantissa |= 0x800000;                      break;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: switch (exp) {                  /*                   * INF or NaN?                   */                  case 0xFF:                      if (mantissa == 0) {                          if (isNeg)                              return "-∞";                          else                              return "∞";                      } else                          /* It could exist -NaN but this is always printed as NaN */                          return "NaN";                    /* 0 or denormalized float? */                  case 0x00:                      if (mantissa == 0)                          return "0";                      /* Denormalized float have always exp -126 */                      else                          exp = -126;                      break;                    /* Normalized float the exponent is unbiased and the implicit leading one is placed in the mantissa */                  default:                      exp -= 127;                      mantissa |= 0x800000;                      break;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (exp >= 23) {                  intPart = mantissa << (exp - 23);              } else if (exp >= 0) {                  intPart = mantissa >> (23 - exp);                  fracPart = (mantissa << (exp + 1)) & 0xFFFFFF;              } else {                  fracPart = (mantissa & 0xFFFFFF) >> (-(exp + 1));              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (exp >= 23) {                  intPart = mantissa << (exp - 23);              } else if (exp >= 0) {                  intPart = mantissa >> (23 - exp);                  fracPart = (mantissa << (exp + 1)) & 0xFFFFFF;              } else {                  fracPart = (mantissa & 0xFFFFFF) >> (-(exp + 1));              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (exp >= 23) {                  intPart = mantissa << (exp - 23);              } else if (exp >= 0) {                  intPart = mantissa >> (23 - exp);                  fracPart = (mantissa << (exp + 1)) & 0xFFFFFF;              } else {                  fracPart = (mantissa & 0xFFFFFF) >> (-(exp + 1));              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (usedDigits >= 7) {                  usedDigits = 6;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (usedDigits >= 7) {                  usedDigits = 6;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: for (int m = usedDigits; m < 7; m++) {                  fracPart = (fracPart << 3) + (fracPart << 1);                    char p = (char)((fracPart >> 24) + '0');                  result += p;                    fracPart &= 0xFFFFFF;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: for (int m = usedDigits; m < 7; m++) {                  fracPart = (fracPart << 3) + (fracPart << 1);                    char p = (char)((fracPart >> 24) + '0');                  result += p;                    fracPart &= 0xFFFFFF;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: for (int m = usedDigits; m < 7; m++) {                  fracPart = (fracPart << 3) + (fracPart << 1);                    char p = (char)((fracPart >> 24) + '0');                  result += p;                    fracPart &= 0xFFFFFF;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: fracPart = (fracPart << 3) + (fracPart << 1);
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: char remain = (char)((fracPart >> 24) + '0');
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: bool isNeg = (hexVal >> 63) != 0;
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: int exp = (int)((hexVal >> 52) & 0x07FF);
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: switch (exp) {                  case 0x07ff:                      if (mantissa == 0) {                          if (isNeg)                              return "-∞";                          else                              return "∞";                      } else                          /* It could exist -NaN but this is always printed as NaN */                          return "NaN";                    /* 0 or denormalized double? */                  case 0x0000:                      if (mantissa == 0)                          return "0";                      /* Denormalized float have always exp -1022 */                      else                          exp = -1022;                      break;                    /* Normalized double the exponent is unbiased and the implicit leading one is placed in the mantissa */                  default:                      exp -= 1023;                      mantissa |= 0x10000000000000;                      break;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: switch (exp) {                  case 0x07ff:                      if (mantissa == 0) {                          if (isNeg)                              return "-∞";                          else                              return "∞";                      } else                          /* It could exist -NaN but this is always printed as NaN */                          return "NaN";                    /* 0 or denormalized double? */                  case 0x0000:                      if (mantissa == 0)                          return "0";                      /* Denormalized float have always exp -1022 */                      else                          exp = -1022;                      break;                    /* Normalized double the exponent is unbiased and the implicit leading one is placed in the mantissa */                  default:                      exp -= 1023;                      mantissa |= 0x10000000000000;                      break;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (exp >= 52) {                  intPart = mantissa << (exp - 52);              } else if (exp >= 0) {                  intPart = mantissa >> (52 - exp);                  fracPart = (mantissa << (exp + 1)) & 0x1FFFFFFFFFFFFF;              } else {                  fracPart = (mantissa & 0x1FFFFFFFFFFFFF) >> (-(exp + 1));              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (exp >= 52) {                  intPart = mantissa << (exp - 52);              } else if (exp >= 0) {                  intPart = mantissa >> (52 - exp);                  fracPart = (mantissa << (exp + 1)) & 0x1FFFFFFFFFFFFF;              } else {                  fracPart = (mantissa & 0x1FFFFFFFFFFFFF) >> (-(exp + 1));              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (exp >= 52) {                  intPart = mantissa << (exp - 52);              } else if (exp >= 0) {                  intPart = mantissa >> (52 - exp);                  fracPart = (mantissa << (exp + 1)) & 0x1FFFFFFFFFFFFF;              } else {                  fracPart = (mantissa & 0x1FFFFFFFFFFFFF) >> (-(exp + 1));              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (usedDigits >= 15) {                  usedDigits = 14;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: if (usedDigits >= 15) {                  usedDigits = 14;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: for (int m = usedDigits; m < 15; m++) {                  fracPart = (fracPart << 3) + (fracPart << 1);                  char p = (char)(((fracPart >> 53) & 0xFF) + '0');                  result += p;                    fracPart &= 0x1FFFFFFFFFFFFF;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: for (int m = usedDigits; m < 15; m++) {                  fracPart = (fracPart << 3) + (fracPart << 1);                  char p = (char)(((fracPart >> 53) & 0xFF) + '0');                  result += p;                    fracPart &= 0x1FFFFFFFFFFFFF;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: for (int m = usedDigits; m < 15; m++) {                  fracPart = (fracPart << 3) + (fracPart << 1);                  char p = (char)(((fracPart >> 53) & 0xFF) + '0');                  result += p;                    fracPart &= 0x1FFFFFFFFFFFFF;              }
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: fracPart = (fracPart << 3) + (fracPart << 1);
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetNumberString,The following statement contains a magic number: char remain = (char)((fracPart >> 53) + '0');
Magic Number,Cosmos.Common,StringHelper,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\StringHelper.cs,GetStringToNumber,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(aString)) {                  char[] xCharArray = aString.ToCharArray();                  for (int i = 0; i < xCharArray.Length; i++) {                      if (char.IsDigit(xCharArray[i])) {                          int xValue = xCharArray[i] - '0';                          int xMax = xCharArray.Length - 1;                          for (int j = 0; j < xMax - i; i++) {                              xValue *= 10;                          }                            xNumber += xValue;                      } else if (xCharArray[i] == '-') {                          xIsNegative = true;                      } else if (xCharArray[i] == '.') {                          break;                      } else {                          throw new FormatException("The string parameter is not a number and is invalid.");                      }                  }              }
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,ToUInt16,The following statement contains a magic number: return (ushort)(n[aPos + 1] << 8 | n[aPos]);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,ToUInt32,The following statement contains a magic number: return (uint)(n[aPos + 3] << 24 | n[aPos + 2] << 16 | n[aPos + 1] << 8 | n[aPos]);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,ToUInt32,The following statement contains a magic number: return (uint)(n[aPos + 3] << 24 | n[aPos + 2] << 16 | n[aPos + 1] << 8 | n[aPos]);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,ToUInt32,The following statement contains a magic number: return (uint)(n[aPos + 3] << 24 | n[aPos + 2] << 16 | n[aPos + 1] << 8 | n[aPos]);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,ToUInt32,The following statement contains a magic number: return (uint)(n[aPos + 3] << 24 | n[aPos + 2] << 16 | n[aPos + 1] << 8 | n[aPos]);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,ToUInt32,The following statement contains a magic number: return (uint)(n[aPos + 3] << 24 | n[aPos + 2] << 16 | n[aPos + 1] << 8 | n[aPos]);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt16,The following statement contains a magic number: n[aPos + 1] = (byte)(value >> 8);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt32,The following statement contains a magic number: n[aPos + 1] = (byte)(value >> 8);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt32,The following statement contains a magic number: n[aPos + 2] = (byte)(value >> 16);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt32,The following statement contains a magic number: n[aPos + 2] = (byte)(value >> 16);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt32,The following statement contains a magic number: n[aPos + 3] = (byte)(value >> 24);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt32,The following statement contains a magic number: n[aPos + 3] = (byte)(value >> 24);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 1] = (byte)(value >> 8);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 2] = (byte)(value >> 16);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 2] = (byte)(value >> 16);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 3] = (byte)(value >> 24);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 3] = (byte)(value >> 24);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 4] = (byte)(value >> 32);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 4] = (byte)(value >> 32);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 5] = (byte)(value >> 40);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 5] = (byte)(value >> 40);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 6] = (byte)(value >> 48);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 6] = (byte)(value >> 48);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 7] = (byte)(value >> 56);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,SetUInt64,The following statement contains a magic number: n[aPos + 7] = (byte)(value >> 56);
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,GetUtf16String,The following statement contains a magic number: for (int i = 0; i < aCharCount; i++)        {          uint xPos = (uint)(aStart + i * 2);          var xChar = (ushort)(n[xPos + 1] << 8 | n[xPos]);          if (xChar == 0)          {            return new string(xChars' 0' i);          }          xChars[i] = (char)xChar;        }
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,GetUtf16String,The following statement contains a magic number: for (int i = 0; i < aCharCount; i++)        {          uint xPos = (uint)(aStart + i * 2);          var xChar = (ushort)(n[xPos + 1] << 8 | n[xPos]);          if (xChar == 0)          {            return new string(xChars' 0' i);          }          xChars[i] = (char)xChar;        }
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,GetUtf16Bytes,The following statement contains a magic number: var xBytes = new byte[2 * aCharCount];
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,GetUtf16Bytes,The following statement contains a magic number: for (int i = 0; i < aCharCount; i++)        {          xBytes[2 * i] = (byte)n[(int)((aStart) + i)];          xBytes[2 * i + 1] = (byte)(n[(int)(aStart + i)] >> 8);        }
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,GetUtf16Bytes,The following statement contains a magic number: for (int i = 0; i < aCharCount; i++)        {          xBytes[2 * i] = (byte)n[(int)((aStart) + i)];          xBytes[2 * i + 1] = (byte)(n[(int)(aStart + i)] >> 8);        }
Magic Number,Cosmos.Common.Extensions,ByteConverter,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ByteConverter.cs,GetUtf16Bytes,The following statement contains a magic number: for (int i = 0; i < aCharCount; i++)        {          xBytes[2 * i] = (byte)n[(int)((aStart) + i)];          xBytes[2 * i + 1] = (byte)(n[(int)(aStart + i)] >> 8);        }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,ToHex,The following statement contains a magic number: return ConvertToHex((uint)n' 2);
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,ToHex,The following statement contains a magic number: return ConvertToHex((uint)n' 4);
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,ToHex,The following statement contains a magic number: return ConvertToHex((uint)n' 4);
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,ToHex,The following statement contains a magic number: return ConvertToHex(aValue' 8);
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,ToHex,The following statement contains a magic number: return ConvertToHex(aValue).PadLeft(16' '0');
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,ConvertToHex,The following statement contains a magic number: if (num == 0)              {                  xHex = "0";              }              else              {                  while (num != 0)                  {                      xHex = DigitToHexChar((byte)(num & 0xf)) + xHex;                      num = num >> 4;                  }              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,ConvertToHex,The following statement contains a magic number: while (num != 0)              {                  //Note; char is converted to string because Cosmos crashes when adding char and string. Frode' 7.june.                  xHex = DigitToHexChar((byte)(num & 0xf)) + xHex;                  num = num >> 4;              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Magic Number,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following statement contains a magic number: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
Missing Default,Cosmos.Common.Extensions,ToHexString,C:\repos\CosmosOS_Cosmos\source\Cosmos.Common\Extensions\ToHexString.cs,DigitToHexChar,The following switch statement is missing a default case: switch (d)              {                  case 0:                      return '0';                  case 1:                      return '1';                  case 2:                      return '2';                  case 3:                      return '3';                  case 4:                      return '4';                  case 5:                      return '5';                  case 6:                      return '6';                  case 7:                      return '7';                  case 8:                      return '8';                  case 9:                      return '9';                  case 10:                      return 'A';                  case 11:                      return 'B';                  case 12:                      return 'C';                  case 13:                      return 'D';                  case 14:                      return 'E';                  case 15:                      return 'F';              }
