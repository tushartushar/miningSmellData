Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Cosmos.Build.MSBuild,BaseToolTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\BaseToolTask.cs,ExecuteTool,The method has 6 parameters. Parameters: workingDir' filename' arguments' name' errorReceived' outputReceived
Long Parameter List,Cosmos.Build.MSBuild,ExtractMapFromElfFile,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\ExtractMapFromElfFile.cs,RunObjDump,The method has 5 parameters. Parameters: cosmosBuildDir' workingDir' inputFile' errorReceived' outputReceived
Long Statement,Cosmos.Build.MSBuild,BaseToolTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\BaseToolTask.cs,Logs,The length of the statement  "                    //Log.LogWarning(category' string.Empty' string.Empty' filename' lineNumber' columnNumber' lineNumber' columnNumber' message); " is 126.
Long Statement,Cosmos.Build.MSBuild,BaseToolTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\BaseToolTask.cs,Logs,The length of the statement  "                    Log.LogWarning(logInfo.subcategory' logInfo.code' logInfo.helpKeyword' logInfo.file' logInfo.lineNumber' logInfo.columnNumber' logInfo.endLineNumber' logInfo.endColumnNumber' logInfo.message' logInfo.messageArgs); " is 213.
Long Statement,Cosmos.Build.MSBuild,BaseToolTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\BaseToolTask.cs,Logs,The length of the statement  "                    Log.LogMessage(logInfo.subcategory' logInfo.code' logInfo.helpKeyword' logInfo.file' logInfo.lineNumber' logInfo.columnNumber' logInfo.endLineNumber' logInfo.endColumnNumber' logInfo.message' logInfo.messageArgs); " is 213.
Long Statement,Cosmos.Build.MSBuild,BaseToolTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\BaseToolTask.cs,Logs,The length of the statement  "                    Log.LogMessage(logInfo.subcategory' logInfo.code' logInfo.helpKeyword' logInfo.file' logInfo.lineNumber' logInfo.columnNumber' logInfo.endLineNumber' logInfo.endColumnNumber' logInfo.importance' logInfo.message' logInfo.messageArgs); " is 233.
Long Statement,Cosmos.Build.MSBuild,BaseToolTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\BaseToolTask.cs,Logs,The length of the statement  "                        Log.LogError(logInfo.subcategory' logInfo.code' logInfo.helpKeyword' logInfo.file' logInfo.lineNumber' logInfo.columnNumber' logInfo.endLineNumber' logInfo.endColumnNumber' logInfo.message ?? ""' logInfo.messageArgs); " is 217.
Long Statement,Cosmos.Build.MSBuild,ExtractMapFromElfFile,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\ExtractMapFromElfFile.cs,RunObjDump,The length of the statement  "            File.WriteAllText(xTempBatFile' "@ECHO OFF\r\n\"" + Path.Combine(cosmosBuildDir' @"tools\cygwin\objdump.exe") + "\" --wide --syms \"" + inputFile + "\" > \"" + Path.GetFileName(xMapFile) + "\""); " is 195.
Long Statement,Cosmos.Build.MSBuild,IL2CPU,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\IL2CPU.cs,Execute,The length of the statement  "                Arguments = AssemblySearchDirs.Split(';').Aggregate(Arguments' (current' Dir) => current + "\"AssemblySearchDirs:" + Dir + "\" "); " is 130.
Long Statement,Cosmos.Build.MSBuild,IL2CPU,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\IL2CPU.cs,Execute,The length of the statement  "                Log.LogMessage(MessageImportance.High' $"IL2CPU invoked with DebugMode='{DebugMode}'' DebugEnabled='{DebugEnabled}''StackCorruptionDetectionLevel='{StackCorruptionDetectionLevel ?? "{NULL}"}'' TraceAssemblies='{TraceAssemblies ?? "{NULL}"}'' IgnoreDebugStub='{IgnoreDebugStubAttribute}'"); " is 289.
Long Statement,Cosmos.Build.MSBuild,NAsm,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\NAsm.cs,ExtendLineError,The length of the statement  "          log.message = (split.Length == 4 ? split[3].TrimStart(' ') : string.Empty) + " Code: " + GetLine(InputFile' log.lineNumber).Trim(); " is 131.
Long Statement,Cosmos.Build.MSBuild,NAsmTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\NAsmTask.cs,Execute,The length of the statement  "                                                   String.Format("-g -f {0} -o \"{1}\" -D{3}_COMPILATION -O0 \"{2}\""' xFormat' Path.Combine(Directory.GetCurrentDirectory()' OutputFile)' Path.Combine(Directory.GetCurrentDirectory()' InputFile)' xFormat.ToUpper())' " is 213.
Long Statement,Cosmos.Build.MSBuild,TheRingMaster,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\TheRingMaster.cs,Execute,The length of the statement  "                return ExecuteTool(WorkingDir' Path.Combine(CosmosPaths.Build' "TheRingMaster"' "TheRingMaster.exe")' KernelAssemblyPath' "The Ring Master"); " is 141.
Empty Catch Block,Cosmos.Build.MSBuild,NAsm,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\NAsm.cs,ExtendLineError,The method has an empty catch block.
Magic Number,Cosmos.Build.MSBuild,BaseToolTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\BaseToolTask.cs,ExecuteTool,The following statement contains a magic number: using (var xProcess = new Process())              {                  xProcess.ErrorDataReceived += delegate (object sender' DataReceivedEventArgs e)                  {                      if (e.Data != null)                      {                          errorReceived(e.Data);                      }                  };                  xProcess.OutputDataReceived += delegate (object sender' DataReceivedEventArgs e)                  {                      if (e.Data != null)                      {                          outputReceived(e.Data);                      }                  };                  xProcess.StartInfo = xProcessStartInfo;                  xProcess.Start();                  xProcess.BeginErrorReadLine();                  xProcess.BeginOutputReadLine();                  xProcess.WaitForExit(15 * 60 * 1000); // wait 15 minutes                  if (!xProcess.HasExited)                  {                      xProcess.Kill();                      errorReceived(String.Format("{0} timed out."' name));                      return false;                  }                  else                  {                      if (xProcess.ExitCode != 0)                      {                          errorReceived(String.Format("Error occurred while invoking {0}."' name));                          return false;                      }                  }                  return true;              }
Magic Number,Cosmos.Build.MSBuild,BaseToolTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\BaseToolTask.cs,ExecuteTool,The following statement contains a magic number: using (var xProcess = new Process())              {                  xProcess.ErrorDataReceived += delegate (object sender' DataReceivedEventArgs e)                  {                      if (e.Data != null)                      {                          errorReceived(e.Data);                      }                  };                  xProcess.OutputDataReceived += delegate (object sender' DataReceivedEventArgs e)                  {                      if (e.Data != null)                      {                          outputReceived(e.Data);                      }                  };                  xProcess.StartInfo = xProcessStartInfo;                  xProcess.Start();                  xProcess.BeginErrorReadLine();                  xProcess.BeginOutputReadLine();                  xProcess.WaitForExit(15 * 60 * 1000); // wait 15 minutes                  if (!xProcess.HasExited)                  {                      xProcess.Kill();                      errorReceived(String.Format("{0} timed out."' name));                      return false;                  }                  else                  {                      if (xProcess.ExitCode != 0)                      {                          errorReceived(String.Format("Error occurred while invoking {0}."' name));                          return false;                      }                  }                  return true;              }
Magic Number,Cosmos.Build.MSBuild,BaseToolTask,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\BaseToolTask.cs,ExecuteTool,The following statement contains a magic number: using (var xProcess = new Process())              {                  xProcess.ErrorDataReceived += delegate (object sender' DataReceivedEventArgs e)                  {                      if (e.Data != null)                      {                          errorReceived(e.Data);                      }                  };                  xProcess.OutputDataReceived += delegate (object sender' DataReceivedEventArgs e)                  {                      if (e.Data != null)                      {                          outputReceived(e.Data);                      }                  };                  xProcess.StartInfo = xProcessStartInfo;                  xProcess.Start();                  xProcess.BeginErrorReadLine();                  xProcess.BeginOutputReadLine();                  xProcess.WaitForExit(15 * 60 * 1000); // wait 15 minutes                  if (!xProcess.HasExited)                  {                      xProcess.Kill();                      errorReceived(String.Format("{0} timed out."' name));                      return false;                  }                  else                  {                      if (xProcess.ExitCode != 0)                      {                          errorReceived(String.Format("Error occurred while invoking {0}."' name));                          return false;                      }                  }                  return true;              }
Magic Number,Cosmos.Build.MSBuild,NAsm,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\NAsm.cs,ExtendLineError,The following statement contains a magic number: try {          if (errorMessage.StartsWith(InputFile)) {            int IndexFile = errorMessage.LastIndexOf('\\'' InputFile.Length);            log.file = errorMessage.Substring(IndexFile + 1' InputFile.Length - IndexFile - 1);            string[] split = errorMessage.Substring(InputFile.Length).Split(':');            if (split.Length > 3 && split[2].Contains("warning"))              log.logType = WriteType.Warning;            else              log.logType = WriteType.Error;            log.lineNumber = int.Parse(split[1]);            log.message = (split.Length == 4 ? split[3].TrimStart(' ') : string.Empty) + " Code: " + GetLine(InputFile' log.lineNumber).Trim();          }        } catch (Exception) {        }
Magic Number,Cosmos.Build.MSBuild,NAsm,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\NAsm.cs,ExtendLineError,The following statement contains a magic number: try {          if (errorMessage.StartsWith(InputFile)) {            int IndexFile = errorMessage.LastIndexOf('\\'' InputFile.Length);            log.file = errorMessage.Substring(IndexFile + 1' InputFile.Length - IndexFile - 1);            string[] split = errorMessage.Substring(InputFile.Length).Split(':');            if (split.Length > 3 && split[2].Contains("warning"))              log.logType = WriteType.Warning;            else              log.logType = WriteType.Error;            log.lineNumber = int.Parse(split[1]);            log.message = (split.Length == 4 ? split[3].TrimStart(' ') : string.Empty) + " Code: " + GetLine(InputFile' log.lineNumber).Trim();          }        } catch (Exception) {        }
Magic Number,Cosmos.Build.MSBuild,NAsm,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\NAsm.cs,ExtendLineError,The following statement contains a magic number: try {          if (errorMessage.StartsWith(InputFile)) {            int IndexFile = errorMessage.LastIndexOf('\\'' InputFile.Length);            log.file = errorMessage.Substring(IndexFile + 1' InputFile.Length - IndexFile - 1);            string[] split = errorMessage.Substring(InputFile.Length).Split(':');            if (split.Length > 3 && split[2].Contains("warning"))              log.logType = WriteType.Warning;            else              log.logType = WriteType.Error;            log.lineNumber = int.Parse(split[1]);            log.message = (split.Length == 4 ? split[3].TrimStart(' ') : string.Empty) + " Code: " + GetLine(InputFile' log.lineNumber).Trim();          }        } catch (Exception) {        }
Magic Number,Cosmos.Build.MSBuild,NAsm,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\NAsm.cs,ExtendLineError,The following statement contains a magic number: try {          if (errorMessage.StartsWith(InputFile)) {            int IndexFile = errorMessage.LastIndexOf('\\'' InputFile.Length);            log.file = errorMessage.Substring(IndexFile + 1' InputFile.Length - IndexFile - 1);            string[] split = errorMessage.Substring(InputFile.Length).Split(':');            if (split.Length > 3 && split[2].Contains("warning"))              log.logType = WriteType.Warning;            else              log.logType = WriteType.Error;            log.lineNumber = int.Parse(split[1]);            log.message = (split.Length == 4 ? split[3].TrimStart(' ') : string.Empty) + " Code: " + GetLine(InputFile' log.lineNumber).Trim();          }        } catch (Exception) {        }
Magic Number,Cosmos.Build.MSBuild,ReadNAsmMapToDebugInfo,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\ReadNAsmMapToDebugInfo.cs,ParseMapFile,The following statement contains a magic number: for (xIndex = 0; xIndex < xSourceStrings.Length; xIndex++)              {                  if (xSourceStrings[xIndex].StartsWith("Real "))                  {                      // further check it:                      //Virtual   Name"))                      if (!xSourceStrings[xIndex].Substring(4).TrimStart().StartsWith("Virtual ")                          || !xSourceStrings[xIndex].EndsWith(" Name"))                      {                          continue;                      }                      xIndex++;                      break;                  }              }
Magic Number,Cosmos.Build.MSBuild,ReadNAsmMapToDebugInfo,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\ReadNAsmMapToDebugInfo.cs,ParseMapFile,The following statement contains a magic number: for (; xIndex < xSourceStrings.Length; xIndex++)              {                  string xLine = xSourceStrings[xIndex];                  var xLineParts = xLine.Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                    if (xLineParts.Length == 3)                  {                      uint xAddress = UInt32.Parse(xLineParts[0]' NumberStyles.HexNumber);                        long xId;                      if (xLineParts[2].StartsWith("GUID_"))                      {                          xId = long.Parse(xLineParts[2].Substring(5));                      }                      else                      {                          xId = DebugInfo.CreateId();                      }                      xSource.Add(new Label()                      {                          ID = xId'                          Name = xLineParts[2]'                          Address = xAddress                      });                  }              }
Magic Number,Cosmos.Build.MSBuild,ReadNAsmMapToDebugInfo,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\ReadNAsmMapToDebugInfo.cs,ParseMapFile,The following statement contains a magic number: for (; xIndex < xSourceStrings.Length; xIndex++)              {                  string xLine = xSourceStrings[xIndex];                  var xLineParts = xLine.Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                    if (xLineParts.Length == 3)                  {                      uint xAddress = UInt32.Parse(xLineParts[0]' NumberStyles.HexNumber);                        long xId;                      if (xLineParts[2].StartsWith("GUID_"))                      {                          xId = long.Parse(xLineParts[2].Substring(5));                      }                      else                      {                          xId = DebugInfo.CreateId();                      }                      xSource.Add(new Label()                      {                          ID = xId'                          Name = xLineParts[2]'                          Address = xAddress                      });                  }              }
Magic Number,Cosmos.Build.MSBuild,ReadNAsmMapToDebugInfo,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\ReadNAsmMapToDebugInfo.cs,ParseMapFile,The following statement contains a magic number: for (; xIndex < xSourceStrings.Length; xIndex++)              {                  string xLine = xSourceStrings[xIndex];                  var xLineParts = xLine.Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                    if (xLineParts.Length == 3)                  {                      uint xAddress = UInt32.Parse(xLineParts[0]' NumberStyles.HexNumber);                        long xId;                      if (xLineParts[2].StartsWith("GUID_"))                      {                          xId = long.Parse(xLineParts[2].Substring(5));                      }                      else                      {                          xId = DebugInfo.CreateId();                      }                      xSource.Add(new Label()                      {                          ID = xId'                          Name = xLineParts[2]'                          Address = xAddress                      });                  }              }
Magic Number,Cosmos.Build.MSBuild,ReadNAsmMapToDebugInfo,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\ReadNAsmMapToDebugInfo.cs,ParseMapFile,The following statement contains a magic number: for (; xIndex < xSourceStrings.Length; xIndex++)              {                  string xLine = xSourceStrings[xIndex];                  var xLineParts = xLine.Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                    if (xLineParts.Length == 3)                  {                      uint xAddress = UInt32.Parse(xLineParts[0]' NumberStyles.HexNumber);                        long xId;                      if (xLineParts[2].StartsWith("GUID_"))                      {                          xId = long.Parse(xLineParts[2].Substring(5));                      }                      else                      {                          xId = DebugInfo.CreateId();                      }                      xSource.Add(new Label()                      {                          ID = xId'                          Name = xLineParts[2]'                          Address = xAddress                      });                  }              }
Magic Number,Cosmos.Build.MSBuild,ReadNAsmMapToDebugInfo,C:\repos\CosmosOS_Cosmos\source\Cosmos.Build.MSBuild\ReadNAsmMapToDebugInfo.cs,ParseMapFile,The following statement contains a magic number: for (; xIndex < xSourceStrings.Length; xIndex++)              {                  string xLine = xSourceStrings[xIndex];                  var xLineParts = xLine.Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                    if (xLineParts.Length == 3)                  {                      uint xAddress = UInt32.Parse(xLineParts[0]' NumberStyles.HexNumber);                        long xId;                      if (xLineParts[2].StartsWith("GUID_"))                      {                          xId = long.Parse(xLineParts[2].Substring(5));                      }                      else                      {                          xId = DebugInfo.CreateId();                      }                      xSource.Add(new Label()                      {                          ID = xId'                          Name = xLineParts[2]'                          Address = xAddress                      });                  }              }
