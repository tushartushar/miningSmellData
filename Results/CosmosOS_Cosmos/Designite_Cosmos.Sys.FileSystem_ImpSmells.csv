Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,Cyclomatic complexity of the method is 10
Long Identifier,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ReadINodeBlock,The length of the parameter xIndirectBlockRefsPerDataBlock is 30.
Long Statement,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ToUInt32,The length of the statement  "            return (uint)((((buffer[index + 3] << 0x18) | (buffer[index + 2] << 0x10)) | (buffer[index + 1] << 8)) | buffer[index]); " is 120.
Long Statement,Cosmos.Sys.FileSystem.FAT32,FAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FAT.cs,Format,The length of the statement  "            FileAllocationTable = new FileAllocationTableFAT32(this' p' BootSector.ReservedSectorCount' (uint)(BootSector.ReservedSectorCount + BootSector.FATsz16)); " is 153.
Magic Number,Cosmos.Sys.FileSystem,MBR,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBR.cs,MBR,The following statement contains a magic number: Partition = new IBMPartitionInformation[4];
Magic Number,Cosmos.Sys.FileSystem,MBR,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBR.cs,MBR,The following statement contains a magic number: Partition[2] = new IBMPartitionInformation(this' 2);
Magic Number,Cosmos.Sys.FileSystem,MBR,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBR.cs,MBR,The following statement contains a magic number: Partition[2] = new IBMPartitionInformation(this' 2);
Magic Number,Cosmos.Sys.FileSystem,MBR,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBR.cs,MBR,The following statement contains a magic number: Partition[3] = new IBMPartitionInformation(this' 3);
Magic Number,Cosmos.Sys.FileSystem,MBR,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBR.cs,MBR,The following statement contains a magic number: Partition[3] = new IBMPartitionInformation(this' 3);
Magic Number,Cosmos.Sys.FileSystem,MBR,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBR.cs,Save,The following statement contains a magic number: Sector[510] = 0x55;
Magic Number,Cosmos.Sys.FileSystem,MBR,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBR.cs,Save,The following statement contains a magic number: Sector[511] = 0xaa;
Magic Number,Cosmos.Sys.FileSystem,IBMPartitionInformation,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBR.cs,IBMPartitionInformation,The following statement contains a magic number: this.offset=446+16*index;
Magic Number,Cosmos.Sys.FileSystem,IBMPartitionInformation,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBR.cs,IBMPartitionInformation,The following statement contains a magic number: this.offset=446+16*index;
Magic Number,Cosmos.Sys.FileSystem,MBT,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBT.cs,getPartitions,The following statement contains a magic number: if (!(xBlockContents[xBlockDev.BlockSize - 2] == 0x55 && xBlockContents[xBlockDev.BlockSize - 1] == 0xAA))              {                  //DebugUtil.SendMessage("MBT"' "Does not contain MBR");                  //Hardware.DebugUtil.SendATA_BlockReceived(255' 255' 0' xBlockContents);                  return default(List<Device>);              }
Magic Number,Cosmos.Sys.FileSystem,MBT,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBT.cs,getPartitions,The following statement contains a magic number: for (byte j = 0; j < 4; j++)              {                  //DebugUtil.SendNumber("MBT"' "Partition Status"' xBlockContents[xContentsIndex]' 8);                  if (!(xBlockContents[xContentsIndex] == 0x80 || xBlockContents[xContentsIndex] == 0))                  {                      xContentsIndex += 16;                      continue;                  }                  xContentsIndex += 8;                  uint xStart = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  uint xLength = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  if (xStart > 0 && xLength > 0)                  {                      //DebugUtil.SendDoubleNumber("MBT"' "Entry Found. Start' Length in blocks"' xStart' 32' xLength' 32);                      xStart += 2;                      Console.WriteLine("Add Partition to Device list");                      partitionList.Add(new MBTPartition(xBlockDev' xStart' xLength' "Partition")); //Causes System Fault on the HTC Shift!                      //DebugUtil.SendMessage("MBT"' "FoundPartition");                  }              }
Magic Number,Cosmos.Sys.FileSystem,MBT,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBT.cs,getPartitions,The following statement contains a magic number: for (byte j = 0; j < 4; j++)              {                  //DebugUtil.SendNumber("MBT"' "Partition Status"' xBlockContents[xContentsIndex]' 8);                  if (!(xBlockContents[xContentsIndex] == 0x80 || xBlockContents[xContentsIndex] == 0))                  {                      xContentsIndex += 16;                      continue;                  }                  xContentsIndex += 8;                  uint xStart = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  uint xLength = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  if (xStart > 0 && xLength > 0)                  {                      //DebugUtil.SendDoubleNumber("MBT"' "Entry Found. Start' Length in blocks"' xStart' 32' xLength' 32);                      xStart += 2;                      Console.WriteLine("Add Partition to Device list");                      partitionList.Add(new MBTPartition(xBlockDev' xStart' xLength' "Partition")); //Causes System Fault on the HTC Shift!                      //DebugUtil.SendMessage("MBT"' "FoundPartition");                  }              }
Magic Number,Cosmos.Sys.FileSystem,MBT,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBT.cs,getPartitions,The following statement contains a magic number: for (byte j = 0; j < 4; j++)              {                  //DebugUtil.SendNumber("MBT"' "Partition Status"' xBlockContents[xContentsIndex]' 8);                  if (!(xBlockContents[xContentsIndex] == 0x80 || xBlockContents[xContentsIndex] == 0))                  {                      xContentsIndex += 16;                      continue;                  }                  xContentsIndex += 8;                  uint xStart = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  uint xLength = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  if (xStart > 0 && xLength > 0)                  {                      //DebugUtil.SendDoubleNumber("MBT"' "Entry Found. Start' Length in blocks"' xStart' 32' xLength' 32);                      xStart += 2;                      Console.WriteLine("Add Partition to Device list");                      partitionList.Add(new MBTPartition(xBlockDev' xStart' xLength' "Partition")); //Causes System Fault on the HTC Shift!                      //DebugUtil.SendMessage("MBT"' "FoundPartition");                  }              }
Magic Number,Cosmos.Sys.FileSystem,MBT,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBT.cs,getPartitions,The following statement contains a magic number: for (byte j = 0; j < 4; j++)              {                  //DebugUtil.SendNumber("MBT"' "Partition Status"' xBlockContents[xContentsIndex]' 8);                  if (!(xBlockContents[xContentsIndex] == 0x80 || xBlockContents[xContentsIndex] == 0))                  {                      xContentsIndex += 16;                      continue;                  }                  xContentsIndex += 8;                  uint xStart = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  uint xLength = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  if (xStart > 0 && xLength > 0)                  {                      //DebugUtil.SendDoubleNumber("MBT"' "Entry Found. Start' Length in blocks"' xStart' 32' xLength' 32);                      xStart += 2;                      Console.WriteLine("Add Partition to Device list");                      partitionList.Add(new MBTPartition(xBlockDev' xStart' xLength' "Partition")); //Causes System Fault on the HTC Shift!                      //DebugUtil.SendMessage("MBT"' "FoundPartition");                  }              }
Magic Number,Cosmos.Sys.FileSystem,MBT,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBT.cs,getPartitions,The following statement contains a magic number: for (byte j = 0; j < 4; j++)              {                  //DebugUtil.SendNumber("MBT"' "Partition Status"' xBlockContents[xContentsIndex]' 8);                  if (!(xBlockContents[xContentsIndex] == 0x80 || xBlockContents[xContentsIndex] == 0))                  {                      xContentsIndex += 16;                      continue;                  }                  xContentsIndex += 8;                  uint xStart = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  uint xLength = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  if (xStart > 0 && xLength > 0)                  {                      //DebugUtil.SendDoubleNumber("MBT"' "Entry Found. Start' Length in blocks"' xStart' 32' xLength' 32);                      xStart += 2;                      Console.WriteLine("Add Partition to Device list");                      partitionList.Add(new MBTPartition(xBlockDev' xStart' xLength' "Partition")); //Causes System Fault on the HTC Shift!                      //DebugUtil.SendMessage("MBT"' "FoundPartition");                  }              }
Magic Number,Cosmos.Sys.FileSystem,MBT,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\MBT.cs,getPartitions,The following statement contains a magic number: for (byte j = 0; j < 4; j++)              {                  //DebugUtil.SendNumber("MBT"' "Partition Status"' xBlockContents[xContentsIndex]' 8);                  if (!(xBlockContents[xContentsIndex] == 0x80 || xBlockContents[xContentsIndex] == 0))                  {                      xContentsIndex += 16;                      continue;                  }                  xContentsIndex += 8;                  uint xStart = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  uint xLength = BitConverter.ToUInt32(xBlockContents' xContentsIndex);                  xContentsIndex += 4;                  if (xStart > 0 && xLength > 0)                  {                      //DebugUtil.SendDoubleNumber("MBT"' "Entry Found. Start' Length in blocks"' xStart' 32' xLength' 32);                      xStart += 2;                      Console.WriteLine("Add Partition to Device list");                      partitionList.Add(new MBTPartition(xBlockDev' xStart' xLength' "Partition")); //Causes System Fault on the HTC Shift!                      //DebugUtil.SendMessage("MBT"' "FoundPartition");                  }              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,Initialize,The following statement contains a magic number: mBackend.ReadBlock(2'                                 mBuffer);
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,Initialize,The following statement contains a magic number: Console.WriteLine("INode#3: " + mBufferAddress[2]);
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,Initialize,The following statement contains a magic number: Console.WriteLine("INode#4: " + mBufferAddress[3]);
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < xGroupDescriptorCount; i++) {                  Console.WriteLine("Processing GroupDescriptor " + i);                  uint xATABlock ;                    if ( BlockSize == 1024 )                  {                      xATABlock = ( BlockSize * 2 ) / mBackend.BlockSize ;                  }                  else                  {                      xATABlock = ( BlockSize ) / mBackend.BlockSize ;                  }                    xATABlock += (uint)(i / 16);                  if ((i % 16) == 0) {                      Console.WriteLine("Read new GroupDescriptorBlock");                      mBackend.ReadBlock(xATABlock'                                         mBuffer);                      Console.WriteLine("End Read");                  }                  mGroupDescriptors[i] = xDescriptorPtr[i % 16];                  Console.WriteLine("End of GroupDescriptor check");              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < xGroupDescriptorCount; i++) {                  Console.WriteLine("Processing GroupDescriptor " + i);                  uint xATABlock ;                    if ( BlockSize == 1024 )                  {                      xATABlock = ( BlockSize * 2 ) / mBackend.BlockSize ;                  }                  else                  {                      xATABlock = ( BlockSize ) / mBackend.BlockSize ;                  }                    xATABlock += (uint)(i / 16);                  if ((i % 16) == 0) {                      Console.WriteLine("Read new GroupDescriptorBlock");                      mBackend.ReadBlock(xATABlock'                                         mBuffer);                      Console.WriteLine("End Read");                  }                  mGroupDescriptors[i] = xDescriptorPtr[i % 16];                  Console.WriteLine("End of GroupDescriptor check");              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < xGroupDescriptorCount; i++) {                  Console.WriteLine("Processing GroupDescriptor " + i);                  uint xATABlock ;                    if ( BlockSize == 1024 )                  {                      xATABlock = ( BlockSize * 2 ) / mBackend.BlockSize ;                  }                  else                  {                      xATABlock = ( BlockSize ) / mBackend.BlockSize ;                  }                    xATABlock += (uint)(i / 16);                  if ((i % 16) == 0) {                      Console.WriteLine("Read new GroupDescriptorBlock");                      mBackend.ReadBlock(xATABlock'                                         mBuffer);                      Console.WriteLine("End Read");                  }                  mGroupDescriptors[i] = xDescriptorPtr[i % 16];                  Console.WriteLine("End of GroupDescriptor check");              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < xGroupDescriptorCount; i++) {                  Console.WriteLine("Processing GroupDescriptor " + i);                  uint xATABlock ;                    if ( BlockSize == 1024 )                  {                      xATABlock = ( BlockSize * 2 ) / mBackend.BlockSize ;                  }                  else                  {                      xATABlock = ( BlockSize ) / mBackend.BlockSize ;                  }                    xATABlock += (uint)(i / 16);                  if ((i % 16) == 0) {                      Console.WriteLine("Read new GroupDescriptorBlock");                      mBackend.ReadBlock(xATABlock'                                         mBuffer);                      Console.WriteLine("End Read");                  }                  mGroupDescriptors[i] = xDescriptorPtr[i % 16];                  Console.WriteLine("End of GroupDescriptor check");              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,Initialize,The following statement contains a magic number: for (int i = 0; i < xGroupDescriptorCount; i++) {                  Console.WriteLine("Processing GroupDescriptor " + i);                  uint xATABlock ;                    if ( BlockSize == 1024 )                  {                      xATABlock = ( BlockSize * 2 ) / mBackend.BlockSize ;                  }                  else                  {                      xATABlock = ( BlockSize ) / mBackend.BlockSize ;                  }                    xATABlock += (uint)(i / 16);                  if ((i % 16) == 0) {                      Console.WriteLine("Read new GroupDescriptorBlock");                      mBackend.ReadBlock(xATABlock'                                         mBuffer);                      Console.WriteLine("End Read");                  }                  mGroupDescriptors[i] = xDescriptorPtr[i % 16];                  Console.WriteLine("End of GroupDescriptor check");              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetBitState,The following statement contains a magic number: var xPhyBlock = aBitmapStart * 8;
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetBitState,The following statement contains a magic number: xPhyBlock += (uint)aIndex % 4096;
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetBitState,The following statement contains a magic number: aIndex /= 4096;
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetBitState,The following statement contains a magic number: int xBufferIndex = aIndex / 8;
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetBitState,The following statement contains a magic number: aIndex /= 8;
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ToUInt32,The following statement contains a magic number: return (uint)((((buffer[index + 3] << 0x18) | (buffer[index + 2] << 0x10)) | (buffer[index + 1] << 8)) | buffer[index]);
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ToUInt32,The following statement contains a magic number: return (uint)((((buffer[index + 3] << 0x18) | (buffer[index + 2] << 0x10)) | (buffer[index + 1] << 8)) | buffer[index]);
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ToUInt32,The following statement contains a magic number: return (uint)((((buffer[index + 3] << 0x18) | (buffer[index + 2] << 0x10)) | (buffer[index + 1] << 8)) | buffer[index]);
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ToUInt16,The following statement contains a magic number: return (ushort)((buffer[index + 1] << 8) | buffer[index]);
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: var xResult = new List<FilesystemEntry>(10);
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: while (ReadINodeBlock(ref xINode'                                    xBlockId'                                    xFSBuffer)) {                  //HW.DebugUtil.WriteBinary("Ext2"'                  //                         "Directory Entry binary"'                  //                         xFSBuffer'                  //                         0'                  //                         (int)BlockSize);                  //HW.DebugUtil.SendNumber("Ext2"'                  //                        "First byte of datablock"'                  //                        xFSBuffer[0]'                  //                        8);                  int xIndex = 0;                  var xIteration = 0;                  while (xIndex < BlockSize) {                      var xINodeNumber = ToUInt32(xFSBuffer' xIndex);                      var xRecLength = ToUInt16(xFSBuffer' xIndex + 4);                                            // only include used items                      if (xINodeNumber > 0) {                          // only include non ".." or "." items                          if (xINodeNumber != xBaseINodeNumber) {                              var xNameLength = xFSBuffer[xIndex + 6];                              var xFileType = xFSBuffer[xIndex + 7];                              if (!(xNameLength == 2 && xFSBuffer[xIndex + 8] == (byte)'.' && xFSBuffer[xIndex + 9] == (byte)'.')) {                                  var xFSEntry = new FilesystemEntry                                  {                                      Id = xINodeNumber'                                      IsDirectory = (xFileType == 2)'                                      IsReadonly = true'                                      Filesystem = this                                  };                                  //xFSEntry.Size = GetINode(xINodeNumber).Size;                                  char[] xName = new char[xNameLength];                                  for (int c = 0; c < xName.Length; c++)                                  {                                      xName[c] = (char)xFSBuffer[xIndex + 8 + c];                                  }                                  xFSEntry.Name = new string(xName);                                  if (!xFSEntry.Name.Equals("lost+found"))                                  {                                      xResult.Add(xFSEntry);                                  }                              }                          }                      }                      xIndex += xRecLength;                      xIteration++;                      if (xIteration == 5)                      {                          break;                      }                      //break;                  }                  xBlockId++;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: while (ReadINodeBlock(ref xINode'                                    xBlockId'                                    xFSBuffer)) {                  //HW.DebugUtil.WriteBinary("Ext2"'                  //                         "Directory Entry binary"'                  //                         xFSBuffer'                  //                         0'                  //                         (int)BlockSize);                  //HW.DebugUtil.SendNumber("Ext2"'                  //                        "First byte of datablock"'                  //                        xFSBuffer[0]'                  //                        8);                  int xIndex = 0;                  var xIteration = 0;                  while (xIndex < BlockSize) {                      var xINodeNumber = ToUInt32(xFSBuffer' xIndex);                      var xRecLength = ToUInt16(xFSBuffer' xIndex + 4);                                            // only include used items                      if (xINodeNumber > 0) {                          // only include non ".." or "." items                          if (xINodeNumber != xBaseINodeNumber) {                              var xNameLength = xFSBuffer[xIndex + 6];                              var xFileType = xFSBuffer[xIndex + 7];                              if (!(xNameLength == 2 && xFSBuffer[xIndex + 8] == (byte)'.' && xFSBuffer[xIndex + 9] == (byte)'.')) {                                  var xFSEntry = new FilesystemEntry                                  {                                      Id = xINodeNumber'                                      IsDirectory = (xFileType == 2)'                                      IsReadonly = true'                                      Filesystem = this                                  };                                  //xFSEntry.Size = GetINode(xINodeNumber).Size;                                  char[] xName = new char[xNameLength];                                  for (int c = 0; c < xName.Length; c++)                                  {                                      xName[c] = (char)xFSBuffer[xIndex + 8 + c];                                  }                                  xFSEntry.Name = new string(xName);                                  if (!xFSEntry.Name.Equals("lost+found"))                                  {                                      xResult.Add(xFSEntry);                                  }                              }                          }                      }                      xIndex += xRecLength;                      xIteration++;                      if (xIteration == 5)                      {                          break;                      }                      //break;                  }                  xBlockId++;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: while (ReadINodeBlock(ref xINode'                                    xBlockId'                                    xFSBuffer)) {                  //HW.DebugUtil.WriteBinary("Ext2"'                  //                         "Directory Entry binary"'                  //                         xFSBuffer'                  //                         0'                  //                         (int)BlockSize);                  //HW.DebugUtil.SendNumber("Ext2"'                  //                        "First byte of datablock"'                  //                        xFSBuffer[0]'                  //                        8);                  int xIndex = 0;                  var xIteration = 0;                  while (xIndex < BlockSize) {                      var xINodeNumber = ToUInt32(xFSBuffer' xIndex);                      var xRecLength = ToUInt16(xFSBuffer' xIndex + 4);                                            // only include used items                      if (xINodeNumber > 0) {                          // only include non ".." or "." items                          if (xINodeNumber != xBaseINodeNumber) {                              var xNameLength = xFSBuffer[xIndex + 6];                              var xFileType = xFSBuffer[xIndex + 7];                              if (!(xNameLength == 2 && xFSBuffer[xIndex + 8] == (byte)'.' && xFSBuffer[xIndex + 9] == (byte)'.')) {                                  var xFSEntry = new FilesystemEntry                                  {                                      Id = xINodeNumber'                                      IsDirectory = (xFileType == 2)'                                      IsReadonly = true'                                      Filesystem = this                                  };                                  //xFSEntry.Size = GetINode(xINodeNumber).Size;                                  char[] xName = new char[xNameLength];                                  for (int c = 0; c < xName.Length; c++)                                  {                                      xName[c] = (char)xFSBuffer[xIndex + 8 + c];                                  }                                  xFSEntry.Name = new string(xName);                                  if (!xFSEntry.Name.Equals("lost+found"))                                  {                                      xResult.Add(xFSEntry);                                  }                              }                          }                      }                      xIndex += xRecLength;                      xIteration++;                      if (xIteration == 5)                      {                          break;                      }                      //break;                  }                  xBlockId++;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: while (ReadINodeBlock(ref xINode'                                    xBlockId'                                    xFSBuffer)) {                  //HW.DebugUtil.WriteBinary("Ext2"'                  //                         "Directory Entry binary"'                  //                         xFSBuffer'                  //                         0'                  //                         (int)BlockSize);                  //HW.DebugUtil.SendNumber("Ext2"'                  //                        "First byte of datablock"'                  //                        xFSBuffer[0]'                  //                        8);                  int xIndex = 0;                  var xIteration = 0;                  while (xIndex < BlockSize) {                      var xINodeNumber = ToUInt32(xFSBuffer' xIndex);                      var xRecLength = ToUInt16(xFSBuffer' xIndex + 4);                                            // only include used items                      if (xINodeNumber > 0) {                          // only include non ".." or "." items                          if (xINodeNumber != xBaseINodeNumber) {                              var xNameLength = xFSBuffer[xIndex + 6];                              var xFileType = xFSBuffer[xIndex + 7];                              if (!(xNameLength == 2 && xFSBuffer[xIndex + 8] == (byte)'.' && xFSBuffer[xIndex + 9] == (byte)'.')) {                                  var xFSEntry = new FilesystemEntry                                  {                                      Id = xINodeNumber'                                      IsDirectory = (xFileType == 2)'                                      IsReadonly = true'                                      Filesystem = this                                  };                                  //xFSEntry.Size = GetINode(xINodeNumber).Size;                                  char[] xName = new char[xNameLength];                                  for (int c = 0; c < xName.Length; c++)                                  {                                      xName[c] = (char)xFSBuffer[xIndex + 8 + c];                                  }                                  xFSEntry.Name = new string(xName);                                  if (!xFSEntry.Name.Equals("lost+found"))                                  {                                      xResult.Add(xFSEntry);                                  }                              }                          }                      }                      xIndex += xRecLength;                      xIteration++;                      if (xIteration == 5)                      {                          break;                      }                      //break;                  }                  xBlockId++;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: while (ReadINodeBlock(ref xINode'                                    xBlockId'                                    xFSBuffer)) {                  //HW.DebugUtil.WriteBinary("Ext2"'                  //                         "Directory Entry binary"'                  //                         xFSBuffer'                  //                         0'                  //                         (int)BlockSize);                  //HW.DebugUtil.SendNumber("Ext2"'                  //                        "First byte of datablock"'                  //                        xFSBuffer[0]'                  //                        8);                  int xIndex = 0;                  var xIteration = 0;                  while (xIndex < BlockSize) {                      var xINodeNumber = ToUInt32(xFSBuffer' xIndex);                      var xRecLength = ToUInt16(xFSBuffer' xIndex + 4);                                            // only include used items                      if (xINodeNumber > 0) {                          // only include non ".." or "." items                          if (xINodeNumber != xBaseINodeNumber) {                              var xNameLength = xFSBuffer[xIndex + 6];                              var xFileType = xFSBuffer[xIndex + 7];                              if (!(xNameLength == 2 && xFSBuffer[xIndex + 8] == (byte)'.' && xFSBuffer[xIndex + 9] == (byte)'.')) {                                  var xFSEntry = new FilesystemEntry                                  {                                      Id = xINodeNumber'                                      IsDirectory = (xFileType == 2)'                                      IsReadonly = true'                                      Filesystem = this                                  };                                  //xFSEntry.Size = GetINode(xINodeNumber).Size;                                  char[] xName = new char[xNameLength];                                  for (int c = 0; c < xName.Length; c++)                                  {                                      xName[c] = (char)xFSBuffer[xIndex + 8 + c];                                  }                                  xFSEntry.Name = new string(xName);                                  if (!xFSEntry.Name.Equals("lost+found"))                                  {                                      xResult.Add(xFSEntry);                                  }                              }                          }                      }                      xIndex += xRecLength;                      xIteration++;                      if (xIteration == 5)                      {                          break;                      }                      //break;                  }                  xBlockId++;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: while (ReadINodeBlock(ref xINode'                                    xBlockId'                                    xFSBuffer)) {                  //HW.DebugUtil.WriteBinary("Ext2"'                  //                         "Directory Entry binary"'                  //                         xFSBuffer'                  //                         0'                  //                         (int)BlockSize);                  //HW.DebugUtil.SendNumber("Ext2"'                  //                        "First byte of datablock"'                  //                        xFSBuffer[0]'                  //                        8);                  int xIndex = 0;                  var xIteration = 0;                  while (xIndex < BlockSize) {                      var xINodeNumber = ToUInt32(xFSBuffer' xIndex);                      var xRecLength = ToUInt16(xFSBuffer' xIndex + 4);                                            // only include used items                      if (xINodeNumber > 0) {                          // only include non ".." or "." items                          if (xINodeNumber != xBaseINodeNumber) {                              var xNameLength = xFSBuffer[xIndex + 6];                              var xFileType = xFSBuffer[xIndex + 7];                              if (!(xNameLength == 2 && xFSBuffer[xIndex + 8] == (byte)'.' && xFSBuffer[xIndex + 9] == (byte)'.')) {                                  var xFSEntry = new FilesystemEntry                                  {                                      Id = xINodeNumber'                                      IsDirectory = (xFileType == 2)'                                      IsReadonly = true'                                      Filesystem = this                                  };                                  //xFSEntry.Size = GetINode(xINodeNumber).Size;                                  char[] xName = new char[xNameLength];                                  for (int c = 0; c < xName.Length; c++)                                  {                                      xName[c] = (char)xFSBuffer[xIndex + 8 + c];                                  }                                  xFSEntry.Name = new string(xName);                                  if (!xFSEntry.Name.Equals("lost+found"))                                  {                                      xResult.Add(xFSEntry);                                  }                              }                          }                      }                      xIndex += xRecLength;                      xIteration++;                      if (xIteration == 5)                      {                          break;                      }                      //break;                  }                  xBlockId++;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: while (ReadINodeBlock(ref xINode'                                    xBlockId'                                    xFSBuffer)) {                  //HW.DebugUtil.WriteBinary("Ext2"'                  //                         "Directory Entry binary"'                  //                         xFSBuffer'                  //                         0'                  //                         (int)BlockSize);                  //HW.DebugUtil.SendNumber("Ext2"'                  //                        "First byte of datablock"'                  //                        xFSBuffer[0]'                  //                        8);                  int xIndex = 0;                  var xIteration = 0;                  while (xIndex < BlockSize) {                      var xINodeNumber = ToUInt32(xFSBuffer' xIndex);                      var xRecLength = ToUInt16(xFSBuffer' xIndex + 4);                                            // only include used items                      if (xINodeNumber > 0) {                          // only include non ".." or "." items                          if (xINodeNumber != xBaseINodeNumber) {                              var xNameLength = xFSBuffer[xIndex + 6];                              var xFileType = xFSBuffer[xIndex + 7];                              if (!(xNameLength == 2 && xFSBuffer[xIndex + 8] == (byte)'.' && xFSBuffer[xIndex + 9] == (byte)'.')) {                                  var xFSEntry = new FilesystemEntry                                  {                                      Id = xINodeNumber'                                      IsDirectory = (xFileType == 2)'                                      IsReadonly = true'                                      Filesystem = this                                  };                                  //xFSEntry.Size = GetINode(xINodeNumber).Size;                                  char[] xName = new char[xNameLength];                                  for (int c = 0; c < xName.Length; c++)                                  {                                      xName[c] = (char)xFSBuffer[xIndex + 8 + c];                                  }                                  xFSEntry.Name = new string(xName);                                  if (!xFSEntry.Name.Equals("lost+found"))                                  {                                      xResult.Add(xFSEntry);                                  }                              }                          }                      }                      xIndex += xRecLength;                      xIteration++;                      if (xIteration == 5)                      {                          break;                      }                      //break;                  }                  xBlockId++;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: while (ReadINodeBlock(ref xINode'                                    xBlockId'                                    xFSBuffer)) {                  //HW.DebugUtil.WriteBinary("Ext2"'                  //                         "Directory Entry binary"'                  //                         xFSBuffer'                  //                         0'                  //                         (int)BlockSize);                  //HW.DebugUtil.SendNumber("Ext2"'                  //                        "First byte of datablock"'                  //                        xFSBuffer[0]'                  //                        8);                  int xIndex = 0;                  var xIteration = 0;                  while (xIndex < BlockSize) {                      var xINodeNumber = ToUInt32(xFSBuffer' xIndex);                      var xRecLength = ToUInt16(xFSBuffer' xIndex + 4);                                            // only include used items                      if (xINodeNumber > 0) {                          // only include non ".." or "." items                          if (xINodeNumber != xBaseINodeNumber) {                              var xNameLength = xFSBuffer[xIndex + 6];                              var xFileType = xFSBuffer[xIndex + 7];                              if (!(xNameLength == 2 && xFSBuffer[xIndex + 8] == (byte)'.' && xFSBuffer[xIndex + 9] == (byte)'.')) {                                  var xFSEntry = new FilesystemEntry                                  {                                      Id = xINodeNumber'                                      IsDirectory = (xFileType == 2)'                                      IsReadonly = true'                                      Filesystem = this                                  };                                  //xFSEntry.Size = GetINode(xINodeNumber).Size;                                  char[] xName = new char[xNameLength];                                  for (int c = 0; c < xName.Length; c++)                                  {                                      xName[c] = (char)xFSBuffer[xIndex + 8 + c];                                  }                                  xFSEntry.Name = new string(xName);                                  if (!xFSEntry.Name.Equals("lost+found"))                                  {                                      xResult.Add(xFSEntry);                                  }                              }                          }                      }                      xIndex += xRecLength;                      xIteration++;                      if (xIteration == 5)                      {                          break;                      }                      //break;                  }                  xBlockId++;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,GetDirectoryListing,The following statement contains a magic number: while (ReadINodeBlock(ref xINode'                                    xBlockId'                                    xFSBuffer)) {                  //HW.DebugUtil.WriteBinary("Ext2"'                  //                         "Directory Entry binary"'                  //                         xFSBuffer'                  //                         0'                  //                         (int)BlockSize);                  //HW.DebugUtil.SendNumber("Ext2"'                  //                        "First byte of datablock"'                  //                        xFSBuffer[0]'                  //                        8);                  int xIndex = 0;                  var xIteration = 0;                  while (xIndex < BlockSize) {                      var xINodeNumber = ToUInt32(xFSBuffer' xIndex);                      var xRecLength = ToUInt16(xFSBuffer' xIndex + 4);                                            // only include used items                      if (xINodeNumber > 0) {                          // only include non ".." or "." items                          if (xINodeNumber != xBaseINodeNumber) {                              var xNameLength = xFSBuffer[xIndex + 6];                              var xFileType = xFSBuffer[xIndex + 7];                              if (!(xNameLength == 2 && xFSBuffer[xIndex + 8] == (byte)'.' && xFSBuffer[xIndex + 9] == (byte)'.')) {                                  var xFSEntry = new FilesystemEntry                                  {                                      Id = xINodeNumber'                                      IsDirectory = (xFileType == 2)'                                      IsReadonly = true'                                      Filesystem = this                                  };                                  //xFSEntry.Size = GetINode(xINodeNumber).Size;                                  char[] xName = new char[xNameLength];                                  for (int c = 0; c < xName.Length; c++)                                  {                                      xName[c] = (char)xFSBuffer[xIndex + 8 + c];                                  }                                  xFSEntry.Name = new string(xName);                                  if (!xFSEntry.Name.Equals("lost+found"))                                  {                                      xResult.Add(xFSEntry);                                  }                              }                          }                      }                      xIndex += xRecLength;                      xIteration++;                      if (xIteration == 5)                      {                          break;                      }                      //break;                  }                  xBlockId++;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ReadINodeBlock,The following statement contains a magic number: fixed (INode* xINodePtr = &aINode)              {                  uint xINodeAddr = (uint)xINodePtr;                  uint* xBlocks = (uint*)(xINodeAddr + INodeConsts.BlockOffset);                  if (aBlockId >= 0 && aBlockId <= 11)                  {                      var xBlockId = xBlocks[aBlockId];                      if (xBlockId == 0)                      {                          return false;                      }                      ReadDataBlock(xBlockId'                                    aBuffer);                      return true;                  }                  else                  {                      uint xIndirectBlockRefsPerDataBlock = BlockSize / 4;                      if ((aBlockId - 12) < xIndirectBlockRefsPerDataBlock)                      {                          var xBlockId = xBlocks[12];                          if (xBlockId == 0)                          {                              return false;                          }                          ReadDataBlock(xBlockId'                                        aBuffer);                          var xTheBlock = ToUInt32(aBuffer' (int)((aBlockId - 11) * 4));                          ReadDataBlock(xTheBlock'                                        aBuffer);                          return true;                      }                      Console.WriteLine("Reading indirect blocks not yet supported!");                  }              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ReadINodeBlock,The following statement contains a magic number: fixed (INode* xINodePtr = &aINode)              {                  uint xINodeAddr = (uint)xINodePtr;                  uint* xBlocks = (uint*)(xINodeAddr + INodeConsts.BlockOffset);                  if (aBlockId >= 0 && aBlockId <= 11)                  {                      var xBlockId = xBlocks[aBlockId];                      if (xBlockId == 0)                      {                          return false;                      }                      ReadDataBlock(xBlockId'                                    aBuffer);                      return true;                  }                  else                  {                      uint xIndirectBlockRefsPerDataBlock = BlockSize / 4;                      if ((aBlockId - 12) < xIndirectBlockRefsPerDataBlock)                      {                          var xBlockId = xBlocks[12];                          if (xBlockId == 0)                          {                              return false;                          }                          ReadDataBlock(xBlockId'                                        aBuffer);                          var xTheBlock = ToUInt32(aBuffer' (int)((aBlockId - 11) * 4));                          ReadDataBlock(xTheBlock'                                        aBuffer);                          return true;                      }                      Console.WriteLine("Reading indirect blocks not yet supported!");                  }              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ReadINodeBlock,The following statement contains a magic number: fixed (INode* xINodePtr = &aINode)              {                  uint xINodeAddr = (uint)xINodePtr;                  uint* xBlocks = (uint*)(xINodeAddr + INodeConsts.BlockOffset);                  if (aBlockId >= 0 && aBlockId <= 11)                  {                      var xBlockId = xBlocks[aBlockId];                      if (xBlockId == 0)                      {                          return false;                      }                      ReadDataBlock(xBlockId'                                    aBuffer);                      return true;                  }                  else                  {                      uint xIndirectBlockRefsPerDataBlock = BlockSize / 4;                      if ((aBlockId - 12) < xIndirectBlockRefsPerDataBlock)                      {                          var xBlockId = xBlocks[12];                          if (xBlockId == 0)                          {                              return false;                          }                          ReadDataBlock(xBlockId'                                        aBuffer);                          var xTheBlock = ToUInt32(aBuffer' (int)((aBlockId - 11) * 4));                          ReadDataBlock(xTheBlock'                                        aBuffer);                          return true;                      }                      Console.WriteLine("Reading indirect blocks not yet supported!");                  }              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ReadINodeBlock,The following statement contains a magic number: fixed (INode* xINodePtr = &aINode)              {                  uint xINodeAddr = (uint)xINodePtr;                  uint* xBlocks = (uint*)(xINodeAddr + INodeConsts.BlockOffset);                  if (aBlockId >= 0 && aBlockId <= 11)                  {                      var xBlockId = xBlocks[aBlockId];                      if (xBlockId == 0)                      {                          return false;                      }                      ReadDataBlock(xBlockId'                                    aBuffer);                      return true;                  }                  else                  {                      uint xIndirectBlockRefsPerDataBlock = BlockSize / 4;                      if ((aBlockId - 12) < xIndirectBlockRefsPerDataBlock)                      {                          var xBlockId = xBlocks[12];                          if (xBlockId == 0)                          {                              return false;                          }                          ReadDataBlock(xBlockId'                                        aBuffer);                          var xTheBlock = ToUInt32(aBuffer' (int)((aBlockId - 11) * 4));                          ReadDataBlock(xTheBlock'                                        aBuffer);                          return true;                      }                      Console.WriteLine("Reading indirect blocks not yet supported!");                  }              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ReadINodeBlock,The following statement contains a magic number: fixed (INode* xINodePtr = &aINode)              {                  uint xINodeAddr = (uint)xINodePtr;                  uint* xBlocks = (uint*)(xINodeAddr + INodeConsts.BlockOffset);                  if (aBlockId >= 0 && aBlockId <= 11)                  {                      var xBlockId = xBlocks[aBlockId];                      if (xBlockId == 0)                      {                          return false;                      }                      ReadDataBlock(xBlockId'                                    aBuffer);                      return true;                  }                  else                  {                      uint xIndirectBlockRefsPerDataBlock = BlockSize / 4;                      if ((aBlockId - 12) < xIndirectBlockRefsPerDataBlock)                      {                          var xBlockId = xBlocks[12];                          if (xBlockId == 0)                          {                              return false;                          }                          ReadDataBlock(xBlockId'                                        aBuffer);                          var xTheBlock = ToUInt32(aBuffer' (int)((aBlockId - 11) * 4));                          ReadDataBlock(xTheBlock'                                        aBuffer);                          return true;                      }                      Console.WriteLine("Reading indirect blocks not yet supported!");                  }              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,ReadINodeBlock,The following statement contains a magic number: fixed (INode* xINodePtr = &aINode)              {                  uint xINodeAddr = (uint)xINodePtr;                  uint* xBlocks = (uint*)(xINodeAddr + INodeConsts.BlockOffset);                  if (aBlockId >= 0 && aBlockId <= 11)                  {                      var xBlockId = xBlocks[aBlockId];                      if (xBlockId == 0)                      {                          return false;                      }                      ReadDataBlock(xBlockId'                                    aBuffer);                      return true;                  }                  else                  {                      uint xIndirectBlockRefsPerDataBlock = BlockSize / 4;                      if ((aBlockId - 12) < xIndirectBlockRefsPerDataBlock)                      {                          var xBlockId = xBlocks[12];                          if (xBlockId == 0)                          {                              return false;                          }                          ReadDataBlock(xBlockId'                                        aBuffer);                          var xTheBlock = ToUInt32(aBuffer' (int)((aBlockId - 11) * 4));                          ReadDataBlock(xTheBlock'                                        aBuffer);                          return true;                      }                      Console.WriteLine("Reading indirect blocks not yet supported!");                  }              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,BlockDeviceContainsExt2,The following statement contains a magic number: if (aDevice.BlockCount > 3)              {                  byte[] xBuffer = new byte[aDevice.BlockSize];                  // todo: implement better detection                  aDevice.ReadBlock(2'                                    xBuffer);                  bool xResult = (xBuffer[56] == 0x53 && xBuffer[57] == 0xEF);                  return xResult;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,BlockDeviceContainsExt2,The following statement contains a magic number: if (aDevice.BlockCount > 3)              {                  byte[] xBuffer = new byte[aDevice.BlockSize];                  // todo: implement better detection                  aDevice.ReadBlock(2'                                    xBuffer);                  bool xResult = (xBuffer[56] == 0x53 && xBuffer[57] == 0xEF);                  return xResult;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,BlockDeviceContainsExt2,The following statement contains a magic number: if (aDevice.BlockCount > 3)              {                  byte[] xBuffer = new byte[aDevice.BlockSize];                  // todo: implement better detection                  aDevice.ReadBlock(2'                                    xBuffer);                  bool xResult = (xBuffer[56] == 0x53 && xBuffer[57] == 0xEF);                  return xResult;              }
Magic Number,Cosmos.Sys.FileSystem.Ext2,Ext2,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\Ext2\Ext2.cs,BlockDeviceContainsExt2,The following statement contains a magic number: if (aDevice.BlockCount > 3)              {                  byte[] xBuffer = new byte[aDevice.BlockSize];                  // todo: implement better detection                  aDevice.ReadBlock(2'                                    xBuffer);                  bool xResult = (xBuffer[56] == 0x53 && xBuffer[57] == 0xEF);                  return xResult;              }
Magic Number,Cosmos.Sys.FileSystem.FAT32,FAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FAT.cs,Format,The following statement contains a magic number: BootSector.BPB_FATSz32 = (BootSector.TotalSectors32 * 512 * 4 / clustersize + p.BlockSize - 1) / p.BlockSize;
Magic Number,Cosmos.Sys.FileSystem.FAT32,FAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FAT.cs,Format,The following statement contains a magic number: BootSector.BPB_FATSz32 = (BootSector.TotalSectors32 * 512 * 4 / clustersize + p.BlockSize - 1) / p.BlockSize;
Magic Number,Cosmos.Sys.FileSystem.FAT32,FAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FAT.cs,Format,The following statement contains a magic number: BootSector.ReservedSectorCount = 32;
Magic Number,Cosmos.Sys.FileSystem.FAT32,FAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FAT.cs,Format,The following statement contains a magic number: BootSector.NumberFATs = 2;
Magic Number,Cosmos.Sys.FileSystem.FAT32,FAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FAT.cs,Format,The following statement contains a magic number: FileSystemInfo32.Free_Count = (BootSector.TotalSectors32 / BootSector.SectorsPerCluster -2);
Magic Number,Cosmos.Sys.FileSystem.FAT32,FAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FAT.cs,FirstSectorOfCluster,The following statement contains a magic number: return (cluster - 2) * SectorsPerCluster + FirstDataSector;
Magic Number,Cosmos.Sys.FileSystem.FAT32,FATStream,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FATStream.cs,GotoPosition,The following statement contains a magic number: if (value < CurrentClusterStart)              {                  Restart(value);              }              else if ( value >= CurrentClusterEnd)              {                  if (value < 2 * CurrentClusterEnd - CurrentClusterStart)                  {                      GetNextCluster();                  }                  else                  {                      Restart(value);                  }              }
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,FileAllocationTableFAT32,The following statement contains a magic number: switch (fat32.BootSector.BytesPerSec/4)              {                  case 128:                      Shift = 7;                      Mask = 0x7f;                      break;                  default:                      throw new Exception("weird sector size");              }
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,FileAllocationTableFAT32,The following statement contains a magic number: switch (fat32.BootSector.BytesPerSec/4)              {                  case 128:                      Shift = 7;                      Mask = 0x7f;                      break;                  default:                      throw new Exception("weird sector size");              }
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,FileAllocationTableFAT32,The following statement contains a magic number: switch (fat32.BootSector.BytesPerSec/4)              {                  case 128:                      Shift = 7;                      Mask = 0x7f;                      break;                  default:                      throw new Exception("weird sector size");              }
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,Format,The following statement contains a magic number: b[2] = 0xff;
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,Format,The following statement contains a magic number: b[3] = 0xff;
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,Format,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes((uint)0x0ffffff8)' 0' b' 4' 4);
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,Format,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes((uint)0x0ffffff8)' 0' b' 4' 4);
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,GetFreeCluster,The following statement contains a magic number: for (uint i = 0; i < TotalClusters; i++)              {                  uint actualcluster = (start + i - 2) % (TotalClusters) + 2;                  if (ReadClusterAllocation(actualcluster) == 0x0)                  {                      fat32.FileSystemInfo32.Nxt_Free = actualcluster + 1;                      return actualcluster;                  }              }
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,GetFreeCluster,The following statement contains a magic number: for (uint i = 0; i < TotalClusters; i++)              {                  uint actualcluster = (start + i - 2) % (TotalClusters) + 2;                  if (ReadClusterAllocation(actualcluster) == 0x0)                  {                      fat32.FileSystemInfo32.Nxt_Free = actualcluster + 1;                      return actualcluster;                  }              }
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,ReadClusterAllocation,The following statement contains a magic number: return BitConverter.ToUInt32(data'(int)(index<<2));
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,WriteClusterAllocation,The following statement contains a magic number: index <<= 2;
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,WriteClusterAllocation,The following statement contains a magic number: data[index++] = b[2];
Magic Number,Cosmos.Sys.FileSystem.FAT32,FileAllocationTableFAT32,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Kernel.FileSystems\FAT32\FileAllocationTable.cs,WriteClusterAllocation,The following statement contains a magic number: data[index++] = b[3];
