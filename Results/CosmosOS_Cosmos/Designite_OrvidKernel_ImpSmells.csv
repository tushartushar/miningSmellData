Implementation smell,Namespace,Class,File,Method,Description
Long Method,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The method has 141 lines of code.
Long Statement,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The length of the statement  "            //s.Taskbar.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4); " is 202.
Long Statement,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The length of the statement  "                //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4); " is 194.
Long Statement,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The length of the statement  "                //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4); " is 203.
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: s.Taskbar.Clear(new Pixel(0'255'0'255));
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: s.Taskbar.Clear(new Pixel(0'255'0'255));
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: v = new Vec2(150' 100);
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: v = new Vec2(150' 100);
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: s.Taskbar.DrawCircleOutline(v' 10' new Pixel(0' 0' 128' 255));
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: s.Taskbar.DrawCircleOutline(v' 10' new Pixel(0' 0' 128' 255));
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: s.Taskbar.DrawCircleOutline(v' 10' new Pixel(0' 0' 128' 255));
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,Run,The following statement contains a magic number: while (true)              {                  Console.WriteLine("This is just a test.");                  Tick++;                  MouseX = (uint)m.X;                  MouseY = (uint)m.Y;                  //m.HandleMouse();                    if (OddRefresh)                  {                      s.Taskbar.SetPixel(312' 4' Colors.Black);                      s.Taskbar.SetPixel(313' 4' Colors.Black);                      s.Taskbar.SetPixel(312' 5' Colors.Black);                      s.Taskbar.SetPixel(313' 5' Colors.Black);                      OddRefresh = false;                  }                  else                  {                      s.Taskbar.SetPixel(312' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 4' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(312' 5' new Pixel(0'255'0'255));                      s.Taskbar.SetPixel(313' 5' new Pixel(0'255'0'255));                      OddRefresh = true;                  }                      //OButton b = new OButton();                  //b.Color = 31;                  //b.Location = new Vec2(150' 100);                  //b.Size = new Vec2(75' 20);                  //b.Draw();                    char c;                  if (k.GetChar(out c))                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(255' 0' 0' 255));                      ProcessKeyboard(c);                      HadCharPrev = true;                  }                  else if (HadCharPrev)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 20' new Pixel(0' 255' 0' 255));                      HadCharPrev = false;                  }                  chrsProcd = 0;                    if (m.Buttons != Mouse.MouseState.None)                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(255' 0' 0' 255));                  }                  else                  {                      v = new Vec2(150' 100);                      s.Taskbar.DrawCircleOutline(v' 30' new Pixel(0' 255' 0' 255));                  }                    //for (uint height = 0; height < s.s.PixelHeight; height++)                  //    for (uint width = 0; width < s.s.PixelWidth; width++)                  //        s.SetPixel(height' width' (byte)(width + height));                    //s.DrawPolygon(new Vec2[] { new Vec2(100' 50)' new Vec2(150' 50)' new Vec2(175' 75)' new Vec2(175' 125)' new Vec2(150' 150)' new Vec2(100' 150)' new Vec2(75' 125)' new Vec2(75' 75) }' (uint)4);                  //s.DrawPolygonOutline(new Vec2[] { new Vec2(400' 50)' new Vec2(450' 50)' new Vec2(475' 75)' new Vec2(475' 125)' new Vec2(450' 150)' new Vec2(400' 150)' new Vec2(375' 125)' new Vec2(375' 75) }' (uint)4);                  //s.DrawTriangle(new Vec2(75'100)' new Vec2(75'75)' new Vec2(25'100)' (uint)216);                  //v = new Vec2(100' 100);                  //s.Taskbar.DrawCircle(v' 20' (uint)16);                  //s.DrawCircleOutline(new Vec2(150' 100)' 20' (uint)8);                  //s.DrawCircleOutline(new Vec2(Mouse.X' Mouse.Y)' 15' (uint)16);                  //s.Taskbar.DrawElipticalArc(v' 30' 10' 10' 300' (uint)90);                  //s.Taskbar.DrawReverseRectangle(new Vec2(120' 80)' new Vec2(80' 140)' (uint)238);                        //s.DrawLine(new Vec2(30' 30)' new Vec2(80' 80)' 9);                  //s.DrawElipse(new Vec2(150' 50)' 10' 10' 8);                      // And finally' update the screen                  s.Update();              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,ProcessKeyboard,The following statement contains a magic number: if (c == 72 || c == 'w') // Up arrow              {                  if (MouseY > 0)                  {                      MouseY--;                      // The following can be used to create                       // the appearance that the mouse is in                       // multiple places at once.                        //DrawCursor();                  }              }              else if (c == 80 || c == 's') // Down arrow              {                  if (MouseY < s.Height - 4)                  {                      MouseY++;                      //DrawCursor();                  }              }              else if (c == 75 || c == 'a') // Left arrow              {                  if (MouseX > 0)                  {                      MouseX--;                      //DrawCursor();                  }              }              else if (c == 77 || c == 'd') // Right arrow              {                  if (MouseX < s.Width - 4)                  {                      MouseX++;                      //DrawCursor();                  }              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,ProcessKeyboard,The following statement contains a magic number: if (c == 72 || c == 'w') // Up arrow              {                  if (MouseY > 0)                  {                      MouseY--;                      // The following can be used to create                       // the appearance that the mouse is in                       // multiple places at once.                        //DrawCursor();                  }              }              else if (c == 80 || c == 's') // Down arrow              {                  if (MouseY < s.Height - 4)                  {                      MouseY++;                      //DrawCursor();                  }              }              else if (c == 75 || c == 'a') // Left arrow              {                  if (MouseX > 0)                  {                      MouseX--;                      //DrawCursor();                  }              }              else if (c == 77 || c == 'd') // Right arrow              {                  if (MouseX < s.Width - 4)                  {                      MouseX++;                      //DrawCursor();                  }              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,ProcessKeyboard,The following statement contains a magic number: if (c == 72 || c == 'w') // Up arrow              {                  if (MouseY > 0)                  {                      MouseY--;                      // The following can be used to create                       // the appearance that the mouse is in                       // multiple places at once.                        //DrawCursor();                  }              }              else if (c == 80 || c == 's') // Down arrow              {                  if (MouseY < s.Height - 4)                  {                      MouseY++;                      //DrawCursor();                  }              }              else if (c == 75 || c == 'a') // Left arrow              {                  if (MouseX > 0)                  {                      MouseX--;                      //DrawCursor();                  }              }              else if (c == 77 || c == 'd') // Right arrow              {                  if (MouseX < s.Width - 4)                  {                      MouseX++;                      //DrawCursor();                  }              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,ProcessKeyboard,The following statement contains a magic number: if (c == 72 || c == 'w') // Up arrow              {                  if (MouseY > 0)                  {                      MouseY--;                      // The following can be used to create                       // the appearance that the mouse is in                       // multiple places at once.                        //DrawCursor();                  }              }              else if (c == 80 || c == 's') // Down arrow              {                  if (MouseY < s.Height - 4)                  {                      MouseY++;                      //DrawCursor();                  }              }              else if (c == 75 || c == 'a') // Left arrow              {                  if (MouseX > 0)                  {                      MouseX--;                      //DrawCursor();                  }              }              else if (c == 77 || c == 'd') // Right arrow              {                  if (MouseX < s.Width - 4)                  {                      MouseX++;                      //DrawCursor();                  }              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,ProcessKeyboard,The following statement contains a magic number: if (c == 72 || c == 'w') // Up arrow              {                  if (MouseY > 0)                  {                      MouseY--;                      // The following can be used to create                       // the appearance that the mouse is in                       // multiple places at once.                        //DrawCursor();                  }              }              else if (c == 80 || c == 's') // Down arrow              {                  if (MouseY < s.Height - 4)                  {                      MouseY++;                      //DrawCursor();                  }              }              else if (c == 75 || c == 'a') // Left arrow              {                  if (MouseX > 0)                  {                      MouseX--;                      //DrawCursor();                  }              }              else if (c == 77 || c == 'd') // Right arrow              {                  if (MouseX < s.Width - 4)                  {                      MouseX++;                      //DrawCursor();                  }              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,ProcessKeyboard,The following statement contains a magic number: if (c == 72 || c == 'w') // Up arrow              {                  if (MouseY > 0)                  {                      MouseY--;                      // The following can be used to create                       // the appearance that the mouse is in                       // multiple places at once.                        //DrawCursor();                  }              }              else if (c == 80 || c == 's') // Down arrow              {                  if (MouseY < s.Height - 4)                  {                      MouseY++;                      //DrawCursor();                  }              }              else if (c == 75 || c == 'a') // Left arrow              {                  if (MouseX > 0)                  {                      MouseX--;                      //DrawCursor();                  }              }              else if (c == 77 || c == 'd') // Right arrow              {                  if (MouseX < s.Width - 4)                  {                      MouseX++;                      //DrawCursor();                  }              }
Magic Number,GuessKernel,GuessOS,C:\repos\CosmosOS_Cosmos\Users\Orvid\OrvidTestOS\GuessOS.cs,ProcessKeyboard,The following statement contains a magic number: if (chrsProcd < 7)              {                  char c2;                  if (k.GetChar(out c2))                  {                      chrsProcd++;                      ProcessKeyboard(c2);                  }              }
