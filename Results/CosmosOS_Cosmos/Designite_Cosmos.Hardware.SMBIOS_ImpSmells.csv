Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Cosmos.Hardware.SMBIOS,BaseTable,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\BaseTable.cs,GetNextWord,The following statement contains a magic number: NextAddress += 2;
Magic Number,Cosmos.Hardware.SMBIOS,BaseTable,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\BaseTable.cs,GetNextDWord,The following statement contains a magic number: NextAddress += 4;
Magic Number,Cosmos.Hardware.SMBIOS,BaseTable,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\BaseTable.cs,GetNextQWord,The following statement contains a magic number: NextAddress += 8;
Magic Number,Cosmos.Hardware.SMBIOS,BaseTable,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\BaseTable.cs,GetStrings,The following statement contains a magic number: do              {                  while( chr > 0 )                  {                      str = str + ( char )chr;                      counter++;                      if( counter > 63 )                          break;                      chr = GetNextByte();                  }                  Strings.Add( str );                                    str = "";                  counter = 0;                  chr = GetNextByte();              } while( chr > 0 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS_Data,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\SMBIOS Base.cs,SMBIOS_Data,The following statement contains a magic number: AnchorString = new byte[ 4 ];
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS_Data,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\SMBIOS Base.cs,SMBIOS_Data,The following statement contains a magic number: FormattedArea = new byte[ 5 ];
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS_Data,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\SMBIOS Base.cs,SMBIOS_Data,The following statement contains a magic number: IntermediateAnchorString = new byte[ 5 ];
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,CheckSMBIOS,The following statement contains a magic number: while( SMBBIOSAddress <= 0x000FFFFF )              {                  //if( Memory.Get32( SMBBIOSAddress ) == ( uint )0x5F534D5F || // "_SM_"                    //    Memory.Get32( SMBBIOSAddress ) == ( uint )0x5F4D535F ) // "_MS_" indianess                   if( Memory.Read8Unchecked( SMBBIOSAddress ) == ( byte )0x5F ) //                       if( Memory.Read8Unchecked( SMBBIOSAddress + 1 ) == ( byte )0x53 )                          if( Memory.Read8Unchecked( SMBBIOSAddress + 2 ) == ( byte )0x4D )                              if( Memory.Read8Unchecked( SMBBIOSAddress + 3 ) == ( byte )0x5F )                              {                                    Signature = Memory.Read32Unchecked( SMBBIOSAddress );                                  HasSMBIOS = true;                                  break;                              }                    SMBBIOSAddress++;              }
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,CheckSMBIOS,The following statement contains a magic number: while( SMBBIOSAddress <= 0x000FFFFF )              {                  //if( Memory.Get32( SMBBIOSAddress ) == ( uint )0x5F534D5F || // "_SM_"                    //    Memory.Get32( SMBBIOSAddress ) == ( uint )0x5F4D535F ) // "_MS_" indianess                   if( Memory.Read8Unchecked( SMBBIOSAddress ) == ( byte )0x5F ) //                       if( Memory.Read8Unchecked( SMBBIOSAddress + 1 ) == ( byte )0x53 )                          if( Memory.Read8Unchecked( SMBBIOSAddress + 2 ) == ( byte )0x4D )                              if( Memory.Read8Unchecked( SMBBIOSAddress + 3 ) == ( byte )0x5F )                              {                                    Signature = Memory.Read32Unchecked( SMBBIOSAddress );                                  HasSMBIOS = true;                                  break;                              }                    SMBBIOSAddress++;              }
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,ReadTables,The following statement contains a magic number: for( int i = 0; i < SMBIOS_Data.NumberOfSMBIOSStructures; i++ )              {                  bsd = new BaseTable( NextAddress' SMBIOS_Data.SMBIOSMinorVersion );                  if( bsd.ReadData() == false || bsd.TableType == 127)                  {                      //Something went wrong or we finished                      break;                  }                    NextAddress = bsd.EndAddress;                  TableList.Add( bsd );               }
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: Cosmos.Kernel.MemoryAddressSpace Memory = new Cosmos.Kernel.MemoryAddressSpace( SMBBIOSAddress' 32 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.AnchorString[ 2 ] = Memory.Read8Unchecked( 2 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.AnchorString[ 2 ] = Memory.Read8Unchecked( 2 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.AnchorString[ 3 ] = Memory.Read8Unchecked( 3 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.AnchorString[ 3 ] = Memory.Read8Unchecked( 3 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.EntryPointStructureChecksum = Memory.Read8Unchecked( 4 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.EntryPointLength = Memory.Read8Unchecked( 5 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.SMBIOSMajorVersion = Memory.Read8Unchecked( 6 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.SMBIOSMinorVersion = Memory.Read8Unchecked( 7 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.MaximumStructureSize = Memory.Read16Unchecked( 8 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.EntryPointRevision = Memory.Read8Unchecked( 10 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.FormattedArea[ 0 ] = Memory.Read8Unchecked( 11 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.FormattedArea[ 1 ] = Memory.Read8Unchecked( 12 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.FormattedArea[ 2 ] = Memory.Read8Unchecked( 13 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.FormattedArea[ 2 ] = Memory.Read8Unchecked( 13 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.FormattedArea[ 3 ] = Memory.Read8Unchecked( 14 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.FormattedArea[ 3 ] = Memory.Read8Unchecked( 14 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.FormattedArea[ 4 ] = Memory.Read8Unchecked( 15 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.FormattedArea[ 4 ] = Memory.Read8Unchecked( 15 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.IntermediateAnchorString[ 0 ] = Memory.Read8Unchecked( 16 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.IntermediateAnchorString[ 1 ] = Memory.Read8Unchecked( 17 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.IntermediateAnchorString[ 2 ] = Memory.Read8Unchecked( 18 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.IntermediateAnchorString[ 2 ] = Memory.Read8Unchecked( 18 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.IntermediateAnchorString[ 3 ] = Memory.Read8Unchecked( 19 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.IntermediateAnchorString[ 3 ] = Memory.Read8Unchecked( 19 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.IntermediateAnchorString[ 4 ] = Memory.Read8Unchecked( 20 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.IntermediateAnchorString[ 4 ] = Memory.Read8Unchecked( 20 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.IntermediateChecksum = Memory.Read8Unchecked( 21 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.StructureTableLength = Memory.Read16Unchecked( 22 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.StructureTableAddress = Memory.Read32Unchecked( 24 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.NumberOfSMBIOSStructures = Memory.Read16Unchecked( 28 );
Magic Number,Cosmos.Hardware.SMBIOS,SMBIOS,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS.cs,GetSMBIOS_Data,The following statement contains a magic number: SMBIOS_Data.SMBIOSBCDRevision = Memory.Read8Unchecked( 30 );
Magic Number,Cosmos.Hardware.SMBIOS,TestProgram,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\TestProgram.cs,Init,The following statement contains a magic number: if( a.CheckSMBIOS() )              {                  a.GetSMBIOS_Data();                     Console.Write( " SMBios found at: 0x" );                  //Console.Write(Cosmos.Kernel.HexExtension.ToHex(a.SMBBIOSAddress' 8));                  Console.Write( " Version: " );                  Console.Write(a.SMBIOS_Data.SMBIOSMajorVersion);                  Console.Write( "." );                  Console.WriteLine(a.SMBIOS_Data.SMBIOSMinorVersion);                    Console.Write( " Signature: " );                  //Console.WriteLine( Cosmos.Kernel.HexExtension.ToHex( a.Signature ) );                    Console.WriteLine( " SMBIOS dump: " );                    DumpBytes( a.SMBBIOSAddress' 32' 16 );                  Console.WriteLine( "" );                    //Console.Write( " SMBIOS anchor:  " );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.AnchorString[ 0 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.AnchorString[ 1 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.AnchorString[ 2 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.AnchorString[ 3 ] ) );                    //Console.Write( " DMI anchor: " );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 0 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 1 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 2 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 3 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 4 ] ) );                    Console.Write( " Number of tables:" );                  Console.Write( a.SMBIOS_Data.NumberOfSMBIOSStructures );                    Console.WriteLine( "" );                  Console.Write( a.SMBIOS_Data.StructureTableLength );                  Console.WriteLine( " bytes of data" );                                    Console.Write( " Reading " );                  Console.Write(" tables... " );                  int read = a.ReadTables();                  Console.Write( read );                  Console.WriteLine( " tables read." );                    Console.WriteLine( " Found Hardware Types:" );                   for( int i = 0; i < a.TableList.Count; i++ )                  {                      Console.Write( a.TableList[ i ].TableType );                      Console.Write( " " );                  }                  Console.WriteLine( "" );                     Console.Write( " Interpreting data... " );                  a.InterpretData();                   Console.WriteLine( " done." );                      List<BaseInfo> lst = a.GetHardwareDescriptorByType( TableTypes.BIOSInformation );                  BIOSTable biosinfo;                  if( lst.Count > 0 )                  {                      BaseInfo ht = lst[ 0 ];                      biosinfo = ( BIOSTable )ht;                      Console.WriteLine( " BIOS Information: " );                      Console.Write( "   Vendor: " );                      Console.WriteLine( biosinfo.Vendor );                    }                      ProcessorInformation CPUInfo;                  lst = a.GetHardwareDescriptorByType( TableTypes.ProcessorInformation );                    if( lst.Count > 0 )                  {                      CPUInfo = ( ProcessorInformation )lst[ 0 ];                      if( CPUInfo == null )                          Console.WriteLine( " No CPU Information." );                      else                      {                          Console.WriteLine( " CPU Information: " );                          Console.Write( "   CurrentSpeed: " );                          Console.Write( CPUInfo.CurrentSpeed );                          Console.Write( " MHz  Core Count: " );                          Console.WriteLine( CPUInfo.CoreCount );                          Console.WriteLine( CPUInfo.ProcessorManufacturer );                      }                  }                                       }
Magic Number,Cosmos.Hardware.SMBIOS,TestProgram,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\TestProgram.cs,Init,The following statement contains a magic number: if( a.CheckSMBIOS() )              {                  a.GetSMBIOS_Data();                     Console.Write( " SMBios found at: 0x" );                  //Console.Write(Cosmos.Kernel.HexExtension.ToHex(a.SMBBIOSAddress' 8));                  Console.Write( " Version: " );                  Console.Write(a.SMBIOS_Data.SMBIOSMajorVersion);                  Console.Write( "." );                  Console.WriteLine(a.SMBIOS_Data.SMBIOSMinorVersion);                    Console.Write( " Signature: " );                  //Console.WriteLine( Cosmos.Kernel.HexExtension.ToHex( a.Signature ) );                    Console.WriteLine( " SMBIOS dump: " );                    DumpBytes( a.SMBBIOSAddress' 32' 16 );                  Console.WriteLine( "" );                    //Console.Write( " SMBIOS anchor:  " );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.AnchorString[ 0 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.AnchorString[ 1 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.AnchorString[ 2 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.AnchorString[ 3 ] ) );                    //Console.Write( " DMI anchor: " );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 0 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 1 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 2 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 3 ] ) );                  //Console.Write( Cosmos.Kernel.HexExtension.ToHex( a.SMBIOS_Data.IntermediateAnchorString[ 4 ] ) );                    Console.Write( " Number of tables:" );                  Console.Write( a.SMBIOS_Data.NumberOfSMBIOSStructures );                    Console.WriteLine( "" );                  Console.Write( a.SMBIOS_Data.StructureTableLength );                  Console.WriteLine( " bytes of data" );                                    Console.Write( " Reading " );                  Console.Write(" tables... " );                  int read = a.ReadTables();                  Console.Write( read );                  Console.WriteLine( " tables read." );                    Console.WriteLine( " Found Hardware Types:" );                   for( int i = 0; i < a.TableList.Count; i++ )                  {                      Console.Write( a.TableList[ i ].TableType );                      Console.Write( " " );                  }                  Console.WriteLine( "" );                     Console.Write( " Interpreting data... " );                  a.InterpretData();                   Console.WriteLine( " done." );                      List<BaseInfo> lst = a.GetHardwareDescriptorByType( TableTypes.BIOSInformation );                  BIOSTable biosinfo;                  if( lst.Count > 0 )                  {                      BaseInfo ht = lst[ 0 ];                      biosinfo = ( BIOSTable )ht;                      Console.WriteLine( " BIOS Information: " );                      Console.Write( "   Vendor: " );                      Console.WriteLine( biosinfo.Vendor );                    }                      ProcessorInformation CPUInfo;                  lst = a.GetHardwareDescriptorByType( TableTypes.ProcessorInformation );                    if( lst.Count > 0 )                  {                      CPUInfo = ( ProcessorInformation )lst[ 0 ];                      if( CPUInfo == null )                          Console.WriteLine( " No CPU Information." );                      else                      {                          Console.WriteLine( " CPU Information: " );                          Console.Write( "   CurrentSpeed: " );                          Console.Write( CPUInfo.CurrentSpeed );                          Console.Write( " MHz  Core Count: " );                          Console.WriteLine( CPUInfo.CoreCount );                          Console.WriteLine( CPUInfo.ProcessorManufacturer );                      }                  }                                       }
Magic Number,Cosmos.Hardware.SMBIOS.Table,ProcessorInformation,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\Classes\ProcessorInformation.cs,ProcessorInformation,The following statement contains a magic number: if( bt.SMBIOSMinorVersion >= 3 )              {                    SerialNumber = bt.GetString( bt.Data.Read8Unchecked( 0x20 ) );                  AssetTag = bt.GetString( bt.Data.Read8Unchecked( 0x21 ) );                  PartNumber = bt.GetString( bt.Data.Read8Unchecked( 0x22 ) );              }              else return;
Magic Number,Cosmos.Hardware.SMBIOS.Table,ProcessorInformation,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\Classes\ProcessorInformation.cs,ProcessorInformation,The following statement contains a magic number: if( bt.SMBIOSMinorVersion >= 5 )              {                    CoreCount = bt.Data.Read8Unchecked( 0x23 );                  CoreEnabled = bt.Data.Read8Unchecked( 0x24 );                  ThreadCount = bt.Data.Read8Unchecked( 0x25 );                  ProcessorCharacteristics = bt.Data.Read16Unchecked( 0x26 );              }              else return;
Magic Number,Cosmos.Hardware.SMBIOS.Table,ProcessorInformation,C:\repos\CosmosOS_Cosmos\source\Archive\Cosmos.Hardware.SMBIOS\SMBIOS Tables\Classes\ProcessorInformation.cs,ProcessorInformation,The following statement contains a magic number: if( bt.SMBIOSMinorVersion >= 6 )              {                  ProcessorFamily2 = bt.Data.Read16Unchecked( 0x28 );              }              else return;
