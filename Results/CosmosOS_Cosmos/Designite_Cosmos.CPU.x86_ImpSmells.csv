Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cosmos.CPU.x86.Memory.Old,Heap,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\Memory\Old\Old_Heap.cs,MemAlloc,Cyclomatic complexity of the method is 11
Complex Method,Cosmos.CPU.x86.Memory.Old,Heap,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\Memory\Old\Old_Heap.cs,ScanDataLookupTable,Cyclomatic complexity of the method is 8
Long Parameter List,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The method has 5 parameters. Parameters: aEIP' aDescription' aName' ctx' lastKnownAddressValue
Long Statement,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleInterrupt_09,The length of the statement  "            HandleException(aContext.EIP' "Coprocessor Segment Overrun Exception"' "Coprocessor Segment Overrun Exception"' ref aContext); " is 126.
Long Statement,Cosmos.CPU.x86,PIC,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\PIC.cs,Init,The length of the statement  "            //#define ICW4_AUTO	0x02		/C:\Data\Cosmos\source2\Kernel\System\Hardware\Core\Cosmos.Core\Processor.cs* Auto (normal) EOI */ " is 124.
Long Statement,Cosmos.CPU.x86.Memory.Old,Heap,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\Memory\Old\Old_Heap.cs,MemAlloc,The length of the statement  "                    mDebugger.Send("    Something seriously weird happened: we could create a new DataLookupTable (with new entries)' but couldn't allocate a new handle from it."); " is 160.
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleInterrupt_35,The following statement contains a magic number: aContext.EAX *= 2;
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleInterrupt_35,The following statement contains a magic number: aContext.EBX *= 2;
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleInterrupt_35,The following statement contains a magic number: aContext.ECX *= 2;
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleInterrupt_35,The following statement contains a magic number: aContext.EDX *= 2;
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,HandleException,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                  PutErrorChar(0' 00' ' ');                  PutErrorChar(0' 01' '*');                  PutErrorChar(0' 02' '*');                  PutErrorChar(0' 03' '*');                  PutErrorChar(0' 04' ' ');                  PutErrorChar(0' 05' 'C');                  PutErrorChar(0' 06' 'P');                  PutErrorChar(0' 07' 'U');                  PutErrorChar(0' 08' ' ');                  PutErrorChar(0' 09' 'E');                  PutErrorChar(0' 10' 'x');                  PutErrorChar(0' 11' 'c');                  PutErrorChar(0' 12' 'e');                  PutErrorChar(0' 13' 'p');                  PutErrorChar(0' 14' 't');                  PutErrorChar(0' 15' 'i');                  PutErrorChar(0' 16' 'o');                  PutErrorChar(0' 17' 'n');                  PutErrorChar(0' 18' ' ');                  PutErrorChar(0' 19' 'x');                  PutErrorChar(0' 20' xHex[(int)((ctx.Interrupt >> 4) & 0xF)]);                  PutErrorChar(0' 21' xHex[(int)(ctx.Interrupt & 0xF)]);                  PutErrorChar(0' 22' ' ');                  PutErrorChar(0' 23' '*');                  PutErrorChar(0' 24' '*');                  PutErrorChar(0' 25' '*');                  PutErrorChar(0' 26' ' ');                    if (lastKnownAddressValue != 0) {                      PutErrorString(1' 0' "Last known address: 0x");                        PutErrorChar(1' 22' xHex[(int)((lastKnownAddressValue >> 28) & 0xF)]);                      PutErrorChar(1' 23' xHex[(int)((lastKnownAddressValue >> 24) & 0xF)]);                      PutErrorChar(1' 24' xHex[(int)((lastKnownAddressValue >> 20) & 0xF)]);                      PutErrorChar(1' 25' xHex[(int)((lastKnownAddressValue >> 16) & 0xF)]);                      PutErrorChar(1' 26' xHex[(int)((lastKnownAddressValue >> 12) & 0xF)]);                      PutErrorChar(1' 27' xHex[(int)((lastKnownAddressValue >> 8) & 0xF)]);                      PutErrorChar(1' 28' xHex[(int)((lastKnownAddressValue >> 4) & 0xF)]);                      PutErrorChar(1' 29' xHex[(int)(lastKnownAddressValue & 0xF)]);                  }                }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,PutErrorChar,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                    xAddress += ((line * 80) + col) * 2;                    xAddress[0] = (byte)c;                  xAddress[1] = 0x0C;              }
Magic Number,Cosmos.CPU.x86,INTs,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\INTs.cs,PutErrorChar,The following statement contains a magic number: unsafe              {                  byte* xAddress = (byte*)0xB8000;                    xAddress += ((line * 80) + col) * 2;                    xAddress[0] = (byte)c;                  xAddress[1] = 0x0C;              }
Magic Number,Cosmos.CPU.x86,IOPortBase,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\IOPort.cs,Read8,The following statement contains a magic number: for (int i = 0; i < aData.Length / 2; i++) {                  xValue = Read16(Port);                  aData[i * 2] = (byte)xValue;                  aData[i * 2 + 1] = (byte)(xValue >> 8);              }
Magic Number,Cosmos.CPU.x86,IOPortBase,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\IOPort.cs,Read8,The following statement contains a magic number: for (int i = 0; i < aData.Length / 2; i++) {                  xValue = Read16(Port);                  aData[i * 2] = (byte)xValue;                  aData[i * 2 + 1] = (byte)(xValue >> 8);              }
Magic Number,Cosmos.CPU.x86,IOPortBase,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\IOPort.cs,Read8,The following statement contains a magic number: for (int i = 0; i < aData.Length / 2; i++) {                  xValue = Read16(Port);                  aData[i * 2] = (byte)xValue;                  aData[i * 2 + 1] = (byte)(xValue >> 8);              }
Magic Number,Cosmos.CPU.x86,IOPortBase,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\IOPort.cs,Read8,The following statement contains a magic number: for (int i = 0; i < aData.Length / 2; i++) {                  xValue = Read16(Port);                  aData[i * 2] = (byte)xValue;                  aData[i * 2 + 1] = (byte)(xValue >> 8);              }
Magic Number,Cosmos.CPU.x86,PIC,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\PIC.cs,Remap,The following statement contains a magic number: Master.Data.Byte = 4;
Magic Number,Cosmos.CPU.x86,PIC,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\PIC.cs,Remap,The following statement contains a magic number: Slave.Data.Byte = 2;
Magic Number,Cosmos.CPU.x86.Memory.Old,GlobalSystemInfo,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\Memory\Old\GlobalSystemInfo.cs,EnsureInitialized,The following statement contains a magic number: if (mGlobalInformationTable == null) {                  // todo: should we align this structure somehow?                    var xEndOfKernel = Processor.GetEndOfKernel();                  xEndOfKernel = xEndOfKernel + (1024 * 1024); // for now' skip 1 MB                  Processor.ZeroFill(xEndOfKernel' (uint)(sizeof(GlobalInformationTable) + TotalDataLookupTableSize) * 4);                  mGlobalInformationTable = (GlobalInformationTable*)xEndOfKernel;                  uint xFirstDataLookupLocation = (uint)(xEndOfKernel + sizeof(GlobalInformationTable));                  //Debugger.DoSend("Setting FirstDataLookupTable to ");                  //Debugger.DoSendNumber(xFirstDataLookupLocation);                  mGlobalInformationTable->FirstDataLookupTable = (DataLookupTable*)xFirstDataLookupLocation;                  //Debugger.DoSend("FirstDataLookupTable was set to ");                  //Debugger.DoSendNumber((uint)mGlobalInformationTable->FirstDataLookupTable);              }
Magic Number,Cosmos.CPU.x86.Memory.Old,GlobalSystemInfo,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\Memory\Old\GlobalSystemInfo.cs,EnsureInitialized,The following statement contains a magic number: if (mGlobalInformationTable == null) {                  // todo: should we align this structure somehow?                    var xEndOfKernel = Processor.GetEndOfKernel();                  xEndOfKernel = xEndOfKernel + (1024 * 1024); // for now' skip 1 MB                  Processor.ZeroFill(xEndOfKernel' (uint)(sizeof(GlobalInformationTable) + TotalDataLookupTableSize) * 4);                  mGlobalInformationTable = (GlobalInformationTable*)xEndOfKernel;                  uint xFirstDataLookupLocation = (uint)(xEndOfKernel + sizeof(GlobalInformationTable));                  //Debugger.DoSend("Setting FirstDataLookupTable to ");                  //Debugger.DoSendNumber(xFirstDataLookupLocation);                  mGlobalInformationTable->FirstDataLookupTable = (DataLookupTable*)xFirstDataLookupLocation;                  //Debugger.DoSend("FirstDataLookupTable was set to ");                  //Debugger.DoSendNumber((uint)mGlobalInformationTable->FirstDataLookupTable);              }
Magic Number,Cosmos.CPU.x86.Memory.Old,GlobalSystemInfo,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\Memory\Old\GlobalSystemInfo.cs,EnsureInitialized,The following statement contains a magic number: if (mGlobalInformationTable == null) {                  // todo: should we align this structure somehow?                    var xEndOfKernel = Processor.GetEndOfKernel();                  xEndOfKernel = xEndOfKernel + (1024 * 1024); // for now' skip 1 MB                  Processor.ZeroFill(xEndOfKernel' (uint)(sizeof(GlobalInformationTable) + TotalDataLookupTableSize) * 4);                  mGlobalInformationTable = (GlobalInformationTable*)xEndOfKernel;                  uint xFirstDataLookupLocation = (uint)(xEndOfKernel + sizeof(GlobalInformationTable));                  //Debugger.DoSend("Setting FirstDataLookupTable to ");                  //Debugger.DoSendNumber(xFirstDataLookupLocation);                  mGlobalInformationTable->FirstDataLookupTable = (DataLookupTable*)xFirstDataLookupLocation;                  //Debugger.DoSend("FirstDataLookupTable was set to ");                  //Debugger.DoSendNumber((uint)mGlobalInformationTable->FirstDataLookupTable);              }
Magic Number,Cosmos.CPU.x86.Memory.Old,Heap,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\Memory\Old\Old_Heap.cs,EnsureIsInitialized,The following statement contains a magic number: if (!mInitialized)              {                  mInitialized = true;                  DoInitialize((Processor.GetAmountOfRAM() - 1) * 1024 * 1024);                  //DoInitialize(4 * 1024 * 1024' 16 * 1024 * 1024);              }
Magic Number,Cosmos.CPU.x86.Memory.Old,Heap,C:\repos\CosmosOS_Cosmos\source\Kernel-X86\10-CPU\Cosmos.CPU.x86\Memory\Old\Old_Heap.cs,EnsureIsInitialized,The following statement contains a magic number: if (!mInitialized)              {                  mInitialized = true;                  DoInitialize((Processor.GetAmountOfRAM() - 1) * 1024 * 1024);                  //DoInitialize(4 * 1024 * 1024' 16 * 1024 * 1024);              }
