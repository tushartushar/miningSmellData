Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,InitializeKeyValues,The length of the statement  "                                     + "ata1-master: type=disk' path=\"%HARDDISKPATH%\"' mode=vmware4' cylinders=0' heads=0' spt=0' model=\"Generic 1234\"' biosdetect=auto' translation=auto\n" " is 155.
Long Statement,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,InitializeKeyValues,The length of the statement  "                                     //+ "cpu: count=1' ips=4000000' model=bx_generic' reset_on_triple_fault=1' cpuid_limit_winnt=0' ignore_bad_msrs=1' mwait_is_nop=0\n" " is 132.
Long Statement,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,InitializeKeyValues,The length of the statement  "                                     + "cpu: count=1' ips=4000000' model=p4_prescott_celeron_336' reset_on_triple_fault=1' cpuid_limit_winnt=0' ignore_bad_msrs=1' mwait_is_nop=0\n" " is 143.
Long Statement,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,InitializeKeyValues,The length of the statement  "      defaultConfigs["debug_symbols"] = defaultConfigs["debug_symbols"].Replace("%DEBUGSYMBOLSPATH%"' Path.ChangeExtension(mParams["ISOFile"]' "sym")); " is 145.
Long Statement,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,FixBochsConfiguration,The length of the statement  "      using (StreamReader reader = new StreamReader(File.Open(_bochsConfigurationFile.FullName' FileMode.Open' FileAccess.Read))) " is 123.
Long Statement,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,FixBochsConfiguration,The length of the statement  "      using (StreamWriter writer = new StreamWriter(File.Open(_bochsConfigurationFile.FullName' FileMode.Create' FileAccess.Write))) " is 126.
Long Statement,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,Start,The length of the statement  "      BochsSupport.ExtractBochsDebugSymbols(Path.ChangeExtension(mParams["ISOFile"]' "map")' Path.ChangeExtension(mParams["ISOFile"]' "sym")); " is 136.
Long Statement,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,Start,The length of the statement  "      _bochsStartInfo.CreateNoWindow = true; // when ProcessStartInfo.UseShellExecute is supported in .net core' maybe this line isn't needed " is 135.
Long Statement,Cosmos.Debug.Hosts,HyperV,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\HyperV.cs,CreateVirtualMachine,The length of the statement  "            RunPowershellScript($@"Add-VMHardDiskDrive -VMName Cosmos -ControllerNumber 0 -ControllerLocation 0 -Path ""{mHarddiskPath}"""); " is 128.
Long Statement,Cosmos.Debug.Hosts,HyperV,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\HyperV.cs,CreateVirtualMachine,The length of the statement  "            RunPowershellScript($@"Set-VMDvdDrive -VMName Cosmos -ControllerNumber 1 -ControllerLocation 0 -Path ""{mParams["ISOFile"]}"""); " is 128.
Long Statement,Cosmos.Debug.Hosts,VMware,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\VMware.cs,Start,The length of the statement  "      xPSI.UseShellExecute = false;  //must be true to allow elevate the process' sometimes needed if vmware only runs with admin rights " is 130.
Long Statement,Cosmos.Debug.Hosts,VMware,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\VMware.cs,CreateDebugVmx,The length of the statement  "            throw new Exception("The VMware image " + mDir + " is still in use. Please exit current Vmware session with Cosmos and try again."' ex); " is 136.
Empty Catch Block,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,ExitCallback,The method has an empty catch block.
Empty Catch Block,Cosmos.Debug.Hosts,Bochs,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Bochs.Configuration.cs,Stop,The method has an empty catch block.
Empty Catch Block,Cosmos.Debug.Hosts,VMware,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\VMware.cs,Cleanup,The method has an empty catch block.
Magic Number,Cosmos.Debug.Hosts,Slave,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Slave.cs,WaitForPrompt,The following statement contains a magic number: xSB.Length = xSB.Length - 2;
Magic Number,Cosmos.Debug.Hosts,Slave,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Slave.cs,TogglePowerSwitch,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Cosmos.Debug.Hosts,Slave,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Slave.cs,WaitPowerState,The following statement contains a magic number: while (IsOn() == !aOn) {          Thread.Sleep(250);          xCount++;          // 5 seconds          if (xCount == 20) {            throw new Exception("Slave did not respond to power command.");          }        }
Magic Number,Cosmos.Debug.Hosts,Slave,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Slave.cs,WaitPowerState,The following statement contains a magic number: while (IsOn() == !aOn) {          Thread.Sleep(250);          xCount++;          // 5 seconds          if (xCount == 20) {            throw new Exception("Slave did not respond to power command.");          }        }
Magic Number,Cosmos.Debug.Hosts,Slave,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Slave.cs,Start,The following statement contains a magic number: if (IsOn()) {          TogglePowerSwitch();          WaitPowerState(false);          // Small pause for discharge          Thread.Sleep(1000);        }
Magic Number,Cosmos.Debug.Hosts,Slave,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\Slave.cs,Start,The following statement contains a magic number: if (OnShutDown != null) {          mPowerStateThread = new Thread(delegate() {            while (true) {              Thread.Sleep(1000);              if (!IsOn()) {                mPort.Close();                OnShutDown(this' EventArgs.Empty);                break;              }            }          });          mPowerStateThread.Start();        }
Magic Number,Cosmos.Debug.Hosts,VMware,C:\repos\CosmosOS_Cosmos\source\Cosmos.Debug.Hosts\VMware.cs,CreateDebugVmx,The following statement contains a magic number: using (var xSrc = new StreamReader(File.Open(Path.Combine(mDir' "Cosmos.vmx")' FileMode.OpenOrCreate))) {          try {            // Write out Debug.vmx            using (var xDest = new StreamWriter(File.Open(mVmxPath' FileMode.Create))) {              string xLine;              while ((xLine = xSrc.ReadLine()) != null) {                var xParts = xLine.Split('=');                if (xParts.Length == 2) {                  string xName = xParts[0].Trim();                  string xValue = xParts[1].Trim();                    if ((xName == "uuid.location") || (xName == "uuid.bios")) {                    // We delete uuid entries so VMWare doesnt ask the user "Did you move or copy" the file                    xValue = null;                    } else if (xName == "ide1:0.fileName")                  {                    // Set the ISO file for booting                    xValue = "\"" + mParams["ISOFile"] + "\"";                  } else if (xName == "ide0:0.fileName") {                    xValue = "\"" + mHarddisk + "\"";                  } else if (xName == "nvram") {                    // Point it to an initially non-existent nvram.                    // This has the effect of disabling PXE so the boot is faster.                    xValue = "\"Debug.nvram\"";                  }                    if (xValue != null) {                    xDest.WriteLine(xName + " = " + xValue);                  }                }              }                if (mUseGDB) {                xDest.WriteLine();                xDest.WriteLine("debugStub.listen.guest32 = \"TRUE\"");                xDest.WriteLine("debugStub.hideBreakpoints = \"TRUE\"");                xDest.WriteLine("monitor.debugOnStartGuest32 = \"TRUE\"");                xDest.WriteLine("debugStub.listen.guest32.remote = \"TRUE\"");              }            }          } catch (IOException ex) {            if (ex.Message.Contains(Path.GetFileName(mDir))) {              throw new Exception("The VMware image " + mDir + " is still in use. Please exit current Vmware session with Cosmos and try again."' ex);            }            throw;          }        }
