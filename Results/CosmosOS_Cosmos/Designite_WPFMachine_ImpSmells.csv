Implementation smell,Namespace,Class,File,Method,Description
Long Method,WPFMachine,BlorbMetadata,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\BlorbMetadata.xaml.cs,BlorbMetadata,The method has 105 lines of code.
Long Method,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,DisplayChar,The method has 110 lines of code.
Complex Method,WPFMachine,BlorbMetadata,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\BlorbMetadata.xaml.cs,BlorbMetadata,Cyclomatic complexity of the method is 8
Long Parameter List,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,ScrollArea,The method has 5 parameters. Parameters: top' bottom' left' right' units
Long Parameter List,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,SetWindowSize,The method has 5 parameters. Parameters: win' top' left' height' width
Long Parameter List,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,ScrollArea,The method has 5 parameters. Parameters: top' bottom' left' right' units
Long Parameter List,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,buildFormattedText,The method has 5 parameters. Parameters: Text' Font' UseDisplayMode' changes' dc
Long Parameter List,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,SetWindowSize,The method has 5 parameters. Parameters: win' top' left' height' width
Long Statement,WPFMachine,ScreenBase,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\ScreenBase.cs,SetCharsAndLines,The length of the statement  "            chars = Convert.ToInt32(Math.Floor(screenWidth / charWidth)); // Determine chars based only on fixed width chars since proportional fonts are accounted for as they are written " is 175.
Long Statement,WPFMachine,ScreenBase,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\ScreenBase.cs,SetCharsAndLines,The length of the statement  "                new ZSize(lines * charHeight' chars * charWidth)' // The ZMachine wouldn't take screenHeight as round it down' so this takes care of that " is 137.
Long Statement,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,DisplayChar,The length of the statement  "                    //String temp = String.Format("<Canvas xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">{0}</Canvas>"' Frotz.Other.GraphicsFont.getLines(c)); " is 160.
Long Statement,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,SendStringToScreen,The length of the statement  "                RenderTargetBitmap bmp = new RenderTargetBitmap((int)dv.ContentBounds.Width' (int)charHeight' 96' 96' PixelFormats.Pbgra32); " is 124.
Long Statement,WPFMachine.Screen,OverlayAdorner,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\OverlayAdorner.cs,OnRender,The length of the statement  "                        drawingContext.DrawRectangle(b' null' new Rect(at.X + 2' at.Y + 2' ft.WidthIncludingTrailingWhitespace' Math.Max(ft.Height' FontHeight))); " is 138.
Long Statement,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,SetCharsAndLines,The length of the statement  "            chars = Convert.ToInt32(Math.Floor(screenWidth / charWidth)); // Determine chars based only on fixed width chars since proportional fonts are accounted for as they are written " is 175.
Long Statement,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,SetCharsAndLines,The length of the statement  "                new ZSize(lines * charHeight' chars * charWidth)' // The ZMachine wouldn't take screenHeight as round it down' so this takes care of that " is 137.
Long Statement,WPFMachine.Screen,ZTextControl,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\ZTextControl.xaml.cs,SetCurrentParagraph,The length of the statement  "                System.Diagnostics.Debug.WriteLine("Not matching an existing paragraph:" + _cursorY + ":" + _metrics.FontSize.Height + ":" + _metrics.WindowSize.Height); " is 153.
Complex Conditional,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,ClearArea,The conditional expression  "top == 1 && left == 1 && bottom == _metrics.WindowSize.Height && right == _metrics.WindowSize.Width"  is complex.
Complex Conditional,WPFMachine.Screen,ZParagraph,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\ZParagraph.cs,Flush,The conditional expression  "Inlines.Count == 1 && FirstInline.DisplayInfo.AreSame(_currentInfo) &&                      (FirstInline.DisplayInfo.Font == ZFont.FIXED_WIDTH_FONT ||                      FirstInline.DisplayInfo.ImplementsStyle(ZStyles.FIXED_WIDTH_STYLE))"  is complex.
Empty Catch Block,WPFMachine,MainWindow,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\MainWindow.xaml.cs,setupGameDirectories,The method has an empty catch block.
Empty Catch Block,WPFMachine,MainWindow,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\MainWindow.xaml.cs,setupGameDirectories,The method has an empty catch block.
Empty Catch Block,WPFMachine,MainWindow,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\MainWindow.xaml.cs,ZMachineThread,The method has an empty catch block.
Empty Catch Block,WPFMachine,MainWindow,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\MainWindow.xaml.cs,ZMachineThread,The method has an empty catch block.
Empty Catch Block,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,DrawPicture,The method has an empty catch block.
Magic Number,WPFMachine,BlorbMetadata,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\BlorbMetadata.xaml.cs,checkSize,The following statement contains a magic number: if (resized == false && rtb.ActualHeight > 0 && imgCover.ActualHeight > 0)              {                  this.Height = rtb.ActualHeight + imgCover.ActualHeight + 50 + (this.ActualHeight - LayoutRoot.ActualHeight);                    resized = true;              }
Magic Number,WPFMachine,FrotzSound,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\FrozSound.cs,LoadSound,The following statement contains a magic number: for (int i = 0; i < 1000 && temp == null; i++)              {                  try                  {                      temp = String.Format("{0}\\{1}.aiff"' Path.GetTempPath()' i);                        FileStream fs = new FileStream(temp' FileMode.Create);                      fs.Write(Sound' 0' Sound.Length);                      fs.Close();                  }                  catch (System.IO.IOException)                  {                      i++;                        temp = null;                  }              }
Magic Number,WPFMachine,OptionsScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\OptionsScreen.xaml.cs,OptionsScreen,The following statement contains a magic number: foreach (var ff in Fonts.SystemFontFamilies)              {                  count++;                    FormattedText ft = new FormattedText("i"' System.Globalization.CultureInfo.CurrentCulture'                      FlowDirection.LeftToRight' new Typeface(ff.Source)' 10' Brushes.Black);                    var s = new Size(ft.Width' ft.Height);                    ft = new FormattedText("w"' System.Globalization.CultureInfo.CurrentCulture'                      FlowDirection.LeftToRight' new Typeface(ff.Source)' 10' Brushes.Black);                    if (ft.Width == s.Width)                  {                      fixedWidthFonts.Add(ff);                        maxFixedHeight = Math.Max(maxFixedHeight' ft.Height);                      if (ff.Source == settings.FixedWidthFont)                      {                          fixedWidthCurrent = ff;                      }                  }                                 otherWidthFonts.Add(ff);                  maxPropHeight = Math.Max(maxPropHeight' ft.Height);                  if (ff.Source == settings.ProportionalFont)                  {                      propWidthCurrent = ff;                  }                }
Magic Number,WPFMachine,OptionsScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\OptionsScreen.xaml.cs,OptionsScreen,The following statement contains a magic number: foreach (var ff in Fonts.SystemFontFamilies)              {                  count++;                    FormattedText ft = new FormattedText("i"' System.Globalization.CultureInfo.CurrentCulture'                      FlowDirection.LeftToRight' new Typeface(ff.Source)' 10' Brushes.Black);                    var s = new Size(ft.Width' ft.Height);                    ft = new FormattedText("w"' System.Globalization.CultureInfo.CurrentCulture'                      FlowDirection.LeftToRight' new Typeface(ff.Source)' 10' Brushes.Black);                    if (ft.Width == s.Width)                  {                      fixedWidthFonts.Add(ff);                        maxFixedHeight = Math.Max(maxFixedHeight' ft.Height);                      if (ff.Source == settings.FixedWidthFont)                      {                          fixedWidthCurrent = ff;                      }                  }                                 otherWidthFonts.Add(ff);                  maxPropHeight = Math.Max(maxPropHeight' ft.Height);                  if (ff.Source == settings.ProportionalFont)                  {                      propWidthCurrent = ff;                  }                }
Magic Number,WPFMachine,OptionsScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\OptionsScreen.xaml.cs,addDirectory,The following statement contains a magic number: gdListRow.Height = new GridLength(spGameList.Children.Count * 30);
Magic Number,WPFMachine,OptionsScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\OptionsScreen.xaml.cs,gd_Click,The following statement contains a magic number: gdListRow.Height = new GridLength(spGameList.Children.Count * 30);
Magic Number,WPFMachine,ScreenBase,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\ScreenBase.cs,SetCharsAndLines,The following statement contains a magic number: double screenWidth = width - 20;
Magic Number,WPFMachine,ScreenBase,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\ScreenBase.cs,SetCharsAndLines,The following statement contains a magic number: double screenHeight = height - 20;
Magic Number,WPFMachine,ZColorCheck,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Support\ZColorCheck.cs,ZColorToColor,The following statement contains a magic number: switch (color)              {                  case ZColor.BLACK_COLOUR:                      return Colors.Black;                  case ZColor.BLUE_COLOUR:                      return c64Blue;                  case ZColor.CYAN_COLOUR:                      return Colors.Cyan;                  case ZColor.DARKGREY_COLOUR:                      return Colors.DarkGray;                  case ZColor.GREEN_COLOUR:                      return Colors.Green;                  // case ZColor.LIGHTGREY_COLOUR: // Light Grey & Grey both equal 10                  case ZColor.GREY_COLOUR:                      return Colors.Gray;                  case ZColor.MAGENTA_COLOUR:                      return Colors.Magenta;                  case ZColor.MEDIUMGREY_COLOUR:                      return Colors.DimGray;                  case ZColor.RED_COLOUR:                      return Colors.Red;                  case ZColor.TRANSPARENT_COLOUR:                      return Colors.Transparent;                  case ZColor.WHITE_COLOUR:                      return Colors.White;                  case ZColor.YELLOW_COLOUR:                      return Colors.Yellow;                  case 32:                      return Properties.Settings.Default.DefaultInputColor;              }
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,DisplayChar,The following statement contains a magic number: if (_currentInfo.Font == ZFont.GRAPHICS_FONT)              {                    invoke(() =>                  {  #if !TEMP                      String lines = null;                      if (graphicsChars.ContainsKey(c))                      {                          lines = graphicsChars[c];                      }                      else                      {                          String temp = Frotz.Other.GraphicsFont.getLines(c);                          StringBuilder sb = new StringBuilder();                            for (int i = 0; i < 8; i++)                          {                              int x = Convert.ToInt32(temp.Substring(i * 2' 2)' 16);                              for (int j = 0; j < 8; j++)                              {                                  int toggled = (x >> j) & 1;                                  if (toggled == 1)                                  {                                      //sb.AppendFormat("<Line X1=\"{0}\" Y1=\"{1}\" X2=\"{2}\" Y2=\"{3}\" Stroke=\"White\" StrokeThickness=\"1\" />\r\n"'                                      //    j' i' j + 1' i + 1);                                      sb.AppendFormat("M {0} {1} L {2} {3} "'                                          j' i' j + 1' i);                                  }                              }                          }                          lines = String.Format(@"      <Image xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation"" Width=""8"" Height=""8"" Stretch=""None"">          <Image.Source>              <DrawingImage>                  <DrawingImage.Drawing>                      <GeometryDrawing Geometry=""{0} "">                          <GeometryDrawing.Pen>                              <Pen Brush=""White"" Thickness=""1"" />                          </GeometryDrawing.Pen>                      </GeometryDrawing>                  </DrawingImage.Drawing>              </DrawingImage>          </Image.Source>      </Image>"' sb.ToString());                            sb.ToString();                          graphicsChars.Add(c' lines);                            //var sw = new System.IO.StreamWriter(String.Format(@"c:\temp\{0}.xaml"' (byte)c));                          //sw.Write(lines);                          //sw.Close();                      }                        //String temp = String.Format("<Canvas xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">{0}</Canvas>"' Frotz.Other.GraphicsFont.getLines(c));                      //temp = temp.Replace("Black"' "White");                      Image img = System.Windows.Markup.XamlReader.Parse(lines) as Image;                        Canvas cnvs = new Canvas();                      cnvs.Children.Add(img);                        img.SnapsToDevicePixels = true;                      // img.Stretch = Stretch.Uniform;                        cnvs.SetValue(Canvas.TopProperty' (double)_cursorY);                      cnvs.SetValue(Canvas.LeftProperty' (double)_cursorX);                      cnvs.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      cnvs.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(cnvs);      #else                          var bmp = Frotz.Other.GraphicsFont.getImage(c);                        var ms = new System.IO.MemoryStream();                      bmp.Save(ms' System.Drawing.Imaging.ImageFormat.Bmp);                        bmp.Save("C:\\TEMP\\TEST.BMP");                        ms.Position = 0;                      Image img = new Image();                      BitmapImage bi = new BitmapImage();                      bi.BeginInit();                      bi.StreamSource = ms;                      bi.EndInit();                      img.Source = bi;                        img.Stretch = Stretch.Fill;                        img.SetValue(Canvas.TopProperty' (double)_cursorY);                      img.SetValue(Canvas.LeftProperty' (double)_cursorX);                      img.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      img.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        // _cursorX += Convert.ToInt32(bi.Width);                      _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(img);                        //Image img = new Image();                      //img.Source = null;                        //BitmapImage bi = new BitmapImage();                      //                         //Image img = new Image();                      //BitmapImage bi = new BitmapImage();                      //bi.BeginInit();                      //bi.StreamSource = new System.IO.MemoryStream(ScaleImages.Scale(buffer' scale));                      //bi.EndInit();                      //img.Source = bi;                        //int newX = x;                      //int newY = y;                        //if (newY > short.MaxValue) newY -= ushort.MaxValue;                      //if (newX > short.MaxValue) newX -= ushort.MaxValue;                        //img.SetValue(Canvas.TopProperty' (double)newY);                      //img.SetValue(Canvas.LeftProperty' (double)newX);                        //mainCanvas.Children.Add(img);  #endif                  });              }              else              {                  _currentText.Append(c);              }
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,DisplayChar,The following statement contains a magic number: if (_currentInfo.Font == ZFont.GRAPHICS_FONT)              {                    invoke(() =>                  {  #if !TEMP                      String lines = null;                      if (graphicsChars.ContainsKey(c))                      {                          lines = graphicsChars[c];                      }                      else                      {                          String temp = Frotz.Other.GraphicsFont.getLines(c);                          StringBuilder sb = new StringBuilder();                            for (int i = 0; i < 8; i++)                          {                              int x = Convert.ToInt32(temp.Substring(i * 2' 2)' 16);                              for (int j = 0; j < 8; j++)                              {                                  int toggled = (x >> j) & 1;                                  if (toggled == 1)                                  {                                      //sb.AppendFormat("<Line X1=\"{0}\" Y1=\"{1}\" X2=\"{2}\" Y2=\"{3}\" Stroke=\"White\" StrokeThickness=\"1\" />\r\n"'                                      //    j' i' j + 1' i + 1);                                      sb.AppendFormat("M {0} {1} L {2} {3} "'                                          j' i' j + 1' i);                                  }                              }                          }                          lines = String.Format(@"      <Image xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation"" Width=""8"" Height=""8"" Stretch=""None"">          <Image.Source>              <DrawingImage>                  <DrawingImage.Drawing>                      <GeometryDrawing Geometry=""{0} "">                          <GeometryDrawing.Pen>                              <Pen Brush=""White"" Thickness=""1"" />                          </GeometryDrawing.Pen>                      </GeometryDrawing>                  </DrawingImage.Drawing>              </DrawingImage>          </Image.Source>      </Image>"' sb.ToString());                            sb.ToString();                          graphicsChars.Add(c' lines);                            //var sw = new System.IO.StreamWriter(String.Format(@"c:\temp\{0}.xaml"' (byte)c));                          //sw.Write(lines);                          //sw.Close();                      }                        //String temp = String.Format("<Canvas xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">{0}</Canvas>"' Frotz.Other.GraphicsFont.getLines(c));                      //temp = temp.Replace("Black"' "White");                      Image img = System.Windows.Markup.XamlReader.Parse(lines) as Image;                        Canvas cnvs = new Canvas();                      cnvs.Children.Add(img);                        img.SnapsToDevicePixels = true;                      // img.Stretch = Stretch.Uniform;                        cnvs.SetValue(Canvas.TopProperty' (double)_cursorY);                      cnvs.SetValue(Canvas.LeftProperty' (double)_cursorX);                      cnvs.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      cnvs.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(cnvs);      #else                          var bmp = Frotz.Other.GraphicsFont.getImage(c);                        var ms = new System.IO.MemoryStream();                      bmp.Save(ms' System.Drawing.Imaging.ImageFormat.Bmp);                        bmp.Save("C:\\TEMP\\TEST.BMP");                        ms.Position = 0;                      Image img = new Image();                      BitmapImage bi = new BitmapImage();                      bi.BeginInit();                      bi.StreamSource = ms;                      bi.EndInit();                      img.Source = bi;                        img.Stretch = Stretch.Fill;                        img.SetValue(Canvas.TopProperty' (double)_cursorY);                      img.SetValue(Canvas.LeftProperty' (double)_cursorX);                      img.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      img.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        // _cursorX += Convert.ToInt32(bi.Width);                      _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(img);                        //Image img = new Image();                      //img.Source = null;                        //BitmapImage bi = new BitmapImage();                      //                         //Image img = new Image();                      //BitmapImage bi = new BitmapImage();                      //bi.BeginInit();                      //bi.StreamSource = new System.IO.MemoryStream(ScaleImages.Scale(buffer' scale));                      //bi.EndInit();                      //img.Source = bi;                        //int newX = x;                      //int newY = y;                        //if (newY > short.MaxValue) newY -= ushort.MaxValue;                      //if (newX > short.MaxValue) newX -= ushort.MaxValue;                        //img.SetValue(Canvas.TopProperty' (double)newY);                      //img.SetValue(Canvas.LeftProperty' (double)newX);                        //mainCanvas.Children.Add(img);  #endif                  });              }              else              {                  _currentText.Append(c);              }
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,DisplayChar,The following statement contains a magic number: if (_currentInfo.Font == ZFont.GRAPHICS_FONT)              {                    invoke(() =>                  {  #if !TEMP                      String lines = null;                      if (graphicsChars.ContainsKey(c))                      {                          lines = graphicsChars[c];                      }                      else                      {                          String temp = Frotz.Other.GraphicsFont.getLines(c);                          StringBuilder sb = new StringBuilder();                            for (int i = 0; i < 8; i++)                          {                              int x = Convert.ToInt32(temp.Substring(i * 2' 2)' 16);                              for (int j = 0; j < 8; j++)                              {                                  int toggled = (x >> j) & 1;                                  if (toggled == 1)                                  {                                      //sb.AppendFormat("<Line X1=\"{0}\" Y1=\"{1}\" X2=\"{2}\" Y2=\"{3}\" Stroke=\"White\" StrokeThickness=\"1\" />\r\n"'                                      //    j' i' j + 1' i + 1);                                      sb.AppendFormat("M {0} {1} L {2} {3} "'                                          j' i' j + 1' i);                                  }                              }                          }                          lines = String.Format(@"      <Image xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation"" Width=""8"" Height=""8"" Stretch=""None"">          <Image.Source>              <DrawingImage>                  <DrawingImage.Drawing>                      <GeometryDrawing Geometry=""{0} "">                          <GeometryDrawing.Pen>                              <Pen Brush=""White"" Thickness=""1"" />                          </GeometryDrawing.Pen>                      </GeometryDrawing>                  </DrawingImage.Drawing>              </DrawingImage>          </Image.Source>      </Image>"' sb.ToString());                            sb.ToString();                          graphicsChars.Add(c' lines);                            //var sw = new System.IO.StreamWriter(String.Format(@"c:\temp\{0}.xaml"' (byte)c));                          //sw.Write(lines);                          //sw.Close();                      }                        //String temp = String.Format("<Canvas xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">{0}</Canvas>"' Frotz.Other.GraphicsFont.getLines(c));                      //temp = temp.Replace("Black"' "White");                      Image img = System.Windows.Markup.XamlReader.Parse(lines) as Image;                        Canvas cnvs = new Canvas();                      cnvs.Children.Add(img);                        img.SnapsToDevicePixels = true;                      // img.Stretch = Stretch.Uniform;                        cnvs.SetValue(Canvas.TopProperty' (double)_cursorY);                      cnvs.SetValue(Canvas.LeftProperty' (double)_cursorX);                      cnvs.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      cnvs.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(cnvs);      #else                          var bmp = Frotz.Other.GraphicsFont.getImage(c);                        var ms = new System.IO.MemoryStream();                      bmp.Save(ms' System.Drawing.Imaging.ImageFormat.Bmp);                        bmp.Save("C:\\TEMP\\TEST.BMP");                        ms.Position = 0;                      Image img = new Image();                      BitmapImage bi = new BitmapImage();                      bi.BeginInit();                      bi.StreamSource = ms;                      bi.EndInit();                      img.Source = bi;                        img.Stretch = Stretch.Fill;                        img.SetValue(Canvas.TopProperty' (double)_cursorY);                      img.SetValue(Canvas.LeftProperty' (double)_cursorX);                      img.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      img.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        // _cursorX += Convert.ToInt32(bi.Width);                      _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(img);                        //Image img = new Image();                      //img.Source = null;                        //BitmapImage bi = new BitmapImage();                      //                         //Image img = new Image();                      //BitmapImage bi = new BitmapImage();                      //bi.BeginInit();                      //bi.StreamSource = new System.IO.MemoryStream(ScaleImages.Scale(buffer' scale));                      //bi.EndInit();                      //img.Source = bi;                        //int newX = x;                      //int newY = y;                        //if (newY > short.MaxValue) newY -= ushort.MaxValue;                      //if (newX > short.MaxValue) newX -= ushort.MaxValue;                        //img.SetValue(Canvas.TopProperty' (double)newY);                      //img.SetValue(Canvas.LeftProperty' (double)newX);                        //mainCanvas.Children.Add(img);  #endif                  });              }              else              {                  _currentText.Append(c);              }
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,DisplayChar,The following statement contains a magic number: if (_currentInfo.Font == ZFont.GRAPHICS_FONT)              {                    invoke(() =>                  {  #if !TEMP                      String lines = null;                      if (graphicsChars.ContainsKey(c))                      {                          lines = graphicsChars[c];                      }                      else                      {                          String temp = Frotz.Other.GraphicsFont.getLines(c);                          StringBuilder sb = new StringBuilder();                            for (int i = 0; i < 8; i++)                          {                              int x = Convert.ToInt32(temp.Substring(i * 2' 2)' 16);                              for (int j = 0; j < 8; j++)                              {                                  int toggled = (x >> j) & 1;                                  if (toggled == 1)                                  {                                      //sb.AppendFormat("<Line X1=\"{0}\" Y1=\"{1}\" X2=\"{2}\" Y2=\"{3}\" Stroke=\"White\" StrokeThickness=\"1\" />\r\n"'                                      //    j' i' j + 1' i + 1);                                      sb.AppendFormat("M {0} {1} L {2} {3} "'                                          j' i' j + 1' i);                                  }                              }                          }                          lines = String.Format(@"      <Image xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation"" Width=""8"" Height=""8"" Stretch=""None"">          <Image.Source>              <DrawingImage>                  <DrawingImage.Drawing>                      <GeometryDrawing Geometry=""{0} "">                          <GeometryDrawing.Pen>                              <Pen Brush=""White"" Thickness=""1"" />                          </GeometryDrawing.Pen>                      </GeometryDrawing>                  </DrawingImage.Drawing>              </DrawingImage>          </Image.Source>      </Image>"' sb.ToString());                            sb.ToString();                          graphicsChars.Add(c' lines);                            //var sw = new System.IO.StreamWriter(String.Format(@"c:\temp\{0}.xaml"' (byte)c));                          //sw.Write(lines);                          //sw.Close();                      }                        //String temp = String.Format("<Canvas xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">{0}</Canvas>"' Frotz.Other.GraphicsFont.getLines(c));                      //temp = temp.Replace("Black"' "White");                      Image img = System.Windows.Markup.XamlReader.Parse(lines) as Image;                        Canvas cnvs = new Canvas();                      cnvs.Children.Add(img);                        img.SnapsToDevicePixels = true;                      // img.Stretch = Stretch.Uniform;                        cnvs.SetValue(Canvas.TopProperty' (double)_cursorY);                      cnvs.SetValue(Canvas.LeftProperty' (double)_cursorX);                      cnvs.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      cnvs.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(cnvs);      #else                          var bmp = Frotz.Other.GraphicsFont.getImage(c);                        var ms = new System.IO.MemoryStream();                      bmp.Save(ms' System.Drawing.Imaging.ImageFormat.Bmp);                        bmp.Save("C:\\TEMP\\TEST.BMP");                        ms.Position = 0;                      Image img = new Image();                      BitmapImage bi = new BitmapImage();                      bi.BeginInit();                      bi.StreamSource = ms;                      bi.EndInit();                      img.Source = bi;                        img.Stretch = Stretch.Fill;                        img.SetValue(Canvas.TopProperty' (double)_cursorY);                      img.SetValue(Canvas.LeftProperty' (double)_cursorX);                      img.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      img.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        // _cursorX += Convert.ToInt32(bi.Width);                      _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(img);                        //Image img = new Image();                      //img.Source = null;                        //BitmapImage bi = new BitmapImage();                      //                         //Image img = new Image();                      //BitmapImage bi = new BitmapImage();                      //bi.BeginInit();                      //bi.StreamSource = new System.IO.MemoryStream(ScaleImages.Scale(buffer' scale));                      //bi.EndInit();                      //img.Source = bi;                        //int newX = x;                      //int newY = y;                        //if (newY > short.MaxValue) newY -= ushort.MaxValue;                      //if (newX > short.MaxValue) newX -= ushort.MaxValue;                        //img.SetValue(Canvas.TopProperty' (double)newY);                      //img.SetValue(Canvas.LeftProperty' (double)newX);                        //mainCanvas.Children.Add(img);  #endif                  });              }              else              {                  _currentText.Append(c);              }
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,DisplayChar,The following statement contains a magic number: if (_currentInfo.Font == ZFont.GRAPHICS_FONT)              {                    invoke(() =>                  {  #if !TEMP                      String lines = null;                      if (graphicsChars.ContainsKey(c))                      {                          lines = graphicsChars[c];                      }                      else                      {                          String temp = Frotz.Other.GraphicsFont.getLines(c);                          StringBuilder sb = new StringBuilder();                            for (int i = 0; i < 8; i++)                          {                              int x = Convert.ToInt32(temp.Substring(i * 2' 2)' 16);                              for (int j = 0; j < 8; j++)                              {                                  int toggled = (x >> j) & 1;                                  if (toggled == 1)                                  {                                      //sb.AppendFormat("<Line X1=\"{0}\" Y1=\"{1}\" X2=\"{2}\" Y2=\"{3}\" Stroke=\"White\" StrokeThickness=\"1\" />\r\n"'                                      //    j' i' j + 1' i + 1);                                      sb.AppendFormat("M {0} {1} L {2} {3} "'                                          j' i' j + 1' i);                                  }                              }                          }                          lines = String.Format(@"      <Image xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation"" Width=""8"" Height=""8"" Stretch=""None"">          <Image.Source>              <DrawingImage>                  <DrawingImage.Drawing>                      <GeometryDrawing Geometry=""{0} "">                          <GeometryDrawing.Pen>                              <Pen Brush=""White"" Thickness=""1"" />                          </GeometryDrawing.Pen>                      </GeometryDrawing>                  </DrawingImage.Drawing>              </DrawingImage>          </Image.Source>      </Image>"' sb.ToString());                            sb.ToString();                          graphicsChars.Add(c' lines);                            //var sw = new System.IO.StreamWriter(String.Format(@"c:\temp\{0}.xaml"' (byte)c));                          //sw.Write(lines);                          //sw.Close();                      }                        //String temp = String.Format("<Canvas xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">{0}</Canvas>"' Frotz.Other.GraphicsFont.getLines(c));                      //temp = temp.Replace("Black"' "White");                      Image img = System.Windows.Markup.XamlReader.Parse(lines) as Image;                        Canvas cnvs = new Canvas();                      cnvs.Children.Add(img);                        img.SnapsToDevicePixels = true;                      // img.Stretch = Stretch.Uniform;                        cnvs.SetValue(Canvas.TopProperty' (double)_cursorY);                      cnvs.SetValue(Canvas.LeftProperty' (double)_cursorX);                      cnvs.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      cnvs.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(cnvs);      #else                          var bmp = Frotz.Other.GraphicsFont.getImage(c);                        var ms = new System.IO.MemoryStream();                      bmp.Save(ms' System.Drawing.Imaging.ImageFormat.Bmp);                        bmp.Save("C:\\TEMP\\TEST.BMP");                        ms.Position = 0;                      Image img = new Image();                      BitmapImage bi = new BitmapImage();                      bi.BeginInit();                      bi.StreamSource = ms;                      bi.EndInit();                      img.Source = bi;                        img.Stretch = Stretch.Fill;                        img.SetValue(Canvas.TopProperty' (double)_cursorY);                      img.SetValue(Canvas.LeftProperty' (double)_cursorX);                      img.SetValue(Canvas.RightProperty' (double)(_cursorX + _metrics.FontSize.Width));                      img.SetValue(Canvas.BottomProperty' (double)(_cursorY + _metrics.FontSize.Height));                        // _cursorX += Convert.ToInt32(bi.Width);                      _cursorX += _metrics.FontSize.Width;                        mainCanvas.Children.Add(img);                        //Image img = new Image();                      //img.Source = null;                        //BitmapImage bi = new BitmapImage();                      //                         //Image img = new Image();                      //BitmapImage bi = new BitmapImage();                      //bi.BeginInit();                      //bi.StreamSource = new System.IO.MemoryStream(ScaleImages.Scale(buffer' scale));                      //bi.EndInit();                      //img.Source = bi;                        //int newX = x;                      //int newY = y;                        //if (newY > short.MaxValue) newY -= ushort.MaxValue;                      //if (newX > short.MaxValue) newX -= ushort.MaxValue;                        //img.SetValue(Canvas.TopProperty' (double)newY);                      //img.SetValue(Canvas.LeftProperty' (double)newX);                        //mainCanvas.Children.Add(img);  #endif                  });              }              else              {                  _currentText.Append(c);              }
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,SendStringToScreen,The following statement contains a magic number: invoke(() =>              {                  Image myImage = new Image();                    DrawingVisual dv = new DrawingVisual();                  DrawingContext dc = dv.RenderOpen();                    double x = _cursorX;                  double y = _cursorY;                    if (lastDrawn != Rect.Empty && inInputMode == false)                  {                      x = lastDrawn.X + lastDrawn.Width;                  }                      FontInfo fi = _regularFont;                  if (cdi.Font == 4)                  {                      fi = _fixedFont;                  }                    FormattedText ft = buildFormattedText(text' fi' cdi' dc);                    Brush b = Brushes.Transparent;                    if (cdi.ImplementsStyle(ZStyles.REVERSE_STYLE))                  {                      b = ZColorCheck.ZColorToBrush(cdi.ForegroundColor' ColorType.Foreground);                  }                  else                  {                      if (_currentInfo.BackgroundColor != bColor)                      {                          b = ZColorCheck.ZColorToBrush(cdi.BackgroundColor' ColorType.Background);                      }                  }                  dc.DrawRectangle(b' null' new Rect(0' 0' ft.WidthIncludingTrailingWhitespace' charHeight));                    dc.DrawText(ft' new Point(0' 0));                  dc.Close();                    RenderTargetBitmap bmp = new RenderTargetBitmap((int)dv.ContentBounds.Width' (int)charHeight' 96' 96' PixelFormats.Pbgra32);                  bmp.Render(dv);                    myImage.Source = bmp;                    mainCanvas.Children.Add(myImage);                  myImage.SetValue(Canvas.TopProperty' y);                  myImage.SetValue(Canvas.LeftProperty' x);                    lastDrawn = new Rect(x' y' (int)dv.ContentBounds.Width' charHeight);                    removeCoveredImages(myImage);              });
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,SendStringToScreen,The following statement contains a magic number: invoke(() =>              {                  Image myImage = new Image();                    DrawingVisual dv = new DrawingVisual();                  DrawingContext dc = dv.RenderOpen();                    double x = _cursorX;                  double y = _cursorY;                    if (lastDrawn != Rect.Empty && inInputMode == false)                  {                      x = lastDrawn.X + lastDrawn.Width;                  }                      FontInfo fi = _regularFont;                  if (cdi.Font == 4)                  {                      fi = _fixedFont;                  }                    FormattedText ft = buildFormattedText(text' fi' cdi' dc);                    Brush b = Brushes.Transparent;                    if (cdi.ImplementsStyle(ZStyles.REVERSE_STYLE))                  {                      b = ZColorCheck.ZColorToBrush(cdi.ForegroundColor' ColorType.Foreground);                  }                  else                  {                      if (_currentInfo.BackgroundColor != bColor)                      {                          b = ZColorCheck.ZColorToBrush(cdi.BackgroundColor' ColorType.Background);                      }                  }                  dc.DrawRectangle(b' null' new Rect(0' 0' ft.WidthIncludingTrailingWhitespace' charHeight));                    dc.DrawText(ft' new Point(0' 0));                  dc.Close();                    RenderTargetBitmap bmp = new RenderTargetBitmap((int)dv.ContentBounds.Width' (int)charHeight' 96' 96' PixelFormats.Pbgra32);                  bmp.Render(dv);                    myImage.Source = bmp;                    mainCanvas.Children.Add(myImage);                  myImage.SetValue(Canvas.TopProperty' y);                  myImage.SetValue(Canvas.LeftProperty' x);                    lastDrawn = new Rect(x' y' (int)dv.ContentBounds.Width' charHeight);                    removeCoveredImages(myImage);              });
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,SendStringToScreen,The following statement contains a magic number: invoke(() =>              {                  Image myImage = new Image();                    DrawingVisual dv = new DrawingVisual();                  DrawingContext dc = dv.RenderOpen();                    double x = _cursorX;                  double y = _cursorY;                    if (lastDrawn != Rect.Empty && inInputMode == false)                  {                      x = lastDrawn.X + lastDrawn.Width;                  }                      FontInfo fi = _regularFont;                  if (cdi.Font == 4)                  {                      fi = _fixedFont;                  }                    FormattedText ft = buildFormattedText(text' fi' cdi' dc);                    Brush b = Brushes.Transparent;                    if (cdi.ImplementsStyle(ZStyles.REVERSE_STYLE))                  {                      b = ZColorCheck.ZColorToBrush(cdi.ForegroundColor' ColorType.Foreground);                  }                  else                  {                      if (_currentInfo.BackgroundColor != bColor)                      {                          b = ZColorCheck.ZColorToBrush(cdi.BackgroundColor' ColorType.Background);                      }                  }                  dc.DrawRectangle(b' null' new Rect(0' 0' ft.WidthIncludingTrailingWhitespace' charHeight));                    dc.DrawText(ft' new Point(0' 0));                  dc.Close();                    RenderTargetBitmap bmp = new RenderTargetBitmap((int)dv.ContentBounds.Width' (int)charHeight' 96' 96' PixelFormats.Pbgra32);                  bmp.Render(dv);                    myImage.Source = bmp;                    mainCanvas.Children.Add(myImage);                  myImage.SetValue(Canvas.TopProperty' y);                  myImage.SetValue(Canvas.LeftProperty' x);                    lastDrawn = new Rect(x' y' (int)dv.ContentBounds.Width' charHeight);                    removeCoveredImages(myImage);              });
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,SetInputMode,The following statement contains a magic number: if (inInputMode == false)              {                  for (int i = 0; i < 10; i++)                  {                      // TODO Move back to the carat                  }                    _scrollback.AddString(_currentText.ToString()' _currentInfo);                    _currentText.Clear();              }              else              {                  if (_cursorX == lastDrawn.X)                  {                      _cursorX += (int)lastDrawn.Width;                  }              }
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,SetInputColor,The following statement contains a magic number: _currentInfo.ForegroundColor = 32;
Magic Number,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,AfterSetCharsAndLines,The following statement contains a magic number: _cursorCanvas.MinHeight = 2;
Magic Number,WPFMachine.Absolute,ScrollbackArea,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\ScrollbackArea.cs,Reset,The following statement contains a magic number: double PointSize = Properties.Settings.Default.FontSize  * (96.0 / 72.0);
Magic Number,WPFMachine.Absolute,ScrollbackArea,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\ScrollbackArea.cs,Reset,The following statement contains a magic number: double PointSize = Properties.Settings.Default.FontSize  * (96.0 / 72.0);
Magic Number,WPFMachine.Absolute,ScrollbackArea,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\ScrollbackArea.cs,AddString,The following statement contains a magic number: _parent.Dispatcher.Invoke(new Action(delegate              {                 if (text == "\r\n") {                      if (_p.Inlines.LastInline is LineBreak && _p.Inlines.LastInline.PreviousInline is LineBreak) {                       return;                    }                    LineBreak lb = new LineBreak();                    _p.Inlines.Add(lb);                      _currentRun = null;                    return;                 }                      if (currentStyle != cdi.Style)                  {                      currentStyle = cdi.Style;                      _currentRun = new Run();                      _p.Inlines.Add(_currentRun);                      if ((cdi.Style & ZStyles.BOLDFACE_STYLE) != 0)                      {                          _currentRun.FontWeight = FontWeights.Bold;                      }                      if ((cdi.Style & ZStyles.EMPHASIS_STYLE) != 0)                      {                          _currentRun.FontStyle = FontStyles.Italic;                      }                      if ( (cdi.Style & ZStyles.REVERSE_STYLE) != 0)                      {                          _currentRun.Background = Brushes.Black;                          _currentRun.Foreground = Brushes.White;                      }                      if ( (cdi.Style & ZStyles.FIXED_WIDTH_STYLE) != 0)                      {                          _currentRun.FontFamily = new System.Windows.Media.FontFamily(Properties.Settings.Default.FixedWidthFont);                      }                  }                                    if (_currentRun == null)                  {                      _currentRun = new Run(text);                      _p.Inlines.Add(_currentRun);                  }                  else                  {                      _currentRun.Text += text;                        if (_currentRun.Text.EndsWith(threeNewLines))                      {                          StringBuilder sb = new StringBuilder(_currentRun.Text);                            while (sb.ToString().EndsWith(threeNewLines))                          {                              sb.Remove(sb.Length - 2' 2);                          }                          _currentRun.Text = sb.ToString();    //                                              }                  }                  _RTB.CaretPosition = _RTB.CaretPosition.DocumentEnd;                }));
Magic Number,WPFMachine.Absolute,ScrollbackArea,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\ScrollbackArea.cs,AddString,The following statement contains a magic number: _parent.Dispatcher.Invoke(new Action(delegate              {                 if (text == "\r\n") {                      if (_p.Inlines.LastInline is LineBreak && _p.Inlines.LastInline.PreviousInline is LineBreak) {                       return;                    }                    LineBreak lb = new LineBreak();                    _p.Inlines.Add(lb);                      _currentRun = null;                    return;                 }                      if (currentStyle != cdi.Style)                  {                      currentStyle = cdi.Style;                      _currentRun = new Run();                      _p.Inlines.Add(_currentRun);                      if ((cdi.Style & ZStyles.BOLDFACE_STYLE) != 0)                      {                          _currentRun.FontWeight = FontWeights.Bold;                      }                      if ((cdi.Style & ZStyles.EMPHASIS_STYLE) != 0)                      {                          _currentRun.FontStyle = FontStyles.Italic;                      }                      if ( (cdi.Style & ZStyles.REVERSE_STYLE) != 0)                      {                          _currentRun.Background = Brushes.Black;                          _currentRun.Foreground = Brushes.White;                      }                      if ( (cdi.Style & ZStyles.FIXED_WIDTH_STYLE) != 0)                      {                          _currentRun.FontFamily = new System.Windows.Media.FontFamily(Properties.Settings.Default.FixedWidthFont);                      }                  }                                    if (_currentRun == null)                  {                      _currentRun = new Run(text);                      _p.Inlines.Add(_currentRun);                  }                  else                  {                      _currentRun.Text += text;                        if (_currentRun.Text.EndsWith(threeNewLines))                      {                          StringBuilder sb = new StringBuilder(_currentRun.Text);                            while (sb.ToString().EndsWith(threeNewLines))                          {                              sb.Remove(sb.Length - 2' 2);                          }                          _currentRun.Text = sb.ToString();    //                                              }                  }                  _RTB.CaretPosition = _RTB.CaretPosition.DocumentEnd;                }));
Magic Number,WPFMachine.Screen,OverlayAdorner,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\OverlayAdorner.cs,OnRender,The following statement contains a magic number: lock (_text)              {                  if (RegularFont == null || FixedWidthFont == null) return;                  foreach (var at in _text)                  {                        FontInfo f = RegularFont;                      if (at.DisplayInfo.Font == ZFont.FIXED_WIDTH_FONT || at.DisplayInfo.ImplementsStyle(ZStyles.FIXED_WIDTH_STYLE))                      {                          f = FixedWidthFont;                      }                      Brush b = ZColorCheck.ZColorToBrush(at.DisplayInfo.ForegroundColor' Support.ColorType.Foreground);                      FormattedText ft = new FormattedText(at.Text'                          System.Globalization.CultureInfo.CurrentCulture'                          FlowDirection.LeftToRight' f.Typeface' f.PointSize' b'                          new NumberSubstitution()' TextFormattingMode.Display);                        if (at.DisplayInfo.ImplementsStyle(ZStyles.REVERSE_STYLE))                      {                          drawingContext.DrawRectangle(b' null' new Rect(at.X + 2' at.Y + 2' ft.WidthIncludingTrailingWhitespace' Math.Max(ft.Height' FontHeight)));                          ft.SetForegroundBrush(ZColorCheck.ZColorToBrush(at.DisplayInfo.BackgroundColor' Support.ColorType.Background));                      }                      drawingContext.DrawText(ft' new Point(at.X + 2' at.Y + 2));                      // Note: Offsetting positions by 2 to get everything to line up correctly                  }              }
Magic Number,WPFMachine.Screen,OverlayAdorner,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\OverlayAdorner.cs,OnRender,The following statement contains a magic number: lock (_text)              {                  if (RegularFont == null || FixedWidthFont == null) return;                  foreach (var at in _text)                  {                        FontInfo f = RegularFont;                      if (at.DisplayInfo.Font == ZFont.FIXED_WIDTH_FONT || at.DisplayInfo.ImplementsStyle(ZStyles.FIXED_WIDTH_STYLE))                      {                          f = FixedWidthFont;                      }                      Brush b = ZColorCheck.ZColorToBrush(at.DisplayInfo.ForegroundColor' Support.ColorType.Foreground);                      FormattedText ft = new FormattedText(at.Text'                          System.Globalization.CultureInfo.CurrentCulture'                          FlowDirection.LeftToRight' f.Typeface' f.PointSize' b'                          new NumberSubstitution()' TextFormattingMode.Display);                        if (at.DisplayInfo.ImplementsStyle(ZStyles.REVERSE_STYLE))                      {                          drawingContext.DrawRectangle(b' null' new Rect(at.X + 2' at.Y + 2' ft.WidthIncludingTrailingWhitespace' Math.Max(ft.Height' FontHeight)));                          ft.SetForegroundBrush(ZColorCheck.ZColorToBrush(at.DisplayInfo.BackgroundColor' Support.ColorType.Background));                      }                      drawingContext.DrawText(ft' new Point(at.X + 2' at.Y + 2));                      // Note: Offsetting positions by 2 to get everything to line up correctly                  }              }
Magic Number,WPFMachine.Screen,OverlayAdorner,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\OverlayAdorner.cs,OnRender,The following statement contains a magic number: lock (_text)              {                  if (RegularFont == null || FixedWidthFont == null) return;                  foreach (var at in _text)                  {                        FontInfo f = RegularFont;                      if (at.DisplayInfo.Font == ZFont.FIXED_WIDTH_FONT || at.DisplayInfo.ImplementsStyle(ZStyles.FIXED_WIDTH_STYLE))                      {                          f = FixedWidthFont;                      }                      Brush b = ZColorCheck.ZColorToBrush(at.DisplayInfo.ForegroundColor' Support.ColorType.Foreground);                      FormattedText ft = new FormattedText(at.Text'                          System.Globalization.CultureInfo.CurrentCulture'                          FlowDirection.LeftToRight' f.Typeface' f.PointSize' b'                          new NumberSubstitution()' TextFormattingMode.Display);                        if (at.DisplayInfo.ImplementsStyle(ZStyles.REVERSE_STYLE))                      {                          drawingContext.DrawRectangle(b' null' new Rect(at.X + 2' at.Y + 2' ft.WidthIncludingTrailingWhitespace' Math.Max(ft.Height' FontHeight)));                          ft.SetForegroundBrush(ZColorCheck.ZColorToBrush(at.DisplayInfo.BackgroundColor' Support.ColorType.Background));                      }                      drawingContext.DrawText(ft' new Point(at.X + 2' at.Y + 2));                      // Note: Offsetting positions by 2 to get everything to line up correctly                  }              }
Magic Number,WPFMachine.Screen,OverlayAdorner,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\OverlayAdorner.cs,OnRender,The following statement contains a magic number: lock (_text)              {                  if (RegularFont == null || FixedWidthFont == null) return;                  foreach (var at in _text)                  {                        FontInfo f = RegularFont;                      if (at.DisplayInfo.Font == ZFont.FIXED_WIDTH_FONT || at.DisplayInfo.ImplementsStyle(ZStyles.FIXED_WIDTH_STYLE))                      {                          f = FixedWidthFont;                      }                      Brush b = ZColorCheck.ZColorToBrush(at.DisplayInfo.ForegroundColor' Support.ColorType.Foreground);                      FormattedText ft = new FormattedText(at.Text'                          System.Globalization.CultureInfo.CurrentCulture'                          FlowDirection.LeftToRight' f.Typeface' f.PointSize' b'                          new NumberSubstitution()' TextFormattingMode.Display);                        if (at.DisplayInfo.ImplementsStyle(ZStyles.REVERSE_STYLE))                      {                          drawingContext.DrawRectangle(b' null' new Rect(at.X + 2' at.Y + 2' ft.WidthIncludingTrailingWhitespace' Math.Max(ft.Height' FontHeight)));                          ft.SetForegroundBrush(ZColorCheck.ZColorToBrush(at.DisplayInfo.BackgroundColor' Support.ColorType.Background));                      }                      drawingContext.DrawText(ft' new Point(at.X + 2' at.Y + 2));                      // Note: Offsetting positions by 2 to get everything to line up correctly                  }              }
Magic Number,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,SetCharsAndLines,The following statement contains a magic number: double screenWidth = width - 20;
Magic Number,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,SetCharsAndLines,The following statement contains a magic number: double screenHeight = height - 20;
Magic Number,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,SetCharsAndLines,The following statement contains a magic number: _cursorCanvas.MinHeight = 2;
Magic Number,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,SetInputColor,The following statement contains a magic number: SetColor(32' bColor);
Magic Number,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,SetInputMode,The following statement contains a magic number: if (_inInputMode != InputMode)              {                  _inInputMode = InputMode;                    Dispatcher.Invoke(new Action(delegate                  {                      if (_inInputMode == true)                      {                          int x = ztc.StartInputMode();                          if (_cursorX <= 1 && x > -1)                          {                              _cursorX = x + 2; // Move the cursor over 2 pixels to account for margin                              _cursorCanvas.SetValue(Canvas.LeftProperty' (double)_cursorX);                          }                      }                      else                      {                          ztc.EndInputMode();                      }                        if (CursorVisibility)                      {                          _cursorCanvas.Visibility = System.Windows.Visibility.Visible;                      }                      else                      {                          _cursorCanvas.Visibility = System.Windows.Visibility.Hidden;                      }                  }));              }
Magic Number,WPFMachine.Support,ZInfoTXD,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Support\ZInfoTXD.xaml.cs,parse,The following statement contains a magic number: while ((line = sr.ReadLine()) != null)              {                  if (type == 0)                  {                      if (line.StartsWith("Routine"))                      {                          r = new Run(sb.ToString());                          tb.Inlines.Add(r);                            r = new Run(line + "\n");                          r.Foreground = Brushes.Red;                          r.FontWeight = FontWeights.Bold;                          tb.Inlines.Add(r);                            sb.Clear();                      }                      else                      {                          sb.Append(line + "\n");                      }                  }                  else                  {                      Match m = rgx.Match(line);                      if (m.Success)                      {                          r = new Run(sb.ToString());                          tb.Inlines.Add(r);                            r = new Run(m.Groups[1].Value);                          r.Foreground = Brushes.Red;                          r.FontWeight = FontWeights.Bold;                          tb.Inlines.Add(r);                          r = new Run(m.Groups[2].Value + "\n");                          tb.Inlines.Add(r);                            sb.Clear();                      }                      else                      {                          sb.Append(line + "\n");                      }                  }              }
Missing Default,WPFMachine,BlorbMetadata,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\BlorbMetadata.xaml.cs,BlorbMetadata,The following switch statement is missing a default case: switch (key)                          {                              case "title":                                  {                                      text = "Title";                                      this.Title = node.InnerText;                                  }                                  break;                              case "author":                                  text = "Author"; break;                              case "language":                                  text = "Language"; break;                              case "headline":                                  text = "Subtitle"; break;                              case "firstpublished":                                  text = "First Published"; break;                              case "genre":                                  text = "Genre"; break;                              case "group":                                  text = "Group"; break;                              case "series":                                  text = "Series"; break;                              case "seriesnumber":                                  text = "Series #"; break;                          }
Missing Default,WPFMachine,ZColorCheck,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Support\ZColorCheck.cs,ZColorToColor,The following switch statement is missing a default case: switch (color)              {                  case ZColor.BLACK_COLOUR:                      return Colors.Black;                  case ZColor.BLUE_COLOUR:                      return c64Blue;                  case ZColor.CYAN_COLOUR:                      return Colors.Cyan;                  case ZColor.DARKGREY_COLOUR:                      return Colors.DarkGray;                  case ZColor.GREEN_COLOUR:                      return Colors.Green;                  // case ZColor.LIGHTGREY_COLOUR: // Light Grey & Grey both equal 10                  case ZColor.GREY_COLOUR:                      return Colors.Gray;                  case ZColor.MAGENTA_COLOUR:                      return Colors.Magenta;                  case ZColor.MEDIUMGREY_COLOUR:                      return Colors.DimGray;                  case ZColor.RED_COLOUR:                      return Colors.Red;                  case ZColor.TRANSPARENT_COLOUR:                      return Colors.Transparent;                  case ZColor.WHITE_COLOUR:                      return Colors.White;                  case ZColor.YELLOW_COLOUR:                      return Colors.Yellow;                  case 32:                      return Properties.Settings.Default.DefaultInputColor;              }
Missing Default,WPFMachine,MainWindow,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\MainWindow.xaml.cs,MainWindow_PreviewKeyDown,The following switch statement is missing a default case: switch (e.Key)                  {                      case Key.Tab:                          c = '\t'; break;                      case Key.Up:                          c = (char)Frotz.Constants.CharCodes.ZC_ARROW_UP;                          break;                      case Key.Down:                          c = (char)Frotz.Constants.CharCodes.ZC_ARROW_DOWN;                          break;                      case Key.Left:                          c = (char)Frotz.Constants.CharCodes.ZC_ARROW_LEFT;                          break;                      case Key.Right:                          c = (char)Frotz.Constants.CharCodes.ZC_ARROW_RIGHT;                          break;                  }
Missing Default,WPFMachine,MainWindow,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\MainWindow.xaml.cs,convertAltText,The following switch statement is missing a default case: switch (k)              {                  case 'h': return CharCodes.ZC_HKEY_HELP;                  case 'd': return CharCodes.ZC_HKEY_DEBUG;                  case 'p': return CharCodes.ZC_HKEY_PLAYBACK;                  case 'r': return CharCodes.ZC_HKEY_RECORD;                    case 's': return CharCodes.ZC_HKEY_SEED;                  case 'u': return CharCodes.ZC_HKEY_UNDO;                  case 'n': return CharCodes.ZC_HKEY_RESTART;                  case 'x': return CharCodes.ZC_HKEY_QUIT;              }
Missing Default,WPFMachine,MainWindow,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\MainWindow.xaml.cs,addFilesInPath,The following switch statement is missing a default case: switch (fi.Extension.ToLower())                  {                      case ".z1":                      case ".z2":                      case ".z3":                      case ".z4":                      case ".z5":                      case ".z6":                      case ".z7":                      case ".z8":                      case ".zblorb":                      case ".dat":                          addGameItem(fi.FullName' miRoot);                          break;                  }
Missing Default,WPFMachine.Absolute,AbsoluteScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Absolute\AbsoluteScreen.xaml.cs,GetFontData,The following switch statement is missing a default case: switch (font)              {                  case ZFont.TEXT_FONT:                  case ZFont.FIXED_WIDTH_FONT:                      height = (ushort)_metrics.FontSize.Height;                      width = (ushort)_metrics.FontSize.Width;                      return true;                  case ZFont.PICTURE_FONT:                  case ZFont.GRAPHICS_FONT:                      return false;              }
Missing Default,WPFMachine.Screen,TextControlScreen,C:\repos\CosmosOS_Cosmos\Demos\zMachine\Frotz.Net\source\Desktop\WPFMachine\Screen\TextControlScreen.xaml.cs,GetFontData,The following switch statement is missing a default case: switch (font)              {                  case ZFont.TEXT_FONT:                  case ZFont.FIXED_WIDTH_FONT:                      height = (ushort)_metrics.FontSize.Height;                      width = (ushort)_metrics.FontSize.Width;                      return true;                  case ZFont.GRAPHICS_FONT:                  case ZFont.PICTURE_FONT:                      return false;              }
