Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,Cyclomatic complexity of the method is 8
Long Parameter List,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,Copy,The method has 6 parameters. Parameters: x' y' newX' newY' width' height
Long Parameter List,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,Fill,The method has 5 parameters. Parameters: x' y' width' height' color
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectDrive,The length of the statement  "			IO.DeviceSelect.Byte = (byte)((byte)(DvcSelVal.Default | DvcSelVal.LBA | (mBusPosition == BusPositionEnum.Slave ? DvcSelVal.Slave : 0)) | aLbaHigh4); " is 149.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			//To use the IDENTIFY command' select a target drive by sending 0xA0 for the master drive' or 0xB0 for the slave' to the "drive select" IO port. On the Primary bus' this would be port 0x1F6. " is 190.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			// Then read the Status port (0x1F7) again. If the value read is 0' the drive does not exist. For any other value: poll the Status port (0x1F7) until bit 7 (BSY' value = 0x80) clears. " is 183.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			// Because of some ATAPI drives that do not follow spec' at this point you need to check the LBAmid and LBAhi ports (0x1F4 and 0x1F5) to see if they are non-zero. " is 162.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			// If so' the drive is not ATA' and you should stop polling. Otherwise' continue polling one of the Status ports until bit 3 (DRQ' value = 8) sets' or until bit 0 (ERR' value = 1) sets. " is 185.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			// At that point' if ERR is clear' the data is ready to read from the Data port (0x1F0). Read 256 words' and store them. " is 120.
Long Statement,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The length of the statement  "            // Cursor Vertical Size Register here a value between 0x00 and 0x0F must be set with 0x00 meaning maximum size and 0x0F minimum " is 127.
Long Statement,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorVisible,The length of the statement  "            // The VGA Cursor is disabled when the value is 1 and enabled when is 0 so we need to invert 'value'' sadly the ConvertToByte() function is not working " is 151.
Long Statement,Cosmos.HAL.Drivers,VBEDriver,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VBEDriver.cs,VBESet,The length of the statement  "            VBEEnableDisplay(VBEEnableValues.VBEEnabled | VBEEnableValues.VBEUseLinearFrameBuffer | VBEEnableValues.VBENoClearMemory); " is 122.
Virtual Method Call from Constructor,Cosmos.HAL,KeyboardBase,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\KeyboardBase.cs,KeyboardBase,The constructor "KeyboardBase" calls a virtual method "Initialize".
Virtual Method Call from Constructor,Cosmos.HAL,KeyboardBase,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\KeyboardBase.cs,KeyboardBase,The constructor "KeyboardBase" calls a virtual method "UpdateLeds".
Magic Number,Cosmos.HAL.BlockDevice,Ata,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ata.cs,Ata,The following statement contains a magic number: mBlockSize = 512;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,DiscoverDrive,The following statement contains a magic number: if (xIdentifyStatus == Status.None)  			{  				return SpecLevel.Null;  			}  			else if ((xIdentifyStatus & Status.Error) != 0)  			{  				// Can look in Error port for more info  				// Device is not ATA  				// This is also triggered by ATAPI devices  				int xTypeId = IO.LBA2.Byte << 8 | IO.LBA1.Byte;  				if (xTypeId == 0xEB14 || xTypeId == 0x9669)  				{  					return SpecLevel.ATAPI;  				}  				else  				{  					// Unknown type. Might not be a device.  					return SpecLevel.Null;  				}  			}  			else if ((xIdentifyStatus & Status.DRQ) == 0)  			{  				// Error  				return SpecLevel.Null;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,GetString,The following statement contains a magic number: for (int i = 0; i < aStringLength / 2; i++)  			{  				UInt16 xChar = aBuffer[aIndexStart + i];  				xChars[i * 2] = (char)(xChar >> 8);  				xChars[i * 2 + 1] = (char)xChar;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,GetString,The following statement contains a magic number: for (int i = 0; i < aStringLength / 2; i++)  			{  				UInt16 xChar = aBuffer[aIndexStart + i];  				xChars[i * 2] = (char)(xChar >> 8);  				xChars[i * 2 + 1] = (char)xChar;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,GetString,The following statement contains a magic number: for (int i = 0; i < aStringLength / 2; i++)  			{  				UInt16 xChar = aBuffer[aIndexStart + i];  				xChars[i * 2] = (char)(xChar >> 8);  				xChars[i * 2 + 1] = (char)xChar;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,GetString,The following statement contains a magic number: for (int i = 0; i < aStringLength / 2; i++)  			{  				UInt16 xChar = aBuffer[aIndexStart + i];  				xChars[i * 2] = (char)(xChar >> 8);  				xChars[i * 2 + 1] = (char)xChar;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: var xBuff = new UInt16[256];
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mSerialNo = GetString(xBuff' 10' 20);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mSerialNo = GetString(xBuff' 10' 20);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mFirmwareRev = GetString(xBuff' 23' 8);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mFirmwareRev = GetString(xBuff' 23' 8);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mModelNo = GetString(xBuff' 27' 40);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mModelNo = GetString(xBuff' 27' 40);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt32)xBuff[61] << 16 | xBuff[60]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt32)xBuff[61] << 16 | xBuff[60]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt32)xBuff[61] << 16 | xBuff[60]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: LBA48Bit = (xBuff[83] & 0x40) != 0;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: if (LBA48Bit)  			{  				mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: if (LBA48Bit)  			{  				mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: if (LBA48Bit)  			{  				mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: if (LBA48Bit)  			{  				mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: if (LBA48Bit)  			{  				mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: SelectDrive((byte)(aSectorNo >> 24));
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: if (LBA48Bit)  			{  				IO.SectorCount.Word = (ushort)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo >> 24);  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 32);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 40);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  			}  			else  			{  				// Number of sectors to read  				IO.SectorCount.Byte = (byte)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  				//IO.LBA0.Byte = (byte)(aSectorNo & 0xFF);  				//IO.LBA1.Byte = (byte)((aSectorNo & 0xFF00) >> 8);  				//IO.LBA2.Byte = (byte)((aSectorNo & 0xFF0000) >> 16);  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: if (LBA48Bit)  			{  				IO.SectorCount.Word = (ushort)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo >> 24);  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 32);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 40);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  			}  			else  			{  				// Number of sectors to read  				IO.SectorCount.Byte = (byte)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  				//IO.LBA0.Byte = (byte)(aSectorNo & 0xFF);  				//IO.LBA1.Byte = (byte)((aSectorNo & 0xFF00) >> 8);  				//IO.LBA2.Byte = (byte)((aSectorNo & 0xFF0000) >> 16);  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: if (LBA48Bit)  			{  				IO.SectorCount.Word = (ushort)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo >> 24);  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 32);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 40);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  			}  			else  			{  				// Number of sectors to read  				IO.SectorCount.Byte = (byte)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  				//IO.LBA0.Byte = (byte)(aSectorNo & 0xFF);  				//IO.LBA1.Byte = (byte)((aSectorNo & 0xFF00) >> 8);  				//IO.LBA2.Byte = (byte)((aSectorNo & 0xFF0000) >> 16);  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: if (LBA48Bit)  			{  				IO.SectorCount.Word = (ushort)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo >> 24);  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 32);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 40);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  			}  			else  			{  				// Number of sectors to read  				IO.SectorCount.Byte = (byte)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  				//IO.LBA0.Byte = (byte)(aSectorNo & 0xFF);  				//IO.LBA1.Byte = (byte)((aSectorNo & 0xFF00) >> 8);  				//IO.LBA2.Byte = (byte)((aSectorNo & 0xFF0000) >> 16);  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: if (LBA48Bit)  			{  				IO.SectorCount.Word = (ushort)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo >> 24);  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 32);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 40);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  			}  			else  			{  				// Number of sectors to read  				IO.SectorCount.Byte = (byte)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  				//IO.LBA0.Byte = (byte)(aSectorNo & 0xFF);  				//IO.LBA1.Byte = (byte)((aSectorNo & 0xFF00) >> 8);  				//IO.LBA2.Byte = (byte)((aSectorNo & 0xFF0000) >> 16);  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: if (LBA48Bit)  			{  				IO.SectorCount.Word = (ushort)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo >> 24);  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 32);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 40);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  			}  			else  			{  				// Number of sectors to read  				IO.SectorCount.Byte = (byte)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  				//IO.LBA0.Byte = (byte)(aSectorNo & 0xFF);  				//IO.LBA1.Byte = (byte)((aSectorNo & 0xFF00) >> 8);  				//IO.LBA2.Byte = (byte)((aSectorNo & 0xFF0000) >> 16);  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: if (LBA48Bit)  			{  				IO.SectorCount.Word = (ushort)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo >> 24);  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 32);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 40);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  			}  			else  			{  				// Number of sectors to read  				IO.SectorCount.Byte = (byte)aSectorCount;  				IO.LBA0.Byte = (byte)(aSectorNo);  				IO.LBA1.Byte = (byte)(aSectorNo >> 8);  				IO.LBA2.Byte = (byte)(aSectorNo >> 16);  				//IO.LBA0.Byte = (byte)(aSectorNo & 0xFF);  				//IO.LBA1.Byte = (byte)((aSectorNo & 0xFF00) >> 8);  				//IO.LBA2.Byte = (byte)((aSectorNo & 0xFF0000) >> 16);  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,WriteBlock,The following statement contains a magic number: for (long i = 0; i < aData.Length / 2; i++)  			{  				xValue = (UInt16)((aData[i * 2 + 1] << 8) | aData[i * 2]);  				IO.Data.Word = xValue;  				Wait();  				// There must be a tiny delay between each OUTSW output word. A jmp $+2 size of delay.  				// But that delay is cpu specific? so how long of a delay?  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,WriteBlock,The following statement contains a magic number: for (long i = 0; i < aData.Length / 2; i++)  			{  				xValue = (UInt16)((aData[i * 2 + 1] << 8) | aData[i * 2]);  				IO.Data.Word = xValue;  				Wait();  				// There must be a tiny delay between each OUTSW output word. A jmp $+2 size of delay.  				// But that delay is cpu specific? so how long of a delay?  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,WriteBlock,The following statement contains a magic number: for (long i = 0; i < aData.Length / 2; i++)  			{  				xValue = (UInt16)((aData[i * 2 + 1] << 8) | aData[i * 2]);  				IO.Data.Word = xValue;  				Wait();  				// There must be a tiny delay between each OUTSW output word. A jmp $+2 size of delay.  				// But that delay is cpu specific? so how long of a delay?  			}
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,WriteBlock,The following statement contains a magic number: for (long i = 0; i < aData.Length / 2; i++)  			{  				xValue = (UInt16)((aData[i * 2 + 1] << 8) | aData[i * 2]);  				IO.Data.Word = xValue;  				Wait();  				// There must be a tiny delay between each OUTSW output word. A jmp $+2 size of delay.  				// But that delay is cpu specific? so how long of a delay?  			}
Magic Number,Cosmos.HAL.BlockDevice,EBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\EBR.cs,EBR,The following statement contains a magic number: ParsePartition(aEBR' 446);
Magic Number,Cosmos.HAL.BlockDevice,EBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\EBR.cs,EBR,The following statement contains a magic number: ParsePartition(aEBR' 462);
Magic Number,Cosmos.HAL.BlockDevice,EBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\EBR.cs,ParsePartition,The following statement contains a magic number: byte xSystemID = aEBR[aLoc + 4];
Magic Number,Cosmos.HAL.BlockDevice,EBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\EBR.cs,ParsePartition,The following statement contains a magic number: if (xSystemID == 0x5 || xSystemID == 0xF || xSystemID == 0x85)              {                  //Another EBR Detected              }              else if (xSystemID != 0)              {                  UInt32 xStartSector = aEBR.ToUInt32(aLoc + 8);                  UInt32 xSectorCount = aEBR.ToUInt32(aLoc + 12);                    var xPartInfo = new PartInfo(xSystemID' xStartSector' xSectorCount);                  Partitions.Add(xPartInfo);              }
Magic Number,Cosmos.HAL.BlockDevice,EBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\EBR.cs,ParsePartition,The following statement contains a magic number: if (xSystemID == 0x5 || xSystemID == 0xF || xSystemID == 0x85)              {                  //Another EBR Detected              }              else if (xSystemID != 0)              {                  UInt32 xStartSector = aEBR.ToUInt32(aLoc + 8);                  UInt32 xSectorCount = aEBR.ToUInt32(aLoc + 12);                    var xPartInfo = new PartInfo(xSystemID' xStartSector' xSectorCount);                  Partitions.Add(xPartInfo);              }
Magic Number,Cosmos.HAL.BlockDevice,MBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,MBR,The following statement contains a magic number: ParsePartition(aMBR' 446);
Magic Number,Cosmos.HAL.BlockDevice,MBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,MBR,The following statement contains a magic number: ParsePartition(aMBR' 462);
Magic Number,Cosmos.HAL.BlockDevice,MBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,MBR,The following statement contains a magic number: ParsePartition(aMBR' 478);
Magic Number,Cosmos.HAL.BlockDevice,MBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,MBR,The following statement contains a magic number: ParsePartition(aMBR' 494);
Magic Number,Cosmos.HAL.BlockDevice,MBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,ParsePartition,The following statement contains a magic number: byte xSystemID = aMBR[aLoc + 4];
Magic Number,Cosmos.HAL.BlockDevice,MBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,ParsePartition,The following statement contains a magic number: if (xSystemID == 0x5 || xSystemID == 0xF || xSystemID == 0x85)        {            //Extended Partition Detected            //DOS only knows about 05' Windows 95 introduced 0F' Linux introduced 85             //Search for logical volumes            //http://thestarman.pcministry.com/asm/mbr/PartTables2.htm            EBRLocation = aMBR.ToUInt32(aLoc + 8);        }        else if (xSystemID != 0) {          UInt32 xStartSector = aMBR.ToUInt32(aLoc + 8);          UInt32 xSectorCount = aMBR.ToUInt32(aLoc + 12);                    var xPartInfo = new PartInfo(xSystemID' xStartSector' xSectorCount);          Partitions.Add(xPartInfo);        }
Magic Number,Cosmos.HAL.BlockDevice,MBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,ParsePartition,The following statement contains a magic number: if (xSystemID == 0x5 || xSystemID == 0xF || xSystemID == 0x85)        {            //Extended Partition Detected            //DOS only knows about 05' Windows 95 introduced 0F' Linux introduced 85             //Search for logical volumes            //http://thestarman.pcministry.com/asm/mbr/PartTables2.htm            EBRLocation = aMBR.ToUInt32(aLoc + 8);        }        else if (xSystemID != 0) {          UInt32 xStartSector = aMBR.ToUInt32(aLoc + 8);          UInt32 xSectorCount = aMBR.ToUInt32(aLoc + 12);                    var xPartInfo = new PartInfo(xSystemID' xStartSector' xSectorCount);          Partitions.Add(xPartInfo);        }
Magic Number,Cosmos.HAL.BlockDevice,MBR,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,ParsePartition,The following statement contains a magic number: if (xSystemID == 0x5 || xSystemID == 0xF || xSystemID == 0x85)        {            //Extended Partition Detected            //DOS only knows about 05' Windows 95 introduced 0F' Linux introduced 85             //Search for logical volumes            //http://thestarman.pcministry.com/asm/mbr/PartTables2.htm            EBRLocation = aMBR.ToUInt32(aLoc + 8);        }        else if (xSystemID != 0) {          UInt32 xStartSector = aMBR.ToUInt32(aLoc + 8);          UInt32 xSectorCount = aMBR.ToUInt32(aLoc + 12);                    var xPartInfo = new PartInfo(xSystemID' xStartSector' xSectorCount);          Partitions.Add(xPartInfo);        }
Magic Number,Cosmos.HAL,DebugTextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\DebugTextScreen.cs,SendChar,The following statement contains a magic number: mDebugger.SendChannelCommand(129' 0' xBytes);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPlane,The following statement contains a magic number: p &= 3;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPlane,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPlane,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 2;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 6;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: seg >>= 2;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: seg &= 3;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: switch (seg)              {                  case 0:                  case 1:                      return mIO.VGAMemoryBlock;                  case 2:                      return mIO.MonochromeTextMemoryBlock;                  case 3:                      return mIO.CGATextMemoryBlock;              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: switch (seg)              {                  case 0:                  case 1:                      return mIO.VGAMemoryBlock;                  case 2:                      return mIO.MonochromeTextMemoryBlock;                  case 3:                      return mIO.CGATextMemoryBlock;              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 2;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 5;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 6;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: SetPlane(2);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  for (uint j = 0; j < font_height; j++)                  {                      seg[(i * 32) + j] = font[(i * font_height) + j];                  }              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  for (uint j = 0; j < font_height; j++)                  {                      seg[(i * 32) + j] = font[(i * font_height) + j];                  }              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 2;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 5;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 6;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel320x200x8,The following statement contains a magic number: uint where = (y * 320) + x;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel320x200x8,The following statement contains a magic number: return mIO.VGAMemoryBlock[(y * 320) + x];
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: x = (x & 7) * 1;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: for (byte p = 0; p < 4; p++)              {                  SetPlane(p);                    if ((pmask & c) != 0)                  {                      mIO.VGAMemoryBlock[offset] = (byte)(mIO.VGAMemoryBlock[offset] | mask);                  }                    else                  {                      mIO.VGAMemoryBlock[offset] = (byte)(mIO.VGAMemoryBlock[offset] & ~mask);                  }                    pmask <<= 1;              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel640x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel640x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel640x480x4,The following statement contains a magic number: for (byte p = 0; p < 4; p++)              {                  SetPlane(p);                    if (mIO.VGAMemoryBlock[offset] == 255)                  {                      color += pmask;                  }                    pmask <<= 1;              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel640x480x4,The following statement contains a magic number: for (byte p = 0; p < 4; p++)              {                  SetPlane(p);                    if (mIO.VGAMemoryBlock[offset] == 255)                  {                      color += pmask;                  }                    pmask <<= 1;              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel720x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel720x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel720x480x4,The following statement contains a magic number: x = (x & 7) * 1;
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel720x480x4,The following statement contains a magic number: for (byte p = 0; p < 4; p++)              {                  SetPlane(p);                    if ((pmask & c) != 0)                  {                      mIO.VGAMemoryBlock[offset] = (byte)(mIO.VGAMemoryBlock[offset] | mask);                  }                    else                  {                      mIO.VGAMemoryBlock[offset] = (byte)(mIO.VGAMemoryBlock[offset] & ~mask);                  }                    pmask <<= 1;              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel720x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel720x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel720x480x4,The following statement contains a magic number: for (byte p = 0; p < 4; p++)              {                  SetPlane(p);                    if (mIO.VGAMemoryBlock[offset] == 255)                  {                      color += pmask;                  }                    pmask <<= 1;              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel720x480x4,The following statement contains a magic number: for (byte p = 0; p < 4; p++)              {                  SetPlane(p);                    if (mIO.VGAMemoryBlock[offset] == 255)                  {                      color += pmask;                  }                    pmask <<= 1;              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (byte i = 0; i < 64; i++)              {                  SetPaletteEntry(i' i' 0' 0);                  SetPaletteEntry(i + 64' 63' i' 0);                  SetPaletteEntry(i + 128' 63' 63' i);                  SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: for (uint y = 0; y < PixelHeight; y++)              {                  for (uint x = 0; x < PixelWidth; x++)                  {                      xSegment[(y * 320) + x] = (byte)(x + y);                  }              }
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPalette,The following statement contains a magic number: for (int i = 0; i < pallete.Length; i++)                  mIO.DAC_Data.Byte = (byte)(pallete[i] >> 2);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPaletteEntry,The following statement contains a magic number: mIO.DAC_Data.Byte = (byte)(r >> 2);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPaletteEntry,The following statement contains a magic number: mIO.DAC_Data.Byte = (byte)(g >> 2);
Magic Number,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPaletteEntry,The following statement contains a magic number: mIO.DAC_Data.Byte = (byte)(b >> 2);
Magic Number,Cosmos.HAL,Global,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Global.cs,InitAta,The following statement contains a magic number: var xMbrData = new byte[512];
Magic Number,Cosmos.HAL,Global,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Global.cs,InitAta,The following statement contains a magic number: if (xMBR.EBRLocation != 0)        {          //EBR Detected          var xEbrData = new byte[512];          xATA.ReadBlock(xMBR.EBRLocation' 1U' xEbrData);          var xEBR = new EBR(xEbrData);            for (int i = 0; i < xEBR.Partitions.Count; i++)          {            //var xPart = xEBR.Partitions[i];            //var xPartDevice = new BlockDevice.Partition(xATA' xPart.StartSector' xPart.SectorCount);            //BlockDevice.BlockDevice.Devices.Add(xPartDevice);          }        }
Magic Number,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,Initialize,The following statement contains a magic number: byte status = (byte)(BaseIOGroups.Mouse.p60.Byte | 2);
Magic Number,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,Initialize,The following statement contains a magic number: INTs.SetIrqHandler(12' HandleMouse);
Magic Number,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,WaitData,The following statement contains a magic number: for (int i = 0; i < 100 & ((BaseIOGroups.Mouse.p64.Byte & 1) == 1); i++)                  ;
Magic Number,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,WaitSignal,The following statement contains a magic number: for (int i = 0; i < 100 & ((BaseIOGroups.Mouse.p64.Byte & 2) != 0); i++)                  ;
Magic Number,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,WaitSignal,The following statement contains a magic number: for (int i = 0; i < 100 & ((BaseIOGroups.Mouse.p64.Byte & 2) != 0); i++)                  ;
Magic Number,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,HandleMouse,The following statement contains a magic number: switch (mouse_cycle)              {                  case 0:                      mouse_byte[0] = Read();                        //Bit 3 of byte 0 is 1' then we have a good package                      if ((mouse_byte[0] & 0x8) == 0x8)                          mouse_cycle++;                        break;                  case 1:                      mouse_byte[1] = Read();                      mouse_cycle++;                      break;                  case 2:                      mouse_byte[2] = Read();                      mouse_cycle = 0;                        if ((mouse_byte[0] & 0x10) == 0x10)                          X -= (mouse_byte[1] ^ 0xff);                      else                          X += mouse_byte[1];                        if ((mouse_byte[0] & 0x20) == 0x20)                          Y += (mouse_byte[2] ^ 0xff);                      else                          Y -= mouse_byte[2];                        if (X < 0)                          X = 0;                      else if (X > ScreenWidth - 1)                          X = (int)ScreenWidth - 1;                        if (Y < 0)                          Y = 0;                      else if (Y > ScreenHeight - 1)                          Y = (int)ScreenHeight - 1;                        Buttons = (MouseState)(mouse_byte[0] & 0x7);                        break;              }
Magic Number,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,HandleMouse,The following statement contains a magic number: switch (mouse_cycle)              {                  case 0:                      mouse_byte[0] = Read();                        //Bit 3 of byte 0 is 1' then we have a good package                      if ((mouse_byte[0] & 0x8) == 0x8)                          mouse_cycle++;                        break;                  case 1:                      mouse_byte[1] = Read();                      mouse_cycle++;                      break;                  case 2:                      mouse_byte[2] = Read();                      mouse_cycle = 0;                        if ((mouse_byte[0] & 0x10) == 0x10)                          X -= (mouse_byte[1] ^ 0xff);                      else                          X += mouse_byte[1];                        if ((mouse_byte[0] & 0x20) == 0x20)                          Y += (mouse_byte[2] ^ 0xff);                      else                          Y -= mouse_byte[2];                        if (X < 0)                          X = 0;                      else if (X > ScreenWidth - 1)                          X = (int)ScreenWidth - 1;                        if (Y < 0)                          Y = 0;                      else if (Y > ScreenHeight - 1)                          Y = (int)ScreenHeight - 1;                        Buttons = (MouseState)(mouse_byte[0] & 0x7);                        break;              }
Magic Number,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,HandleMouse,The following statement contains a magic number: switch (mouse_cycle)              {                  case 0:                      mouse_byte[0] = Read();                        //Bit 3 of byte 0 is 1' then we have a good package                      if ((mouse_byte[0] & 0x8) == 0x8)                          mouse_cycle++;                        break;                  case 1:                      mouse_byte[1] = Read();                      mouse_cycle++;                      break;                  case 2:                      mouse_byte[2] = Read();                      mouse_cycle = 0;                        if ((mouse_byte[0] & 0x10) == 0x10)                          X -= (mouse_byte[1] ^ 0xff);                      else                          X += mouse_byte[1];                        if ((mouse_byte[0] & 0x20) == 0x20)                          Y += (mouse_byte[2] ^ 0xff);                      else                          Y -= mouse_byte[2];                        if (X < 0)                          X = 0;                      else if (X > ScreenWidth - 1)                          X = (int)ScreenWidth - 1;                        if (Y < 0)                          Y = 0;                      else if (Y > ScreenHeight - 1)                          Y = (int)ScreenHeight - 1;                        Buttons = (MouseState)(mouse_byte[0] & 0x7);                        break;              }
Magic Number,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,HandleMouse,The following statement contains a magic number: switch (mouse_cycle)              {                  case 0:                      mouse_byte[0] = Read();                        //Bit 3 of byte 0 is 1' then we have a good package                      if ((mouse_byte[0] & 0x8) == 0x8)                          mouse_cycle++;                        break;                  case 1:                      mouse_byte[1] = Read();                      mouse_cycle++;                      break;                  case 2:                      mouse_byte[2] = Read();                      mouse_cycle = 0;                        if ((mouse_byte[0] & 0x10) == 0x10)                          X -= (mouse_byte[1] ^ 0xff);                      else                          X += mouse_byte[1];                        if ((mouse_byte[0] & 0x20) == 0x20)                          Y += (mouse_byte[2] ^ 0xff);                      else                          Y -= mouse_byte[2];                        if (X < 0)                          X = 0;                      else if (X > ScreenWidth - 1)                          X = (int)ScreenWidth - 1;                        if (Y < 0)                          Y = 0;                      else if (Y > ScreenHeight - 1)                          Y = (int)ScreenHeight - 1;                        Buttons = (MouseState)(mouse_byte[0] & 0x7);                        break;              }
Magic Number,Cosmos.HAL,PCI,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCI.cs,Setup,The following statement contains a magic number: if ((PCIDevice.GetHeaderType(0x0' 0x0' 0x0) & 0x80) == 0)              {                  CheckBus(0x0);              }              else              {                  for (ushort fn = 0; fn < 8; fn++)                  {                      if (PCIDevice.GetVendorID(0x0' 0x0' fn) != 0xFFFF)                          break;                        CheckBus(fn);                  }              }
Magic Number,Cosmos.HAL,PCI,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCI.cs,CheckBus,The following statement contains a magic number: for (ushort device = 0; device < 32; device++)              {                  if (PCIDevice.GetVendorID(xBus' device' 0x0) == 0xFFFF)                      continue;                    CheckFunction(new PCIDevice(xBus' device' 0x0));                  if ((PCIDevice.GetHeaderType(xBus' device' 0x0) & 0x80) != 0)                  {                      for (ushort fn = 1; fn < 8; fn++)                      {                          if (PCIDevice.GetVendorID(xBus' device' fn) != 0xFFFF)                              CheckFunction(new PCIDevice(xBus' device' fn));                      }                  }              }
Magic Number,Cosmos.HAL,PCI,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCI.cs,CheckBus,The following statement contains a magic number: for (ushort device = 0; device < 32; device++)              {                  if (PCIDevice.GetVendorID(xBus' device' 0x0) == 0xFFFF)                      continue;                    CheckFunction(new PCIDevice(xBus' device' 0x0));                  if ((PCIDevice.GetHeaderType(xBus' device' 0x0) & 0x80) != 0)                  {                      for (ushort fn = 1; fn < 8; fn++)                      {                          if (PCIDevice.GetVendorID(xBus' device' fn) != 0xFFFF)                              CheckFunction(new PCIDevice(xBus' device' fn));                      }                  }              }
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,PCIDevice,The following statement contains a magic number: if (HeaderType == PCIHeaderType.Normal)              {                  BaseAddressBar = new PCIBaseAddressBar[6];                  BaseAddressBar[0] = new PCIBaseAddressBar(ReadRegister32(0x10));                  BaseAddressBar[1] = new PCIBaseAddressBar(ReadRegister32(0x14));                  BaseAddressBar[2] = new PCIBaseAddressBar(ReadRegister32(0x18));                  BaseAddressBar[3] = new PCIBaseAddressBar(ReadRegister32(0x1C));                  BaseAddressBar[4] = new PCIBaseAddressBar(ReadRegister32(0x20));                  BaseAddressBar[5] = new PCIBaseAddressBar(ReadRegister32(0x24));              }
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,PCIDevice,The following statement contains a magic number: if (HeaderType == PCIHeaderType.Normal)              {                  BaseAddressBar = new PCIBaseAddressBar[6];                  BaseAddressBar[0] = new PCIBaseAddressBar(ReadRegister32(0x10));                  BaseAddressBar[1] = new PCIBaseAddressBar(ReadRegister32(0x14));                  BaseAddressBar[2] = new PCIBaseAddressBar(ReadRegister32(0x18));                  BaseAddressBar[3] = new PCIBaseAddressBar(ReadRegister32(0x1C));                  BaseAddressBar[4] = new PCIBaseAddressBar(ReadRegister32(0x20));                  BaseAddressBar[5] = new PCIBaseAddressBar(ReadRegister32(0x24));              }
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,PCIDevice,The following statement contains a magic number: if (HeaderType == PCIHeaderType.Normal)              {                  BaseAddressBar = new PCIBaseAddressBar[6];                  BaseAddressBar[0] = new PCIBaseAddressBar(ReadRegister32(0x10));                  BaseAddressBar[1] = new PCIBaseAddressBar(ReadRegister32(0x14));                  BaseAddressBar[2] = new PCIBaseAddressBar(ReadRegister32(0x18));                  BaseAddressBar[3] = new PCIBaseAddressBar(ReadRegister32(0x1C));                  BaseAddressBar[4] = new PCIBaseAddressBar(ReadRegister32(0x20));                  BaseAddressBar[5] = new PCIBaseAddressBar(ReadRegister32(0x24));              }
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,PCIDevice,The following statement contains a magic number: if (HeaderType == PCIHeaderType.Normal)              {                  BaseAddressBar = new PCIBaseAddressBar[6];                  BaseAddressBar[0] = new PCIBaseAddressBar(ReadRegister32(0x10));                  BaseAddressBar[1] = new PCIBaseAddressBar(ReadRegister32(0x14));                  BaseAddressBar[2] = new PCIBaseAddressBar(ReadRegister32(0x18));                  BaseAddressBar[3] = new PCIBaseAddressBar(ReadRegister32(0x1C));                  BaseAddressBar[4] = new PCIBaseAddressBar(ReadRegister32(0x20));                  BaseAddressBar[5] = new PCIBaseAddressBar(ReadRegister32(0x24));              }
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,PCIDevice,The following statement contains a magic number: if (HeaderType == PCIHeaderType.Normal)              {                  BaseAddressBar = new PCIBaseAddressBar[6];                  BaseAddressBar[0] = new PCIBaseAddressBar(ReadRegister32(0x10));                  BaseAddressBar[1] = new PCIBaseAddressBar(ReadRegister32(0x14));                  BaseAddressBar[2] = new PCIBaseAddressBar(ReadRegister32(0x18));                  BaseAddressBar[3] = new PCIBaseAddressBar(ReadRegister32(0x1C));                  BaseAddressBar[4] = new PCIBaseAddressBar(ReadRegister32(0x20));                  BaseAddressBar[5] = new PCIBaseAddressBar(ReadRegister32(0x24));              }
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetHeaderType,The following statement contains a magic number: return (byte)(IO.ConfigDataPort.DWord >> ((0xE % 4) * 8) & 0xFF);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetHeaderType,The following statement contains a magic number: return (byte)(IO.ConfigDataPort.DWord >> ((0xE % 4) * 8) & 0xFF);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetVendorID,The following statement contains a magic number: return (UInt16)(IO.ConfigDataPort.DWord >> ((0x0 % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetVendorID,The following statement contains a magic number: return (UInt16)(IO.ConfigDataPort.DWord >> ((0x0 % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,ReadRegister8,The following statement contains a magic number: return (byte)(IO.ConfigDataPort.DWord >> ((aRegister % 4) * 8) & 0xFF);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,ReadRegister8,The following statement contains a magic number: return (byte)(IO.ConfigDataPort.DWord >> ((aRegister % 4) * 8) & 0xFF);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,ReadRegister16,The following statement contains a magic number: return (UInt16)(IO.ConfigDataPort.DWord >> ((aRegister % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,ReadRegister16,The following statement contains a magic number: return (UInt16)(IO.ConfigDataPort.DWord >> ((aRegister % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetAddressBase,The following statement contains a magic number: return 0x80000000 | (aBus << 16) | ((aSlot & 0x1F) << 11) | ((aFunction & 0x07) << 8);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetAddressBase,The following statement contains a magic number: return 0x80000000 | (aBus << 16) | ((aSlot & 0x1F) << 11) | ((aFunction & 0x07) << 8);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetAddressBase,The following statement contains a magic number: return 0x80000000 | (aBus << 16) | ((aSlot & 0x1F) << 11) | ((aFunction & 0x07) << 8);
Magic Number,Cosmos.HAL,PCIDevice,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,ToHex,The following statement contains a magic number: return "0x" + aNumber.ToHex(aBits / 4);
Magic Number,Cosmos.HAL,PCIBaseAddressBar,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,PCIBaseAddressBar,The following statement contains a magic number: if (isIO)              {                  baseAddress = raw & 0xFFFFFFFC;              }              else              {                  type = (ushort)((raw >> 1) & 0x03);                  prefetchable = (ushort)((raw >> 3) & 0x01);                  switch (type)                  {                      case 0x00:                          baseAddress = raw & 0xFFFFFFF0;                          break;                      case 0x01:                          baseAddress = raw & 0xFFFFFFF0;                          break;                  }              }
Magic Number,Cosmos.HAL,PCIDeviceBridge,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceBridge.cs,PCIDeviceBridge,The following statement contains a magic number: BaseAddresses = new PCIBaseAddressBar[2];
Magic Number,Cosmos.HAL,PCIDeviceNormal,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses = new PCIBaseAddressBar[6];
Magic Number,Cosmos.HAL,PCIDeviceNormal,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses[2] = new PCIBaseAddressBar(ReadRegister32(0x18));
Magic Number,Cosmos.HAL,PCIDeviceNormal,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses[3] = new PCIBaseAddressBar(ReadRegister32(0x1C));
Magic Number,Cosmos.HAL,PCIDeviceNormal,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses[4] = new PCIBaseAddressBar(ReadRegister32(0x20));
Magic Number,Cosmos.HAL,PCIDeviceNormal,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses[5] = new PCIBaseAddressBar(ReadRegister32(0x24));
Magic Number,Cosmos.HAL,PCSpeaker,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,playSound,The following statement contains a magic number: Div = 1193180 / nFrequence;
Magic Number,Cosmos.HAL,PCSpeaker,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,playSound,The following statement contains a magic number: BaseIOGroups.PCSpeaker.p42.Byte = (byte)(Div >> 8);
Magic Number,Cosmos.HAL,PCSpeaker,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,playSound,The following statement contains a magic number: if (tmp != (tmp | 3))              {                  BaseIOGroups.PCSpeaker.p61.Byte = (byte)(tmp | 3);              }
Magic Number,Cosmos.HAL,PCSpeaker,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,playSound,The following statement contains a magic number: if (tmp != (tmp | 3))              {                  BaseIOGroups.PCSpeaker.p61.Byte = (byte)(tmp | 3);              }
Magic Number,Cosmos.HAL,PCSpeaker,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,beep,The following statement contains a magic number: playSound(1000);
Magic Number,Cosmos.HAL,PCSpeaker,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,beep,The following statement contains a magic number: UInt32 div = 1193180;
Magic Number,Cosmos.HAL,PIT,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PIT.cs,Wait,The following statement contains a magic number: RegisterTimer(new PITTimer(SignalWait' (int)(TimeoutMS * 1000000)' false));
Magic Number,Cosmos.HAL,RTC,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\RTC.cs,FromBCD,The following statement contains a magic number: return (byte)(((value >> 4) & 0x0F) * 10 + (value & 0x0F));
Magic Number,Cosmos.HAL,RTC,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\RTC.cs,FromBCD,The following statement contains a magic number: return (byte)(((value >> 4) & 0x0F) * 10 + (value & 0x0F));
Magic Number,Cosmos.HAL,RTC,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\RTC.cs,WaitForReady,The following statement contains a magic number: do              {                  rtc.Address.Byte = 10;              }              while ((rtc.Data.Byte & 0x80) != 0);
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,TextScreen,The following statement contains a magic number: mRow2Addr = (UInt32)(Cols * 2);
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,TextScreen,The following statement contains a magic number: mScrollSize = (UInt32)(Cols * (Rows - 1) * 2);
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetColors,The following statement contains a magic number: Color = (byte)((byte)(aForeground) | ((byte)(aBackground) << 4));
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetColors,The following statement contains a magic number: mTextClearCellValue = (UInt16)(Color << 8 | 0x00);
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorPos,The following statement contains a magic number: IO.Data3.Byte = (byte)(xPos >> 8);
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: value = 16 - ((16 * value) / 100);
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: value = 16 - ((16 * value) / 100);
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: value = 16 - ((16 * value) / 100);
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: if (value >= 16)                  value = 15;
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: if (value >= 16)                  value = 15;
Magic Number,Cosmos.HAL,TextScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorVisible,The following statement contains a magic number: IO.Data3.Byte |= (byte)(cursorDisable << 5);
Magic Number,Cosmos.HAL,TextScreenHelpers,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreenHelpers.cs,DebugNumber,The following statement contains a magic number: mDebugger.Send(((uint)aValue).ToString() + ((uint)aValue >> 32).ToString());
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: byte[] eeprom_mac = new byte[6];
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[1] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[2] = BinaryHelper.GetByteFrom32bit(result' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[2] = BinaryHelper.GetByteFrom32bit(result' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[3] = BinaryHelper.GetByteFrom32bit(result' 24);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[3] = BinaryHelper.GetByteFrom32bit(result' 24);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[4] = BinaryHelper.GetByteFrom32bit(result' 0);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[5] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[5] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock = new ManagedMemoryBlock(28' 4);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock = new ManagedMemoryBlock(28' 4);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mRxDescriptor = new ManagedMemoryBlock(256' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mRxDescriptor = new ManagedMemoryBlock(256' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mTxDescriptor = new ManagedMemoryBlock(256' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mTxDescriptor = new ManagedMemoryBlock(256' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x00' (0x4 << 28) | (0x4 << 20));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x00' (0x4 << 28) | (0x4 << 20));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32) (eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32) (eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32) (eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32) (eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32) (eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x08' (UInt32) (eeprom_mac[4] | (eeprom_mac[5] << 8)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x08' (UInt32) (eeprom_mac[4] | (eeprom_mac[5] << 8)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x08' (UInt32) (eeprom_mac[4] | (eeprom_mac[5] << 8)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16) (~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32) (buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16) (~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32) (buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16) (~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32) (buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16) (~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32) (buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: for (uint rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = rxd * 16;                    ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);                  mRxDescriptor.Write32(xOffset + 8' buffer.Offset);                  UInt16 buffer_len = (UInt16) (~buffer.Size);                  buffer_len++;                  UInt32 flags = (UInt32) (buffer_len & 0x0FFF) | 0xF000 | 0x80000000;                  mRxDescriptor.Write32(xOffset + 4' flags);                  mRxBuffers.Add(buffer);              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);                  mTxDescriptor.Write32(xOffset + 8' buffer.Offset);                  mTxBuffers.Add(buffer);              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);                  mTxDescriptor.Write32(xOffset + 8' buffer.Offset);                  mTxBuffers.Add(buffer);              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);                  mTxDescriptor.Write32(xOffset + 8' buffer.Offset);                  mTxBuffers.Add(buffer);              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: for (uint txd = 0; txd < 16; txd++)              {                  uint xOffset = txd * 16;                    ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);                  mTxDescriptor.Write32(xOffset + 8' buffer.Offset);                  mTxBuffers.Add(buffer);              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,SendBytes,The following statement contains a magic number: if (mNextTXDesc >= 16)              {                  mNextTXDesc = 0;              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,SendBytes,The following statement contains a magic number: uint xOffset = (uint) (txd * 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,SendBytes,The following statement contains a magic number: UInt32 status = mTxDescriptor.Read32(xOffset + 4);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,SendBytes,The following statement contains a magic number: if ((status & 0x80000000) == 0)              {                  for (uint b = 0; b < aData.Length; b++)                  {                      mTxBuffers[txd][b] = aData[b];                  }                  //UInt16 buffer_len = (UInt16)(aData.Length < 64 ? 64 : aData.Length);                  UInt16 buffer_len = (UInt16) aData.Length;                  buffer_len = (UInt16) (~buffer_len);                  buffer_len++;                    UInt32 flags = (UInt32) ((buffer_len) & 0x0FFF) | 0x0300F000 | 0x80000000;                    mTxDescriptor.Write32(xOffset + 4' flags);                    return true;              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint) (rxd * 16);                  status = mRxDescriptor.Read32(xOffset + 4);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16) (mRxDescriptor[xOffset + 0] & 0xFFF);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptor.Write32(xOffset + 4' status | 0x80000000);                  }              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint) (rxd * 16);                  status = mRxDescriptor.Read32(xOffset + 4);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16) (mRxDescriptor[xOffset + 0] & 0xFFF);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptor.Write32(xOffset + 4' status | 0x80000000);                  }              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint) (rxd * 16);                  status = mRxDescriptor.Read32(xOffset + 4);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16) (mRxDescriptor[xOffset + 0] & 0xFFF);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptor.Write32(xOffset + 4' status | 0x80000000);                  }              }
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: for (int rxd = 0; rxd < 16; rxd++)              {                  uint xOffset = (uint) (rxd * 16);                  status = mRxDescriptor.Read32(xOffset + 4);                  if ((status & 0x80000000) == 0)                  {                      recv_size = (UInt16) (mRxDescriptor[xOffset + 0] & 0xFFF);                      recv_data = new byte[recv_size];                      for (uint b = 0; b < recv_size; b++)                      {                          recv_data[b] = mRxBuffers[rxd][b];                      }                        if (DataReceived != null)                      {                          DataReceived(recv_data);                      }                      else                      {                          mRecvBuffer.Enqueue(recv_data);                      }                        mRxDescriptor.Write32(xOffset + 4' status | 0x80000000);                  }              }
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,SetMode,The following statement contains a magic number: this.depth = (depth / 8);
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,WriteToFifo,The following statement contains a magic number: if (((GetFIFO(FIFO.NextCmd) == GetFIFO(FIFO.Max) - 4) && GetFIFO(FIFO.Stop) == GetFIFO(FIFO.Min)) ||                  (GetFIFO(FIFO.NextCmd) + 4 == GetFIFO(FIFO.Stop)))                  WaitForFifo();
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,WriteToFifo,The following statement contains a magic number: if (((GetFIFO(FIFO.NextCmd) == GetFIFO(FIFO.Max) - 4) && GetFIFO(FIFO.Stop) == GetFIFO(FIFO.Min)) ||                  (GetFIFO(FIFO.NextCmd) + 4 == GetFIFO(FIFO.Stop)))                  WaitForFifo();
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,WriteToFifo,The following statement contains a magic number: SetFIFO(FIFO.NextCmd' GetFIFO(FIFO.NextCmd) + 4);
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,DefineCursor,The following statement contains a magic number: WriteToFifo(2);
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,DefineCursor,The following statement contains a magic number: WriteToFifo(2);
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,DefineCursor,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  WriteToFifo(0);
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,DefineCursor,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  WriteToFifo(0xFFFFFF);
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: var xBroadcastArray = new byte[6];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[2] = 0xFF;
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[3] = 0xFF;
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[4] = 0xFF;
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[5] = 0xFF;
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: var xNoneArray = new byte[6];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[2] = 0x00;
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[3] = 0x00;
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[4] = 0x00;
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[5] = 0x00;
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: if (address == null || address.Length != 6)                  throw new ArgumentException("MACAddress is null or has wrong length"' "address");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = address[2];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = address[2];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = address[3];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = address[3];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = address[4];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = address[4];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = address[5];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = address[5];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: if (buffer == null || buffer.Length < (offset + 6))                  throw new ArgumentException("buffer does not contain enough data starting at offset"' "buffer");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = buffer[offset + 2];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = buffer[offset + 2];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = buffer[offset + 3];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = buffer[offset + 3];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = buffer[offset + 4];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = buffer[offset + 4];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = buffer[offset + 5];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = buffer[offset + 5];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,IsValid,The following statement contains a magic number: return bytes != null && bytes.Length == 6;
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                  int i = 0;                  i = bytes[0].CompareTo(other.bytes[0]);                  if (i != 0) return i;                  i = bytes[1].CompareTo(other.bytes[1]);                  if (i != 0) return i;                  i = bytes[2].CompareTo(other.bytes[2]);                  if (i != 0) return i;                  i = bytes[3].CompareTo(other.bytes[3]);                  if (i != 0) return i;                  i = bytes[4].CompareTo(other.bytes[4]);                  if (i != 0) return i;                  i = bytes[5].CompareTo(other.bytes[5]);                  if (i != 0) return i;                    return 0;              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: if (obj is MACAddress)              {                  MACAddress other = (MACAddress)obj;                    return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];              }              else                  throw new ArgumentException("obj is not a MACAddress"' "obj");
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,PutByte,The following statement contains a magic number: aChars[aIndex + 0] = xChars[(aByte >> 4) & 0xF];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: var xChars = new char[17];
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[2] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 3' bytes[1]);
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[5] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 6' bytes[2]);
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 6' bytes[2]);
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[8] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 9' bytes[3]);
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 9' bytes[3]);
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[11] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 12' bytes[4]);
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 12' bytes[4]);
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[14] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 15' bytes[5]);
Magic Number,Cosmos.HAL.Network,MACAddress,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 15' bytes[5]);
Missing Default,Cosmos.HAL,VGAScreen,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following switch statement is missing a default case: switch (seg)              {                  case 0:                  case 1:                      return mIO.VGAMemoryBlock;                  case 2:                      return mIO.MonochromeTextMemoryBlock;                  case 3:                      return mIO.CGATextMemoryBlock;              }
Missing Default,Cosmos.HAL,Mouse,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Mouse.cs,HandleMouse,The following switch statement is missing a default case: switch (mouse_cycle)              {                  case 0:                      mouse_byte[0] = Read();                        //Bit 3 of byte 0 is 1' then we have a good package                      if ((mouse_byte[0] & 0x8) == 0x8)                          mouse_cycle++;                        break;                  case 1:                      mouse_byte[1] = Read();                      mouse_cycle++;                      break;                  case 2:                      mouse_byte[2] = Read();                      mouse_cycle = 0;                        if ((mouse_byte[0] & 0x10) == 0x10)                          X -= (mouse_byte[1] ^ 0xff);                      else                          X += mouse_byte[1];                        if ((mouse_byte[0] & 0x20) == 0x20)                          Y += (mouse_byte[2] ^ 0xff);                      else                          Y -= mouse_byte[2];                        if (X < 0)                          X = 0;                      else if (X > ScreenWidth - 1)                          X = (int)ScreenWidth - 1;                        if (Y < 0)                          Y = 0;                      else if (Y > ScreenHeight - 1)                          Y = (int)ScreenHeight - 1;                        Buttons = (MouseState)(mouse_byte[0] & 0x7);                        break;              }
Missing Default,Cosmos.HAL,DeviceClass,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetString,The following switch statement is missing a default case: switch (device.VendorID)                  {                      case 0x1022: //AMD                          switch (device.DeviceID)                          {                              case 0x2000:                                  return "AMD PCnet LANCE PCI Ethernet Controller";                          }                          break;                      case 0x104B: //Sony                          switch (device.DeviceID)                          {                              case 0x1040:                                  return "Mylex BT958 SCSI Host Adaptor";                          }                          break;                      case 0x1274: //Ensoniq                          switch (device.DeviceID)                          {                              case 0x1371:                                  return "Ensoniq AudioPCI";                          }                          break;                      case 0x15AD: //VMware                          switch (device.DeviceID)                          {                              case 0x0405:                                  return "VMware NVIDIA 9500MGS";                              case 0x0770:                                  return "VMware Standard Enhanced PCI to USB Host Controller";                              case 0x0790:                                  return "VMware 6.0 Virtual USB 2.0 Host Controller";                              case 0x07A0:                                  return "VMware PCI Express Root Port";                          }                          break;                      case 0x8086: //Intel                          switch (device.DeviceID)                          {                              case 0x7190:                                  return "Intel 440BX/ZX AGPset Host Bridge";                              case 0x7191:                                  return "Intel 440BX/ZX AGPset PCI-to-PCI bridge";                              case 0x7110:                                  return "Intel PIIX4/4E/4M ISA Bridge";                              case 0x7112:                                  return "Intel PIIX4/4E/4M USB Interface";                          }                          break;                  }
Missing Default,Cosmos.HAL,DeviceClass,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetString,The following switch statement is missing a default case: switch (device.DeviceID)                          {                              case 0x2000:                                  return "AMD PCnet LANCE PCI Ethernet Controller";                          }
Missing Default,Cosmos.HAL,DeviceClass,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetString,The following switch statement is missing a default case: switch (device.DeviceID)                          {                              case 0x1040:                                  return "Mylex BT958 SCSI Host Adaptor";                          }
Missing Default,Cosmos.HAL,DeviceClass,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetString,The following switch statement is missing a default case: switch (device.DeviceID)                          {                              case 0x1371:                                  return "Ensoniq AudioPCI";                          }
Missing Default,Cosmos.HAL,DeviceClass,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetString,The following switch statement is missing a default case: switch (device.DeviceID)                          {                              case 0x0405:                                  return "VMware NVIDIA 9500MGS";                              case 0x0770:                                  return "VMware Standard Enhanced PCI to USB Host Controller";                              case 0x0790:                                  return "VMware 6.0 Virtual USB 2.0 Host Controller";                              case 0x07A0:                                  return "VMware PCI Express Root Port";                          }
Missing Default,Cosmos.HAL,DeviceClass,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetString,The following switch statement is missing a default case: switch (device.DeviceID)                          {                              case 0x7190:                                  return "Intel 440BX/ZX AGPset Host Bridge";                              case 0x7191:                                  return "Intel 440BX/ZX AGPset PCI-to-PCI bridge";                              case 0x7110:                                  return "Intel PIIX4/4E/4M ISA Bridge";                              case 0x7112:                                  return "Intel PIIX4/4E/4M USB Interface";                          }
Missing Default,Cosmos.HAL,DeviceClass,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,GetString,The following switch statement is missing a default case: switch (device.ClassCode)                  {                      //case 0x00:                      //    return "Any device";                      case 0x01:                          return "Mass Storage Controller";                      case 0x02:                          return "Network Controller";                      case 0x03:                          return "Display Controller";                      case 0x04:                          return "Multimedia Controller";                      case 0x05:                          return "Memory Controller";                      case 0x06:                          return "Bridge Device";                      case 0x07:                          return "Simple Communication Controller";                      case 0x08:                          return "Base System Peripheral";                      case 0x09:                          return "Input Device";                      case 0x0A:                          return "Docking Station";                      case 0x0B:                          return "Processor";                      case 0x0C:                          return "Serial Bus Controller";                      case 0x0D:                          return "Wireless Controller";                      case 0x0E:                          return "Intelligent I/O Controller";                      case 0x0F:                          return "Satellite Communication Controller";                      case 0x10:                          return "Encryption/Decryption Controller";                      case 0x11:                          return "Data Acquisition and Signal Processing Controller";                          //case 0xFF:                          //    return "Unkown device";                  }
Missing Default,Cosmos.HAL,PCIBaseAddressBar,C:\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PciDevice.cs,PCIBaseAddressBar,The following switch statement is missing a default case: switch (type)                  {                      case 0x00:                          baseAddress = raw & 0xFFFFFFF0;                          break;                      case 0x01:                          baseAddress = raw & 0xFFFFFFF0;                          break;                  }
