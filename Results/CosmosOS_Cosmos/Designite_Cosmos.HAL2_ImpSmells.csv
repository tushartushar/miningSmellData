Implementation smell,Namespace,Class,File,Method,Description
Long Method,Cosmos.HAL,DeviceClass,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetTypeString,The method has 467 lines of code.
Complex Method,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,AHCI,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetPorts,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,CheckPortType,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,Cyclomatic complexity of the method is 13
Complex Method,Cosmos.HAL.BlockDevice,IDE,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\IDE.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA28Command,Cyclomatic complexity of the method is 10
Complex Method,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,Cyclomatic complexity of the method is 9
Complex Method,Cosmos.HAL,DeviceClass,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetDeviceString,Cyclomatic complexity of the method is 25
Complex Method,Cosmos.HAL,DeviceClass,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetTypeString,Cyclomatic complexity of the method is 167
Complex Method,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,IdentifyDevice,Cyclomatic complexity of the method is 9
Complex Method,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,TestPort,Cyclomatic complexity of the method is 8
Complex Method,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,Cyclomatic complexity of the method is 11
Complex Method,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,Cyclomatic complexity of the method is 8
Long Parameter List,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,Copy,The method has 6 parameters. Parameters: x' y' newX' newY' width' height
Long Parameter List,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,Fill,The method has 5 parameters. Parameters: x' y' width' height' color
Long Identifier,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,,The length of the parameter SupportsMechanicalPresenceSwitch is 32.
Long Identifier,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,,The length of the parameter SupportsAggressiveLinkPowerManagement is 37.
Long Identifier,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,,The length of the parameter CommandCompletionCoalsecingSupported is 36.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectDrive,The length of the statement  "			IO.DeviceSelect.Byte = (byte)((byte)(DvcSelVal.Default | DvcSelVal.LBA | (mBusPosition == BusPositionEnum.Slave ? DvcSelVal.Slave : 0)) | aLbaHigh4); " is 149.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			//To use the IDENTIFY command' select a target drive by sending 0xA0 for the master drive' or 0xB0 for the slave' to the "drive select" IO port. On the Primary bus' this would be port 0x1F6. " is 190.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			// Then read the Status port (0x1F7) again. If the value read is 0' the drive does not exist. For any other value: poll the Status port (0x1F7) until bit 7 (BSY' value = 0x80) clears. " is 183.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			// Because of some ATAPI drives that do not follow spec' at this point you need to check the LBAmid and LBAhi ports (0x1F4 and 0x1F5) to see if they are non-zero. " is 162.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			// If so' the drive is not ATA' and you should stop polling. Otherwise' continue polling one of the Status ports until bit 3 (DRQ' value = 8) sets' or until bit 0 (ERR' value = 1) sets. " is 185.
Long Statement,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The length of the statement  "			// At that point' if ERR is clear' the data is ready to read from the Data port (0x1F0). Read 256 words' and store them. " is 120.
Long Statement,Cosmos.HAL.BlockDevice,IDE,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\IDE.cs,Initialize,The length of the statement  "            var xIO = aControllerID == Ata.ControllerIdEnum.Primary ? Core.Global.BaseIOGroups.ATA1 : Core.Global.BaseIOGroups.ATA2; " is 120.
Long Statement,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA28Command,The length of the statement  "                xCMDTable.PRDTEntry[xCMDHeader.PRDTL - 1].DBC = aCount * 512 - 1;   // 8K bytes (this value should always be set to 1 less than the actual value) " is 145.
Long Statement,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The length of the statement  "            xCMDTable.PRDTEntry[xCMDHeader.PRDTL - 1].DBC = (aCount * 512) - 1;   // 8K bytes (this value should always be set to 1 less than the actual value) " is 147.
Long Statement,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The length of the statement  "                xCMDTable.PRDTEntry[i].DBC = 8 * 1024 - 1;   // 8K bytes (this value should always be set to 1 less than the actual value) " is 122.
Long Statement,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The length of the statement  "            xCMDTable.PRDTEntry[xCMDHeader.PRDTL - 1].DBC = aCount * 512 - 1;   // 8K bytes (this value should always be set to 1 less than the actual value) " is 145.
Long Statement,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The length of the statement  "            // Cursor Vertical Size Register here a value between 0x00 and 0x0F must be set with 0x00 meaning maximum size and 0x0F minimum " is 127.
Long Statement,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorVisible,The length of the statement  "            // The VGA Cursor is disabled when the value is 1 and enabled when is 0 so we need to invert 'value'' sadly the ConvertToByte() function is not working " is 151.
Complex Conditional,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The conditional expression  "(aPort.CMD & (uint)CommandAndStatus.CMDListRunning) == 0 &&                      (aPort.CMD & (uint)CommandAndStatus.FISRecieveRunning) == 0 &&                      (aPort.CMD & (uint)CommandAndStatus.StartProccess) == 0 &&                      (aPort.CMD & (uint)CommandAndStatus.FISRecieveEnable) == 0"  is complex.
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,AHCI,The following statement contains a magic number: mABAR = aAHCIDevice.BaseAddressBar[5].BaseAddress;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,AHCI,The following statement contains a magic number: mGeneric = new GenericRegisters(aAHCIDevice.BaseAddressBar[5].BaseAddress);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,AHCI,The following statement contains a magic number: mGeneric.GlobalHostControl |= (1U << 31);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,AHCI,The following statement contains a magic number: var xMBRData = new byte[512];
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,AHCI,The following statement contains a magic number: var xEBRData = new byte[512];
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsExternalSATA                  = (mGeneric.Capabilities >> 5 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: EnclosureManagementSupported          = (mGeneric.Capabilities >> 6 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: CommandCompletionCoalsecingSupported  = (mGeneric.Capabilities >> 7 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: NumOfCommandSlots                     = mGeneric.Capabilities >> 8 & 0x1F;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: PartialStateCapable                   = (mGeneric.Capabilities >> 13 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SlumberStateCapable                   = (mGeneric.Capabilities >> 14 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: PIOMultipleDRQBlock                   = (mGeneric.Capabilities >> 15 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: FISBasedSwitchingSupported            = (mGeneric.Capabilities >> 16 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsPortMutliplier                = (mGeneric.Capabilities >> 17 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsAHCIModeOnly                  = (mGeneric.Capabilities >> 18 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: InterfaceSpeedSupport                 = mGeneric.Capabilities >> 20 & 0x0F;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsCommandListOverride           = (mGeneric.Capabilities >> 24 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsActivityLED                   = (mGeneric.Capabilities >> 25 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsAggressiveLinkPowerManagement = (mGeneric.Capabilities >> 26 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsStaggeredSpinup               = (mGeneric.Capabilities >> 27 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsMechanicalPresenceSwitch      = (mGeneric.Capabilities >> 28 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsSNotificationRegister         = (mGeneric.Capabilities >> 29 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: SupportsNativeCommandQueuing          = (mGeneric.Capabilities >> 30 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCapabilities,The following statement contains a magic number: Supports64bitAddressing               = (mGeneric.Capabilities >> 31 & 1) == 1;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetPorts,The following statement contains a magic number: xPort < 32
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,CheckPortType,The following statement contains a magic number: var xIPM = (InterfacePowerManagementStatus)((aPort.SSTS >> 8) & 0x0F);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,CheckPortType,The following statement contains a magic number: var xSPD = (CurrentInterfaceSpeedStatus)((aPort.SSTS >> 4) & 0x0F);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,CheckPortType,The following statement contains a magic number: xSignature >>= 16;
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,PortRebase,The following statement contains a magic number: new MemoryBlock(aPort.CLB' 1024).Fill(0);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,PortRebase,The following statement contains a magic number: new MemoryBlock(aPort.FB' 256).Fill(0);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCommandHeader,The following statement contains a magic number: HBACommandHeader[] xCMDHeader = new HBACommandHeader[32];
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,GetCommandHeader,The following statement contains a magic number: xCMDHeader[i] = new HBACommandHeader(aPort.CLB' i)                  {                      PRDTL = 8'                                             CTBA = (uint)(Base.AHCI + 0xA000) + (0x2000 * aPort.mPortNumber) + (0x100 * i)'                        CTBAU = 0                  };
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StartCMD,The following statement contains a magic number: Wait(5000);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StartCMD,The following statement contains a magic number: xSpin < 101
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StartCMD,The following statement contains a magic number: xSpin == 101
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StartCMD,The following statement contains a magic number: aPort.CMD |= (1 << 4);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: Wait(5000);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: xSpin < 101
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: xSpin == 101
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: Wait(50);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: xSpin < 101
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: xSpin == 101
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: aPort.CMD &= ~(1U << 4);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: aPort.CMD |= (1U << 3);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: Wait(5000);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: xSpin < 101
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: aPort.CMD |= (1U << 3);
Magic Number,Cosmos.HAL.BlockDevice,AHCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AHCI.cs,StopCMD,The following statement contains a magic number: xSpin == 101
Magic Number,Cosmos.HAL.BlockDevice,Ata,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ata.cs,Ata,The following statement contains a magic number: mBlockSize = 512;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,GetString,The following statement contains a magic number: xChars[i * 2] = (char)(xChar >> 8);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,GetString,The following statement contains a magic number: xChars[i * 2] = (char)(xChar >> 8);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,GetString,The following statement contains a magic number: xChars[i * 2 + 1] = (char)xChar;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,GetString,The following statement contains a magic number: i < aStringLength / 2
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: var xBuff = new UInt16[256];
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mSerialNo = GetString(xBuff' 10' 20);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mSerialNo = GetString(xBuff' 10' 20);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mFirmwareRev = GetString(xBuff' 23' 8);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mFirmwareRev = GetString(xBuff' 23' 8);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mModelNo = GetString(xBuff' 27' 40);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mModelNo = GetString(xBuff' 27' 40);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt32)xBuff[61] << 16 | xBuff[60]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt32)xBuff[61] << 16 | xBuff[60]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt32)xBuff[61] << 16 | xBuff[60]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: LBA48Bit = (xBuff[83] & 0x40) != 0;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,InitDrive,The following statement contains a magic number: mBlockCount = ((UInt64)xBuff[102] << 32 | (UInt64)xBuff[101] << 16 | (UInt64)xBuff[100]) - 1;
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: SelectDrive((byte)(aSectorNo >> 24));
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: IO.LBA0.Byte = (byte)(aSectorNo >> 24);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: IO.LBA1.Byte = (byte)(aSectorNo >> 32);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: IO.LBA1.Byte = (byte)(aSectorNo >> 8);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: IO.LBA2.Byte = (byte)(aSectorNo >> 40);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,SelectSector,The following statement contains a magic number: IO.LBA2.Byte = (byte)(aSectorNo >> 16);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,WriteBlock,The following statement contains a magic number: xValue = (UInt16)((aData[i * 2 + 1] << 8) | aData[i * 2]);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,WriteBlock,The following statement contains a magic number: xValue = (UInt16)((aData[i * 2 + 1] << 8) | aData[i * 2]);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,WriteBlock,The following statement contains a magic number: xValue = (UInt16)((aData[i * 2 + 1] << 8) | aData[i * 2]);
Magic Number,Cosmos.HAL.BlockDevice,AtaPio,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\AtaPio.cs,WriteBlock,The following statement contains a magic number: i < aData.Length / 2
Magic Number,Cosmos.HAL.BlockDevice,EBR,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\EBR.cs,EBR,The following statement contains a magic number: ParsePartition(aEBR' 446);
Magic Number,Cosmos.HAL.BlockDevice,EBR,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\EBR.cs,EBR,The following statement contains a magic number: ParsePartition(aEBR' 462);
Magic Number,Cosmos.HAL.BlockDevice,EBR,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\EBR.cs,ParsePartition,The following statement contains a magic number: byte xSystemID = aEBR[aLoc + 4];
Magic Number,Cosmos.HAL.BlockDevice,IDE,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\IDE.cs,Initialize,The following statement contains a magic number: var xMbrData = new byte[512];
Magic Number,Cosmos.HAL.BlockDevice,IDE,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\IDE.cs,Initialize,The following statement contains a magic number: var xEbrData = new byte[512];
Magic Number,Cosmos.HAL.BlockDevice,MBR,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,MBR,The following statement contains a magic number: ParsePartition(aMBR' 446);
Magic Number,Cosmos.HAL.BlockDevice,MBR,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,MBR,The following statement contains a magic number: ParsePartition(aMBR' 462);
Magic Number,Cosmos.HAL.BlockDevice,MBR,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,MBR,The following statement contains a magic number: ParsePartition(aMBR' 478);
Magic Number,Cosmos.HAL.BlockDevice,MBR,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,MBR,The following statement contains a magic number: ParsePartition(aMBR' 494);
Magic Number,Cosmos.HAL.BlockDevice,MBR,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,ParsePartition,The following statement contains a magic number: byte xSystemID = aMBR[aLoc + 4];
Magic Number,Cosmos.HAL.BlockDevice,MBR,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\MBR.cs,ParsePartition,The following statement contains a magic number: EBRLocation = BitConverter.ToUInt32(aMBR' (int)aLoc + 8);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: aSATAPort.mPortType != PortType.SATA || (aSATAPort.CMD & (1U << 24)) != 0
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: UInt16[] xBuffer = new UInt16[256];
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: mSerialNo = GetString(xBuffer' 10' 20);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: mSerialNo = GetString(xBuffer' 10' 20);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: mFirmwareRev = GetString(xBuffer' 23' 8);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: mFirmwareRev = GetString(xBuffer' 23' 8);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: mModelNo = GetString(xBuffer' 27' 40);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: mModelNo = GetString(xBuffer' 27' 40);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: mBlockCount = ((UInt32)xBuffer[61] << 16 | xBuffer[60]) - 1;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: mBlockCount = ((UInt32)xBuffer[61] << 16 | xBuffer[60]) - 1;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SATA,The following statement contains a magic number: mBlockCount = ((UInt32)xBuffer[61] << 16 | xBuffer[60]) - 1;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATACommand,The following statement contains a magic number: xCMDHeader.CFL = 5;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATACommand,The following statement contains a magic number: xCMDTable.PRDTEntry[0].DBC = 511;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATACommand,The following statement contains a magic number: ((mPortReg.TFD & 0x88) != 0) && xSpin < 1000000
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATACommand,The following statement contains a magic number: xSpin == 1000000
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATACommand,The following statement contains a magic number: (mPortReg.IS & (1 << 30)) != 0
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA28Command,The following statement contains a magic number: xCMDHeader.CFL = 5;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA28Command,The following statement contains a magic number: xCMDTable.PRDTEntry[xCMDHeader.PRDTL - 1].DBC = 511;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA28Command,The following statement contains a magic number: ((mPortReg.TFD & 0x88) != 0) && xSpin < 1000000
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA28Command,The following statement contains a magic number: xSpin == 1000000
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA28Command,The following statement contains a magic number: (mPortReg.IS & (1 << 30)) != 0
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: xCMDHeader.CFL = 5;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: xCMDTable.PRDTEntry[xCMDHeader.PRDTL - 1].DBC = (aCount * 512) - 1;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: FISRegisterH2D xCMDFIS = new FISRegisterH2D(xCMDTable.CFIS)              {                  FISType = (byte)FISType.FIS_Type_RegisterH2D'                  IsCommand = 1'                  Command = (byte)aCommand'                    LBA0 = (byte)((aStart >> 00) & 0xFF)'                  LBA1 = (byte)((aStart >> 08) & 0xFF)'                  LBA2 = (byte)((aStart >> 16) & 0xFF)'                  LBA3 = (byte)((aStart >> 24) & 0xFF)'                  LBA4 = (byte)((aStart >> 32) & 0xFF)'                  LBA5 = (byte)((aStart >> 40) & 0xFF)'                    Device = 1 << 6'                    CountL = (byte)(aCount & 0xFF)'                  CountH = (byte)((aCount >> 8) & 0xFF)              };
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: FISRegisterH2D xCMDFIS = new FISRegisterH2D(xCMDTable.CFIS)              {                  FISType = (byte)FISType.FIS_Type_RegisterH2D'                  IsCommand = 1'                  Command = (byte)aCommand'                    LBA0 = (byte)((aStart >> 00) & 0xFF)'                  LBA1 = (byte)((aStart >> 08) & 0xFF)'                  LBA2 = (byte)((aStart >> 16) & 0xFF)'                  LBA3 = (byte)((aStart >> 24) & 0xFF)'                  LBA4 = (byte)((aStart >> 32) & 0xFF)'                  LBA5 = (byte)((aStart >> 40) & 0xFF)'                    Device = 1 << 6'                    CountL = (byte)(aCount & 0xFF)'                  CountH = (byte)((aCount >> 8) & 0xFF)              };
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: FISRegisterH2D xCMDFIS = new FISRegisterH2D(xCMDTable.CFIS)              {                  FISType = (byte)FISType.FIS_Type_RegisterH2D'                  IsCommand = 1'                  Command = (byte)aCommand'                    LBA0 = (byte)((aStart >> 00) & 0xFF)'                  LBA1 = (byte)((aStart >> 08) & 0xFF)'                  LBA2 = (byte)((aStart >> 16) & 0xFF)'                  LBA3 = (byte)((aStart >> 24) & 0xFF)'                  LBA4 = (byte)((aStart >> 32) & 0xFF)'                  LBA5 = (byte)((aStart >> 40) & 0xFF)'                    Device = 1 << 6'                    CountL = (byte)(aCount & 0xFF)'                  CountH = (byte)((aCount >> 8) & 0xFF)              };
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: FISRegisterH2D xCMDFIS = new FISRegisterH2D(xCMDTable.CFIS)              {                  FISType = (byte)FISType.FIS_Type_RegisterH2D'                  IsCommand = 1'                  Command = (byte)aCommand'                    LBA0 = (byte)((aStart >> 00) & 0xFF)'                  LBA1 = (byte)((aStart >> 08) & 0xFF)'                  LBA2 = (byte)((aStart >> 16) & 0xFF)'                  LBA3 = (byte)((aStart >> 24) & 0xFF)'                  LBA4 = (byte)((aStart >> 32) & 0xFF)'                  LBA5 = (byte)((aStart >> 40) & 0xFF)'                    Device = 1 << 6'                    CountL = (byte)(aCount & 0xFF)'                  CountH = (byte)((aCount >> 8) & 0xFF)              };
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: FISRegisterH2D xCMDFIS = new FISRegisterH2D(xCMDTable.CFIS)              {                  FISType = (byte)FISType.FIS_Type_RegisterH2D'                  IsCommand = 1'                  Command = (byte)aCommand'                    LBA0 = (byte)((aStart >> 00) & 0xFF)'                  LBA1 = (byte)((aStart >> 08) & 0xFF)'                  LBA2 = (byte)((aStart >> 16) & 0xFF)'                  LBA3 = (byte)((aStart >> 24) & 0xFF)'                  LBA4 = (byte)((aStart >> 32) & 0xFF)'                  LBA5 = (byte)((aStart >> 40) & 0xFF)'                    Device = 1 << 6'                    CountL = (byte)(aCount & 0xFF)'                  CountH = (byte)((aCount >> 8) & 0xFF)              };
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: FISRegisterH2D xCMDFIS = new FISRegisterH2D(xCMDTable.CFIS)              {                  FISType = (byte)FISType.FIS_Type_RegisterH2D'                  IsCommand = 1'                  Command = (byte)aCommand'                    LBA0 = (byte)((aStart >> 00) & 0xFF)'                  LBA1 = (byte)((aStart >> 08) & 0xFF)'                  LBA2 = (byte)((aStart >> 16) & 0xFF)'                  LBA3 = (byte)((aStart >> 24) & 0xFF)'                  LBA4 = (byte)((aStart >> 32) & 0xFF)'                  LBA5 = (byte)((aStart >> 40) & 0xFF)'                    Device = 1 << 6'                    CountL = (byte)(aCount & 0xFF)'                  CountH = (byte)((aCount >> 8) & 0xFF)              };
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: FISRegisterH2D xCMDFIS = new FISRegisterH2D(xCMDTable.CFIS)              {                  FISType = (byte)FISType.FIS_Type_RegisterH2D'                  IsCommand = 1'                  Command = (byte)aCommand'                    LBA0 = (byte)((aStart >> 00) & 0xFF)'                  LBA1 = (byte)((aStart >> 08) & 0xFF)'                  LBA2 = (byte)((aStart >> 16) & 0xFF)'                  LBA3 = (byte)((aStart >> 24) & 0xFF)'                  LBA4 = (byte)((aStart >> 32) & 0xFF)'                  LBA5 = (byte)((aStart >> 40) & 0xFF)'                    Device = 1 << 6'                    CountL = (byte)(aCount & 0xFF)'                  CountH = (byte)((aCount >> 8) & 0xFF)              };
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: ((mPortReg.TFD & 0x88) != 0) && xSpin < 1000000
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: xSpin == 1000000
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,SendSATA48Command,The following statement contains a magic number: (mPortReg.IS & (1 << 30)) != 0
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,PortReset,The following statement contains a magic number: AHCI.Wait(10000);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,PortReset,The following statement contains a magic number: i <= 50
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,PortReset,The following statement contains a magic number: i == 101
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,PortReset,The following statement contains a magic number: AHCI.Wait(1000);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,PortReset,The following statement contains a magic number: (aPort.SSTS & 0x0F) != 3
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,FindCMDSlot,The following statement contains a magic number: i < 32
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,GetString,The following statement contains a magic number: xChars[i * 2] = (char)(xChar >> 8);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,GetString,The following statement contains a magic number: xChars[i * 2] = (char)(xChar >> 8);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,GetString,The following statement contains a magic number: xChars[i * 2 + 1] = (char)xChar;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATA,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Sata.cs,GetString,The following statement contains a magic number: i < aStringLength / 2
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SATAPI,The following statement contains a magic number: aSATAPIPort.mPortType != PortType.SATAPI || (aSATAPIPort.CMD & (1U << 24)) == 0
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SATAPI,The following statement contains a magic number: mBlockSize = 2048;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xCMDHeader.CFL = 5;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xCMDHeader.PRDTL = (ushort)(((aCount - 1) >> 4) + 1);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xCMDHeader.CTBA = Heap.MemAlloc(128 + ((uint)xCMDHeader.PRDTL) * 16);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xCMDHeader.CTBA = Heap.MemAlloc(128 + ((uint)xCMDHeader.PRDTL) * 16);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xCMDTable.PRDTEntry[i].DBC = 8 * 1024 - 1;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xCMDTable.PRDTEntry[i].DBC = 8 * 1024 - 1;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: DataBaseAddress += 8 * 1024;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: DataBaseAddress += 8 * 1024;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: aCount -= 16;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xCMDTable.PRDTEntry[xCMDHeader.PRDTL - 1].DBC = aCount * 512 - 1;
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: FISRegisterH2D xCMDFIS = new FISRegisterH2D(xCMDTable.CFIS)              {                  FISType = (byte)FISType.FIS_Type_RegisterH2D'                  IsCommand = 1'                  Command = (byte)ATACommands.Packet'                  Device = 1 << 4              };
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: byte[] xATAPICMD = new byte[12];
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xATAPICMD[2] = (byte)((aStart >> 0x18) & 0xFF);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xATAPICMD[3] = (byte)((aStart >> 0x10) & 0xFF);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xATAPICMD[4] = (byte)((aStart >> 0x08) & 0xFF);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xATAPICMD[5] = (byte)((aStart >> 0x00) & 0xFF);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xATAPICMD[9] = (byte)(aCount);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: new Core.MemoryBlock(xCMDTable.ACMD' 12).Bytes[i] = xATAPICMD[i];
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: xSpin == 1000000
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,SendSATAPICommand,The following statement contains a magic number: (mPortReg.IS & (1 << 30)) != 0
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,FindCMDSlot,The following statement contains a magic number: i < 32
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,ReadBlock,The following statement contains a magic number: byte[] xByte = new byte[512];
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,ReadBlock,The following statement contains a magic number: new MemoryBlock(0x0046C000' 512).Read8(xByte);
Magic Number,Cosmos.HAL.BlockDevice.Ports,SATAPI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Ports\Satapi.cs,ReadBlock,The following statement contains a magic number: i < 512
Magic Number,Cosmos.HAL.BlockDevice.Registers,HBACommandHeader,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Registers\AHCIRegs.cs,HBACommandHeader,The following statement contains a magic number: xBlock = new MemoryBlock(aAddress + (32 * aSlot)' 0x20);
Magic Number,Cosmos.HAL.BlockDevice.Registers,FISRegisterH2D,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Registers\AHCIRegs.cs,FISRegisterH2D,The following statement contains a magic number: xBlock = new MemoryBlock(aAddress' 20);
Magic Number,Cosmos.HAL.BlockDevice.Registers,FISRegisterD2H,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\BlockDevice\Registers\AHCIRegs.cs,FISRegisterD2H,The following statement contains a magic number: xBlock = new MemoryBlock(aAddress' 20);
Magic Number,Cosmos.HAL,DebugTextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\DebugTextScreen.cs,SendChar,The following statement contains a magic number: mDebugger.SendChannelCommand(129' 0' xBytes);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPlane,The following statement contains a magic number: p &= 3;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPlane,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPlane,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 2;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 6;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: seg >>= 2;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: seg &= 3;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: switch (seg)              {                  case 0:                  case 1:                      return mIO.VGAMemoryBlock;                  case 2:                      return mIO.MonochromeTextMemoryBlock;                  case 3:                      return mIO.CGATextMemoryBlock;              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following statement contains a magic number: switch (seg)              {                  case 0:                  case 1:                      return mIO.VGAMemoryBlock;                  case 2:                      return mIO.MonochromeTextMemoryBlock;                  case 3:                      return mIO.CGATextMemoryBlock;              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 2;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 5;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 6;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: SetPlane(2);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: seg[(i * 32) + j] = font[(i * font_height) + j];
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: i < 256
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 2;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.Sequencer_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 4;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 5;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,WriteFont,The following statement contains a magic number: mIO.GraphicsController_Index.Byte = 6;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetTextMode,The following statement contains a magic number: switch (aSize)              {                  case TextSize.Size40x25:                      WriteVGARegisters(g_40x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size40x50:                      WriteVGARegisters(g_40x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size80x25:                      WriteVGARegisters(g_80x25_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size80x50:                      WriteVGARegisters(g_80x50_text);                      WriteFont(g_8x8_font' 8);                      break;                  case TextSize.Size90x30:                      WriteVGARegisters(g_90x30_text);                      WriteFont(g_8x16_font' 16);                      break;                  case TextSize.Size90x60:                      WriteVGARegisters(g_90x60_text);                      WriteFont(g_8x8_font' 8);                      break;                  default:                      throw new Exception("Invalid text size.");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetGraphicsMode,The following statement contains a magic number: switch (aSize)              {                  case ScreenSize.Size320x200:                      if (aDepth == ColorDepth.BitDepth8)                      {                          mDebugger.Send("Setting graphic mode to 320x200@256");                          WriteVGARegisters(g_320x200x8);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 256;                          SetPixel = new SetPixelDelegate(SetPixel320x200x8);                          GetPixel = new GetPixelDelegate(GetPixel320x200x8);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_320x200x4);                            PixelWidth = 320;                          PixelHeight = 200;                          Colors = 16;                          //SetPixel = new SetPixelDelegate(SetPixel320x200x4);                          //GetPixel = new GetPixelDelegate(GetPixel320x200x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size640x480:                      if (aDepth == ColorDepth.BitDepth2)                      {                          WriteVGARegisters(g_640x480x2);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 4;                          //SetPixel = new SetPixelDelegate(SetPixel640x480x2);                          //GetPixel = new GetPixelDelegate(GetPixel640x480x2);                      }                      else if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_640x480x4);                            PixelWidth = 640;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel640x480x4);                          GetPixel = new GetPixelDelegate(GetPixel640x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  case ScreenSize.Size720x480:                      if (aDepth == ColorDepth.BitDepth4)                      {                          WriteVGARegisters(g_720x480x4);                            PixelWidth = 720;                          PixelHeight = 480;                          Colors = 16;                          SetPixel = new SetPixelDelegate(SetPixel720x480x4);                          GetPixel = new GetPixelDelegate(GetPixel720x480x4);                      }                      else throw new Exception("Unsupported color depth passed for specified screen size");                      break;                  default:                      throw new Exception("Unknown screen size");              }
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel320x200x8,The following statement contains a magic number: uint where = (y * 320) + x;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel320x200x8,The following statement contains a magic number: return mIO.VGAMemoryBlock[(y * 320) + x];
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: x = (x & 7) * 1;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel640x480x4,The following statement contains a magic number: p < 4
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel640x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel640x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel640x480x4,The following statement contains a magic number: mIO.VGAMemoryBlock[offset] == 255
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel640x480x4,The following statement contains a magic number: p < 4
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel720x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel720x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel720x480x4,The following statement contains a magic number: x = (x & 7) * 1;
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPixel720x480x4,The following statement contains a magic number: p < 4
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel720x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel720x480x4,The following statement contains a magic number: uint offset = (uint)(x / 8 + (PixelWidth / 8) * y);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel720x480x4,The following statement contains a magic number: mIO.VGAMemoryBlock[offset] == 255
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetPixel720x480x4,The following statement contains a magic number: p < 4
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: SetPaletteEntry(i + 64' 63' i' 0);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: SetPaletteEntry(i + 64' 63' i' 0);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: SetPaletteEntry(i + 128' 63' 63' i);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: SetPaletteEntry(i + 128' 63' 63' i);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: SetPaletteEntry(i + 128' 63' 63' i);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: SetPaletteEntry(i + 192' (byte)(63 - i)' (byte)(63 - i)' (byte)(63 - i));
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: i < 64
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,TestMode320x200x8,The following statement contains a magic number: xSegment[(y * 320) + x] = (byte)(x + y);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPalette,The following statement contains a magic number: mIO.DAC_Data.Byte = (byte)(pallete[i] >> 2);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPaletteEntry,The following statement contains a magic number: mIO.DAC_Data.Byte = (byte)(r >> 2);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPaletteEntry,The following statement contains a magic number: mIO.DAC_Data.Byte = (byte)(g >> 2);
Magic Number,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,SetPaletteEntry,The following statement contains a magic number: mIO.DAC_Data.Byte = (byte)(b >> 2);
Magic Number,Cosmos.HAL,PCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCI.cs,CheckBus,The following statement contains a magic number: fn < 8
Magic Number,Cosmos.HAL,PCI,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCI.cs,CheckBus,The following statement contains a magic number: device < 32
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,PCIDevice,The following statement contains a magic number: BaseAddressBar = new PCIBaseAddressBar[6];
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,PCIDevice,The following statement contains a magic number: BaseAddressBar[2] = new PCIBaseAddressBar(ReadRegister32(0x18));
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,PCIDevice,The following statement contains a magic number: BaseAddressBar[3] = new PCIBaseAddressBar(ReadRegister32(0x1C));
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,PCIDevice,The following statement contains a magic number: BaseAddressBar[4] = new PCIBaseAddressBar(ReadRegister32(0x20));
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,PCIDevice,The following statement contains a magic number: BaseAddressBar[5] = new PCIBaseAddressBar(ReadRegister32(0x24));
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetHeaderType,The following statement contains a magic number: return (byte)(IO.ConfigDataPort.DWord >> ((0xE % 4) * 8) & 0xFF);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetHeaderType,The following statement contains a magic number: return (byte)(IO.ConfigDataPort.DWord >> ((0xE % 4) * 8) & 0xFF);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetVendorID,The following statement contains a magic number: return (UInt16)(IO.ConfigDataPort.DWord >> ((0x0 % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetVendorID,The following statement contains a magic number: return (UInt16)(IO.ConfigDataPort.DWord >> ((0x0 % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,ReadRegister8,The following statement contains a magic number: return (byte)(IO.ConfigDataPort.DWord >> ((aRegister % 4) * 8) & 0xFF);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,ReadRegister8,The following statement contains a magic number: return (byte)(IO.ConfigDataPort.DWord >> ((aRegister % 4) * 8) & 0xFF);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,ReadRegister16,The following statement contains a magic number: return (UInt16)(IO.ConfigDataPort.DWord >> ((aRegister % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,ReadRegister16,The following statement contains a magic number: return (UInt16)(IO.ConfigDataPort.DWord >> ((aRegister % 4) * 8) & 0xFFFF);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetAddressBase,The following statement contains a magic number: return 0x80000000 | (aBus << 16) | ((aSlot & 0x1F) << 11) | ((aFunction & 0x07) << 8);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetAddressBase,The following statement contains a magic number: return 0x80000000 | (aBus << 16) | ((aSlot & 0x1F) << 11) | ((aFunction & 0x07) << 8);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,GetAddressBase,The following statement contains a magic number: return 0x80000000 | (aBus << 16) | ((aSlot & 0x1F) << 11) | ((aFunction & 0x07) << 8);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,EnableBusMaster,The following statement contains a magic number: UInt16 flags = (1 << 2);
Magic Number,Cosmos.HAL,PCIDevice,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,ToHex,The following statement contains a magic number: return "0x" + aNumber.ToHex(aBits / 4);
Magic Number,Cosmos.HAL,PCIDeviceBridge,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceBridge.cs,PCIDeviceBridge,The following statement contains a magic number: BaseAddresses = new PCIBaseAddressBar[2];
Magic Number,Cosmos.HAL,PCIDeviceNormal,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses = new PCIBaseAddressBar[6];
Magic Number,Cosmos.HAL,PCIDeviceNormal,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses[2] = new PCIBaseAddressBar(ReadRegister32(0x18));
Magic Number,Cosmos.HAL,PCIDeviceNormal,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses[3] = new PCIBaseAddressBar(ReadRegister32(0x1C));
Magic Number,Cosmos.HAL,PCIDeviceNormal,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses[4] = new PCIBaseAddressBar(ReadRegister32(0x20));
Magic Number,Cosmos.HAL,PCIDeviceNormal,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDeviceNormal.cs,PCIDeviceNormal,The following statement contains a magic number: BaseAddresses[5] = new PCIBaseAddressBar(ReadRegister32(0x24));
Magic Number,Cosmos.HAL,SpeakerExtensions,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,MsToHz,The following statement contains a magic number: return (uint)(1000 / ms);
Magic Number,Cosmos.HAL,SpeakerExtensions,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,MsToHz,The following statement contains a magic number: return (uint)(1000 / ms);
Magic Number,Cosmos.HAL,PCSpeaker,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,DisableSound,The following statement contains a magic number: IO.Gate.Byte = (byte)(IO.Gate.Byte & ~3);
Magic Number,Cosmos.HAL,PCSpeaker,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,Beep,The following statement contains a magic number: frequency < 37 || frequency > 32767
Magic Number,Cosmos.HAL,PCSpeaker,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,Beep,The following statement contains a magic number: frequency < 37 || frequency > 32767
Magic Number,Cosmos.HAL,PCSpeaker,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,Beep,The following statement contains a magic number: uint divisor = 1193180 / frequency;
Magic Number,Cosmos.HAL,PCSpeaker,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,Beep,The following statement contains a magic number: IO.Channel2Data.Byte = (byte)((divisor >> 8) & 0xFF);
Magic Number,Cosmos.HAL,PCSpeaker,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,Beep,The following statement contains a magic number: IO.Gate.Byte = (byte)(temp | 3);
Magic Number,Cosmos.HAL,PCSpeaker,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCSpeaker.cs,Beep,The following statement contains a magic number: temp != (temp | 3)
Magic Number,Cosmos.HAL,PIT,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PIT.cs,PIT,The following statement contains a magic number: T0Countdown = 65535;
Magic Number,Cosmos.HAL,PIT,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PIT.cs,Wait,The following statement contains a magic number: RegisterTimer(new PITTimer(SignalWait' (int)(TimeoutMS * 1000000)' false));
Magic Number,Cosmos.HAL,PIT,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PIT.cs,HandleIRQ,The following statement contains a magic number: T0Countdown = 65535;
Magic Number,Cosmos.HAL,PIT,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PIT.cs,RegisterTimer,The following statement contains a magic number: T0Countdown = 65535;
Magic Number,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,Initialize,The following statement contains a magic number: IsDualChannel = (xConfigurationByte & (1 << 5)) != 0;
Magic Number,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,Initialize,The following statement contains a magic number: IsDualChannel = (xConfigurationByte & (1 << 5)) == 0;
Magic Number,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,Initialize,The following statement contains a magic number: SecondPortTestPassed = TestPort(2);
Magic Number,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,Initialize,The following statement contains a magic number: IdentifyDevice(2' out SecondDevice);
Magic Number,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,IdentifyDevice,The following statement contains a magic number: var xSecondPort = aPort == 2;
Magic Number,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,IdentifyDevice,The following statement contains a magic number: aPort == 1 || aPort == 2
Magic Number,Cosmos.HAL,PS2Controller,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Controller.cs,TestPort,The following statement contains a magic number: aPort == 1 || aPort == 2
Magic Number,Cosmos.HAL,PS2Keyboard,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Keyboard.cs,SetScanCodeSet,The following statement contains a magic number: aScanCodeSet == 1 || aScanCodeSet == 2 || aScanCodeSet == 3
Magic Number,Cosmos.HAL,PS2Keyboard,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Keyboard.cs,SetScanCodeSet,The following statement contains a magic number: aScanCodeSet == 1 || aScanCodeSet == 2 || aScanCodeSet == 3
Magic Number,Cosmos.HAL,PS2Keyboard,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Keyboard.cs,SendCommand,The following statement contains a magic number: PS2Port == 2
Magic Number,Cosmos.HAL,PS2Keyboard,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Keyboard.cs,SendCommand,The following statement contains a magic number: PS2Port == 2
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,Initialize,The following statement contains a magic number: mMouseID == 3
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,Initialize,The following statement contains a magic number: INTs.SetIrqHandler(12' HandleMouse);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,TryToEnableScrollWheel,The following statement contains a magic number: SendCommand(Command.SetSampleRate' 200);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,TryToEnableScrollWheel,The following statement contains a magic number: SendCommand(Command.SetSampleRate' 100);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,TryToEnableScrollWheel,The following statement contains a magic number: SendCommand(Command.SetSampleRate' 80);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,TryToEnableAdditionalButtons,The following statement contains a magic number: SendCommand(Command.SetSampleRate' 200);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,TryToEnableAdditionalButtons,The following statement contains a magic number: SendCommand(Command.SetSampleRate' 200);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,TryToEnableAdditionalButtons,The following statement contains a magic number: SendCommand(Command.SetSampleRate' 80);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: (mMouseByte[0] & (1 << 3)) == (1 << 3)
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: (mMouseByte[0] & (1 << 3)) == (1 << 3)
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: var xTest1 = (mMouseCycle == 2 && !HasScrollWheel);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: var xTest2 = (mMouseCycle == 3 && HasScrollWheel);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: (mMouseByte[0] & (1 << 4)) == (1 << 4)
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: (mMouseByte[0] & (1 << 4)) == (1 << 4)
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: xDeltaY = -(mMouseByte[2] | ~0xFF);
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: (mMouseByte[0] & (1 << 5)) == 1 << 5
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: (mMouseByte[0] & (1 << 5)) == 1 << 5
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: var xScrollWheelByte = mMouseByte[3] & 0x0F;
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: var xAdditionalButtonsByte = mMouseByte[3] & 0b0011_0000;
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,HandleMouse,The following statement contains a magic number: mMouseID == 4
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,SendCommand,The following statement contains a magic number: PS2Port == 2
Magic Number,Cosmos.HAL,PS2Mouse,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PS2Mouse.cs,SendCommand,The following statement contains a magic number: PS2Port == 2
Magic Number,Cosmos.HAL,RTC,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\RTC.cs,FromBCD,The following statement contains a magic number: return (byte)(((value >> 4) & 0x0F) * 10 + (value & 0x0F));
Magic Number,Cosmos.HAL,RTC,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\RTC.cs,FromBCD,The following statement contains a magic number: return (byte)(((value >> 4) & 0x0F) * 10 + (value & 0x0F));
Magic Number,Cosmos.HAL,RTC,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\RTC.cs,WaitForReady,The following statement contains a magic number: rtc.Address.Byte = 10;
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,TextScreen,The following statement contains a magic number: mRow2Addr = (UInt32)(Cols * 2);
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,TextScreen,The following statement contains a magic number: mScrollSize = (UInt32)(Cols * (Rows - 1) * 2);
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetColors,The following statement contains a magic number: Color = (byte)(((byte)(aForeground) | ((byte)(aBackground) << 4)) & 0x7F);
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetColors,The following statement contains a magic number: mTextClearCellValue = (UInt16)(Color << 8 | 0x00);
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorPos,The following statement contains a magic number: IO.Data3.Byte = (byte)(xPos >> 8);
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: value = 16 - ((16 * value) / 100);
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: value = 16 - ((16 * value) / 100);
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: value = 16 - ((16 * value) / 100);
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: value = 15;
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorSize,The following statement contains a magic number: value >= 16
Magic Number,Cosmos.HAL,TextScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreen.cs,SetCursorVisible,The following statement contains a magic number: IO.Data3.Byte |= (byte)(cursorDisable << 5);
Magic Number,Cosmos.HAL,TextScreenHelpers,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\TextScreenHelpers.cs,DebugNumber,The following statement contains a magic number: mDebugger.Send(((uint)aValue).ToString() + ((uint)aValue >> 32).ToString());
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: byte[] eeprom_mac = new byte[6];
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[1] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[2] = BinaryHelper.GetByteFrom32bit(result' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[2] = BinaryHelper.GetByteFrom32bit(result' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[3] = BinaryHelper.GetByteFrom32bit(result' 24);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[3] = BinaryHelper.GetByteFrom32bit(result' 24);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[4] = BinaryHelper.GetByteFrom32bit(result' 0);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[5] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: eeprom_mac[5] = BinaryHelper.GetByteFrom32bit(result' 8);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock = new ManagedMemoryBlock(28' 4);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock = new ManagedMemoryBlock(28' 4);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mRxDescriptor = new ManagedMemoryBlock(256' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mRxDescriptor = new ManagedMemoryBlock(256' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mTxDescriptor = new ManagedMemoryBlock(256' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mTxDescriptor = new ManagedMemoryBlock(256' 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x00' (0x4 << 28) | (0x4 << 20));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x00' (0x4 << 28) | (0x4 << 20));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x04'                  (UInt32)(eeprom_mac[0] | (eeprom_mac[1] << 8) | (eeprom_mac[2] << 16) | (eeprom_mac[3] << 24)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x08' (UInt32)(eeprom_mac[4] | (eeprom_mac[5] << 8)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x08' (UInt32)(eeprom_mac[4] | (eeprom_mac[5] << 8)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mInitBlock.Write32(0x08' (UInt32)(eeprom_mac[4] | (eeprom_mac[5] << 8)));
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: uint xOffset = rxd * 16;
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mRxDescriptor.Write32(xOffset + 8' buffer.Offset);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mRxDescriptor.Write32(xOffset + 4' flags);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: rxd < 16
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: uint xOffset = txd * 16;
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: ManagedMemoryBlock buffer = new ManagedMemoryBlock(2048);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: mTxDescriptor.Write32(xOffset + 8' buffer.Offset);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,AMDPCNetII,The following statement contains a magic number: txd < 16
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,SendBytes,The following statement contains a magic number: mNextTXDesc >= 16
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,SendBytes,The following statement contains a magic number: uint xOffset = (uint)(txd * 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,SendBytes,The following statement contains a magic number: UInt32 status = mTxDescriptor.Read32(xOffset + 4);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,SendBytes,The following statement contains a magic number: mTxDescriptor.Write32(xOffset + 4' flags);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: uint xOffset = (uint)(rxd * 16);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: status = mRxDescriptor.Read32(xOffset + 4);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: recv_size -= 4;
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: recv_size > 64
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: mRxDescriptor.Write32(xOffset + 4' status | 0x80000000);
Magic Number,Cosmos.HAL.Drivers.PCI.Network,AMDPCNetII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Network\AMDPCNetII.cs,ReadRawData,The following statement contains a magic number: rxd < 16
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,SetMode,The following statement contains a magic number: this.depth = (depth / 8);
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,WriteToFifo,The following statement contains a magic number: ((GetFIFO(FIFO.NextCmd) == GetFIFO(FIFO.Max) - 4) && GetFIFO(FIFO.Stop) == GetFIFO(FIFO.Min)) ||                  (GetFIFO(FIFO.NextCmd) + 4 == GetFIFO(FIFO.Stop))
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,WriteToFifo,The following statement contains a magic number: ((GetFIFO(FIFO.NextCmd) == GetFIFO(FIFO.Max) - 4) && GetFIFO(FIFO.Stop) == GetFIFO(FIFO.Min)) ||                  (GetFIFO(FIFO.NextCmd) + 4 == GetFIFO(FIFO.Stop))
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,WriteToFifo,The following statement contains a magic number: SetFIFO(FIFO.NextCmd' GetFIFO(FIFO.NextCmd) + 4);
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,DefineCursor,The following statement contains a magic number: WriteToFifo(2);
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,DefineCursor,The following statement contains a magic number: WriteToFifo(2);
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,DefineCursor,The following statement contains a magic number: i < 4
Magic Number,Cosmos.HAL.Drivers.PCI.Video,VMWareSVGAII,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\PCI\Video\VMWareSVGAII.cs,DefineCursor,The following statement contains a magic number: i < 4
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: var xBroadcastArray = new byte[6];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[2] = 0xFF;
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[3] = 0xFF;
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[4] = 0xFF;
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xBroadcastArray[5] = 0xFF;
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: var xNoneArray = new byte[6];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[2] = 0x00;
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[3] = 0x00;
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[4] = 0x00;
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: xNoneArray[5] = 0x00;
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: address == null || address.Length != 6
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = address[2];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = address[2];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = address[3];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = address[3];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = address[4];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = address[4];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = address[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = address[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: buffer == null || buffer.Length < (offset + 6)
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = buffer[offset + 2];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[2] = buffer[offset + 2];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = buffer[offset + 3];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[3] = buffer[offset + 3];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = buffer[offset + 4];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[4] = buffer[offset + 4];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = buffer[offset + 5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,MACAddress,The following statement contains a magic number: bytes[5] = buffer[offset + 5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,IsValid,The following statement contains a magic number: return bytes != null && bytes.Length == 6;
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: i = bytes[2].CompareTo(other.bytes[2]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: i = bytes[2].CompareTo(other.bytes[2]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: i = bytes[3].CompareTo(other.bytes[3]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: i = bytes[3].CompareTo(other.bytes[3]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: i = bytes[4].CompareTo(other.bytes[4]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: i = bytes[4].CompareTo(other.bytes[4]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: i = bytes[5].CompareTo(other.bytes[5]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,CompareTo,The following statement contains a magic number: i = bytes[5].CompareTo(other.bytes[5]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,Equals,The following statement contains a magic number: return bytes[0] == other.bytes[0] &&                      bytes[1] == other.bytes[1] &&                      bytes[2] == other.bytes[2] &&                      bytes[3] == other.bytes[3] &&                      bytes[4] == other.bytes[4] &&                      bytes[5] == other.bytes[5];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToNumber,The following statement contains a magic number: return (UInt64)((bytes[0] << 40) | (bytes[1] << 32) | (bytes[2] << 24) | (bytes[3] << 16) |                  (bytes[4] << 8) | (bytes[5] << 0));
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,PutByte,The following statement contains a magic number: aChars[aIndex + 0] = xChars[(aByte >> 4) & 0xF];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: var xChars = new char[17];
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[2] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 3' bytes[1]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[5] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 6' bytes[2]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 6' bytes[2]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[8] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 9' bytes[3]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 9' bytes[3]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[11] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 12' bytes[4]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 12' bytes[4]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: xChars[14] = ':';
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 15' bytes[5]);
Magic Number,Cosmos.HAL.Network,MACAddress,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Network\MACAddress.cs,ToString,The following statement contains a magic number: PutByte(xChars' 15' bytes[5]);
Missing Default,Cosmos.HAL,VGAScreen,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\Drivers\Video\VGAScreen.cs,GetFramebufferSegment,The following switch statement is missing a default case: switch (seg)              {                  case 0:                  case 1:                      return mIO.VGAMemoryBlock;                  case 2:                      return mIO.MonochromeTextMemoryBlock;                  case 3:                      return mIO.CGATextMemoryBlock;              }
Missing Default,Cosmos.HAL,PCIBaseAddressBar,D:\research\architectureSmells\repos\CosmosOS_Cosmos\source\Cosmos.HAL2\PCIDevice.cs,PCIBaseAddressBar,The following switch statement is missing a default case: switch (type)                  {                      case 0x00:                          baseAddress = raw & 0xFFFFFFF0;                          break;                      case 0x01:                          baseAddress = raw & 0xFFFFFFF0;                          break;                  }
