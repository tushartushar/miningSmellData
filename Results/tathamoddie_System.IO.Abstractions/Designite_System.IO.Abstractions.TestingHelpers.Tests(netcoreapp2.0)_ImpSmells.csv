Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,System.IO.Abstractions.TestingHelpers.Tests,MockFileSystemTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileSystemTests.cs,MockFileSystem_GetFiles_ThrowsArgumentExceptionForInvalidCharacters,The length of the parameter getFilesWithInvalidCharacterInPath is 34.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,MockDirectory_Delete_ShouldThrowIOException,The length of the statement  "            Assert.That(ex.Message' Is.EqualTo("The directory specified by " + XFS.Path("c:\\bar") + " is read-only' or recursive is false and " + XFS.Path("c:\\bar") + " is not an empty directory.")); " is 189.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,MockDirectory_GetDirectories_WithAllDirectories_ShouldReturnsAllMatchingSubFolders,The length of the statement  "            Assert.That(actualResult' Is.EquivalentTo(new[] { XFS.Path(@"C:\Folder\.foo")' XFS.Path(@"C:\Folder\foo.foo")' XFS.Path(@"C:\Folder\.foo\.foo") })); " is 148.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,MockDirectory_EnumerateDirectories_WithAllDirectories_ShouldReturnsAllMatchingSubFolders,The length of the statement  "            var actualResult = fileSystem.Directory.EnumerateDirectories(XFS.Path(@"c:\Folder\")' "*.foo"' SearchOption.AllDirectories); " is 124.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,MockDirectory_EnumerateDirectories_WithAllDirectories_ShouldReturnsAllMatchingSubFolders,The length of the statement  "            Assert.That(actualResult' Is.EquivalentTo(new[] { XFS.Path(@"C:\Folder\.foo")' XFS.Path(@"C:\Folder\foo.foo")' XFS.Path(@"C:\Folder\.foo\.foo") })); " is 148.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,GetPathsForMoving,The length of the statement  "            yield return new object[] { XFS.Path(@"a:\folder1\")' XFS.Path(@"A:\folder3\")' XFS.Path("file.txt")' XFS.Path(@"folder2\file2.txt") }; " is 135.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,GetPathsForMoving,The length of the statement  "            yield return new object[] { XFS.Path(@"A:\folder1\")' XFS.Path(@"A:\folder3\")' XFS.Path("file.txt")' XFS.Path(@"folder2\file2.txt") }; " is 135.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,GetPathsForMoving,The length of the statement  "            yield return new object[] { XFS.Path(@"a:\folder1\")' XFS.Path(@"a:\folder3\")' XFS.Path("file.txt")' XFS.Path(@"folder2\file2.txt") }; " is 135.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,GetPathsForMoving,The length of the statement  "            yield return new object[] { XFS.Path(@"A:\folder1\")' XFS.Path(@"a:\folder3\")' XFS.Path("file.txt")' XFS.Path(@"folder2\file2.txt") }; " is 135.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,GetPathsForMoving,The length of the statement  "            yield return new object[] { XFS.Path(@"A:\folder1\")' XFS.Path(@"a:\folder3\")' XFS.Path("file.txt")' XFS.Path(@"Folder2\file2.txt") }; " is 135.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,GetPathsForMoving,The length of the statement  "            yield return new object[] { XFS.Path(@"A:\folder1\")' XFS.Path(@"a:\folder3\")' XFS.Path("file.txt")' XFS.Path(@"Folder2\fiLe2.txt") }; " is 135.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,GetPathsForMoving,The length of the statement  "            yield return new object[] { XFS.Path(@"A:\folder1\")' XFS.Path(@"a:\folder3\")' XFS.Path("folder444\\file.txt")' XFS.Path(@"Folder2\fiLe2.txt") }; " is 146.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,MockDirectory_Move_ShouldThrowAnIOExceptionIfDirectoriesAreOnDifferentVolumes,The length of the statement  "            Assert.Throws<IOException>(action' "Source and destination path must have identical roots. Move will not work across volumes."); " is 128.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,MockDirectory_Move_ShouldThrowAnIOExceptionIfDesinationDirectoryExists,The length of the statement  "            Assert.Throws<IOException>(action' "Cannot create 'c:\b\' because a file or directory with the same name already exists.'"); " is 124.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllLinesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllLinesTests.cs,MockFile_AppendAllLinesAsync_ShouldThrowArgumentExceptionIfPathIsZeroLength,The length of the statement  "            AsyncTestDelegate action = async () => await fileSystem.File.AppendAllLinesAsync(string.Empty' new[] { "does not matter" }); " is 124.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldFailIfNotExistButDirectoryAlsoNotExist,The length of the statement  "            ex = Assert.ThrowsAsync<DirectoryNotFoundException>(async () => await fileSystem.File.AppendAllTextAsync(path' "some text")); " is 125.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileCopyTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileCopyTests.cs,MockFile_Copy_ShouldThrowExceptionWhenFileExistsAtDestination,The length of the statement  "            Assert.Throws<IOException>(() => fileSystem.File.Copy(sourceFileName' destFileName)' XFS.Path(@"The file c:\destination\demo.txt already exists.")); " is 148.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileCopyTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileCopyTests.cs,MockFile_Copy_ShouldThrowExceptionWhenFolderInDestinationDoesNotExist,The length of the statement  "            Assert.Throws<DirectoryNotFoundException>(() => fileSystem.File.Copy(sourceFileName' destFileName)' string.Format(CultureInfo.InvariantCulture' @"Could not find a part of the path '{0}'."' destFilePath)); " is 204.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileCreateTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileCreateTests.cs,Mockfile_Create_ShouldThrowUnauthorizedAccessExceptionIfPathIsReadOnly,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo(string.Format(CultureInfo.InvariantCulture' "Access to the path '{0}' is denied."' path))); " is 133.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsOnOpenRead,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo($"The process cannot access the file '{filepath}' because it is being used by another process.")); " is 140.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsOnWriteAllLines,The length of the statement  "            var exception = Assert.Throws(IOException()' () => filesystem.File.WriteAllLines(filepath' new string[] { "hello"' "world" })); " is 127.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsOnWriteAllLines,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo($"The process cannot access the file '{filepath}' because it is being used by another process.")); " is 140.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsOnReadAllLines,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo($"The process cannot access the file '{filepath}' because it is being used by another process.")); " is 140.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsOnReadAllText,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo($"The process cannot access the file '{filepath}' because it is being used by another process.")); " is 140.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsOnReadAllBytes,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo($"The process cannot access the file '{filepath}' because it is being used by another process.")); " is 140.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsOnAppendLines,The length of the statement  "            var exception = Assert.Throws(IOException()' () => filesystem.File.AppendAllLines(filepath' new string[] { "hello"' "world" })); " is 128.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsOnAppendLines,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo($"The process cannot access the file '{filepath}' because it is being used by another process.")); " is 140.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsFileMove,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo("The process cannot access the file because it is being used by another process.")); " is 126.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileLockTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileLockTests.cs,MockFile_Lock_FileShareNoneThrowsDelete,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo($"The process cannot access the file '{filepath}' because it is being used by another process.")); " is 140.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileStreamFactoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileStreamFactoryTests.cs,MockFileStreamFactory_CreateInNonExistingDirectory_ShouldThrowDirectoryNotFoundException,The length of the statement  "            Assert.Throws<DirectoryNotFoundException>(() => fileStreamFactory.Create(@"C:\Test\NonExistingDirectory\some_random_file.txt"' fileMode)); " is 138.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileStreamTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileStreamTests.cs,MockFileStream_Constructor_Reading_Nonexistent_File_Throws_Exception,The length of the statement  "            Assert.Throws<FileNotFoundException>(() => new MockFileStream(fileSystem' nonexistentFilePath' MockFileStream.StreamType.READ)); " is 128.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileSystemTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileSystemTests.cs,MockFileSystem_AddFileFromEmbeddedResource_ShouldAddTheFile,The length of the statement  "            fileSystem.AddFileFromEmbeddedResource(XFS.Path(@"C:\TestFile.txt")' Assembly.GetExecutingAssembly()' "System.IO.Abstractions.TestingHelpers.Tests.TestFiles.TestFile.txt"); " is 172.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileSystemTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileSystemTests.cs,MockFileSystem_AddFilesFromEmbeddedResource_ShouldAddAllTheFiles,The length of the statement  "            fileSystem.AddFilesFromEmbeddedNamespace(XFS.Path(@"C:\")' Assembly.GetExecutingAssembly()' "System.IO.Abstractions.TestingHelpers.Tests.TestFiles"); " is 149.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_Delete_Should_RemoveFiles,The length of the statement  "            var fileSystem = new MockFileSystem(new Dictionary<string' MockFileData> { { filePath' new MockFileData(fileContent) } }); " is 122.
Long Statement,System.IO.Abstractions.TestingHelpers.Tests,TestDataForWriteAllLines,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllLinesTests.cs,GetCasesForArgumentCheckingAsync,The length of the statement  "                AsyncTestDelegate writeEnumberableUtf32 = () => fileSystem.File.WriteAllLinesAsync(path' fileContentEnumerable' Encoding.UTF32); " is 128.
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryInfoTests.cs,MockDirectoryInfo_GetFileSystemInfos_ShouldReturnBothDirectoriesAndFiles,The following statement contains a magic number: Assert.That(result.Length' Is.EqualTo(2));
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryInfoTests.cs,MockDirectoryInfo_EnumerateFileSystemInfos_ShouldReturnBothDirectoriesAndFiles,The following statement contains a magic number: Assert.That(result.Length' Is.EqualTo(2));
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryInfoTests.cs,MockDirectoryInfo_GetFileSystemInfos_ShouldReturnDirectoriesAndNamesWithSearchPattern,The following statement contains a magic number: Assert.That(result.Length' Is.EqualTo(2));
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryInfoTests.cs,MockDirectoryInfo_EnumerateFileSystemInfos_ShouldReturnDirectoriesAndNamesWithSearchPattern,The following statement contains a magic number: Assert.That(result.Length' Is.EqualTo(2));
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,ExecuteTimeAttributeTest,The following statement contains a magic number: var time = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,ExecuteTimeAttributeTest,The following statement contains a magic number: var time = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,ExecuteTimeAttributeTest,The following statement contains a magic number: var time = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,ExecuteTimeAttributeTest,The following statement contains a magic number: var time = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,ExecuteTimeAttributeTest,The following statement contains a magic number: var time = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,ExecuteTimeAttributeTest,The following statement contains a magic number: var time = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,MockDirectory_GetFileSystemEntries_Returns_Files_And_Directories,The following statement contains a magic number: Assert.AreEqual(2' entries.Count());
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,MockDirectory_GetDirectories_Returns_Child_Directories,The following statement contains a magic number: Assert.AreEqual(2' directories.Count());
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockDirectoryTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockDirectoryTests.cs,MockDirectory_EnumerateDirectories_Returns_Child_Directories,The following statement contains a magic number: Assert.AreEqual(2' directories.Count());
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66}'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66}'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66}'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66}'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66}'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66}'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldCreateIfNotExistWithBom,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0}'                  fileSystem.GetFile(path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldCreateIfNotExistWithBom,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0}'                  fileSystem.GetFile(path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldCreateIfNotExistWithBom,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0}'                  fileSystem.GetFile(path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldCreateIfNotExistWithBom,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] {255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0}'                  fileSystem.GetFile(path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllText_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66 }'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66 }'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66 }'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66 }'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66 }'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithDifferentEncoding,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0' 66' 66 }'                  fileSystem.GetFile(Path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldCreateIfNotExistWithBom,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0 }'                  fileSystem.GetFile(path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldCreateIfNotExistWithBom,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0 }'                  fileSystem.GetFile(path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldCreateIfNotExistWithBom,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0 }'                  fileSystem.GetFile(path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldCreateIfNotExistWithBom,The following statement contains a magic number: CollectionAssert.AreEqual(                  new byte[] { 255' 254' 0' 0' 65' 0' 0' 0' 65' 0' 0' 0 }'                  fileSystem.GetFile(path).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileAppendAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileAppendAllTextTests.cs,MockFile_AppendAllTextAsync_ShouldPersistNewTextWithCustomEncoding,The following statement contains a magic number: var expected = new byte[]              {                  68' 101' 109' 111' 32' 116' 101' 120' 116' 32' 99' 111' 110' 116'                  101' 110' 116' 0' 43' 0' 32' 0' 115' 0' 111' 0' 109' 0' 101'                  0' 32' 0' 116' 0' 101' 0' 120' 0' 116              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileGetCreationTimeTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileGetCreationTimeTests.cs,MockFile_GetCreationTime_ShouldReturnDefaultTimeIfFileDoesNotExist,The following statement contains a magic number: Assert.AreEqual(new DateTime(1601' 01' 01' 00' 00' 00' DateTimeKind.Utc).ToLocalTime()' actualCreationTime);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileGetCreationTimeUtcTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileGetCreationTimeUtcTests.cs,MockFile_GetCreationTimeUtc_ShouldReturnDefaultTimeIfFileDoesNotExist,The following statement contains a magic number: Assert.AreEqual(new DateTime(1601' 01' 01' 00' 00' 00' DateTimeKind.Utc)' actualCreationTime);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileGetLastAccessTimeTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileGetLastAccessTimeTests.cs,MockFile_GetLastAccessTime_ShouldReturnDefaultTimeIfFileDoesNotExist,The following statement contains a magic number: Assert.AreEqual(new DateTime(1601' 01' 01' 00' 00' 00' DateTimeKind.Utc).ToLocalTime()' actualLastAccessTime);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileGetLastAccessTimeUtcTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileGetLastAccessTimeUtcTests.cs,MockFile_GetLastAccessTimeUtc_ShouldReturnDefaultTimeIfFileDoesNotExist,The following statement contains a magic number: Assert.AreEqual(new DateTime(1601' 01' 01' 00' 00' 00' DateTimeKind.Utc)' actualLastAccessTime);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileGetLastWriteTimeTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileGetLastWriteTimeTests.cs,MockFile_GetLastWriteTime_ShouldReturnDefaultTimeIfFileDoesNotExist,The following statement contains a magic number: Assert.AreEqual(new DateTime(1601' 01' 01' 00' 00' 00' DateTimeKind.Utc).ToLocalTime()' actualLastWriteTime);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileGetLastWriteTimeUtcTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileGetLastWriteTimeUtcTests.cs,MockFile_GetLastWriteTimeUtc_ShouldReturnDefaultTimeIfFileDoesNotExist,The following statement contains a magic number: Assert.AreEqual(new DateTime(1601' 01' 01' 00' 00' 00' DateTimeKind.Utc)' actualLastWriteTime);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_CreationTimeUtc_ShouldReturnCreationTimeUtcOfFileInMemoryFileSystem,The following statement contains a magic number: var creationTime = DateTime.Now.AddHours(-4);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_CreationTimeUtc_ShouldSetCreationTimeUtcOfFileInMemoryFileSystem,The following statement contains a magic number: var creationTime = DateTime.Now.AddHours(-4);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_CreationTime_ShouldReturnCreationTimeOfFileInMemoryFileSystem,The following statement contains a magic number: var creationTime = DateTime.Now.AddHours(-4);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_CreationTime_ShouldSetCreationTimeOfFileInMemoryFileSystem,The following statement contains a magic number: var creationTime = DateTime.Now.AddHours(-4);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_OpenWrite_ShouldAddDataToFileInMemoryFileSystem,The following statement contains a magic number: var bytesToAdd = new byte[] { 65' 66' 67' 68' 69 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_OpenWrite_ShouldAddDataToFileInMemoryFileSystem,The following statement contains a magic number: var bytesToAdd = new byte[] { 65' 66' 67' 68' 69 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_OpenWrite_ShouldAddDataToFileInMemoryFileSystem,The following statement contains a magic number: var bytesToAdd = new byte[] { 65' 66' 67' 68' 69 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_OpenWrite_ShouldAddDataToFileInMemoryFileSystem,The following statement contains a magic number: var bytesToAdd = new byte[] { 65' 66' 67' 68' 69 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_OpenWrite_ShouldAddDataToFileInMemoryFileSystem,The following statement contains a magic number: var bytesToAdd = new byte[] { 65' 66' 67' 68' 69 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_LastAccessTimeUtc_ShouldReturnLastAccessTimeUtcOfFileInMemoryFileSystem,The following statement contains a magic number: var lastAccessTime = DateTime.Now.AddHours(-4);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_LastAccessTimeUtc_ShouldSetCreationTimeUtcOfFileInMemoryFileSystem,The following statement contains a magic number: var lastAccessTime = DateTime.Now.AddHours(-4);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_LastWriteTimeUtc_ShouldReturnLastWriteTimeUtcOfFileInMemoryFileSystem,The following statement contains a magic number: var lastWriteTime = DateTime.Now.AddHours(-4);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_LastWriteTimeUtc_ShouldSetLastWriteTimeUtcOfFileInMemoryFileSystem,The following statement contains a magic number: var lastWriteTime = DateTime.Now.AddHours(-4);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_OpenRead_ShouldReturnByteContentOfFile,The following statement contains a magic number: fileSystem.AddFile(XFS.Path(@"c:\temp\file.txt")' new MockFileData(new byte[] { 1' 2 }));
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_OpenRead_ShouldReturnByteContentOfFile,The following statement contains a magic number: byte[] result = new byte[2];
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_OpenRead_ShouldReturnByteContentOfFile,The following statement contains a magic number: stream.Read(result' 0' 2);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileInfoTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileInfoTests.cs,MockFileInfo_OpenRead_ShouldReturnByteContentOfFile,The following statement contains a magic number: Assert.AreEqual(new byte[] { 1' 2 }' result);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileOpenTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileOpenTests.cs,MockFile_OpenText_ShouldRetainLastWriteTime,The following statement contains a magic number: var lastWriteTime = new DateTime(2012' 03' 21);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileOpenTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileOpenTests.cs,MockFile_OpenText_ShouldRetainLastWriteTime,The following statement contains a magic number: var lastWriteTime = new DateTime(2012' 03' 21);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileOpenTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileOpenTests.cs,MockFile_OpenText_ShouldRetainLastWriteTime,The following statement contains a magic number: var lastWriteTime = new DateTime(2012' 03' 21);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileOpenTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileOpenTests.cs,MockFile_OpenText_ShouldRetainLastAccessTime,The following statement contains a magic number: var lastAccessTime = new DateTime(2012' 03' 21);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileOpenTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileOpenTests.cs,MockFile_OpenText_ShouldRetainLastAccessTime,The following statement contains a magic number: var lastAccessTime = new DateTime(2012' 03' 21);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileOpenTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileOpenTests.cs,MockFile_OpenText_ShouldRetainLastAccessTime,The following statement contains a magic number: var lastAccessTime = new DateTime(2012' 03' 21);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileOpenTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileOpenTests.cs,MockFile_OpenText_ShouldRetainCreationTime,The following statement contains a magic number: var creationTime = new DateTime(2012' 03' 21);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileOpenTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileOpenTests.cs,MockFile_OpenText_ShouldRetainCreationTime,The following statement contains a magic number: var creationTime = new DateTime(2012' 03' 21);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileOpenTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileOpenTests.cs,MockFile_OpenText_ShouldRetainCreationTime,The following statement contains a magic number: var creationTime = new DateTime(2012' 03' 21);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileReadAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileReadAllBytesTests.cs,MockFile_ReadAllBytes_ShouldReturnDataSavedByWriteAllBytes,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileReadAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileReadAllBytesTests.cs,MockFile_ReadAllBytes_ShouldReturnDataSavedByWriteAllBytes,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileReadAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileReadAllBytesTests.cs,MockFile_ReadAllBytes_ShouldReturnDataSavedByWriteAllBytes,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileReadAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileReadAllBytesTests.cs,MockFile_ReadAllBytesAsync_ShouldReturnDataSavedByWriteAllBytes,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileReadAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileReadAllBytesTests.cs,MockFile_ReadAllBytesAsync_ShouldReturnDataSavedByWriteAllBytes,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileReadAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileReadAllBytesTests.cs,MockFile_ReadAllBytesAsync_ShouldReturnDataSavedByWriteAllBytes,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileStreamTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileStreamTests.cs,MockFileStream_Flush_WritesByteToFile,The following statement contains a magic number: cut.WriteByte(255);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileStreamTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileStreamTests.cs,MockFileStream_Flush_WritesByteToFile,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[]{255}' fileSystem.GetFile(filepath).Contents);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetCreationTime_ShouldPersist,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetCreationTime_ShouldPersist,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetCreationTime_ShouldPersist,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetCreationTime_ShouldPersist,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetCreationTime_ShouldPersist,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetCreationTime_ShouldPersist,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTimeUtc_ShouldAffectCreationTime,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTimeUtc_ShouldAffectCreationTime,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTimeUtc_ShouldAffectCreationTime,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTimeUtc_ShouldAffectCreationTime,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTimeUtc_ShouldAffectCreationTime,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTimeUtc_ShouldAffectCreationTime,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTime_ShouldAffectCreationTimeUtc,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTime_ShouldAffectCreationTimeUtc,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTime_ShouldAffectCreationTimeUtc,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTime_ShouldAffectCreationTimeUtc,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTime_ShouldAffectCreationTimeUtc,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetCreationTime_ShouldAffectCreationTimeUtc,The following statement contains a magic number: var creationTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastAccessTime_ShouldPersist,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastAccessTime_ShouldPersist,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastAccessTime_ShouldPersist,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastAccessTime_ShouldPersist,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastAccessTime_ShouldPersist,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastAccessTime_ShouldPersist,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTimeUtc_ShouldAffectLastAccessTime,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTimeUtc_ShouldAffectLastAccessTime,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTimeUtc_ShouldAffectLastAccessTime,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTimeUtc_ShouldAffectLastAccessTime,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTimeUtc_ShouldAffectLastAccessTime,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTimeUtc_ShouldAffectLastAccessTime,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTime_ShouldAffectLastAccessTimeUtc,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTime_ShouldAffectLastAccessTimeUtc,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTime_ShouldAffectLastAccessTimeUtc,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTime_ShouldAffectLastAccessTimeUtc,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTime_ShouldAffectLastAccessTimeUtc,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastAccessTime_ShouldAffectLastAccessTimeUtc,The following statement contains a magic number: var lastAccessTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastWriteTime_ShouldPersist,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastWriteTime_ShouldPersist,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastWriteTime_ShouldPersist,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastWriteTime_ShouldPersist,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastWriteTime_ShouldPersist,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_GetSetLastWriteTime_ShouldPersist,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,ExecuteDefaultValueTest,The following statement contains a magic number: var expected = new DateTime(1601' 01' 01' 00' 00' 00' DateTimeKind.Utc);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTimeUtc_ShouldAffectLastWriteTime,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTimeUtc_ShouldAffectLastWriteTime,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTimeUtc_ShouldAffectLastWriteTime,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTimeUtc_ShouldAffectLastWriteTime,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTimeUtc_ShouldAffectLastWriteTime,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTimeUtc_ShouldAffectLastWriteTime,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTime_ShouldAffectLastWriteTimeUtc,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTime_ShouldAffectLastWriteTimeUtc,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTime_ShouldAffectLastWriteTimeUtc,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTime_ShouldAffectLastWriteTimeUtc,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTime_ShouldAffectLastWriteTimeUtc,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileTests.cs,MockFile_SetLastWriteTime_ShouldAffectLastWriteTimeUtc,The following statement contains a magic number: var lastWriteTime = new DateTime(2010' 6' 4' 13' 26' 42);
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytes_ShouldThrowDirectoryNotFoundExceptionIfPathDoesNotExists,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytes_ShouldThrowDirectoryNotFoundExceptionIfPathDoesNotExists,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytes_ShouldThrowDirectoryNotFoundExceptionIfPathDoesNotExists,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytes_ShouldWriteDataToMemoryFileSystem,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytes_ShouldWriteDataToMemoryFileSystem,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytes_ShouldWriteDataToMemoryFileSystem,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytes_ShouldThrowAnUnauthorizedAccessExceptionIfFileIsHidden,The following statement contains a magic number: TestDelegate action = () => fileSystem.File.WriteAllBytes(path' new byte[] { 123 });
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytes_ShouldThrowAnArgumentExceptionIfContainsIllegalCharacters,The following statement contains a magic number: TestDelegate action = () => fileSystem.File.WriteAllBytes(XFS.Path(@"C:\a<b.txt")' new byte[] { 123 });
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytes_ShouldThrowAnArgumentNullExceptionIfPathIsNull,The following statement contains a magic number: TestDelegate action = () => fileSystem.File.WriteAllBytes(null' new byte[] { 123 });
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytesAsync_ShouldThrowDirectoryNotFoundExceptionIfPathDoesNotExists,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytesAsync_ShouldThrowDirectoryNotFoundExceptionIfPathDoesNotExists,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytesAsync_ShouldThrowDirectoryNotFoundExceptionIfPathDoesNotExists,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytesAsync_ShouldWriteDataToMemoryFileSystem,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytesAsync_ShouldWriteDataToMemoryFileSystem,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytesAsync_ShouldWriteDataToMemoryFileSystem,The following statement contains a magic number: var fileContent = new byte[] { 1' 2' 3' 4 };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytesAsync_ShouldThrowAnUnauthorizedAccessExceptionIfFileIsHidden,The following statement contains a magic number: AsyncTestDelegate action = () => fileSystem.File.WriteAllBytesAsync(path' new byte[] { 123 });
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytesAsync_ShouldThrowAnArgumentExceptionIfContainsIllegalCharacters,The following statement contains a magic number: AsyncTestDelegate action = () => fileSystem.File.WriteAllBytesAsync(XFS.Path(@"C:\a<b.txt")' new byte[] { 123 });
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllBytesTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllBytesTests.cs,MockFile_WriteAllBytesAsync_ShouldThrowAnArgumentNullExceptionIfPathIsNull,The following statement contains a magic number: AsyncTestDelegate action = () => fileSystem.File.WriteAllBytesAsync(null' new byte[] { 123 });
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
Magic Number,System.IO.Abstractions.TestingHelpers.Tests,MockFileWriteAllTextTests,D:\research\architectureSmells\repos1\tathamoddie_System.IO.Abstractions\System.IO.Abstractions.TestingHelpers.Tests\MockFileWriteAllTextTests.cs,GetEncodingsWithExpectedBytes,The following statement contains a magic number: return new Dictionary<Encoding' byte[]>              {                  // ASCII does not need a BOM                  { Encoding.ASCII' new byte[] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 63' 107' 105' 46 } }'                    // BigEndianUnicode needs a BOM' the BOM is the first two bytes                  { Encoding.BigEndianUnicode' new byte [] { 254' 255' 0' 72' 0' 101'                      0' 108' 0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114'                      0' 101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 1' 25' 0' 107' 0' 105' 0' 46 } }'    #if NET40                  // Default encoding does not need a BOM                  { Encoding.Default' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 101' 107' 105' 46 } }'  #endif                  // UTF-32 needs a BOM' the BOM is the first four bytes                  { Encoding.UTF32' new byte [] {255' 254' 0' 0' 72' 0' 0' 0' 101'                      0' 0' 0' 108' 0' 0' 0' 108' 0' 0' 0' 111' 0' 0' 0' 32' 0' 0'                      0' 116' 0' 0' 0' 104' 0' 0' 0' 101' 0' 0' 0' 114' 0' 0' 0'                      101' 0' 0' 0' 33' 0' 0' 0' 32' 0' 0' 0' 68' 0' 0' 0' 122' 0'                      0' 0' 105' 0' 0' 0' 25' 1' 0' 0' 107' 0' 0' 0' 105' 0' 0' 0' 46' 0' 0' 0 } }'                    // UTF-7 does not need a BOM                  { Encoding.UTF7' new byte [] {72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 43' 65' 67' 69' 45' 32' 68' 122' 105'                      43' 65' 82' 107' 45' 107' 105' 46 } }'                    // The default encoding does not need a BOM                  { utf8WithoutBom' new byte [] { 72' 101' 108' 108' 111' 32' 116'                      104' 101' 114' 101' 33' 32' 68' 122' 105' 196' 153' 107' 105' 46 } }'                    // Unicode needs a BOM' the BOM is the first two bytes                  { Encoding.Unicode' new byte [] { 255' 254' 72' 0' 101' 0' 108'                      0' 108' 0' 111' 0' 32' 0' 116' 0' 104' 0' 101' 0' 114' 0'                      101' 0' 33' 0' 32' 0' 68' 0' 122' 0' 105' 0' 25' 1' 107' 0'                      105' 0' 46' 0 } }              };
