Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Window,Window,C:\repos\corick_sfml-2d-lucid\SFMLnet\src\Window\Window.cs,CallEventHandler,Cyclomatic complexity of the method is 72
Long Parameter List,Window,ContextSettings,C:\repos\corick_sfml-2d-lucid\SFMLnet\src\Window\ContextSettings.cs,ContextSettings,The method has 5 parameters.
Long Statement,Window,ContextSettings,C:\repos\corick_sfml-2d-lucid\SFMLnet\src\Window\ContextSettings.cs,ToString,The length of the statement  "	return "[ContextSettings]" + " DepthBits(" + DepthBits + ")" + " StencilBits(" + StencilBits + ")" + " AntialiasingLevel(" + AntialiasingLevel + ")" + " MajorVersion(" + MajorVersion + ")" + " MinorVersion(" + MinorVersion + ")"; " is 229.
Long Statement,Window,KeyEventArgs,C:\repos\corick_sfml-2d-lucid\SFMLnet\src\Window\EventArgs.cs,ToString,The length of the statement  "	return "[KeyEventArgs]" + " Code(" + Code + ")" + " Alt(" + Alt + ")" + " Control(" + Control + ")" + " Shift(" + Shift + ")" + " System(" + System + ")"; " is 154.
Long Statement,Window,JoystickMoveEventArgs,C:\repos\corick_sfml-2d-lucid\SFMLnet\src\Window\EventArgs.cs,ToString,The length of the statement  "	return "[JoystickMoveEventArgs]" + " JoystickId(" + JoystickId + ")" + " Axis(" + Axis + ")" + " Position(" + Position + ")"; " is 125.
Missing Default,Window,Window,C:\repos\corick_sfml-2d-lucid\SFMLnet\src\Window\Window.cs,CallEventHandler,The following switch statement is missing a default case: switch (e.Type) {  case EventType.Closed:  	if (Closed != null)  		Closed (this' EventArgs.Empty);  	break;  case EventType.GainedFocus:  	if (GainedFocus != null)  		GainedFocus (this' EventArgs.Empty);  	break;  case EventType.JoystickButtonPressed:  	if (JoystickButtonPressed != null)  		JoystickButtonPressed (this' new JoystickButtonEventArgs (e.JoystickButton));  	break;  case EventType.JoystickButtonReleased:  	if (JoystickButtonReleased != null)  		JoystickButtonReleased (this' new JoystickButtonEventArgs (e.JoystickButton));  	break;  case EventType.JoystickMoved:  	if (JoystickMoved != null)  		JoystickMoved (this' new JoystickMoveEventArgs (e.JoystickMove));  	break;  case EventType.JoystickConnected:  	if (JoystickConnected != null)  		JoystickConnected (this' new JoystickConnectEventArgs (e.JoystickConnect));  	break;  case EventType.JoystickDisconnected:  	if (JoystickDisconnected != null)  		JoystickDisconnected (this' new JoystickConnectEventArgs (e.JoystickConnect));  	break;  case EventType.KeyPressed:  	if (KeyPressed != null)  		KeyPressed (this' new KeyEventArgs (e.Key));  	break;  case EventType.KeyReleased:  	if (KeyReleased != null)  		KeyReleased (this' new KeyEventArgs (e.Key));  	break;  case EventType.LostFocus:  	if (LostFocus != null)  		LostFocus (this' EventArgs.Empty);  	break;  case EventType.MouseButtonPressed:  	if (MouseButtonPressed != null)  		MouseButtonPressed (this' new MouseButtonEventArgs (e.MouseButton));  	break;  case EventType.MouseButtonReleased:  	if (MouseButtonReleased != null)  		MouseButtonReleased (this' new MouseButtonEventArgs (e.MouseButton));  	break;  case EventType.MouseEntered:  	if (MouseEntered != null)  		MouseEntered (this' EventArgs.Empty);  	break;  case EventType.MouseLeft:  	if (MouseLeft != null)  		MouseLeft (this' EventArgs.Empty);  	break;  case EventType.MouseMoved:  	if (MouseMoved != null)  		MouseMoved (this' new MouseMoveEventArgs (e.MouseMove));  	break;  case EventType.MouseWheelMoved:  	if (MouseWheelMoved != null)  		MouseWheelMoved (this' new MouseWheelEventArgs (e.MouseWheel));  	break;  case EventType.Resized:  	if (Resized != null)  		Resized (this' new SizeEventArgs (e.Size));  	break;  case EventType.TextEntered:  	if (TextEntered != null)  		TextEntered (this' new TextEventArgs (e.Text));  	break;  }  
