Implementation smell,Namespace,Class,File,Method,Description
Long Method,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The method has 170 lines of code.
Long Parameter List,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The method has 58 parameters.
Long Parameter List,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Divide,The method has 5 parameters.
Long Parameter List,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,TempSort,The method has 5 parameters.
Long Parameter List,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,TempSort,The method has 5 parameters.
Long Statement,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The length of the statement  "		}).ToList ().Select (x => Task.Factory.StartNew (() => x.reLi.AddRange (x._a.Where (_x => x._b.Contains (_x) ? !x._b.Remove (_x) /* always true */: true).ToList ()))).ToArray ()); " is 179.
Long Statement,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The length of the statement  "		}).ToList ().Select (x => Task.Factory.StartNew (() => x.baseSorted.Where (_x => x.objcSorted.Contains (_x) ? !x.objcSorted.Remove (_x) /* always true */: true).ToList ())).ToArray ().WaitAllAndReturnValues ().Aggregate ((x' y) => x.Union (y).ToList ()); " is 254.
Long Statement,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The length of the statement  "		}).ToList ().ForEach (x => x.reLi.Add (x._a.Where (_x => x._b.Contains (_x) ? !x._b.Remove (_x) /* always true */: true).ToList ())); " is 133.
Long Statement,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The length of the statement  "	var baseStrList = Enumerable.Range (0' 100000).Select (x => new string (Enumerable.Repeat (chars' 14).Select (s => s [random.Next (s.Length)]).ToArray ())).ToList (); " is 166.
Long Statement,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The length of the statement  "		res = baseStrListSorted.Where (x => objcStrListSorted.Contains (x) ? !objcStrListSorted.Remove (x) /* always true */: true).ToList (); " is 134.
Long Statement,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The length of the statement  "	}).ToList ().Select (x => Task.Factory.StartNew (() => x.baseSorted.Where (_x => x.objcSorted.Contains (_x) ? !x.objcSorted.Remove (_x) /* always true */: true).ToList ())).ToArray ().WaitAllAndReturnValues ().Aggregate ((x' y) => x.Union (y).ToList ()); " is 254.
Long Statement,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The length of the statement  "	res = baseStrListSorted.Divide (objcStrListSorted' 2).Select (x => Task.Factory.StartNew (() => x.Base.Divide (x.Comp' 2).Select (x1 => Task.Factory.StartNew (() => x1.Base.Where (x2 => x1.Comp.Contains (x2) ? !x1.Comp.Remove (x2) /* always true */: true).ToList ()/*' TaskCreationOptions.AttachedToParent*/))// https://msdn.microsoft.com/ja-jp/library/vstudio/dd997417(v=vs.100).aspx " is 384.
Long Statement,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The length of the statement  "	.ToArray ().WaitAllAndReturnValues ().Aggregate ((a' b) => a.Union (b).ToList ()))).ToArray ().WaitAllAndReturnValues ().Aggregate ((x' y) => x.Union (y).ToList ()); " is 165.
Long Statement,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,TempSort,The length of the statement  "	return source.SkipWhile (z => string.Compare (z' HeadLocId' StringComparison.Ordinal) < 0).TakeWhile (z => string.Compare (z' TailLocId' StringComparison.Ordinal) <= 0).ToList (); " is 179.
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: ThreadPool.SetMinThreads (200' 200);  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: ThreadPool.SetMinThreads (200' 200);  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: if (false) {  	#region Preparation  	Console.WriteLine ("== int ==");  	var baseList = Enumerable.Range (0' 100000).OrderBy (x => Guid.NewGuid ()).ToList ();  	var objcList = Enumerable.Range (10' 100010).OrderBy (x => Guid.NewGuid ()).ToList ();  	var re = new List<int> ();  	var baseSorted = new List<int> ();  	var objcSorted = new List<int> ();  	sw.Start ();  	Console.WriteLine ("Create sorted lists.");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.05sec in total  	#endregion  	#region Primitive  	if (false) {  		Console.WriteLine ("Nothing");  		re = baseList.Where (x => !objcList.Contains (x)).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		// 14sec  		sw.Restart ();  		Console.WriteLine ("Sorting");  		re = baseSorted.Where (x => !objcSorted.Contains (x)).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		sw.Restart ();  		// 14sec  		Console.WriteLine ("Removing");  		re = baseList.Where (x => objcList.Contains (x) ? objcList.Remove (x) /* always true */: false).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		sw.Restart ();  		// 10sec  		Console.WriteLine ("Sorting and Removing");  		re = baseSorted.Where (x => objcSorted.Contains (x) ? !objcSorted.Remove (x) /* always true */: true).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		sw.Restart ();  		// 1.7sec  	}  	#endregion  	#region Sorting and Removing with devision and async  	Console.WriteLine ("Sorting and Removing with devision and async");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	var reLi = Enumerable.Range (0' Environment.ProcessorCount).Select (_ => new List<int> ()).ToList ();  	Task.WaitAll (baseSorted.DivideIntoList (Environment.ProcessorCount).Select ((x' i) => new {  		li = x'  		head = x.First ()'  		tail = x.Last ()'  		reLi = reLi [i]  	}).Select (x => new {  		x.reLi'  		_a = x.li'  		_b = objcSorted.TempSort (x.head' x.tail)  	}).ToList ().Select (x => Task.Factory.StartNew (() => x.reLi.AddRange (x._a.Where (_x => x._b.Contains (_x) ? !x._b.Remove (_x) /* always true */: true).ToList ()))).ToArray ());  	re = reLi.Aggregate ((x' y) => x.Union (y).ToList ());  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.21sec  	#endregion  	#region Async and Return value ** Best **  	Console.WriteLine ("Sorting and Removing with devision and async and Return value");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	re = baseSorted.DivideIntoList (Environment.ProcessorCount).Select (x => new {  		baseSorted = x'  		head = x.First ()'  		tail = x.Last ()  	}).Select (x => new {  		x.baseSorted'  		objcSorted = objcSorted.TempSort (x.head' x.tail)  	}).ToList ().Select (x => Task.Factory.StartNew (() => x.baseSorted.Where (_x => x.objcSorted.Contains (_x) ? !x.objcSorted.Remove (_x) /* always true */: true).ToList ())).ToArray ().WaitAllAndReturnValues ().Aggregate ((x' y) => x.Union (y).ToList ());  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.19sec  	#endregion  	#region ConcurrentBag  	// ConcurrentBag : Represents a thread-safe' unordered collection of objects.  	//                 Doesn't implement Remove(). => means unable to use _b as ConcurrentBag<int>.  	Console.WriteLine ("Sorting and Removing and ConcurrentBag with AsParallel()");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	var ccrntReLi = new ConcurrentBag<List<int>> ();  	// doesn't implement AddRange().  	baseSorted.DivideIntoList (Environment.ProcessorCount).AsParallel ().Select (x => new {  		li = x'  		head = x.First ()'  		tail = x.Last ()'  		reLi = ccrntReLi  	}).Select (x => new {  		x.reLi'  		_a = x.li'  		_b = objcSorted.TempSort (x.head' x.tail)  	}).ToList ().ForEach (x => x.reLi.Add (x._a.Where (_x => x._b.Contains (_x) ? !x._b.Remove (_x) /* always true */: true).ToList ()));  	re = ccrntReLi.Aggregate ((x' y) => x.Union (y).ToList ());  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.52sec  	#endregion  }  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: if (false) {  	#region Preparation  	Console.WriteLine ("== int ==");  	var baseList = Enumerable.Range (0' 100000).OrderBy (x => Guid.NewGuid ()).ToList ();  	var objcList = Enumerable.Range (10' 100010).OrderBy (x => Guid.NewGuid ()).ToList ();  	var re = new List<int> ();  	var baseSorted = new List<int> ();  	var objcSorted = new List<int> ();  	sw.Start ();  	Console.WriteLine ("Create sorted lists.");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.05sec in total  	#endregion  	#region Primitive  	if (false) {  		Console.WriteLine ("Nothing");  		re = baseList.Where (x => !objcList.Contains (x)).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		// 14sec  		sw.Restart ();  		Console.WriteLine ("Sorting");  		re = baseSorted.Where (x => !objcSorted.Contains (x)).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		sw.Restart ();  		// 14sec  		Console.WriteLine ("Removing");  		re = baseList.Where (x => objcList.Contains (x) ? objcList.Remove (x) /* always true */: false).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		sw.Restart ();  		// 10sec  		Console.WriteLine ("Sorting and Removing");  		re = baseSorted.Where (x => objcSorted.Contains (x) ? !objcSorted.Remove (x) /* always true */: true).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		sw.Restart ();  		// 1.7sec  	}  	#endregion  	#region Sorting and Removing with devision and async  	Console.WriteLine ("Sorting and Removing with devision and async");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	var reLi = Enumerable.Range (0' Environment.ProcessorCount).Select (_ => new List<int> ()).ToList ();  	Task.WaitAll (baseSorted.DivideIntoList (Environment.ProcessorCount).Select ((x' i) => new {  		li = x'  		head = x.First ()'  		tail = x.Last ()'  		reLi = reLi [i]  	}).Select (x => new {  		x.reLi'  		_a = x.li'  		_b = objcSorted.TempSort (x.head' x.tail)  	}).ToList ().Select (x => Task.Factory.StartNew (() => x.reLi.AddRange (x._a.Where (_x => x._b.Contains (_x) ? !x._b.Remove (_x) /* always true */: true).ToList ()))).ToArray ());  	re = reLi.Aggregate ((x' y) => x.Union (y).ToList ());  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.21sec  	#endregion  	#region Async and Return value ** Best **  	Console.WriteLine ("Sorting and Removing with devision and async and Return value");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	re = baseSorted.DivideIntoList (Environment.ProcessorCount).Select (x => new {  		baseSorted = x'  		head = x.First ()'  		tail = x.Last ()  	}).Select (x => new {  		x.baseSorted'  		objcSorted = objcSorted.TempSort (x.head' x.tail)  	}).ToList ().Select (x => Task.Factory.StartNew (() => x.baseSorted.Where (_x => x.objcSorted.Contains (_x) ? !x.objcSorted.Remove (_x) /* always true */: true).ToList ())).ToArray ().WaitAllAndReturnValues ().Aggregate ((x' y) => x.Union (y).ToList ());  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.19sec  	#endregion  	#region ConcurrentBag  	// ConcurrentBag : Represents a thread-safe' unordered collection of objects.  	//                 Doesn't implement Remove(). => means unable to use _b as ConcurrentBag<int>.  	Console.WriteLine ("Sorting and Removing and ConcurrentBag with AsParallel()");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	var ccrntReLi = new ConcurrentBag<List<int>> ();  	// doesn't implement AddRange().  	baseSorted.DivideIntoList (Environment.ProcessorCount).AsParallel ().Select (x => new {  		li = x'  		head = x.First ()'  		tail = x.Last ()'  		reLi = ccrntReLi  	}).Select (x => new {  		x.reLi'  		_a = x.li'  		_b = objcSorted.TempSort (x.head' x.tail)  	}).ToList ().ForEach (x => x.reLi.Add (x._a.Where (_x => x._b.Contains (_x) ? !x._b.Remove (_x) /* always true */: true).ToList ()));  	re = ccrntReLi.Aggregate ((x' y) => x.Union (y).ToList ());  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.52sec  	#endregion  }  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: if (false) {  	#region Preparation  	Console.WriteLine ("== int ==");  	var baseList = Enumerable.Range (0' 100000).OrderBy (x => Guid.NewGuid ()).ToList ();  	var objcList = Enumerable.Range (10' 100010).OrderBy (x => Guid.NewGuid ()).ToList ();  	var re = new List<int> ();  	var baseSorted = new List<int> ();  	var objcSorted = new List<int> ();  	sw.Start ();  	Console.WriteLine ("Create sorted lists.");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.05sec in total  	#endregion  	#region Primitive  	if (false) {  		Console.WriteLine ("Nothing");  		re = baseList.Where (x => !objcList.Contains (x)).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		// 14sec  		sw.Restart ();  		Console.WriteLine ("Sorting");  		re = baseSorted.Where (x => !objcSorted.Contains (x)).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		sw.Restart ();  		// 14sec  		Console.WriteLine ("Removing");  		re = baseList.Where (x => objcList.Contains (x) ? objcList.Remove (x) /* always true */: false).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		sw.Restart ();  		// 10sec  		Console.WriteLine ("Sorting and Removing");  		re = baseSorted.Where (x => objcSorted.Contains (x) ? !objcSorted.Remove (x) /* always true */: true).ToList ();  		Console.WriteLine (sw.ElapsedMilliseconds);  		sw.Restart ();  		// 1.7sec  	}  	#endregion  	#region Sorting and Removing with devision and async  	Console.WriteLine ("Sorting and Removing with devision and async");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	var reLi = Enumerable.Range (0' Environment.ProcessorCount).Select (_ => new List<int> ()).ToList ();  	Task.WaitAll (baseSorted.DivideIntoList (Environment.ProcessorCount).Select ((x' i) => new {  		li = x'  		head = x.First ()'  		tail = x.Last ()'  		reLi = reLi [i]  	}).Select (x => new {  		x.reLi'  		_a = x.li'  		_b = objcSorted.TempSort (x.head' x.tail)  	}).ToList ().Select (x => Task.Factory.StartNew (() => x.reLi.AddRange (x._a.Where (_x => x._b.Contains (_x) ? !x._b.Remove (_x) /* always true */: true).ToList ()))).ToArray ());  	re = reLi.Aggregate ((x' y) => x.Union (y).ToList ());  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.21sec  	#endregion  	#region Async and Return value ** Best **  	Console.WriteLine ("Sorting and Removing with devision and async and Return value");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	re = baseSorted.DivideIntoList (Environment.ProcessorCount).Select (x => new {  		baseSorted = x'  		head = x.First ()'  		tail = x.Last ()  	}).Select (x => new {  		x.baseSorted'  		objcSorted = objcSorted.TempSort (x.head' x.tail)  	}).ToList ().Select (x => Task.Factory.StartNew (() => x.baseSorted.Where (_x => x.objcSorted.Contains (_x) ? !x.objcSorted.Remove (_x) /* always true */: true).ToList ())).ToArray ().WaitAllAndReturnValues ().Aggregate ((x' y) => x.Union (y).ToList ());  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.19sec  	#endregion  	#region ConcurrentBag  	// ConcurrentBag : Represents a thread-safe' unordered collection of objects.  	//                 Doesn't implement Remove(). => means unable to use _b as ConcurrentBag<int>.  	Console.WriteLine ("Sorting and Removing and ConcurrentBag with AsParallel()");  	baseSorted = baseList.OrderBy (x => x).ToList ();  	objcSorted = objcList.OrderBy (x => x).ToList ();  	var ccrntReLi = new ConcurrentBag<List<int>> ();  	// doesn't implement AddRange().  	baseSorted.DivideIntoList (Environment.ProcessorCount).AsParallel ().Select (x => new {  		li = x'  		head = x.First ()'  		tail = x.Last ()'  		reLi = ccrntReLi  	}).Select (x => new {  		x.reLi'  		_a = x.li'  		_b = objcSorted.TempSort (x.head' x.tail)  	}).ToList ().ForEach (x => x.reLi.Add (x._a.Where (_x => x._b.Contains (_x) ? !x._b.Remove (_x) /* always true */: true).ToList ()));  	re = ccrntReLi.Aggregate ((x' y) => x.Union (y).ToList ());  	Console.WriteLine (sw.ElapsedMilliseconds);  	sw.Restart ();  	// 0.52sec  	#endregion  }  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: objcStrList [24999] = "01234567891234";  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: objcStrList [25000] = "01234567891234";  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: objcStrList [25001] = "01234567891234";  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: objcStrList [99999] = "01234567891234";  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: res = baseStrListSorted.DivideIntoList (4).Select (x => new {  	baseSorted = x'  	head = x.First ()'  	tail = x.Last ()  }).Select (x => new {  	x.baseSorted'  	objcSorted = objcStrListSorted.TempSort (x.head' x.tail)  }).ToList ().Select (x => Task.Factory.StartNew (() => x.baseSorted.Where (_x => x.objcSorted.Contains (_x) ? !x.objcSorted.Remove (_x) /* always true */: true).ToList ())).ToArray ().WaitAllAndReturnValues ().Aggregate ((x' y) => x.Union (y).ToList ());  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: res = baseStrListSorted.Divide (objcStrListSorted' 2).Select (x => Task.Factory.StartNew (() => x.Base.Divide (x.Comp' 2).Select (x1 => Task.Factory.StartNew (() => x1.Base.Where (x2 => x1.Comp.Contains (x2) ? !x1.Comp.Remove (x2) /* always true */: true).ToList ()/*' TaskCreationOptions.AttachedToParent*/))// https://msdn.microsoft.com/ja-jp/library/vstudio/dd997417(v=vs.100).aspx  .ToArray ().WaitAllAndReturnValues ().Aggregate ((a' b) => a.Union (b).ToList ()))).ToArray ().WaitAllAndReturnValues ().Aggregate ((x' y) => x.Union (y).ToList ());  
Magic Number,AllandAllCompare,Program,C:\repos\Funkest_CS\AllandAllCompare\AllandAllCompare\Program.cs,Main,The following statement contains a magic number: res = baseStrListSorted.Divide (objcStrListSorted' 2).Select (x => Task.Factory.StartNew (() => x.Base.Divide (x.Comp' 2).Select (x1 => Task.Factory.StartNew (() => x1.Base.Where (x2 => x1.Comp.Contains (x2) ? !x1.Comp.Remove (x2) /* always true */: true).ToList ()/*' TaskCreationOptions.AttachedToParent*/))// https://msdn.microsoft.com/ja-jp/library/vstudio/dd997417(v=vs.100).aspx  .ToArray ().WaitAllAndReturnValues ().Aggregate ((a' b) => a.Union (b).ToList ()))).ToArray ().WaitAllAndReturnValues ().Aggregate ((x' y) => x.Union (y).ToList ());  
