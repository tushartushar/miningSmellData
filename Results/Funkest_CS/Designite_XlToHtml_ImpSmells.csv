Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,_DelphiQuickSort,Cyclomatic complexity of the method is 11
Complex Method,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,KeepEntityXmlTextWriter,Cyclomatic complexity of the method is 20
Complex Method,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,Main,Cyclomatic complexity of the method is 9
Complex Method,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,Cyclomatic complexity of the method is 16
Long Parameter List,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,CopyDirectory,The method has 7 parameters.
Long Parameter List,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,WritePOSTData,The method has 7 parameters.
Long Parameter List,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,TempSort,The method has 5 parameters.
Long Parameter List,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,GetArguments,The method has 5 parameters.
Long Parameter List,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,GetArguments,The method has 7 parameters.
Long Parameter List,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,KeepEntityXmlTextWriter,The method has 14 parameters.
Long Parameter List,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,Main,The method has 21 parameters.
Long Parameter List,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The method has 12 parameters.
Long Parameter List,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,GetCellCollection,The method has 7 parameters.
Long Identifier,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,KeepEntityXmlTextWriter,The length of the parameter xmlEncodedRawTextWriterIndentType is 33.
Long Identifier,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,KeepEntityXmlTextWriter,The length of the parameter xmlUtf8RawTextWriterIndentType is 30.
Long Statement,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,CopyDirectory,The length of the statement  "	Directory.GetDirectories (srcDir).ToList ().ForEach (x => CopyDirectory (x' Path.Combine (destDir' Path.GetFileName (x))' allowOverWrite)); " is 139.
Long Statement,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,ToStringEx,The length of the statement  "	return value.GetType ().GetField (value.ToString ()).GetCustomAttributes (typeof(DescriptionAttribute)' false).Cast<DescriptionAttribute> ().FirstOrDefault ().ThrowIf (a => a == null' new ArgumentException ("Not implemented the attribute.")).Description; " is 254.
Long Statement,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,WritePOSTData,The length of the statement  "	Enumerable.Range (0' _values.Count).Select (i => new KeyValuePair<string' string> (_values.Keys [i]' _values [i])).Select (x => new List<Byte[]> () { " is 149.
Long Statement,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,WritePOSTData,The length of the statement  "		Encoding.ASCII.GetBytes (string.Format ("Content-Disposition: form-data; name=\"{0}\"{1}{1}"' x.Key' Environment.NewLine))// value (value of form-data) " is 151.
Long Statement,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,IsMatchAttrVal,The length of the statement  "	return elm.Attribute (attrName) != null && another.Attribute (attrName) != null && elm.Attribute (attrName).Value == another.Attribute (attrName).Value; " is 152.
Long Statement,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,TempSort,The length of the statement  "	return source.SkipWhile (z => string.Compare (z' HeadLocId' StringComparison.Ordinal) < 0).TakeWhile (z => string.Compare (z' TailLocId' StringComparison.Ordinal) <= 0).ToList (); " is 179.
Long Statement,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,GetArguments,The length of the statement  "		return args.GroupBy (s => options.Contains (s) ? key = s : key)// !! Side effect !!   It's true --> 100 == (someVar = 100) " is 122.
Long Statement,Utils,FnEx,C:\repos\Funkest_CS\XlToHtml\XlToHtml\..\..\Utilities\Utils.cs,GetArguments,The length of the statement  "		return args.GroupBy (s => options.Keys.Contains (s) ? key = s // !! Side effect !!   It's true --> 100 == (someVar = 100) " is 121.
Long Statement,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,Main,The length of the statement  "				.ToList ().SideEffectsOnly (x1 => x1.baseHtml.SubstituteValues (x1.menu' x1.sheetData' x1.sheetType).SaveUTF8 (x1.htmlFileName)).ToList ().SideEffectsOnly (x1 => Console.Write (x1.baseHtml.Descendants ("tbody").Elements ().Count ())).Where (x1 => x1.sheetType != SheetType.Top).SideEffectsOnly (x1 => tables.AddRange (x1.baseHtml.Descendants ("tbody").First ().Elements ().SideEffectsOnly (x2 => x2.AddFirst (new XElement ("td"' new XElement ("a"' new XAttribute ("href"' Path.GetFileName (x1.htmlFileName) + string.Format ("?id={0}#{1}"' x2.Attribute ("id").Value' int.Parse (x2.Attribute ("id").Value) - 1))' x1.sheetName))))))); " is 631.
Long Statement,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,Main,The length of the statement  "					doc.Descendants ("li").First (x => x.IsMatchAttrVal ("class"' "sub_menu")).AddAfterSelf (XElement.Parse (@"<li class='download'><a href='fig/AVR-X2200W_S910W.zip'>Excel Download</a></li>")); " is 190.
Long Statement,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,CreateMenu,The length of the statement  "	return new XElement ("ul"' sheetNames.Select (x => new XElement ("li"' new XElement ("a"' new XAttribute ("href"' x + ".php")' x))).Union (XElement.Parse ("<li class='sub_menu'><a href='Modification notice for Parts.php'>Modification Notice</a></li>").ToIEnumerable ()).ToList ()); " is 281.
Long Statement,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The length of the statement  "		mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明 " is 151.
Long Statement,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The length of the statement  "		elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block")); " is 242.
Long Statement,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The length of the statement  "		mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark) " is 191.
Long Statement,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,GetSheets,The length of the statement  "	return xlMgr.xlApp.Workbooks.Open (file' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing).SelectNewSingle (x => (Workbook)x).Sheets.Cast<Worksheet> ().ToList (); " is 308.
Long Statement,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,GetCellCollection,The length of the statement  "	}).SelectNewSingle (x => Enumerable.Range (1' x.rowsCount).Select (x1 => cells.Rows [x1]).Cast<Range> ().Select (x1 => Enumerable.Range (1' x.colsCount).Select (x2 => x1.Cells [x2]).Select (x2 => x2.Text.ToString () as string).ToList ()).ToList ()); " is 249.
Complex Conditional,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The conditional expression  "bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>'"  is complex.
Complex Conditional,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The conditional expression  "bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>'"  is complex.
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType != BufferType.Unknown) {  	int bufPos = get_bufPos (internalWriter);  	int bufLen = get_bufLen (internalWriter);  	if ((bufPos + 3) >= bufLen) {  		this.FlushBuffer (internalWriter);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if ((bufPos + 3) >= bufLen) {  	this.FlushBuffer (internalWriter);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Chars) {  	int bufPos = get_bufPos (internalWriter);  	char[] bufChars = get_bufChars (internalWriter);  	if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  		bufChars [bufPos - 3] = '/';  		bufChars [bufPos - 2] = '>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  else if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  	bufChars [bufPos - 3] = '/';  	bufChars [bufPos - 2] = '>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  	bufChars [bufPos - 3] = '/';  	bufChars [bufPos - 2] = '>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  	bufChars [bufPos - 3] = '/';  	bufChars [bufPos - 2] = '>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  	bufChars [bufPos - 3] = '/';  	bufChars [bufPos - 2] = '>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufChars [bufPos - 3] == ' ' && bufChars [bufPos - 2] == '/' && bufChars [bufPos - 1] == '>') {  	bufChars [bufPos - 3] = '/';  	bufChars [bufPos - 2] = '>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: bufChars [bufPos - 3] = '/';  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: bufChars [bufPos - 2] = '>';  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (this.bufferType == BufferType.Bytes) {  	int bufPos = get_bufPos (internalWriter);  	byte[] bufBytes = get_bufBytes (internalWriter);  	if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  		bufBytes [bufPos - 3] = (byte)'/';  		bufBytes [bufPos - 2] = (byte)'>';  		bufPos--;  		set_bufPos (internalWriter' bufPos);  	}  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  	bufBytes [bufPos - 3] = (byte)'/';  	bufBytes [bufPos - 2] = (byte)'>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  	bufBytes [bufPos - 3] = (byte)'/';  	bufBytes [bufPos - 2] = (byte)'>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  	bufBytes [bufPos - 3] = (byte)'/';  	bufBytes [bufPos - 2] = (byte)'>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  	bufBytes [bufPos - 3] = (byte)'/';  	bufBytes [bufPos - 2] = (byte)'>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: if (bufPos > 3 && bufBytes [bufPos - 3] == ' ' && bufBytes [bufPos - 2] == '/' && bufBytes [bufPos - 1] == '>') {  	bufBytes [bufPos - 3] = (byte)'/';  	bufBytes [bufPos - 2] = (byte)'>';  	bufPos--;  	set_bufPos (internalWriter' bufPos);  }  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: bufBytes [bufPos - 3] = (byte)'/';  
Magic Number,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,WriteEndElement,The following statement contains a magic number: bufBytes [bufPos - 2] = (byte)'>';  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: switch (sheetType) {  case SheetType.Top:  	mainDiv.Descendants ("h1").First ().Value = "Modification Notice";  	mainDiv.Element ("h2").Value = sheetData.Title;  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  	.Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  	' new XElement ("td"' x1 [2])// Description  	' new XElement ("td"' x1 [3])// REF No.  	' new XElement ("td"' x1 [4])// Part No.  	' new XElement ("td"' x1 [5])// Part Name  	' new XElement ("td"' x1 [6])// Remarks  	' new XElement ("td"' x1 [7])// Factories  	' new XElement ("td"' x1 [8])// Q't  	' new XElement ("td"' x1 [9])// New  	' new XElement ("td"' x1 [10])// Before  	' new XElement ("td"' x1 [11])// After  	' new XElement ("td"' x1 [12])// Ver  	' new XElement ("td"' x1 [13])))));  	// Date)))));  	break;  case SheetType.Search:  	break;  case SheetType.Content:  	elms.First (x => x.IsMatchAttrVal ("id"' "menu")).Descendants ("a").First (x => x.IsMatchAttrVal ("href"' sheetData.SheetName + ".php") && sheetData.SheetName != "Modification notice for Parts").Parent.Add (new XAttribute ("class"' "block"));  	mainDiv.Descendants ("h1").First ().Value = sheetData.SheetName;  	mainDiv.Element ("h2").Value = sheetData.Title;  	mainDiv.Element ("h2").AddAfterSelf (sheetData.Notes.Select (x => new XElement ("p"' x)));  	// table  	mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  	' new XElement ("td"' x1 [1])//.RefNumber)  	' new XElement ("td"' x1 [2])//.PartNumber)  	' new XElement ("td"' x1 [3])//.PartName)  	' new XElement ("td"' x1 [4])//.Remarks)  	' new XElement ("td"' x1 [5])//.NoNameNumber)  	' new XElement ("td"' x1 [6])//.Qty)  	' new XElement ("td"' x1 [7])//.New)  	' new XElement ("td"' x1 [8])))));  	//.Ver)))));  	break;  default:  	break;  }  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Reverse<List<string>> ().Skip (1).Reverse ()// 余計な空行が入る経緯は不明  .Select (x1 => new XElement ("tr"' new XElement ("td"' x1 [1])// Sheet  ' new XElement ("td"' x1 [2])// Description  ' new XElement ("td"' x1 [3])// REF No.  ' new XElement ("td"' x1 [4])// Part No.  ' new XElement ("td"' x1 [5])// Part Name  ' new XElement ("td"' x1 [6])// Remarks  ' new XElement ("td"' x1 [7])// Factories  ' new XElement ("td"' x1 [8])// Q't  ' new XElement ("td"' x1 [9])// New  ' new XElement ("td"' x1 [10])// Before  ' new XElement ("td"' x1 [11])// After  ' new XElement ("td"' x1 [12])// Ver  ' new XElement ("td"' x1 [13])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  ' new XElement ("td"' x1 [1])//.RefNumber)  ' new XElement ("td"' x1 [2])//.PartNumber)  ' new XElement ("td"' x1 [3])//.PartName)  ' new XElement ("td"' x1 [4])//.Remarks)  ' new XElement ("td"' x1 [5])//.NoNameNumber)  ' new XElement ("td"' x1 [6])//.Qty)  ' new XElement ("td"' x1 [7])//.New)  ' new XElement ("td"' x1 [8])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  ' new XElement ("td"' x1 [1])//.RefNumber)  ' new XElement ("td"' x1 [2])//.PartNumber)  ' new XElement ("td"' x1 [3])//.PartName)  ' new XElement ("td"' x1 [4])//.Remarks)  ' new XElement ("td"' x1 [5])//.NoNameNumber)  ' new XElement ("td"' x1 [6])//.Qty)  ' new XElement ("td"' x1 [7])//.New)  ' new XElement ("td"' x1 [8])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  ' new XElement ("td"' x1 [1])//.RefNumber)  ' new XElement ("td"' x1 [2])//.PartNumber)  ' new XElement ("td"' x1 [3])//.PartName)  ' new XElement ("td"' x1 [4])//.Remarks)  ' new XElement ("td"' x1 [5])//.NoNameNumber)  ' new XElement ("td"' x1 [6])//.Qty)  ' new XElement ("td"' x1 [7])//.New)  ' new XElement ("td"' x1 [8])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  ' new XElement ("td"' x1 [1])//.RefNumber)  ' new XElement ("td"' x1 [2])//.PartNumber)  ' new XElement ("td"' x1 [3])//.PartName)  ' new XElement ("td"' x1 [4])//.Remarks)  ' new XElement ("td"' x1 [5])//.NoNameNumber)  ' new XElement ("td"' x1 [6])//.Qty)  ' new XElement ("td"' x1 [7])//.New)  ' new XElement ("td"' x1 [8])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  ' new XElement ("td"' x1 [1])//.RefNumber)  ' new XElement ("td"' x1 [2])//.PartNumber)  ' new XElement ("td"' x1 [3])//.PartName)  ' new XElement ("td"' x1 [4])//.Remarks)  ' new XElement ("td"' x1 [5])//.NoNameNumber)  ' new XElement ("td"' x1 [6])//.Qty)  ' new XElement ("td"' x1 [7])//.New)  ' new XElement ("td"' x1 [8])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  ' new XElement ("td"' x1 [1])//.RefNumber)  ' new XElement ("td"' x1 [2])//.PartNumber)  ' new XElement ("td"' x1 [3])//.PartName)  ' new XElement ("td"' x1 [4])//.Remarks)  ' new XElement ("td"' x1 [5])//.NoNameNumber)  ' new XElement ("td"' x1 [6])//.Qty)  ' new XElement ("td"' x1 [7])//.New)  ' new XElement ("td"' x1 [8])))));  
Magic Number,XlToHtml,Program,C:\repos\Funkest_CS\XlToHtml\XlToHtml\Program.cs,SubstituteValues,The following statement contains a magic number: mainDiv.Descendants ("tbody").First ().ReplaceWith (new XElement ("tbody"' sheetData.Table.Select ((x1' i) => new XElement ("tr"' new XAttribute ("id"' i)' new XElement ("td"' x1 [0])//.Mark)  ' new XElement ("td"' x1 [1])//.RefNumber)  ' new XElement ("td"' x1 [2])//.PartNumber)  ' new XElement ("td"' x1 [3])//.PartName)  ' new XElement ("td"' x1 [4])//.Remarks)  ' new XElement ("td"' x1 [5])//.NoNameNumber)  ' new XElement ("td"' x1 [6])//.Qty)  ' new XElement ("td"' x1 [7])//.New)  ' new XElement ("td"' x1 [8])))));  
Magic Number,XlToHtml,SheetData,C:\repos\Funkest_CS\XlToHtml\XlToHtml\SheetData.cs,SheetData,The following statement contains a magic number: this.Notes = cells.Select (x => x [1] + x [2]).Skip (1).Take (separator - 1).ToList ();  
Magic Number,XlToHtml,SheetData,C:\repos\Funkest_CS\XlToHtml\XlToHtml\SheetData.cs,SheetData,The following statement contains a magic number: this.Table = cells.Skip (separator + 2).Select (x => x.ToList ()).ToList ();  
Missing Default,XlToHtml,KeepEntityXmlTextWriter,C:\repos\Funkest_CS\XlToHtml\XlToHtml\KeepEntityXmlTextWriter.cs,KeepEntityXmlTextWriter,The following switch statement is missing a default case: switch (this.bufferType) {  case BufferType.Unknown:  	break;  case BufferType.Chars:  	this.get_bufChars = w => (char[])bufCharsBytesField.GetValue (w);  	this.get_bufPos = w => (int)bufPosField.GetValue (w);  	this.set_bufPos = (w' i) => bufPosField.SetValue (w' i);  	this.get_bufLen = w => (int)bufLenField.GetValue (w);  	this.FlushBuffer = w => flushBufferMethod.Invoke (w' new object[0]);  	break;  case BufferType.Bytes:  	this.get_bufBytes = w => (byte[])bufCharsBytesField.GetValue (w);  	this.get_bufPos = w => (int)bufPosField.GetValue (w);  	this.set_bufPos = (w' i) => bufPosField.SetValue (w' i);  	this.get_bufLen = w => (int)bufLenField.GetValue (w);  	this.FlushBuffer = w => flushBufferMethod.Invoke (w' new object[0]);  	break;  }  
