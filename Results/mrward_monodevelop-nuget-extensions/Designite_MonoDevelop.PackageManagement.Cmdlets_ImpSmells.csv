Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ICSharpCode.PackageManagement.Cmdlets,InvokeInitializePackagesCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\InvokeInitializePackagesCmdlet.cs,ExecuteInitPs1ForPackagesConfig,Cyclomatic complexity of the method is 8
Long Parameter List,ICSharpCode.PackageManagement.Cmdlets,PackageManagementCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\PackageManagementCmdlet.cs,GetInstalledPackagesAsync,The method has 5 parameters. Parameters: projects' filter' skip' take' token
Long Parameter List,ICSharpCode.PackageManagement.Cmdlets,UninstallPackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\UninstallPackageCmdlet.cs,UninstallPackageByIdAsync,The method has 5 parameters. Parameters: project' packageId' uninstallContext' projectContext' isPreview
Long Parameter List,NuGet.PackageManagement.PowerShellCmdlets,PackageActionBaseCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\PackageActionBaseCmdlet.cs,InstallPackageByIdentityAsync,The method has 5 parameters. Parameters: project' identity' resolutionContext' projectContext' isPreview
Long Parameter List,NuGet.PackageManagement.PowerShellCmdlets,PackageActionBaseCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\PackageActionBaseCmdlet.cs,InstallPackageByIdAsync,The method has 5 parameters. Parameters: project' packageId' resolutionContext' projectContext' isPreview
Long Identifier,ICSharpCode.PackageManagement.Cmdlets,GetProjectCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\GetProjectCmdlet.cs,,The length of the parameter ParameterSetProjectsFilteredByName is 34.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,CmdletTerminatingError,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\CmdletTerminatingError.cs,ThrowNoSolutionOpenError,The length of the statement  "			ErrorRecord error = CreateInvalidOperationErrorRecord ("NoActiveSolution"' "A solution must be open to run this command."); " is 123.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,GetPackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\GetPackageCmdlet.cs,WriteInstalledPackages,The length of the statement  "			List<PowerShellInstalledPackage> view = PowerShellInstalledPackage.GetPowerShellPackageView (packages' ConsoleHost.SolutionManager' ConsoleHost.Settings); " is 154.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,GetPackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\GetPackageCmdlet.cs,WriteUpdatePackagesFromRemoteSourceAsync,The length of the statement  "					var metadata = await GetLatestPackageFromRemoteSourceAsync (project' installedPackage.PackageIdentity' IncludePrerelease.IsPresent); " is 132.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,GetPackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\GetPackageCmdlet.cs,WriteUpdatePackagesFromRemoteSourceAsync,The length of the statement  "					var package = PowerShellUpdatePackage.GetPowerShellPackageUpdateView (metadata' task.Item2.PackageIdentity.Version' versionType' project); " is 138.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,GetPackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\GetPackageCmdlet.cs,WriteUpdatePackagesFromRemoteSourceAsync,The length of the statement  "					GettextCatalog.GetString ("No package updates are available from the current package source for project '{0}'."' project.GetMetadata<string> (NuGetProjectMetadataKeys.Name))); " is 175.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,InstallPackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\InstallPackageCmdlet.cs,CreatePackageIdentitiesFromPackagesConfig,The length of the statement  "				Log (MessageLevel.Error' GettextCatalog.GetString ("Failed to parse package identities from file {0} with exception: {1}"' Id' ex.Message)); " is 140.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,InstallPackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\InstallPackageCmdlet.cs,CreatePackageIdentityFromNupkgPath,The length of the statement  "				Log (MessageLevel.Error' GettextCatalog.GetString ("Failed to parse package identities from file {0} with exception: {1}"' Id' ex.Message)); " is 140.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,InstallPackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\InstallPackageCmdlet.cs,ParsePackageIdentityFromNupkgPath,The length of the statement  "				NuGetVersion nVersion = PowerShellCmdletsUtility.GetNuGetVersionFromString (builderForVersion.ToString ().TrimEnd ('.')); " is 121.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,UninstallPackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\UninstallPackageCmdlet.cs,UninstallPackageByIdAsync,The length of the statement  "			IEnumerable<NuGetProjectAction> actions = await packageManager.PreviewUninstallPackageAsync (project' packageId' uninstallContext' projectContext' ConsoleHost.Token); " is 166.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,UpdatePackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\UpdatePackageCmdlet.cs,PreviewAndExecuteUpdateActionsforSinglePackage,The length of the statement  "						new PackageIdentity (installedPackage.PackageIdentity.Id' PowerShellCmdletsUtility.GetNuGetVersionFromString (Version))' " is 120.
Long Statement,ICSharpCode.PackageManagement.Cmdlets,UpdatePackageCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\UpdatePackageCmdlet.cs,DetermineVersionConstraints,The length of the statement  "				return VersionConstraints.ExactMajor | VersionConstraints.ExactMinor | VersionConstraints.ExactPatch | VersionConstraints.ExactRelease; " is 135.
Long Statement,NuGet.PackageManagement.PowerShellCmdlets,PowerShellInstalledPackage,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\NuGet.PackageManagement.PowerShellCmdlets.Model\PowerShellInstalledPackage.cs,GetPowerShellPackageView,The length of the statement  "						installPackagePath = defaultPackagePathResolver.GetPackageFilePath (package.PackageIdentity.Id' package.PackageIdentity.Version); " is 129.
Long Statement,NuGet.PackageManagement.PowerShellCmdlets,PowerShellCmdletsUtility,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\NuGet.PackageManagement.PowerShellCmdlets.Utility\PowerShellCmdletsUtility.cs,GetNuGetVersionFromString,The length of the statement  "					GettextCatalog.GetString ("Failed to parse the input of Version parameter: {0} to a valid Semantic version."' version)); " is 120.
Missing Default,ICSharpCode.PackageManagement.Cmdlets,PackageManagementCmdlet,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\MonoDevelop.PackageManagement.Cmdlets\PackageManagementCmdlet.cs,ResolveFileConflict,The following switch statement is missing a default case: switch (result) {  				case FileConflictAction.IgnoreAll:  					ignoreAll = true;  				break;  				case FileConflictAction.OverwriteAll:  					overwriteAll = true;  				break;  			}
Missing Default,NuGet.PackageManagement.PowerShellCmdlets,PowerShellRemotePackage,C:\repos\mrward_monodevelop-nuget-extensions\src\MonoDevelop.PackageManagement.Cmdlets\NuGet.PackageManagement.PowerShellCmdlets.Model\PowerShellRemotePackage.cs,GetPowerShellPackageView,The following switch statement is missing a default case: switch (versionType) {  				case VersionType.All:  					package.AllVersions = true;  					break;    				case VersionType.Latest:  					break;  				}
