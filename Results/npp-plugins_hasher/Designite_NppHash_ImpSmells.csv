Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NppPluginNET,PluginBase,C:\repos\npp-plugins_hasher\NppPluginNETBase.cs,SetCommand,The method has 5 parameters.
Long Statement,NppHashMaker,Main,C:\repos\npp-plugins_hasher\Main.cs,SetToolBarIcon,The length of the statement  "            Win32.SendMessage(PluginBase.nppData._nppHandle' NppMsg.NPPM_ADDTOOLBARICON' PluginBase._funcItems.Items[idMyDlg]._cmdID' pTbIcons);" is 132.
Magic Number,NppHashMaker,Main,C:\repos\npp-plugins_hasher\Main.cs,CommandMenuInit,The following statement contains a magic number: PluginBase.SetCommand (2' "SHA256"' sha256);  
Magic Number,NppHashMaker,Main,C:\repos\npp-plugins_hasher\Main.cs,CommandMenuInit,The following statement contains a magic number: PluginBase.SetCommand (3' "SHA384"' sha384);  
Magic Number,NppHashMaker,Main,C:\repos\npp-plugins_hasher\Main.cs,CommandMenuInit,The following statement contains a magic number: PluginBase.SetCommand (4' "SHA512"' sha512);  
Magic Number,NppHashMaker,Main,C:\repos\npp-plugins_hasher\Main.cs,GetTipStringFromByteArray,The following statement contains a magic number: if (ss.Length >= 2)  	tip = " ...";  
Magic Number,NppHashMaker,Main,C:\repos\npp-plugins_hasher\Main.cs,GetSelectedText,The following statement contains a magic number: try {  	IntPtr ptrText = Marshal.AllocHGlobal (textLen == 86016 ? 86017 : textLen);  	Win32.SendMessage (hCurrScintilla' SciMsg.SCI_GETSELTEXT' 0' ptrText);  	byte[] b = new byte[textLen];  	Marshal.Copy (ptrText' b' 0' textLen);  	Marshal.FreeHGlobal (ptrText);  	return b;  }  catch (Exception ex) {  	MessageBox.Show ("textLen : " + textLen + "\n" + ex.ToString ());  	return null;  }  
Magic Number,NppHashMaker,Main,C:\repos\npp-plugins_hasher\Main.cs,GetSelectedText,The following statement contains a magic number: try {  	IntPtr ptrText = Marshal.AllocHGlobal (textLen == 86016 ? 86017 : textLen);  	Win32.SendMessage (hCurrScintilla' SciMsg.SCI_GETSELTEXT' 0' ptrText);  	byte[] b = new byte[textLen];  	Marshal.Copy (ptrText' b' 0' textLen);  	Marshal.FreeHGlobal (ptrText);  	return b;  }  catch (Exception ex) {  	MessageBox.Show ("textLen : " + textLen + "\n" + ex.ToString ());  	return null;  }  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,Add,The following statement contains a magic number: ptrPosNewItem = (IntPtr)((int)ptrPosNewItem + 128);  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,Add,The following statement contains a magic number: ptrPosNewItem = (IntPtr)((int)ptrPosNewItem + 4);  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,Add,The following statement contains a magic number: ptrPosNewItem = (IntPtr)((int)ptrPosNewItem + 4);  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,Add,The following statement contains a magic number: if (funcItem._pShKey._key != 0) {  	IntPtr newShortCutKey = Marshal.AllocHGlobal (4);  	Marshal.StructureToPtr (funcItem._pShKey' newShortCutKey' false);  	Marshal.WriteIntPtr (ptrPosNewItem' newShortCutKey);  }  else  	Marshal.WriteIntPtr (ptrPosNewItem' IntPtr.Zero);  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,RefreshItems,The following statement contains a magic number: for (int i = 0; i < _funcItems.Count; i++) {  	FuncItem updatedItem = new FuncItem ();  	updatedItem._itemName = _funcItems [i]._itemName;  	ptrPosItem = (IntPtr)((int)ptrPosItem + 128);  	updatedItem._pFunc = _funcItems [i]._pFunc;  	ptrPosItem = (IntPtr)((int)ptrPosItem + IntPtr.Size);  	updatedItem._cmdID = Marshal.ReadInt32 (ptrPosItem);  	ptrPosItem = (IntPtr)((int)ptrPosItem + 4);  	updatedItem._init2Check = _funcItems [i]._init2Check;  	ptrPosItem = (IntPtr)((int)ptrPosItem + 4);  	updatedItem._pShKey = _funcItems [i]._pShKey;  	ptrPosItem = (IntPtr)((int)ptrPosItem + IntPtr.Size);  	_funcItems [i] = updatedItem;  }  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,RefreshItems,The following statement contains a magic number: for (int i = 0; i < _funcItems.Count; i++) {  	FuncItem updatedItem = new FuncItem ();  	updatedItem._itemName = _funcItems [i]._itemName;  	ptrPosItem = (IntPtr)((int)ptrPosItem + 128);  	updatedItem._pFunc = _funcItems [i]._pFunc;  	ptrPosItem = (IntPtr)((int)ptrPosItem + IntPtr.Size);  	updatedItem._cmdID = Marshal.ReadInt32 (ptrPosItem);  	ptrPosItem = (IntPtr)((int)ptrPosItem + 4);  	updatedItem._init2Check = _funcItems [i]._init2Check;  	ptrPosItem = (IntPtr)((int)ptrPosItem + 4);  	updatedItem._pShKey = _funcItems [i]._pShKey;  	ptrPosItem = (IntPtr)((int)ptrPosItem + IntPtr.Size);  	_funcItems [i] = updatedItem;  }  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,RefreshItems,The following statement contains a magic number: for (int i = 0; i < _funcItems.Count; i++) {  	FuncItem updatedItem = new FuncItem ();  	updatedItem._itemName = _funcItems [i]._itemName;  	ptrPosItem = (IntPtr)((int)ptrPosItem + 128);  	updatedItem._pFunc = _funcItems [i]._pFunc;  	ptrPosItem = (IntPtr)((int)ptrPosItem + IntPtr.Size);  	updatedItem._cmdID = Marshal.ReadInt32 (ptrPosItem);  	ptrPosItem = (IntPtr)((int)ptrPosItem + 4);  	updatedItem._init2Check = _funcItems [i]._init2Check;  	ptrPosItem = (IntPtr)((int)ptrPosItem + 4);  	updatedItem._pShKey = _funcItems [i]._pShKey;  	ptrPosItem = (IntPtr)((int)ptrPosItem + IntPtr.Size);  	_funcItems [i] = updatedItem;  }  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,RefreshItems,The following statement contains a magic number: ptrPosItem = (IntPtr)((int)ptrPosItem + 128);  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,RefreshItems,The following statement contains a magic number: ptrPosItem = (IntPtr)((int)ptrPosItem + 4);  
Magic Number,NppPluginNET,FuncItems,C:\repos\npp-plugins_hasher\NppPluginNETHelper.cs,RefreshItems,The following statement contains a magic number: ptrPosItem = (IntPtr)((int)ptrPosItem + 4);  
