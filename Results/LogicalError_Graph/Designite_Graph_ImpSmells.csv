Implementation smell,Namespace,Class,File,Method,Description
Long Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseDown,The method has 178 lines of code.
Long Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The method has 334 lines of code.
Long Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseUp,The method has 134 lines of code.
Long Method,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The method has 111 lines of code.
Long Method,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The method has 105 lines of code.
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,SetFlag,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,BringElementToFront,Cyclomatic complexity of the method is 11
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,HasFocus,Cyclomatic complexity of the method is 10
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,AddNodes,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,RemoveNodes,Cyclomatic complexity of the method is 9
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,Connect,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,Disconnect,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,FindElementAt,Cyclomatic complexity of the method is 14
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,FindElementAt,Cyclomatic complexity of the method is 15
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnPaint,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDrawBackground,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseDown,Cyclomatic complexity of the method is 33
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,Cyclomatic complexity of the method is 67
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseUp,Cyclomatic complexity of the method is 17
Complex Method,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseClick,Cyclomatic complexity of the method is 9
Complex Method,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,Cyclomatic complexity of the method is 11
Complex Method,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,Cyclomatic complexity of the method is 20
Complex Method,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLineColor,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,Cyclomatic complexity of the method is 9
Long Parameter List,Graph.Items,NodeNumericSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,NodeNumericSliderItem,The method has 8 parameters. Parameters: text' sliderSize' textSize' minValue' maxValue' defaultValue' inputEnabled' outputEnabled
Long Parameter List,Graph.Items,NodeImageItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeImageItem.cs,NodeImageItem,The method has 5 parameters. Parameters: image' width' height' inputEnabled' outputEnabled
Long Parameter List,Graph.Items,NodeSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeSliderItem.cs,NodeSliderItem,The method has 8 parameters. Parameters: text' sliderSize' textSize' minValue' maxValue' defaultValue' inputEnabled' outputEnabled
Long Parameter List,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The method has 7 parameters. Parameters: x1' y1' x2' y2' centerX' centerY' extra_thickness
Long Parameter List,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePath,The method has 8 parameters. Parameters: x1' y1' x2' y2' centerX' centerY' include_arrow' extra_thickness
Long Parameter List,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderOutputConnection,The method has 5 parameters. Parameters: graphics' output' x' y' state
Long Parameter List,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderInputConnection,The method has 5 parameters. Parameters: graphics' input' x' y' state
Long Statement,Graph.Items,NodeNumericSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,Render,The length of the statement  "				graphics.DrawLine(Pens.White' sliderBox.X + sliderBox.Width' sliderBox.Y' sliderBox.X + sliderBox.Width' sliderBox.Y + sliderBox.Height); " is 137.
Long Statement,Graph.Items,NodeNumericSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,Render,The length of the statement  "				graphics.DrawLine(Pens.Black' sliderBox.X + sliderBox.Width' sliderBox.Y' sliderBox.X + sliderBox.Width' sliderBox.Y + sliderBox.Height); " is 137.
Long Statement,Graph.Items,NodeNumericSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,Render,The length of the statement  "			graphics.DrawString(this.Value.ToString()' SystemFonts.MenuFont' Brushes.Black' sliderRect' GraphConstants.LeftTextStringFormat); " is 129.
Long Statement,Graph.Items,NodeDropDownItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeDropDownItem.cs,Render,The length of the statement  "				graphics.DrawString(text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 132.
Long Statement,Graph.Items,NodeDropDownItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeDropDownItem.cs,Render,The length of the statement  "				graphics.DrawString(text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 132.
Long Statement,Graph.Items,NodeTextBoxItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Measure,The length of the statement  "					this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat); " is 122.
Long Statement,Graph.Items,NodeTextBoxItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 137.
Long Statement,Graph.Items,NodeTextBoxItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 137.
Long Statement,Graph.Items,NodeCheckboxItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeCheckboxItem.cs,Measure,The length of the statement  "					this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.CenterMeasureTextStringFormat); " is 124.
Long Statement,Graph.Items,NodeColorItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeColorItem.cs,Measure,The length of the statement  "							this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat); " is 122.
Long Statement,Graph.Items,NodeColorItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeColorItem.cs,Measure,The length of the statement  "							this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.RightMeasureTextStringFormat); " is 123.
Long Statement,Graph.Items,NodeColorItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeColorItem.cs,Measure,The length of the statement  "						this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.CenterMeasureTextStringFormat); " is 124.
Long Statement,Graph.Items,NodeLabelItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Measure,The length of the statement  "							this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat); " is 122.
Long Statement,Graph.Items,NodeLabelItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Measure,The length of the statement  "							this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.RightMeasureTextStringFormat); " is 123.
Long Statement,Graph.Items,NodeLabelItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Measure,The length of the statement  "						this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.CenterMeasureTextStringFormat); " is 124.
Long Statement,Graph.Items,NodeLabelItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Render,The length of the statement  "					graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 137.
Long Statement,Graph.Items,NodeLabelItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Render,The length of the statement  "					graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.RightTextStringFormat); " is 138.
Long Statement,Graph.Items,NodeLabelItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.CenterTextStringFormat); " is 139.
Long Statement,Graph.Items,NodeSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeSliderItem.cs,Measure,The length of the statement  "					this.textSize			= (SizeF)graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat); " is 131.
Long Statement,Graph.Items,NodeTitleItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeTitleItem.cs,Measure,The length of the statement  "					this.TextSize			= graphics.MeasureString(this.Title' SystemFonts.CaptionFont' size' GraphConstants.TitleMeasureStringFormat); " is 125.
Long Statement,Graph.Items,NodeTitleItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeTitleItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Title' SystemFonts.CaptionFont' Brushes.White' new RectangleF(location' size)' GraphConstants.TitleStringFormat); " is 138.
Long Statement,Graph.Items,NodeTitleItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeTitleItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Title' SystemFonts.CaptionFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.TitleStringFormat); " is 138.
Long Statement,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The length of the statement  "			this.CancelButtonControl.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 155.
Long Statement,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The length of the statement  "			this.OKButtonControl.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnPaint,The length of the statement  "				e.Graphics.DrawRectangle(Pens.DarkGray' marque_rectangle.X' marque_rectangle.Y' marque_rectangle.Width' marque_rectangle.Height); " is 129.
Long Statement,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The length of the statement  "				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height); " is 151.
Long Statement,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowPoints,The length of the statement  "					new PointF(x - (GraphConstants.ConnectorSize + 1.0f) - extra_thickness' y + (GraphConstants.ConnectorSize / 1.5f) + extra_thickness)' " is 133.
Long Statement,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowPoints,The length of the statement  "					new PointF(x - (GraphConstants.ConnectorSize + 1.0f) - extra_thickness' y - (GraphConstants.ConnectorSize / 1.5f) - extra_thickness)}; " is 134.
Long Statement,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The length of the statement  "			this.TextTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The length of the statement  "			this.CancelButtonControl.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 155.
Long Statement,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The length of the statement  "			this.OKButtonControl.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Complex Conditional,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,Connect,The conditional expression  "from      == null || to      == null ||  				from.Node == null || to.Node == null ||  				!from.Enabled ||   				!to.Enabled"  is complex.
Magic Number,Graph.Items,NodeNumericSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,Render,The following statement contains a magic number: sliderRect.Y		+= ((sliderRect.Bottom - sliderRect.Top) - SliderHeight) / 2.0f;
Magic Number,Graph.Items,NodeNumericSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,Render,The following statement contains a magic number: this.sliderRect.X	+= SliderBoxSize / 2.0f;
Magic Number,Graph.Items,NodeDropDownItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeDropDownItem.cs,Measure,The following statement contains a magic number: this.TextSize.Width  = Math.Max(size.Width' this.TextSize.Width + 8);
Magic Number,Graph.Items,NodeDropDownItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeDropDownItem.cs,Measure,The following statement contains a magic number: this.TextSize.Height = Math.Max(size.Height' this.TextSize.Height + 2);
Magic Number,Graph.Items,NodeTextBoxItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Measure,The following statement contains a magic number: this.TextSize.Width  = Math.Max(size.Width' this.TextSize.Width + 8);
Magic Number,Graph.Items,NodeTextBoxItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Measure,The following statement contains a magic number: this.TextSize.Height = Math.Max(size.Height' this.TextSize.Height + 2);
Magic Number,Graph.Items,NodeImageItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeImageItem.cs,Render,The following statement contains a magic number: location.X += (size.Width - (this.Width.Value)) / 2.0f;
Magic Number,Graph.Items,NodeSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeSliderItem.cs,Measure,The following statement contains a magic number: this.textSize.Width		= Math.Max(this.TextSize' this.textSize.Width + 4);
Magic Number,Graph.Items,NodeSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeSliderItem.cs,Render,The following statement contains a magic number: sliderRect.Y		+= ((sliderRect.Bottom - sliderRect.Top) - SliderHeight) / 2.0f;
Magic Number,Graph.Items,NodeSliderItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeSliderItem.cs,Render,The following statement contains a magic number: this.sliderRect.X += SliderBoxSize / 2.0f;
Magic Number,Graph.Items,NodeTitleItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeTitleItem.cs,Measure,The following statement contains a magic number: this.TextSize.Width		= Math.Max(size.Width'  this.TextSize.Width + (GraphConstants.CornerSize * 2));
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Location = new System.Drawing.Point(114' 38);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Location = new System.Drawing.Point(114' 38);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.TabIndex = 2;
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Location = new System.Drawing.Point(195' 37);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Location = new System.Drawing.Point(195' 37);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.TabIndex = 3;
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.Location = new System.Drawing.Point(12' 11);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.Location = new System.Drawing.Point(12' 11);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.Size = new System.Drawing.Size(258' 21);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.Size = new System.Drawing.Size(258' 21);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.TabIndex = 4;
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 72);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 72);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(600' 106);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(600' 106);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 106);
Magic Number,Graph,SelectionForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 106);
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,UpdateMatrices,The following statement contains a magic number: zoom = 0.25f;
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,UpdateMatrices,The following statement contains a magic number: zoom < 0.25f
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,UpdateMatrices,The following statement contains a magic number: zoom = 5.00f;
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,UpdateMatrices,The following statement contains a magic number: zoom > 5.00f
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,UpdateMatrices,The following statement contains a magic number: var center = new PointF(this.Width / 2.0f' this.Height / 2.0f);
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,UpdateMatrices,The following statement contains a magic number: var center = new PointF(this.Width / 2.0f' this.Height / 2.0f);
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDrawBackground,The following statement contains a magic number: smallStepScaled > 3
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDrawBackground,The following statement contains a magic number: largeStepScaled > 3
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseWheel,The following statement contains a magic number: zoom *= (float)Math.Pow(2' e.Delta / 480.0f);
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseWheel,The following statement contains a magic number: zoom *= (float)Math.Pow(2' e.Delta / 480.0f);
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The following statement contains a magic number: switch (command)  			{  				case CommandMode.ScaleView:  					if (!mouseMoved)  					{  						if ((Math.Abs(deltaY) > 1))  							mouseMoved = true;  					}    					if (mouseMoved &&  						(Math.Abs(deltaY) > 0))  					{  						zoom *= (float)Math.Pow(2' deltaY / 100.0f);  						Cursor.Position = this.PointToScreen(lastLocation);  						snappedLocation = //lastLocation =   							currentLocation;  						this.Refresh();  					}  					return;  				case CommandMode.TranslateView:  				{  					if (!mouseMoved)  					{  						if ((Math.Abs(deltaX) > 1) ||  							(Math.Abs(deltaY) > 1))  							mouseMoved = true;  					}    					if (mouseMoved &&  						(Math.Abs(deltaX) > 0) ||  						(Math.Abs(deltaY) > 0))  					{  						translation.X -= deltaX * zoom;  						translation.Y -= deltaY * zoom;  						snappedLocation = lastLocation = currentLocation;  						this.Refresh();  					}  					return;  				}  				case CommandMode.MarqueSelection:  					if (!mouseMoved)  					{  						if ((Math.Abs(deltaX) > 1) ||  							(Math.Abs(deltaY) > 1))  							mouseMoved = true;  					}    					if (mouseMoved &&  						(Math.Abs(deltaX) > 0) ||  						(Math.Abs(deltaY) > 0))  					{  						var marque_rectangle = GetMarqueRectangle();  												  						foreach (var node in selectedNodes)  							SetFlag(node' RenderState.Focus' false' false);    						foreach (var node in unselectedNodes)  							SetFlag(node' RenderState.Focus' true' false);    						if (!abortDrag)  						{  							foreach (var node in graphNodes)  							{  								if (marque_rectangle.Contains(node.bounds))  								{  									if ((node.state & RenderState.Focus) == 0 &&  										(ModifierKeys != Keys.Alt))  									{  										SetFlag(node' RenderState.Focus' true' false);  										selectedNodes.Add(node);  									}  									if ((node.state & RenderState.Focus) != 0 &&  										(ModifierKeys == Keys.Alt))  									{  										SetFlag(node' RenderState.Focus' false' false);  										unselectedNodes.Add(node);  									}  								} else  								{  									if ((node.state & RenderState.Focus) == RenderState.Focus &&  										(ModifierKeys == Keys.None))  									{  										SetFlag(node' RenderState.Focus' false' false);  										unselectedNodes.Add(node);  									}  								}  							}  						}    						snappedLocation = lastLocation = currentLocation;  						this.Refresh();  					}  					return;    				default:  				case CommandMode.Edit:  					break;  			}
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The following statement contains a magic number: switch (command)  			{  				case CommandMode.ScaleView:  					if (!mouseMoved)  					{  						if ((Math.Abs(deltaY) > 1))  							mouseMoved = true;  					}    					if (mouseMoved &&  						(Math.Abs(deltaY) > 0))  					{  						zoom *= (float)Math.Pow(2' deltaY / 100.0f);  						Cursor.Position = this.PointToScreen(lastLocation);  						snappedLocation = //lastLocation =   							currentLocation;  						this.Refresh();  					}  					return;  				case CommandMode.TranslateView:  				{  					if (!mouseMoved)  					{  						if ((Math.Abs(deltaX) > 1) ||  							(Math.Abs(deltaY) > 1))  							mouseMoved = true;  					}    					if (mouseMoved &&  						(Math.Abs(deltaX) > 0) ||  						(Math.Abs(deltaY) > 0))  					{  						translation.X -= deltaX * zoom;  						translation.Y -= deltaY * zoom;  						snappedLocation = lastLocation = currentLocation;  						this.Refresh();  					}  					return;  				}  				case CommandMode.MarqueSelection:  					if (!mouseMoved)  					{  						if ((Math.Abs(deltaX) > 1) ||  							(Math.Abs(deltaY) > 1))  							mouseMoved = true;  					}    					if (mouseMoved &&  						(Math.Abs(deltaX) > 0) ||  						(Math.Abs(deltaY) > 0))  					{  						var marque_rectangle = GetMarqueRectangle();  												  						foreach (var node in selectedNodes)  							SetFlag(node' RenderState.Focus' false' false);    						foreach (var node in unselectedNodes)  							SetFlag(node' RenderState.Focus' true' false);    						if (!abortDrag)  						{  							foreach (var node in graphNodes)  							{  								if (marque_rectangle.Contains(node.bounds))  								{  									if ((node.state & RenderState.Focus) == 0 &&  										(ModifierKeys != Keys.Alt))  									{  										SetFlag(node' RenderState.Focus' true' false);  										selectedNodes.Add(node);  									}  									if ((node.state & RenderState.Focus) != 0 &&  										(ModifierKeys == Keys.Alt))  									{  										SetFlag(node' RenderState.Focus' false' false);  										unselectedNodes.Add(node);  									}  								} else  								{  									if ((node.state & RenderState.Focus) == RenderState.Focus &&  										(ModifierKeys == Keys.None))  									{  										SetFlag(node' RenderState.Focus' false' false);  										unselectedNodes.Add(node);  									}  								}  							}  						}    						snappedLocation = lastLocation = currentLocation;  						this.Refresh();  					}  					return;    				default:  				case CommandMode.Edit:  					break;  			}
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The following statement contains a magic number: var pre_points = new PointF[] {   						new PointF((destinationConnector.bounds.Left + destinationConnector.bounds.Right) / 2'  									(destinationConnector.bounds.Top  + destinationConnector.bounds.Bottom) / 2) };
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The following statement contains a magic number: var pre_points = new PointF[] {   						new PointF((destinationConnector.bounds.Left + destinationConnector.bounds.Right) / 2'  									(destinationConnector.bounds.Top  + destinationConnector.bounds.Bottom) / 2) };
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDragOver,The following statement contains a magic number: location.X -= ((dragNode.bounds.Right - dragNode.bounds.Left) / 2);
Magic Number,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDragOver,The following statement contains a magic number: location.Y -= ((dragNode.titleItem.bounds.Bottom - dragNode.titleItem.bounds.Top) / 2);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderArrow,The following statement contains a magic number: var x = (bounds.Left + bounds.Right) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderArrow,The following statement contains a magic number: var y = (bounds.Top + bounds.Bottom) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,The following statement contains a magic number: int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,The following statement contains a magic number: var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,The following statement contains a magic number: var connectorY		= itemPosition.Y  + (int)Math.Ceiling(realHeight / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,The following statement contains a magic number: node.inputBounds	= new RectangleF(left  - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,The following statement contains a magic number: node.outputBounds	= new RectangleF(right - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: int cornerSize			= (int)GraphConstants.CornerSize * 2;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: path.AddArc(left' top' cornerSize' cornerSize' 180' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: path.AddArc(left' top' cornerSize' cornerSize' 180' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnections,The following statement contains a magic number: var x1 = (fromBounds.Left + fromBounds.Right) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnections,The following statement contains a magic number: var y1 = (fromBounds.Top + fromBounds.Bottom) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnections,The following statement contains a magic number: var x2 = (toBounds.Left + toBounds.Right) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnections,The following statement contains a magic number: var y2 = (toBounds.Top + toBounds.Bottom) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: int cornerSize			= (int)GraphConstants.CornerSize * 2;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: var halfWidth  = size.Width / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: var halfHeight = size.Height / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: path.AddArc(left' top' cornerSize' cornerSize' 180' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: path.AddArc(left' top' cornerSize' cornerSize' 180' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetConnectionRegion,The following statement contains a magic number: var x1 = (fromBounds.Left + fromBounds.Right) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetConnectionRegion,The following statement contains a magic number: var y1 = (fromBounds.Top + fromBounds.Bottom) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetConnectionRegion,The following statement contains a magic number: var x2 = (toBounds.Left + toBounds.Right) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetConnectionRegion,The following statement contains a magic number: var y2 = (toBounds.Top + toBounds.Bottom) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowPoints,The following statement contains a magic number: return new PointF[]{  					new PointF(x - (GraphConstants.ConnectorSize + 1.0f) - extra_thickness' y + (GraphConstants.ConnectorSize / 1.5f) + extra_thickness)'  					new PointF(x + 1.0f + extra_thickness' y)'  					new PointF(x - (GraphConstants.ConnectorSize + 1.0f) - extra_thickness' y - (GraphConstants.ConnectorSize / 1.5f) - extra_thickness)};
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowPoints,The following statement contains a magic number: return new PointF[]{  					new PointF(x - (GraphConstants.ConnectorSize + 1.0f) - extra_thickness' y + (GraphConstants.ConnectorSize / 1.5f) + extra_thickness)'  					new PointF(x + 1.0f + extra_thickness' y)'  					new PointF(x - (GraphConstants.ConnectorSize + 1.0f) - extra_thickness' y - (GraphConstants.ConnectorSize / 1.5f) - extra_thickness)};
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: var lengthX = Math.Max(60' Math.Abs(widthX / 2))   				//+ Math.Max(0' -widthX / 2)  				;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: var lengthX = Math.Max(60' Math.Abs(widthX / 2))   				//+ Math.Max(0' -widthX / 2)  				;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: lengthX = 60;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: widthX < 120
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: var yB = ((y1 + y2) / 2) + lengthY;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: var xC = (x1 + x2) / 2;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: points.Insert(2' new PointF(xB' yA));
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: points.Insert(2' new PointF(xC' yA));
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: points.Insert(2' new PointF(xA' yA));
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: widthX <= 120
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: var pt3 = points[i + 2];
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: i < points.Count - 2
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: float midLength		= (totalLength / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: float startWidth	= extra_thickness + 0.75f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: float endWidth		= extra_thickness + (GraphConstants.ConnectorSize / 3.5f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: i < points.Count - 2
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderOutputConnection,The following statement contains a magic number: var x1 = (outputBounds.Left + outputBounds.Right) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderOutputConnection,The following statement contains a magic number: var y1 = (outputBounds.Top + outputBounds.Bottom) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderInputConnection,The following statement contains a magic number: var x2 = (inputBounds.Left + inputBounds.Right) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderInputConnection,The following statement contains a magic number: var y2 = (inputBounds.Top + inputBounds.Bottom) / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: int cornerSize			= (int)GraphConstants.CornerSize * 2;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: var halfWidth			= width / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: var halfHeight			= height / 2.0f;
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(left' top' cornerSize' cornerSize' 180' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(left' top' cornerSize' cornerSize' 180' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);
Magic Number,Graph,GraphRenderer,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.TextTextBox.Location = new System.Drawing.Point(12' 12);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.TextTextBox.Location = new System.Drawing.Point(12' 12);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.TextTextBox.Size = new System.Drawing.Size(258' 20);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.TextTextBox.Size = new System.Drawing.Size(258' 20);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Location = new System.Drawing.Point(114' 38);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Location = new System.Drawing.Point(114' 38);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.TabIndex = 2;
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Location = new System.Drawing.Point(195' 37);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Location = new System.Drawing.Point(195' 37);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.TabIndex = 3;
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 72);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 72);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(600' 106);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(600' 106);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 106);
Magic Number,Graph,TextEditForm,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 106);
Missing Default,Graph.Items,NodeColorItem,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\Items\NodeColorItem.cs,Render,The following switch statement is missing a default case: switch (alignment)  			{  				case HorizontalAlignment.Left:  					rect.Width	-= ColorBoxSize + Spacing;  					rect.X		+= ColorBoxSize + Spacing;  					break;  				case HorizontalAlignment.Right:  					colorBox.X	= rect.Right - colorBox.Width;  					rect.Width	-= ColorBoxSize + Spacing;  					break;  				case HorizontalAlignment.Center:  					rect.Width	-= ColorBoxSize + Spacing;  					rect.X		+= ColorBoxSize + Spacing;  					break;  			}
Missing Default,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,SetFlag,The following switch statement is missing a default case: switch (element.ElementType)  			{  				case ElementType.NodeSelection:  				{  					var selection = element as NodeSelection;  					foreach (var node in selection.Nodes)  					{  						node.state = SetFlag(node.state' flag' value);  						SetFlag(node.titleItem' flag' value);  					}  					break;  				}    				case ElementType.Node:  				{  					var node = element as Node;  					node.state = SetFlag(node.state' flag' value);  					SetFlag(node.titleItem' flag' value);  					break;  				}    				case ElementType.InputConnector:  				case ElementType.OutputConnector:  					var connector = element as NodeConnector;  					connector.state = SetFlag(connector.state' flag' value);  					break;    				case ElementType.Connection:  					var connection = element as NodeConnection;  					connection.state = SetFlag(connection.state' flag' value);  					break;    				case ElementType.NodeItem:  					var item = element as NodeItem;  					item.state = SetFlag(item.state' flag' value);  					break;  			}
Missing Default,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,SetFlag,The following switch statement is missing a default case: switch (element.ElementType)  			{  				case ElementType.NodeSelection:  				{  					var selection = element as NodeSelection;  					foreach (var node in selection.Nodes)  					{  						node.state = SetFlag(node.state' flag' value);  						SetFlag(node.titleItem' flag' value);  					}  					break;  				}    				case ElementType.Node:  				{  					var node = element as Node;  					node.state = SetFlag(node.state' flag' value);  					SetFlag(node.titleItem' flag' value);  					break;  				}    				case ElementType.InputConnector:  				case ElementType.OutputConnector:  					var connector = element as NodeConnector;  					connector.state = SetFlag(connector.state' flag' value);  					SetFlag(connector.Node' flag' value' setConnections);  					break;    				case ElementType.Connection:  					var connection = element as NodeConnection;  					connection.state = SetFlag(connection.state' flag' value);  					if (setConnections)  					{  						//if (connection.From != null)  						//	connection.From.state = SetFlag(connection.From.state' flag' value);  						//if (connection.To != null)  						//	connection.To.state = SetFlag(connection.To.state' flag' value);  						//SetFlag(connection.From' flag' value' setConnections);  						//SetFlag(connection.To' flag' value' setConnections);  					}  					break;    				case ElementType.NodeItem:  					var item = element as NodeItem;  					item.state = SetFlag(item.state' flag' value);  					SetFlag(item.Node' flag' value' setConnections);  					break;  			}
Missing Default,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,BringElementToFront,The following switch statement is missing a default case: switch (element.ElementType)  			{  				case ElementType.Connection:  					var connection = element as NodeConnection;  					BringElementToFront(connection.From);  					BringElementToFront(connection.To);  					  					var connections = connection.From.Node.connections;  					if (connections[0] != connection)  					{  						connections.Remove(connection);  						connections.Insert(0' connection);  					}  					  					connections = connection.To.Node.connections;  					if (connections[0] != connection)  					{  						connections.Remove(connection);  						connections.Insert(0' connection);  					}  					break;  				case ElementType.NodeSelection:  				{  					var selection = element as NodeSelection;  					foreach(var node in selection.Nodes.Reverse<Node>())  					{  						if (graphNodes[0] != node)  						{  							graphNodes.Remove(node);  							graphNodes.Insert(0' node);  						}  					}  					break;  				}  				case ElementType.Node:  				{  					var node = element as Node;  					if (graphNodes[0] != node)  					{  						graphNodes.Remove(node);  						graphNodes.Insert(0' node);  					}  					break;  				}  				case ElementType.InputConnector:  				case ElementType.OutputConnector:  					var connector = element as NodeConnector;  					BringElementToFront(connector.Node);  					break;  				case ElementType.NodeItem:  					var item = element as NodeItem;  					BringElementToFront(item.Node);  					break;  			}
Missing Default,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnPaint,The following switch statement is missing a default case: switch (DragElement.ElementType)  						{  							case ElementType.OutputConnector:  								var outputConnector = DragElement as NodeConnector;  								renderState |= (outputConnector.state & (RenderState.Incompatible | RenderState.Compatible));  								GraphRenderer.RenderOutputConnection(e.Graphics' outputConnector'   									transformed_location.X' transformed_location.Y' renderState);  								break;  							case ElementType.InputConnector:  								var inputConnector = DragElement as NodeConnector;  								renderState |= (inputConnector.state & (RenderState.Incompatible | RenderState.Compatible));  								GraphRenderer.RenderInputConnection(e.Graphics' inputConnector'   									transformed_location.X' transformed_location.Y' renderState);  								break;  						}
Missing Default,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseDown,The following switch statement is missing a default case: switch (ModifierKeys)  						{  							case Keys.None:  							{  								if (selection != null &&  									selection.Nodes.Contains(element_node))  								{  									element = selection;  								}  								break;  							}  							case Keys.Shift:  							{  								if (selection != null)  								{  									if (!selection.Nodes.Contains(element_node))  									{  										var nodes = selection.Nodes.ToList();  										nodes.Add(element_node);  										element = new NodeSelection(nodes);  									}  								} else  								{  									var focus_node = FocusElement as Node;  									if (focus_node != null)  										element = new NodeSelection(new Node[] { focus_node' element_node });  								}  								break;  							}  							case Keys.Control:  							{  								if (selection != null)  								{  									if (selection.Nodes.Contains(element_node))  									{  										var nodes = selection.Nodes.ToList();  										nodes.Remove(element_node);  										element = new NodeSelection(nodes);  									} else  									{  										var nodes = selection.Nodes.ToList();  										nodes.Add(element_node);  										element = new NodeSelection(nodes);  									}  								} else  								{  									var focus_node = FocusElement as Node;  									if (focus_node != null)  									{  										if (focus_node == element_node)  											element = null;  										else  											element = new NodeSelection(new Node[] { focus_node' element_node });  									}  								}  								break;  							}  							case Keys.Alt:  							{  								if (selection != null)  								{  									if (selection.Nodes.Contains(element_node))  									{  										var nodes = selection.Nodes.ToList();  										nodes.Remove(element_node);  										element = new NodeSelection(nodes);  									}  								} else  								{  									var focus_node = FocusElement as Node;  									if (focus_node != null)  										element = null;  								}  								break;  							}  						}
Missing Default,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The following switch statement is missing a default case: switch (DragElement.ElementType)  						{  							case ElementType.NodeSelection:		// drag nodes  							{  								var selection = DragElement as NodeSelection;  								foreach (var node in selection.Nodes)  								{  									node.Location = new Point(	(int)Math.Round(node.Location.X - deltaX)'  																(int)Math.Round(node.Location.Y - deltaY));  								}  								snappedLocation = lastLocation = currentLocation;  								this.Refresh();  								return;  							}  							case ElementType.Node:				// drag single node  							{  								var node = DragElement as Node;  								node.Location	= new Point((int)Math.Round(node.Location.X - deltaX)'  															(int)Math.Round(node.Location.Y - deltaY));  								snappedLocation = lastLocation = currentLocation;  								this.Refresh();  								return;  							}  							case ElementType.NodeItem:			// drag in node-item  							{  								var nodeItem = DragElement as NodeItem;  								needRedraw		= nodeItem.OnDrag(transformed_location);  								snappedLocation = lastLocation = currentLocation;  								break;  							}  							case ElementType.Connection:		// start dragging end of connection to new input connector  							{  								BringElementToFront(DragElement);  								var connection			= DragElement as NodeConnection;  								var outputConnector		= connection.From;  								FocusElement			= outputConnector.Node;  								if (Disconnect(connection))  									DragElement	= outputConnector;  								else  									DragElement = null;    								goto case ElementType.OutputConnector;  							}  							case ElementType.InputConnector:	// drag connection from input or output connector  							case ElementType.OutputConnector:  							{  								snappedLocation = lastLocation = currentLocation;  								needRedraw = true;  								break;  							}  						}
Missing Default,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDoubleClick,The following switch statement is missing a default case: switch (element.ElementType)  			{  				case ElementType.Connection:  					((NodeConnection)element).DoDoubleClick();  					break;  				case ElementType.NodeItem:  					var item = element as NodeItem;  					if (item.OnDoubleClick())  					{  						this.Refresh();  						return;  					}  					element = item.Node;  					goto case ElementType.Node;  				case ElementType.Node:  					var node = element as Node;  					node.Collapsed = !node.Collapsed;  					FocusElement = node;  					this.Refresh();  					break;  			}
Missing Default,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseClick,The following switch statement is missing a default case: switch (element.ElementType)  				{  					case ElementType.NodeItem:  					{  						if (ModifierKeys != Keys.None)  							return;    						var item = element as NodeItem;  						if (item.OnClick())  						{  							ignoreDoubleClick = true; // to avoid double-click from firing  							this.Refresh();  							return;  						}  						break;  					}  				}
Missing Default,Graph,GraphControl,D:\research\architectureSmells\repos\LogicalError_Graph\Graph\GraphControl.cs,OnKeyUp,The following switch statement is missing a default case: switch (FocusElement.ElementType)  				{  					case ElementType.Node:			RemoveNode(FocusElement as Node); break;  					case ElementType.Connection:	Disconnect(FocusElement as NodeConnection); break;  					case ElementType.NodeSelection:  					{  						var selection = FocusElement as NodeSelection;  						foreach(var node in selection.Nodes)  							RemoveNode(node);   						break;  					}  				}
