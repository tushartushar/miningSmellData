Implementation smell,Namespace,Class,File,Method,Description
Long Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseDown,The method has 178 lines of code.
Long Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The method has 334 lines of code.
Long Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseUp,The method has 134 lines of code.
Long Method,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The method has 111 lines of code.
Long Method,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The method has 105 lines of code.
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,AddNodes,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,RemoveNodes,Cyclomatic complexity of the method is 9
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,Connect,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,Disconnect,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,FindElementAt,Cyclomatic complexity of the method is 13
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,FindElementAt,Cyclomatic complexity of the method is 14
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnPaint,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDrawBackground,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseDown,Cyclomatic complexity of the method is 16
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,Cyclomatic complexity of the method is 22
Complex Method,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseClick,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,Cyclomatic complexity of the method is 9
Long Parameter List,Graph.Items,NodeNumericSliderItem,C:\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,NodeNumericSliderItem,The method has 8 parameters. Parameters: text' sliderSize' textSize' minValue' maxValue' defaultValue' inputEnabled' outputEnabled
Long Parameter List,Graph.Items,NodeImageItem,C:\repos\LogicalError_Graph\Graph\Items\NodeImageItem.cs,NodeImageItem,The method has 5 parameters. Parameters: image' width' height' inputEnabled' outputEnabled
Long Parameter List,Graph.Items,NodeSliderItem,C:\repos\LogicalError_Graph\Graph\Items\NodeSliderItem.cs,NodeSliderItem,The method has 8 parameters. Parameters: text' sliderSize' textSize' minValue' maxValue' defaultValue' inputEnabled' outputEnabled
Long Parameter List,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The method has 7 parameters. Parameters: x1' y1' x2' y2' centerX' centerY' extra_thickness
Long Parameter List,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePath,The method has 8 parameters. Parameters: x1' y1' x2' y2' centerX' centerY' include_arrow' extra_thickness
Long Parameter List,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderOutputConnection,The method has 5 parameters. Parameters: graphics' output' x' y' state
Long Parameter List,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderInputConnection,The method has 5 parameters. Parameters: graphics' input' x' y' state
Long Statement,Graph.Items,NodeNumericSliderItem,C:\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,Render,The length of the statement  "				graphics.DrawLine(Pens.White' sliderBox.X + sliderBox.Width' sliderBox.Y' sliderBox.X + sliderBox.Width' sliderBox.Y + sliderBox.Height); " is 137.
Long Statement,Graph.Items,NodeNumericSliderItem,C:\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,Render,The length of the statement  "				graphics.DrawLine(Pens.Black' sliderBox.X + sliderBox.Width' sliderBox.Y' sliderBox.X + sliderBox.Width' sliderBox.Y + sliderBox.Height); " is 137.
Long Statement,Graph.Items,NodeNumericSliderItem,C:\repos\LogicalError_Graph\Graph\Items\NodeNumericSliderItem.cs,Render,The length of the statement  "			graphics.DrawString(this.Value.ToString()' SystemFonts.MenuFont' Brushes.Black' sliderRect' GraphConstants.LeftTextStringFormat); " is 129.
Long Statement,Graph.Items,NodeDropDownItem,C:\repos\LogicalError_Graph\Graph\Items\NodeDropDownItem.cs,Render,The length of the statement  "				graphics.DrawString(text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 132.
Long Statement,Graph.Items,NodeDropDownItem,C:\repos\LogicalError_Graph\Graph\Items\NodeDropDownItem.cs,Render,The length of the statement  "				graphics.DrawString(text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 132.
Long Statement,Graph.Items,NodeTextBoxItem,C:\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Measure,The length of the statement  "					this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat); " is 122.
Long Statement,Graph.Items,NodeTextBoxItem,C:\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 137.
Long Statement,Graph.Items,NodeTextBoxItem,C:\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 137.
Long Statement,Graph.Items,NodeCheckboxItem,C:\repos\LogicalError_Graph\Graph\Items\NodeCheckboxItem.cs,Measure,The length of the statement  "					this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.CenterMeasureTextStringFormat); " is 124.
Long Statement,Graph.Items,NodeColorItem,C:\repos\LogicalError_Graph\Graph\Items\NodeColorItem.cs,Measure,The length of the statement  "							this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat); " is 122.
Long Statement,Graph.Items,NodeColorItem,C:\repos\LogicalError_Graph\Graph\Items\NodeColorItem.cs,Measure,The length of the statement  "							this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.RightMeasureTextStringFormat); " is 123.
Long Statement,Graph.Items,NodeColorItem,C:\repos\LogicalError_Graph\Graph\Items\NodeColorItem.cs,Measure,The length of the statement  "						this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.CenterMeasureTextStringFormat); " is 124.
Long Statement,Graph.Items,NodeLabelItem,C:\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Measure,The length of the statement  "							this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat); " is 122.
Long Statement,Graph.Items,NodeLabelItem,C:\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Measure,The length of the statement  "							this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.RightMeasureTextStringFormat); " is 123.
Long Statement,Graph.Items,NodeLabelItem,C:\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Measure,The length of the statement  "						this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.CenterMeasureTextStringFormat); " is 124.
Long Statement,Graph.Items,NodeLabelItem,C:\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Render,The length of the statement  "					graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.LeftTextStringFormat); " is 137.
Long Statement,Graph.Items,NodeLabelItem,C:\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Render,The length of the statement  "					graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.RightTextStringFormat); " is 138.
Long Statement,Graph.Items,NodeLabelItem,C:\repos\LogicalError_Graph\Graph\Items\NodeLabelItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.CenterTextStringFormat); " is 139.
Long Statement,Graph.Items,NodeSliderItem,C:\repos\LogicalError_Graph\Graph\Items\NodeSliderItem.cs,Measure,The length of the statement  "					this.textSize			= (SizeF)graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat); " is 131.
Long Statement,Graph.Items,NodeTitleItem,C:\repos\LogicalError_Graph\Graph\Items\NodeTitleItem.cs,Measure,The length of the statement  "					this.TextSize			= graphics.MeasureString(this.Title' SystemFonts.CaptionFont' size' GraphConstants.TitleMeasureStringFormat); " is 125.
Long Statement,Graph.Items,NodeTitleItem,C:\repos\LogicalError_Graph\Graph\Items\NodeTitleItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Title' SystemFonts.CaptionFont' Brushes.White' new RectangleF(location' size)' GraphConstants.TitleStringFormat); " is 138.
Long Statement,Graph.Items,NodeTitleItem,C:\repos\LogicalError_Graph\Graph\Items\NodeTitleItem.cs,Render,The length of the statement  "				graphics.DrawString(this.Title' SystemFonts.CaptionFont' Brushes.Black' new RectangleF(location' size)' GraphConstants.TitleStringFormat); " is 138.
Long Statement,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The length of the statement  "			this.CancelButtonControl.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 155.
Long Statement,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The length of the statement  "			this.OKButtonControl.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnPaint,The length of the statement  "				e.Graphics.DrawRectangle(Pens.DarkGray' marque_rectangle.X' marque_rectangle.Y' marque_rectangle.Width' marque_rectangle.Height); " is 129.
Long Statement,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The length of the statement  "				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height); " is 151.
Long Statement,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowPoints,The length of the statement  "					new PointF(x - (GraphConstants.ConnectorSize + 1.0f) - extra_thickness' y + (GraphConstants.ConnectorSize / 1.5f) + extra_thickness)' " is 133.
Long Statement,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowPoints,The length of the statement  "					new PointF(x - (GraphConstants.ConnectorSize + 1.0f) - extra_thickness' y - (GraphConstants.ConnectorSize / 1.5f) - extra_thickness)}; " is 134.
Long Statement,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The length of the statement  "			this.TextTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 144.
Long Statement,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The length of the statement  "			this.CancelButtonControl.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 155.
Long Statement,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The length of the statement  "			this.OKButtonControl.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Complex Conditional,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,Connect,The conditional expression  "from      == null || to      == null ||  				from.Node == null || to.Node == null ||  				!from.Enabled ||   				!to.Enabled"  is complex.
Magic Number,Graph.Items,NodeDropDownItem,C:\repos\LogicalError_Graph\Graph\Items\NodeDropDownItem.cs,Measure,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(text))  			{  				if (this.TextSize.IsEmpty)  				{  					var size = new Size(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);    					this.TextSize = graphics.MeasureString(text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat);  					  					this.TextSize.Width  = Math.Max(size.Width' this.TextSize.Width + 8);  					this.TextSize.Height = Math.Max(size.Height' this.TextSize.Height + 2);  				}  				return this.TextSize;  			} else  			{  				return new SizeF(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);  			}
Magic Number,Graph.Items,NodeDropDownItem,C:\repos\LogicalError_Graph\Graph\Items\NodeDropDownItem.cs,Measure,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(text))  			{  				if (this.TextSize.IsEmpty)  				{  					var size = new Size(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);    					this.TextSize = graphics.MeasureString(text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat);  					  					this.TextSize.Width  = Math.Max(size.Width' this.TextSize.Width + 8);  					this.TextSize.Height = Math.Max(size.Height' this.TextSize.Height + 2);  				}  				return this.TextSize;  			} else  			{  				return new SizeF(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);  			}
Magic Number,Graph.Items,NodeTextBoxItem,C:\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Measure,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(this.Text))  			{  				if (this.TextSize.IsEmpty)  				{  					var size = new Size(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);    					this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat);  					  					this.TextSize.Width  = Math.Max(size.Width' this.TextSize.Width + 8);  					this.TextSize.Height = Math.Max(size.Height' this.TextSize.Height + 2);  				}  				return this.TextSize;  			} else  			{  				return new SizeF(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);  			}
Magic Number,Graph.Items,NodeTextBoxItem,C:\repos\LogicalError_Graph\Graph\Items\NodeTextBoxItem.cs,Measure,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(this.Text))  			{  				if (this.TextSize.IsEmpty)  				{  					var size = new Size(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);    					this.TextSize = graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat);  					  					this.TextSize.Width  = Math.Max(size.Width' this.TextSize.Width + 8);  					this.TextSize.Height = Math.Max(size.Height' this.TextSize.Height + 2);  				}  				return this.TextSize;  			} else  			{  				return new SizeF(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);  			}
Magic Number,Graph.Items,NodeCheckboxItem,C:\repos\LogicalError_Graph\Graph\Items\NodeCheckboxItem.cs,Render,The following statement contains a magic number: using (var path = GraphRenderer.CreateRoundedRectangle(size' location))  			{  				var rect = new RectangleF(location' size);  				if (this.Checked)  				{  					using (var brush = new SolidBrush(Color.FromArgb(128+32' Color.White)))  					{  						graphics.FillPath(brush' path);  					}  				} else  				{  					using (var brush = new SolidBrush(Color.FromArgb(64' Color.Black)))  					{  						graphics.FillPath(brush' path);  					}  				}  				graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' rect' GraphConstants.CenterTextStringFormat);    				if ((state & RenderState.Hover) != 0)  					graphics.DrawPath(Pens.White' path);  				else	  					graphics.DrawPath(Pens.Black' path);  			}
Magic Number,Graph.Items,NodeCheckboxItem,C:\repos\LogicalError_Graph\Graph\Items\NodeCheckboxItem.cs,Render,The following statement contains a magic number: using (var path = GraphRenderer.CreateRoundedRectangle(size' location))  			{  				var rect = new RectangleF(location' size);  				if (this.Checked)  				{  					using (var brush = new SolidBrush(Color.FromArgb(128+32' Color.White)))  					{  						graphics.FillPath(brush' path);  					}  				} else  				{  					using (var brush = new SolidBrush(Color.FromArgb(64' Color.Black)))  					{  						graphics.FillPath(brush' path);  					}  				}  				graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' rect' GraphConstants.CenterTextStringFormat);    				if ((state & RenderState.Hover) != 0)  					graphics.DrawPath(Pens.White' path);  				else	  					graphics.DrawPath(Pens.Black' path);  			}
Magic Number,Graph.Items,NodeCheckboxItem,C:\repos\LogicalError_Graph\Graph\Items\NodeCheckboxItem.cs,Render,The following statement contains a magic number: using (var path = GraphRenderer.CreateRoundedRectangle(size' location))  			{  				var rect = new RectangleF(location' size);  				if (this.Checked)  				{  					using (var brush = new SolidBrush(Color.FromArgb(128+32' Color.White)))  					{  						graphics.FillPath(brush' path);  					}  				} else  				{  					using (var brush = new SolidBrush(Color.FromArgb(64' Color.Black)))  					{  						graphics.FillPath(brush' path);  					}  				}  				graphics.DrawString(this.Text' SystemFonts.MenuFont' Brushes.Black' rect' GraphConstants.CenterTextStringFormat);    				if ((state & RenderState.Hover) != 0)  					graphics.DrawPath(Pens.White' path);  				else	  					graphics.DrawPath(Pens.Black' path);  			}
Magic Number,Graph.Items,NodeSliderItem,C:\repos\LogicalError_Graph\Graph\Items\NodeSliderItem.cs,Measure,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(this.Text))  			{  				if (this.itemSize.IsEmpty)  				{  					var size = new Size(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);  					var sliderWidth = this.MinimumSliderSize + SliderBoxSize;    					this.textSize			= (SizeF)graphics.MeasureString(this.Text' SystemFonts.MenuFont' size' GraphConstants.LeftMeasureTextStringFormat);  					this.textSize.Width		= Math.Max(this.TextSize' this.textSize.Width + 4);  					this.itemSize.Width		= Math.Max(size.Width' this.textSize.Width + sliderWidth + Spacing);  					this.itemSize.Height	= Math.Max(size.Height' this.textSize.Height);  				}  				return this.itemSize;  			} else  			{  				return new SizeF(GraphConstants.MinimumItemWidth' GraphConstants.MinimumItemHeight);  			}
Magic Number,Graph.Items,NodeTitleItem,C:\repos\LogicalError_Graph\Graph\Items\NodeTitleItem.cs,Measure,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(this.Title))  			{  				if (this.TextSize.IsEmpty)  				{  					var size = new Size(GraphConstants.MinimumItemWidth' GraphConstants.TitleHeight);  					this.TextSize			= graphics.MeasureString(this.Title' SystemFonts.CaptionFont' size' GraphConstants.TitleMeasureStringFormat);    					this.TextSize.Width		= Math.Max(size.Width'  this.TextSize.Width + (GraphConstants.CornerSize * 2));  					this.TextSize.Height	= Math.Max(size.Height' this.TextSize.Height) + GraphConstants.TopHeight;  				}  				return this.TextSize;  			} else  			{  				return new SizeF(GraphConstants.MinimumItemWidth' GraphConstants.TitleHeight + GraphConstants.TopHeight);  			}
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Location = new System.Drawing.Point(114' 38);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Location = new System.Drawing.Point(114' 38);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.TabIndex = 2;
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Location = new System.Drawing.Point(195' 37);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Location = new System.Drawing.Point(195' 37);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.TabIndex = 3;
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.Location = new System.Drawing.Point(12' 11);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.Location = new System.Drawing.Point(12' 11);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.Size = new System.Drawing.Size(258' 21);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.Size = new System.Drawing.Size(258' 21);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextComboBox.TabIndex = 4;
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 72);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 72);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(600' 106);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(600' 106);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 106);
Magic Number,Graph,SelectionForm,C:\repos\LogicalError_Graph\Graph\SelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 106);
Magic Number,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDrawBackground,The following statement contains a magic number: if (smallStepScaled > 3)  			{  				for (float x = smallXOffset; x < right; x += smallStepScaled)  					e.Graphics.DrawLine(SmallGridPen' x' top' x' bottom);    				for (float y = smallYOffset; y < bottom; y += smallStepScaled)  					e.Graphics.DrawLine(SmallGridPen' left' y' right' y);  			}
Magic Number,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDrawBackground,The following statement contains a magic number: if (largeStepScaled > 3)  			{  				for (float x = largeXOffset; x < right; x += largeStepScaled)  					e.Graphics.DrawLine(LargeGridPen' x' top' x' bottom);    				for (float y = largeYOffset; y < bottom; y += largeStepScaled)  					e.Graphics.DrawLine(LargeGridPen' left' y' right' y);  			}
Magic Number,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseWheel,The following statement contains a magic number: zoom *= (float)Math.Pow(2' e.Delta / 480.0f);
Magic Number,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The following statement contains a magic number: switch (command)  			{  				case CommandMode.ScaleView:  					if (!mouseMoved)  					{  						if ((Math.Abs(deltaY) > 1))  							mouseMoved = true;  					}    					if (mouseMoved &&  						(Math.Abs(deltaY) > 0))  					{  						zoom *= (float)Math.Pow(2' deltaY / 100.0f);  						Cursor.Position = this.PointToScreen(lastLocation);  						snappedLocation = //lastLocation =   							currentLocation;  						this.Refresh();  					}  					return;  				case CommandMode.TranslateView:  				{  					if (!mouseMoved)  					{  						if ((Math.Abs(deltaX) > 1) ||  							(Math.Abs(deltaY) > 1))  							mouseMoved = true;  					}    					if (mouseMoved &&  						(Math.Abs(deltaX) > 0) ||  						(Math.Abs(deltaY) > 0))  					{  						translation.X -= deltaX * zoom;  						translation.Y -= deltaY * zoom;  						snappedLocation = lastLocation = currentLocation;  						this.Refresh();  					}  					return;  				}  				case CommandMode.MarqueSelection:  					if (!mouseMoved)  					{  						if ((Math.Abs(deltaX) > 1) ||  							(Math.Abs(deltaY) > 1))  							mouseMoved = true;  					}    					if (mouseMoved &&  						(Math.Abs(deltaX) > 0) ||  						(Math.Abs(deltaY) > 0))  					{  						var marque_rectangle = GetMarqueRectangle();  												  						foreach (var node in selectedNodes)  							SetFlag(node' RenderState.Focus' false' false);    						foreach (var node in unselectedNodes)  							SetFlag(node' RenderState.Focus' true' false);    						if (!abortDrag)  						{  							foreach (var node in graphNodes)  							{  								if (marque_rectangle.Contains(node.bounds))  								{  									if ((node.state & RenderState.Focus) == 0 &&  										(ModifierKeys != Keys.Alt))  									{  										SetFlag(node' RenderState.Focus' true' false);  										selectedNodes.Add(node);  									}  									if ((node.state & RenderState.Focus) != 0 &&  										(ModifierKeys == Keys.Alt))  									{  										SetFlag(node' RenderState.Focus' false' false);  										unselectedNodes.Add(node);  									}  								} else  								{  									if ((node.state & RenderState.Focus) == RenderState.Focus &&  										(ModifierKeys == Keys.None))  									{  										SetFlag(node' RenderState.Focus' false' false);  										unselectedNodes.Add(node);  									}  								}  							}  						}    						snappedLocation = lastLocation = currentLocation;  						this.Refresh();  					}  					return;    				default:  				case CommandMode.Edit:  					break;  			}
Magic Number,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The following statement contains a magic number: if (destinationConnector != null)  			{  				if (!destinationConnector.bounds.IsEmpty)  				{  					var pre_points = new PointF[] {   						new PointF((destinationConnector.bounds.Left + destinationConnector.bounds.Right) / 2'  									(destinationConnector.bounds.Top  + destinationConnector.bounds.Bottom) / 2) };  					transformation.TransformPoints(pre_points);  					snappedLocation = pre_points[0];  				}  			}
Magic Number,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The following statement contains a magic number: if (destinationConnector != null)  			{  				if (!destinationConnector.bounds.IsEmpty)  				{  					var pre_points = new PointF[] {   						new PointF((destinationConnector.bounds.Left + destinationConnector.bounds.Right) / 2'  									(destinationConnector.bounds.Top  + destinationConnector.bounds.Bottom) / 2) };  					transformation.TransformPoints(pre_points);  					snappedLocation = pre_points[0];  				}  			}
Magic Number,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDragOver,The following statement contains a magic number: location.X -= ((dragNode.bounds.Right - dragNode.bounds.Left) / 2);
Magic Number,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDragOver,The following statement contains a magic number: location.Y -= ((dragNode.titleItem.bounds.Bottom - dragNode.titleItem.bounds.Top) / 2);
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnector,The following statement contains a magic number: if (state == RenderState.None)  			{  				graphics.DrawEllipse(Pens.Black' bounds);  			} else  			// When we're compatible' but not dragging from this node we render a highlight  			if ((state & (RenderState.Compatible | RenderState.Dragging)) == RenderState.Compatible)   			{  				// First draw the normal black border  				graphics.DrawEllipse(Pens.Black' bounds);    				// Draw an additional highlight around the connector  				RectangleF highlightBounds = new RectangleF(bounds.X'bounds.Y'bounds.Width'bounds.Height);  				highlightBounds.Width += 10;  				highlightBounds.Height += 10;  				highlightBounds.X -= 5;  				highlightBounds.Y -= 5;  				graphics.DrawEllipse(Pens.OrangeRed' highlightBounds);  			} else  			{  				graphics.DrawArc(Pens.Black' bounds' 90' 180);  				using (var pen = new Pen(GetArrowLineColor(state)))  				{  					graphics.DrawArc(pen' bounds' 270' 180);  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnector,The following statement contains a magic number: if (state == RenderState.None)  			{  				graphics.DrawEllipse(Pens.Black' bounds);  			} else  			// When we're compatible' but not dragging from this node we render a highlight  			if ((state & (RenderState.Compatible | RenderState.Dragging)) == RenderState.Compatible)   			{  				// First draw the normal black border  				graphics.DrawEllipse(Pens.Black' bounds);    				// Draw an additional highlight around the connector  				RectangleF highlightBounds = new RectangleF(bounds.X'bounds.Y'bounds.Width'bounds.Height);  				highlightBounds.Width += 10;  				highlightBounds.Height += 10;  				highlightBounds.X -= 5;  				highlightBounds.Y -= 5;  				graphics.DrawEllipse(Pens.OrangeRed' highlightBounds);  			} else  			{  				graphics.DrawArc(Pens.Black' bounds' 90' 180);  				using (var pen = new Pen(GetArrowLineColor(state)))  				{  					graphics.DrawArc(pen' bounds' 270' 180);  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnector,The following statement contains a magic number: if (state == RenderState.None)  			{  				graphics.DrawEllipse(Pens.Black' bounds);  			} else  			// When we're compatible' but not dragging from this node we render a highlight  			if ((state & (RenderState.Compatible | RenderState.Dragging)) == RenderState.Compatible)   			{  				// First draw the normal black border  				graphics.DrawEllipse(Pens.Black' bounds);    				// Draw an additional highlight around the connector  				RectangleF highlightBounds = new RectangleF(bounds.X'bounds.Y'bounds.Width'bounds.Height);  				highlightBounds.Width += 10;  				highlightBounds.Height += 10;  				highlightBounds.X -= 5;  				highlightBounds.Y -= 5;  				graphics.DrawEllipse(Pens.OrangeRed' highlightBounds);  			} else  			{  				graphics.DrawArc(Pens.Black' bounds' 90' 180);  				using (var pen = new Pen(GetArrowLineColor(state)))  				{  					graphics.DrawArc(pen' bounds' 270' 180);  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnector,The following statement contains a magic number: if (state == RenderState.None)  			{  				graphics.DrawEllipse(Pens.Black' bounds);  			} else  			// When we're compatible' but not dragging from this node we render a highlight  			if ((state & (RenderState.Compatible | RenderState.Dragging)) == RenderState.Compatible)   			{  				// First draw the normal black border  				graphics.DrawEllipse(Pens.Black' bounds);    				// Draw an additional highlight around the connector  				RectangleF highlightBounds = new RectangleF(bounds.X'bounds.Y'bounds.Width'bounds.Height);  				highlightBounds.Width += 10;  				highlightBounds.Height += 10;  				highlightBounds.X -= 5;  				highlightBounds.Y -= 5;  				graphics.DrawEllipse(Pens.OrangeRed' highlightBounds);  			} else  			{  				graphics.DrawArc(Pens.Black' bounds' 90' 180);  				using (var pen = new Pen(GetArrowLineColor(state)))  				{  					graphics.DrawArc(pen' bounds' 270' 180);  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnector,The following statement contains a magic number: if (state == RenderState.None)  			{  				graphics.DrawEllipse(Pens.Black' bounds);  			} else  			// When we're compatible' but not dragging from this node we render a highlight  			if ((state & (RenderState.Compatible | RenderState.Dragging)) == RenderState.Compatible)   			{  				// First draw the normal black border  				graphics.DrawEllipse(Pens.Black' bounds);    				// Draw an additional highlight around the connector  				RectangleF highlightBounds = new RectangleF(bounds.X'bounds.Y'bounds.Width'bounds.Height);  				highlightBounds.Width += 10;  				highlightBounds.Height += 10;  				highlightBounds.X -= 5;  				highlightBounds.Y -= 5;  				graphics.DrawEllipse(Pens.OrangeRed' highlightBounds);  			} else  			{  				graphics.DrawArc(Pens.Black' bounds' 90' 180);  				using (var pen = new Pen(GetArrowLineColor(state)))  				{  					graphics.DrawArc(pen' bounds' 270' 180);  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnector,The following statement contains a magic number: if (state == RenderState.None)  			{  				graphics.DrawEllipse(Pens.Black' bounds);  			} else  			// When we're compatible' but not dragging from this node we render a highlight  			if ((state & (RenderState.Compatible | RenderState.Dragging)) == RenderState.Compatible)   			{  				// First draw the normal black border  				graphics.DrawEllipse(Pens.Black' bounds);    				// Draw an additional highlight around the connector  				RectangleF highlightBounds = new RectangleF(bounds.X'bounds.Y'bounds.Width'bounds.Height);  				highlightBounds.Width += 10;  				highlightBounds.Height += 10;  				highlightBounds.X -= 5;  				highlightBounds.Y -= 5;  				graphics.DrawEllipse(Pens.OrangeRed' highlightBounds);  			} else  			{  				graphics.DrawArc(Pens.Black' bounds' 90' 180);  				using (var pen = new Pen(GetArrowLineColor(state)))  				{  					graphics.DrawArc(pen' bounds' 270' 180);  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnector,The following statement contains a magic number: if (state == RenderState.None)  			{  				graphics.DrawEllipse(Pens.Black' bounds);  			} else  			// When we're compatible' but not dragging from this node we render a highlight  			if ((state & (RenderState.Compatible | RenderState.Dragging)) == RenderState.Compatible)   			{  				// First draw the normal black border  				graphics.DrawEllipse(Pens.Black' bounds);    				// Draw an additional highlight around the connector  				RectangleF highlightBounds = new RectangleF(bounds.X'bounds.Y'bounds.Width'bounds.Height);  				highlightBounds.Width += 10;  				highlightBounds.Height += 10;  				highlightBounds.X -= 5;  				highlightBounds.Y -= 5;  				graphics.DrawEllipse(Pens.OrangeRed' highlightBounds);  			} else  			{  				graphics.DrawArc(Pens.Black' bounds' 90' 180);  				using (var pen = new Pen(GetArrowLineColor(state)))  				{  					graphics.DrawArc(pen' bounds' 270' 180);  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderConnector,The following statement contains a magic number: if (state == RenderState.None)  			{  				graphics.DrawEllipse(Pens.Black' bounds);  			} else  			// When we're compatible' but not dragging from this node we render a highlight  			if ((state & (RenderState.Compatible | RenderState.Dragging)) == RenderState.Compatible)   			{  				// First draw the normal black border  				graphics.DrawEllipse(Pens.Black' bounds);    				// Draw an additional highlight around the connector  				RectangleF highlightBounds = new RectangleF(bounds.X'bounds.Y'bounds.Width'bounds.Height);  				highlightBounds.Width += 10;  				highlightBounds.Height += 10;  				highlightBounds.X -= 5;  				highlightBounds.Y -= 5;  				graphics.DrawEllipse(Pens.OrangeRed' highlightBounds);  			} else  			{  				graphics.DrawArc(Pens.Black' bounds' 90' 180);  				using (var pen = new Pen(GetArrowLineColor(state)))  				{  					graphics.DrawArc(pen' bounds' 270' 180);  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,The following statement contains a magic number: if (node.Collapsed)  			{  				foreach (var item in node.Items)  				{  					var inputConnector	= item.Input;  					if (inputConnector != null && inputConnector.Enabled)  					{  						inputConnector.bounds = Rectangle.Empty;  						node.inputConnectors.Add(inputConnector);  					}  					var outputConnector = item.Output;  					if (outputConnector != null && outputConnector.Enabled)  					{  						outputConnector.bounds = Rectangle.Empty;  						node.outputConnectors.Add(outputConnector);  					}  				}  				var itemSize		= PreRenderItem(graphics' node.titleItem' itemPosition);  				var realHeight		= itemSize.Height - GraphConstants.TopHeight;  				var connectorY		= itemPosition.Y  + (int)Math.Ceiling(realHeight / 2.0f);  				  				node.inputBounds	= new RectangleF(left  - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);  				node.outputBounds	= new RectangleF(right - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);  			} else  			{  				node.inputBounds	= Rectangle.Empty;  				node.outputBounds	= Rectangle.Empty;  				  				foreach (var item in EnumerateNodeItems(node))  				{  					var itemSize		= PreRenderItem(graphics' item' itemPosition);  					var realHeight		= itemSize.Height;  					var inputConnector	= item.Input;  					if (inputConnector != null && inputConnector.Enabled)  					{  						if (itemSize.IsEmpty)  						{  							inputConnector.bounds = Rectangle.Empty;  						} else  						{  							inputConnector.bounds = new RectangleF(	left - (GraphConstants.ConnectorSize / 2)'   																	itemPosition.Y + connectorOffset'   																	GraphConstants.ConnectorSize'   																	GraphConstants.ConnectorSize);  						}  						node.inputConnectors.Add(inputConnector);  					}  					var outputConnector = item.Output;  					if (outputConnector != null && outputConnector.Enabled)  					{  						if (itemSize.IsEmpty)  						{  							outputConnector.bounds = Rectangle.Empty;  						} else  						{  							outputConnector.bounds = new RectangleF(right - (GraphConstants.ConnectorSize / 2)'   																	itemPosition.Y + realHeight - (connectorOffset + GraphConstants.ConnectorSize)'   																	GraphConstants.ConnectorSize'   																	GraphConstants.ConnectorSize);  						}  						node.outputConnectors.Add(outputConnector);  					}  					itemPosition.Y += itemSize.Height + GraphConstants.ItemSpacing;  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,The following statement contains a magic number: if (node.Collapsed)  			{  				foreach (var item in node.Items)  				{  					var inputConnector	= item.Input;  					if (inputConnector != null && inputConnector.Enabled)  					{  						inputConnector.bounds = Rectangle.Empty;  						node.inputConnectors.Add(inputConnector);  					}  					var outputConnector = item.Output;  					if (outputConnector != null && outputConnector.Enabled)  					{  						outputConnector.bounds = Rectangle.Empty;  						node.outputConnectors.Add(outputConnector);  					}  				}  				var itemSize		= PreRenderItem(graphics' node.titleItem' itemPosition);  				var realHeight		= itemSize.Height - GraphConstants.TopHeight;  				var connectorY		= itemPosition.Y  + (int)Math.Ceiling(realHeight / 2.0f);  				  				node.inputBounds	= new RectangleF(left  - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);  				node.outputBounds	= new RectangleF(right - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);  			} else  			{  				node.inputBounds	= Rectangle.Empty;  				node.outputBounds	= Rectangle.Empty;  				  				foreach (var item in EnumerateNodeItems(node))  				{  					var itemSize		= PreRenderItem(graphics' item' itemPosition);  					var realHeight		= itemSize.Height;  					var inputConnector	= item.Input;  					if (inputConnector != null && inputConnector.Enabled)  					{  						if (itemSize.IsEmpty)  						{  							inputConnector.bounds = Rectangle.Empty;  						} else  						{  							inputConnector.bounds = new RectangleF(	left - (GraphConstants.ConnectorSize / 2)'   																	itemPosition.Y + connectorOffset'   																	GraphConstants.ConnectorSize'   																	GraphConstants.ConnectorSize);  						}  						node.inputConnectors.Add(inputConnector);  					}  					var outputConnector = item.Output;  					if (outputConnector != null && outputConnector.Enabled)  					{  						if (itemSize.IsEmpty)  						{  							outputConnector.bounds = Rectangle.Empty;  						} else  						{  							outputConnector.bounds = new RectangleF(right - (GraphConstants.ConnectorSize / 2)'   																	itemPosition.Y + realHeight - (connectorOffset + GraphConstants.ConnectorSize)'   																	GraphConstants.ConnectorSize'   																	GraphConstants.ConnectorSize);  						}  						node.outputConnectors.Add(outputConnector);  					}  					itemPosition.Y += itemSize.Height + GraphConstants.ItemSpacing;  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,The following statement contains a magic number: if (node.Collapsed)  			{  				foreach (var item in node.Items)  				{  					var inputConnector	= item.Input;  					if (inputConnector != null && inputConnector.Enabled)  					{  						inputConnector.bounds = Rectangle.Empty;  						node.inputConnectors.Add(inputConnector);  					}  					var outputConnector = item.Output;  					if (outputConnector != null && outputConnector.Enabled)  					{  						outputConnector.bounds = Rectangle.Empty;  						node.outputConnectors.Add(outputConnector);  					}  				}  				var itemSize		= PreRenderItem(graphics' node.titleItem' itemPosition);  				var realHeight		= itemSize.Height - GraphConstants.TopHeight;  				var connectorY		= itemPosition.Y  + (int)Math.Ceiling(realHeight / 2.0f);  				  				node.inputBounds	= new RectangleF(left  - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);  				node.outputBounds	= new RectangleF(right - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);  			} else  			{  				node.inputBounds	= Rectangle.Empty;  				node.outputBounds	= Rectangle.Empty;  				  				foreach (var item in EnumerateNodeItems(node))  				{  					var itemSize		= PreRenderItem(graphics' item' itemPosition);  					var realHeight		= itemSize.Height;  					var inputConnector	= item.Input;  					if (inputConnector != null && inputConnector.Enabled)  					{  						if (itemSize.IsEmpty)  						{  							inputConnector.bounds = Rectangle.Empty;  						} else  						{  							inputConnector.bounds = new RectangleF(	left - (GraphConstants.ConnectorSize / 2)'   																	itemPosition.Y + connectorOffset'   																	GraphConstants.ConnectorSize'   																	GraphConstants.ConnectorSize);  						}  						node.inputConnectors.Add(inputConnector);  					}  					var outputConnector = item.Output;  					if (outputConnector != null && outputConnector.Enabled)  					{  						if (itemSize.IsEmpty)  						{  							outputConnector.bounds = Rectangle.Empty;  						} else  						{  							outputConnector.bounds = new RectangleF(right - (GraphConstants.ConnectorSize / 2)'   																	itemPosition.Y + realHeight - (connectorOffset + GraphConstants.ConnectorSize)'   																	GraphConstants.ConnectorSize'   																	GraphConstants.ConnectorSize);  						}  						node.outputConnectors.Add(outputConnector);  					}  					itemPosition.Y += itemSize.Height + GraphConstants.ItemSpacing;  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,PerformLayout,The following statement contains a magic number: if (node.Collapsed)  			{  				foreach (var item in node.Items)  				{  					var inputConnector	= item.Input;  					if (inputConnector != null && inputConnector.Enabled)  					{  						inputConnector.bounds = Rectangle.Empty;  						node.inputConnectors.Add(inputConnector);  					}  					var outputConnector = item.Output;  					if (outputConnector != null && outputConnector.Enabled)  					{  						outputConnector.bounds = Rectangle.Empty;  						node.outputConnectors.Add(outputConnector);  					}  				}  				var itemSize		= PreRenderItem(graphics' node.titleItem' itemPosition);  				var realHeight		= itemSize.Height - GraphConstants.TopHeight;  				var connectorY		= itemPosition.Y  + (int)Math.Ceiling(realHeight / 2.0f);  				  				node.inputBounds	= new RectangleF(left  - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);  				node.outputBounds	= new RectangleF(right - (GraphConstants.ConnectorSize / 2)'   													 connectorY'   													 GraphConstants.ConnectorSize'   													 GraphConstants.ConnectorSize);  			} else  			{  				node.inputBounds	= Rectangle.Empty;  				node.outputBounds	= Rectangle.Empty;  				  				foreach (var item in EnumerateNodeItems(node))  				{  					var itemSize		= PreRenderItem(graphics' item' itemPosition);  					var realHeight		= itemSize.Height;  					var inputConnector	= item.Input;  					if (inputConnector != null && inputConnector.Enabled)  					{  						if (itemSize.IsEmpty)  						{  							inputConnector.bounds = Rectangle.Empty;  						} else  						{  							inputConnector.bounds = new RectangleF(	left - (GraphConstants.ConnectorSize / 2)'   																	itemPosition.Y + connectorOffset'   																	GraphConstants.ConnectorSize'   																	GraphConstants.ConnectorSize);  						}  						node.inputConnectors.Add(inputConnector);  					}  					var outputConnector = item.Output;  					if (outputConnector != null && outputConnector.Enabled)  					{  						if (itemSize.IsEmpty)  						{  							outputConnector.bounds = Rectangle.Empty;  						} else  						{  							outputConnector.bounds = new RectangleF(right - (GraphConstants.ConnectorSize / 2)'   																	itemPosition.Y + realHeight - (connectorOffset + GraphConstants.ConnectorSize)'   																	GraphConstants.ConnectorSize'   																	GraphConstants.ConnectorSize);  						}  						node.outputConnectors.Add(outputConnector);  					}  					itemPosition.Y += itemSize.Height + GraphConstants.ItemSpacing;  				}  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: int cornerSize			= (int)GraphConstants.CornerSize * 2;
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				if ((node.state & (RenderState.Dragging | RenderState.Focus)) != 0)  				{  					graphics.FillPath(Brushes.DarkOrange' path);  				} else  				if ((node.state & RenderState.Hover) != 0)  				{  					graphics.FillPath(Brushes.LightSteelBlue' path);  				} else  				{  					graphics.FillPath(Brushes.LightGray' path);  				}  				graphics.DrawPath(BorderPen' path);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				if ((node.state & (RenderState.Dragging | RenderState.Focus)) != 0)  				{  					graphics.FillPath(Brushes.DarkOrange' path);  				} else  				if ((node.state & RenderState.Hover) != 0)  				{  					graphics.FillPath(Brushes.LightSteelBlue' path);  				} else  				{  					graphics.FillPath(Brushes.LightGray' path);  				}  				graphics.DrawPath(BorderPen' path);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				if ((node.state & (RenderState.Dragging | RenderState.Focus)) != 0)  				{  					graphics.FillPath(Brushes.DarkOrange' path);  				} else  				if ((node.state & RenderState.Hover) != 0)  				{  					graphics.FillPath(Brushes.LightSteelBlue' path);  				} else  				{  					graphics.FillPath(Brushes.LightGray' path);  				}  				graphics.DrawPath(BorderPen' path);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				if ((node.state & (RenderState.Dragging | RenderState.Focus)) != 0)  				{  					graphics.FillPath(Brushes.DarkOrange' path);  				} else  				if ((node.state & RenderState.Hover) != 0)  				{  					graphics.FillPath(Brushes.LightSteelBlue' path);  				} else  				{  					graphics.FillPath(Brushes.LightGray' path);  				}  				graphics.DrawPath(BorderPen' path);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				if ((node.state & (RenderState.Dragging | RenderState.Focus)) != 0)  				{  					graphics.FillPath(Brushes.DarkOrange' path);  				} else  				if ((node.state & RenderState.Hover) != 0)  				{  					graphics.FillPath(Brushes.LightSteelBlue' path);  				} else  				{  					graphics.FillPath(Brushes.LightGray' path);  				}  				graphics.DrawPath(BorderPen' path);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				if ((node.state & (RenderState.Dragging | RenderState.Focus)) != 0)  				{  					graphics.FillPath(Brushes.DarkOrange' path);  				} else  				if ((node.state & RenderState.Hover) != 0)  				{  					graphics.FillPath(Brushes.LightSteelBlue' path);  				} else  				{  					graphics.FillPath(Brushes.LightGray' path);  				}  				graphics.DrawPath(BorderPen' path);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,Render,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				if ((node.state & (RenderState.Dragging | RenderState.Focus)) != 0)  				{  					graphics.FillPath(Brushes.DarkOrange' path);  				} else  				if ((node.state & RenderState.Hover) != 0)  				{  					graphics.FillPath(Brushes.LightSteelBlue' path);  				} else  				{  					graphics.FillPath(Brushes.LightGray' path);  				}  				graphics.DrawPath(BorderPen' path);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{			  				int cornerSize			= (int)GraphConstants.CornerSize * 2;  				int connectorSize		= (int)GraphConstants.ConnectorSize;  				int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);    				SizeF size;  				PointF position;  				var text		= connection.Name;  				if (connection.textBounds.IsEmpty ||  					connection.textBounds.Location != center)  				{  					size		= graphics.MeasureString(text' SystemFonts.StatusFont' center' GraphConstants.CenterTextStringFormat);  					position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));  					size.Width	+= connectorSize;  					connection.textBounds = new RectangleF(position' size);  				} else  				{  					size		= connection.textBounds.Size;  					position	= connection.textBounds.Location;  				}    				var halfWidth  = size.Width / 2.0f;  				var halfHeight = size.Height / 2.0f;  				var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);  				var left				= position.X;  				var top					= position.Y;  				var right				= position.X + size.Width;  				var bottom				= position.Y + size.Height;  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				using (var brush = new SolidBrush(GetArrowLineColor(state)))  				{  					graphics.FillPath(brush' path);  				}  				graphics.DrawString(text' SystemFonts.StatusFont' Brushes.Black' center' GraphConstants.CenterTextStringFormat);    				if (state == RenderState.None)  					graphics.DrawPath(Pens.Black' path);    				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{			  				int cornerSize			= (int)GraphConstants.CornerSize * 2;  				int connectorSize		= (int)GraphConstants.ConnectorSize;  				int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);    				SizeF size;  				PointF position;  				var text		= connection.Name;  				if (connection.textBounds.IsEmpty ||  					connection.textBounds.Location != center)  				{  					size		= graphics.MeasureString(text' SystemFonts.StatusFont' center' GraphConstants.CenterTextStringFormat);  					position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));  					size.Width	+= connectorSize;  					connection.textBounds = new RectangleF(position' size);  				} else  				{  					size		= connection.textBounds.Size;  					position	= connection.textBounds.Location;  				}    				var halfWidth  = size.Width / 2.0f;  				var halfHeight = size.Height / 2.0f;  				var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);  				var left				= position.X;  				var top					= position.Y;  				var right				= position.X + size.Width;  				var bottom				= position.Y + size.Height;  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				using (var brush = new SolidBrush(GetArrowLineColor(state)))  				{  					graphics.FillPath(brush' path);  				}  				graphics.DrawString(text' SystemFonts.StatusFont' Brushes.Black' center' GraphConstants.CenterTextStringFormat);    				if (state == RenderState.None)  					graphics.DrawPath(Pens.Black' path);    				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{			  				int cornerSize			= (int)GraphConstants.CornerSize * 2;  				int connectorSize		= (int)GraphConstants.ConnectorSize;  				int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);    				SizeF size;  				PointF position;  				var text		= connection.Name;  				if (connection.textBounds.IsEmpty ||  					connection.textBounds.Location != center)  				{  					size		= graphics.MeasureString(text' SystemFonts.StatusFont' center' GraphConstants.CenterTextStringFormat);  					position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));  					size.Width	+= connectorSize;  					connection.textBounds = new RectangleF(position' size);  				} else  				{  					size		= connection.textBounds.Size;  					position	= connection.textBounds.Location;  				}    				var halfWidth  = size.Width / 2.0f;  				var halfHeight = size.Height / 2.0f;  				var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);  				var left				= position.X;  				var top					= position.Y;  				var right				= position.X + size.Width;  				var bottom				= position.Y + size.Height;  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				using (var brush = new SolidBrush(GetArrowLineColor(state)))  				{  					graphics.FillPath(brush' path);  				}  				graphics.DrawString(text' SystemFonts.StatusFont' Brushes.Black' center' GraphConstants.CenterTextStringFormat);    				if (state == RenderState.None)  					graphics.DrawPath(Pens.Black' path);    				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{			  				int cornerSize			= (int)GraphConstants.CornerSize * 2;  				int connectorSize		= (int)GraphConstants.ConnectorSize;  				int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);    				SizeF size;  				PointF position;  				var text		= connection.Name;  				if (connection.textBounds.IsEmpty ||  					connection.textBounds.Location != center)  				{  					size		= graphics.MeasureString(text' SystemFonts.StatusFont' center' GraphConstants.CenterTextStringFormat);  					position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));  					size.Width	+= connectorSize;  					connection.textBounds = new RectangleF(position' size);  				} else  				{  					size		= connection.textBounds.Size;  					position	= connection.textBounds.Location;  				}    				var halfWidth  = size.Width / 2.0f;  				var halfHeight = size.Height / 2.0f;  				var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);  				var left				= position.X;  				var top					= position.Y;  				var right				= position.X + size.Width;  				var bottom				= position.Y + size.Height;  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				using (var brush = new SolidBrush(GetArrowLineColor(state)))  				{  					graphics.FillPath(brush' path);  				}  				graphics.DrawString(text' SystemFonts.StatusFont' Brushes.Black' center' GraphConstants.CenterTextStringFormat);    				if (state == RenderState.None)  					graphics.DrawPath(Pens.Black' path);    				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{			  				int cornerSize			= (int)GraphConstants.CornerSize * 2;  				int connectorSize		= (int)GraphConstants.ConnectorSize;  				int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);    				SizeF size;  				PointF position;  				var text		= connection.Name;  				if (connection.textBounds.IsEmpty ||  					connection.textBounds.Location != center)  				{  					size		= graphics.MeasureString(text' SystemFonts.StatusFont' center' GraphConstants.CenterTextStringFormat);  					position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));  					size.Width	+= connectorSize;  					connection.textBounds = new RectangleF(position' size);  				} else  				{  					size		= connection.textBounds.Size;  					position	= connection.textBounds.Location;  				}    				var halfWidth  = size.Width / 2.0f;  				var halfHeight = size.Height / 2.0f;  				var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);  				var left				= position.X;  				var top					= position.Y;  				var right				= position.X + size.Width;  				var bottom				= position.Y + size.Height;  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				using (var brush = new SolidBrush(GetArrowLineColor(state)))  				{  					graphics.FillPath(brush' path);  				}  				graphics.DrawString(text' SystemFonts.StatusFont' Brushes.Black' center' GraphConstants.CenterTextStringFormat);    				if (state == RenderState.None)  					graphics.DrawPath(Pens.Black' path);    				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{			  				int cornerSize			= (int)GraphConstants.CornerSize * 2;  				int connectorSize		= (int)GraphConstants.ConnectorSize;  				int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);    				SizeF size;  				PointF position;  				var text		= connection.Name;  				if (connection.textBounds.IsEmpty ||  					connection.textBounds.Location != center)  				{  					size		= graphics.MeasureString(text' SystemFonts.StatusFont' center' GraphConstants.CenterTextStringFormat);  					position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));  					size.Width	+= connectorSize;  					connection.textBounds = new RectangleF(position' size);  				} else  				{  					size		= connection.textBounds.Size;  					position	= connection.textBounds.Location;  				}    				var halfWidth  = size.Width / 2.0f;  				var halfHeight = size.Height / 2.0f;  				var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);  				var left				= position.X;  				var top					= position.Y;  				var right				= position.X + size.Width;  				var bottom				= position.Y + size.Height;  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				using (var brush = new SolidBrush(GetArrowLineColor(state)))  				{  					graphics.FillPath(brush' path);  				}  				graphics.DrawString(text' SystemFonts.StatusFont' Brushes.Black' center' GraphConstants.CenterTextStringFormat);    				if (state == RenderState.None)  					graphics.DrawPath(Pens.Black' path);    				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{			  				int cornerSize			= (int)GraphConstants.CornerSize * 2;  				int connectorSize		= (int)GraphConstants.ConnectorSize;  				int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);    				SizeF size;  				PointF position;  				var text		= connection.Name;  				if (connection.textBounds.IsEmpty ||  					connection.textBounds.Location != center)  				{  					size		= graphics.MeasureString(text' SystemFonts.StatusFont' center' GraphConstants.CenterTextStringFormat);  					position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));  					size.Width	+= connectorSize;  					connection.textBounds = new RectangleF(position' size);  				} else  				{  					size		= connection.textBounds.Size;  					position	= connection.textBounds.Location;  				}    				var halfWidth  = size.Width / 2.0f;  				var halfHeight = size.Height / 2.0f;  				var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);  				var left				= position.X;  				var top					= position.Y;  				var right				= position.X + size.Width;  				var bottom				= position.Y + size.Height;  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				using (var brush = new SolidBrush(GetArrowLineColor(state)))  				{  					graphics.FillPath(brush' path);  				}  				graphics.DrawString(text' SystemFonts.StatusFont' Brushes.Black' center' GraphConstants.CenterTextStringFormat);    				if (state == RenderState.None)  					graphics.DrawPath(Pens.Black' path);    				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,RenderLabel,The following statement contains a magic number: using (var path = new GraphicsPath(FillMode.Winding))  			{			  				int cornerSize			= (int)GraphConstants.CornerSize * 2;  				int connectorSize		= (int)GraphConstants.ConnectorSize;  				int halfConnectorSize	= (int)Math.Ceiling(connectorSize / 2.0f);    				SizeF size;  				PointF position;  				var text		= connection.Name;  				if (connection.textBounds.IsEmpty ||  					connection.textBounds.Location != center)  				{  					size		= graphics.MeasureString(text' SystemFonts.StatusFont' center' GraphConstants.CenterTextStringFormat);  					position	= new PointF(center.X - (size.Width / 2.0f) - halfConnectorSize' center.Y - (size.Height / 2.0f));  					size.Width	+= connectorSize;  					connection.textBounds = new RectangleF(position' size);  				} else  				{  					size		= connection.textBounds.Size;  					position	= connection.textBounds.Location;  				}    				var halfWidth  = size.Width / 2.0f;  				var halfHeight = size.Height / 2.0f;  				var connectorOffset		= (int)Math.Floor((GraphConstants.MinimumItemHeight - GraphConstants.ConnectorSize) / 2.0f);  				var left				= position.X;  				var top					= position.Y;  				var right				= position.X + size.Width;  				var bottom				= position.Y + size.Height;  				path.AddArc(left' top' cornerSize' cornerSize' 180' 90);  				path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);    				path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);  				path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);  				path.CloseFigure();    				using (var brush = new SolidBrush(GetArrowLineColor(state)))  				{  					graphics.FillPath(brush' path);  				}  				graphics.DrawString(text' SystemFonts.StatusFont' Brushes.Black' center' GraphConstants.CenterTextStringFormat);    				if (state == RenderState.None)  					graphics.DrawPath(Pens.Black' path);    				//graphics.DrawRectangle(Pens.Black' connection.textBounds.Left' connection.textBounds.Top' connection.textBounds.Width' connection.textBounds.Height);  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: var lengthX = Math.Max(60' Math.Abs(widthX / 2))   				//+ Math.Max(0' -widthX / 2)  				;
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: var lengthX = Math.Max(60' Math.Abs(widthX / 2))   				//+ Math.Max(0' -widthX / 2)  				;
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: if (widthX < 120)  				lengthX = 60;
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: if (widthX < 120)  				lengthX = 60;
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: var yB = ((y1 + y2) / 2) + lengthY;
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: var xC = (x1 + x2) / 2;
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: if (widthX <= 120)  			{  				points.Insert(2' new PointF(xB' yA));  				points.Insert(2' new PointF(xC' yA));  				points.Insert(2' new PointF(xA' yA));  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: if (widthX <= 120)  			{  				points.Insert(2' new PointF(xB' yA));  				points.Insert(2' new PointF(xC' yA));  				points.Insert(2' new PointF(xA' yA));  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: if (widthX <= 120)  			{  				points.Insert(2' new PointF(xB' yA));  				points.Insert(2' new PointF(xC' yA));  				points.Insert(2' new PointF(xA' yA));  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: if (widthX <= 120)  			{  				points.Insert(2' new PointF(xB' yA));  				points.Insert(2' new PointF(xC' yA));  				points.Insert(2' new PointF(xA' yA));  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: for (int i = 0; i < points.Count - 2; i++)  			{  				var pt1 = points[i];  				var pt2 = points[i + 1];  				var pt3 = points[i + 2];  				var deltaX = (float)((pt2.X - pt1.X) + (pt3.X - pt2.X));  				var deltaY = (float)((pt2.Y - pt1.Y) + (pt3.Y - pt2.Y));  				var length = (float)Math.Sqrt((deltaX * deltaX) + (deltaY * deltaY));  				if (length <= 1.0f)  				{  					points.RemoveAt(i);  					i--;  					continue;  				}  				lengths[i] = length;  				totalLength += length;  				angles[i].X = deltaX / length;  				angles[i].Y = deltaY / length;  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: for (int i = 0; i < points.Count - 2; i++)  			{  				var pt1 = points[i];  				var pt2 = points[i + 1];  				var pt3 = points[i + 2];  				var deltaX = (float)((pt2.X - pt1.X) + (pt3.X - pt2.X));  				var deltaY = (float)((pt2.Y - pt1.Y) + (pt3.Y - pt2.Y));  				var length = (float)Math.Sqrt((deltaX * deltaX) + (deltaY * deltaY));  				if (length <= 1.0f)  				{  					points.RemoveAt(i);  					i--;  					continue;  				}  				lengths[i] = length;  				totalLength += length;  				angles[i].X = deltaX / length;  				angles[i].Y = deltaY / length;  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,GetArrowLinePoints,The following statement contains a magic number: for (int i = 0; i < points.Count - 2; i++)  			{  				var angle	= angles[i];  				var point	= points[i + 1];  				var length	= lengths[i];  				var width	= (((currentLength * (endWidth - startWidth)) / totalLength) + startWidth);  				var angleX	= angle.X * width;  				var angleY	= angle.Y * width;    				var newLength = currentLength + length;  				if (currentLength	<= midLength &&  					newLength		>= midLength)  				{  					var dX = point.X - points[i].X;  					var dY = point.Y - points[i].Y;  					var t1 = midLength - currentLength;  					var l  = length;        					centerX = points[i].X + ((dX * t1) / l);  					centerY = points[i].Y + ((dY * t1) / l);  				}    				var pt1 = new PointF(point.X - angleY' point.Y + angleX);  				var pt2 = new PointF(point.X + angleY' point.Y - angleX);  				if (Math.Abs(newPoints[newPoints.Count - 1].X - pt1.X) > 1.0f ||  					Math.Abs(newPoints[newPoints.Count - 1].Y - pt1.Y) > 1.0f)  					newPoints.Add(pt1);  				if (Math.Abs(newPoints[0].X - pt2.X) > 1.0f ||  					Math.Abs(newPoints[0].Y - pt2.Y) > 1.0f)  					newPoints.Insert(0' pt2);    				currentLength = newLength;  			}
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: int cornerSize			= (int)GraphConstants.CornerSize * 2;
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(left' top' cornerSize' cornerSize' 180' 90);
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(left' top' cornerSize' cornerSize' 180' 90);
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(right - cornerSize' top' cornerSize' cornerSize' 270' 90);
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(right - cornerSize' bottom - cornerSize' cornerSize' cornerSize' 0' 90);
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);
Magic Number,Graph,GraphRenderer,C:\repos\LogicalError_Graph\Graph\GraphRenderer.cs,CreateRoundedRectangle,The following statement contains a magic number: path.AddArc(left' bottom - cornerSize' cornerSize' cornerSize' 90' 90);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.TextTextBox.Location = new System.Drawing.Point(12' 12);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.TextTextBox.Location = new System.Drawing.Point(12' 12);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.TextTextBox.Size = new System.Drawing.Size(258' 20);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.TextTextBox.Size = new System.Drawing.Size(258' 20);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Location = new System.Drawing.Point(114' 38);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Location = new System.Drawing.Point(114' 38);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButtonControl.TabIndex = 2;
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Location = new System.Drawing.Point(195' 37);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Location = new System.Drawing.Point(195' 37);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.Size = new System.Drawing.Size(75' 23);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButtonControl.TabIndex = 3;
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 72);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 72);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(600' 106);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.MaximumSize = new System.Drawing.Size(600' 106);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 106);
Magic Number,Graph,TextEditForm,C:\repos\LogicalError_Graph\Graph\TextEditForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 106);
Missing Default,Graph.Items,NodeColorItem,C:\repos\LogicalError_Graph\Graph\Items\NodeColorItem.cs,Render,The following switch statement is missing a default case: switch (alignment)  			{  				case HorizontalAlignment.Left:  					rect.Width	-= ColorBoxSize + Spacing;  					rect.X		+= ColorBoxSize + Spacing;  					break;  				case HorizontalAlignment.Right:  					colorBox.X	= rect.Right - colorBox.Width;  					rect.Width	-= ColorBoxSize + Spacing;  					break;  				case HorizontalAlignment.Center:  					rect.Width	-= ColorBoxSize + Spacing;  					rect.X		+= ColorBoxSize + Spacing;  					break;  			}
Missing Default,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,SetFlag,The following switch statement is missing a default case: switch (element.ElementType)  			{  				case ElementType.NodeSelection:  				{  					var selection = element as NodeSelection;  					foreach (var node in selection.Nodes)  					{  						node.state = SetFlag(node.state' flag' value);  						SetFlag(node.titleItem' flag' value);  					}  					break;  				}    				case ElementType.Node:  				{  					var node = element as Node;  					node.state = SetFlag(node.state' flag' value);  					SetFlag(node.titleItem' flag' value);  					break;  				}    				case ElementType.InputConnector:  				case ElementType.OutputConnector:  					var connector = element as NodeConnector;  					connector.state = SetFlag(connector.state' flag' value);  					break;    				case ElementType.Connection:  					var connection = element as NodeConnection;  					connection.state = SetFlag(connection.state' flag' value);  					break;    				case ElementType.NodeItem:  					var item = element as NodeItem;  					item.state = SetFlag(item.state' flag' value);  					break;  			}
Missing Default,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,SetFlag,The following switch statement is missing a default case: switch (element.ElementType)  			{  				case ElementType.NodeSelection:  				{  					var selection = element as NodeSelection;  					foreach (var node in selection.Nodes)  					{  						node.state = SetFlag(node.state' flag' value);  						SetFlag(node.titleItem' flag' value);  					}  					break;  				}    				case ElementType.Node:  				{  					var node = element as Node;  					node.state = SetFlag(node.state' flag' value);  					SetFlag(node.titleItem' flag' value);  					break;  				}    				case ElementType.InputConnector:  				case ElementType.OutputConnector:  					var connector = element as NodeConnector;  					connector.state = SetFlag(connector.state' flag' value);  					SetFlag(connector.Node' flag' value' setConnections);  					break;    				case ElementType.Connection:  					var connection = element as NodeConnection;  					connection.state = SetFlag(connection.state' flag' value);  					if (setConnections)  					{  						//if (connection.From != null)  						//	connection.From.state = SetFlag(connection.From.state' flag' value);  						//if (connection.To != null)  						//	connection.To.state = SetFlag(connection.To.state' flag' value);  						//SetFlag(connection.From' flag' value' setConnections);  						//SetFlag(connection.To' flag' value' setConnections);  					}  					break;    				case ElementType.NodeItem:  					var item = element as NodeItem;  					item.state = SetFlag(item.state' flag' value);  					SetFlag(item.Node' flag' value' setConnections);  					break;  			}
Missing Default,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,BringElementToFront,The following switch statement is missing a default case: switch (element.ElementType)  			{  				case ElementType.Connection:  					var connection = element as NodeConnection;  					BringElementToFront(connection.From);  					BringElementToFront(connection.To);  					  					var connections = connection.From.Node.connections;  					if (connections[0] != connection)  					{  						connections.Remove(connection);  						connections.Insert(0' connection);  					}  					  					connections = connection.To.Node.connections;  					if (connections[0] != connection)  					{  						connections.Remove(connection);  						connections.Insert(0' connection);  					}  					break;  				case ElementType.NodeSelection:  				{  					var selection = element as NodeSelection;  					foreach(var node in selection.Nodes.Reverse<Node>())  					{  						if (graphNodes[0] != node)  						{  							graphNodes.Remove(node);  							graphNodes.Insert(0' node);  						}  					}  					break;  				}  				case ElementType.Node:  				{  					var node = element as Node;  					if (graphNodes[0] != node)  					{  						graphNodes.Remove(node);  						graphNodes.Insert(0' node);  					}  					break;  				}  				case ElementType.InputConnector:  				case ElementType.OutputConnector:  					var connector = element as NodeConnector;  					BringElementToFront(connector.Node);  					break;  				case ElementType.NodeItem:  					var item = element as NodeItem;  					BringElementToFront(item.Node);  					break;  			}
Missing Default,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnPaint,The following switch statement is missing a default case: switch (DragElement.ElementType)  						{  							case ElementType.OutputConnector:  								var outputConnector = DragElement as NodeConnector;  								renderState |= (outputConnector.state & (RenderState.Incompatible | RenderState.Compatible));  								GraphRenderer.RenderOutputConnection(e.Graphics' outputConnector'   									transformed_location.X' transformed_location.Y' renderState);  								break;  							case ElementType.InputConnector:  								var inputConnector = DragElement as NodeConnector;  								renderState |= (inputConnector.state & (RenderState.Incompatible | RenderState.Compatible));  								GraphRenderer.RenderInputConnection(e.Graphics' inputConnector'   									transformed_location.X' transformed_location.Y' renderState);  								break;  						}
Missing Default,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseDown,The following switch statement is missing a default case: switch (ModifierKeys)  						{  							case Keys.None:  							{  								if (selection != null &&  									selection.Nodes.Contains(element_node))  								{  									element = selection;  								}  								break;  							}  							case Keys.Shift:  							{  								if (selection != null)  								{  									if (!selection.Nodes.Contains(element_node))  									{  										var nodes = selection.Nodes.ToList();  										nodes.Add(element_node);  										element = new NodeSelection(nodes);  									}  								} else  								{  									var focus_node = FocusElement as Node;  									if (focus_node != null)  										element = new NodeSelection(new Node[] { focus_node' element_node });  								}  								break;  							}  							case Keys.Control:  							{  								if (selection != null)  								{  									if (selection.Nodes.Contains(element_node))  									{  										var nodes = selection.Nodes.ToList();  										nodes.Remove(element_node);  										element = new NodeSelection(nodes);  									} else  									{  										var nodes = selection.Nodes.ToList();  										nodes.Add(element_node);  										element = new NodeSelection(nodes);  									}  								} else  								{  									var focus_node = FocusElement as Node;  									if (focus_node != null)  									{  										if (focus_node == element_node)  											element = null;  										else  											element = new NodeSelection(new Node[] { focus_node' element_node });  									}  								}  								break;  							}  							case Keys.Alt:  							{  								if (selection != null)  								{  									if (selection.Nodes.Contains(element_node))  									{  										var nodes = selection.Nodes.ToList();  										nodes.Remove(element_node);  										element = new NodeSelection(nodes);  									}  								} else  								{  									var focus_node = FocusElement as Node;  									if (focus_node != null)  										element = null;  								}  								break;  							}  						}
Missing Default,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseMove,The following switch statement is missing a default case: switch (DragElement.ElementType)  						{  							case ElementType.NodeSelection:		// drag nodes  							{  								var selection = DragElement as NodeSelection;  								foreach (var node in selection.Nodes)  								{  									node.Location = new Point(	(int)Math.Round(node.Location.X - deltaX)'  																(int)Math.Round(node.Location.Y - deltaY));  								}  								snappedLocation = lastLocation = currentLocation;  								this.Refresh();  								return;  							}  							case ElementType.Node:				// drag single node  							{  								var node = DragElement as Node;  								node.Location	= new Point((int)Math.Round(node.Location.X - deltaX)'  															(int)Math.Round(node.Location.Y - deltaY));  								snappedLocation = lastLocation = currentLocation;  								this.Refresh();  								return;  							}  							case ElementType.NodeItem:			// drag in node-item  							{  								var nodeItem = DragElement as NodeItem;  								needRedraw		= nodeItem.OnDrag(transformed_location);  								snappedLocation = lastLocation = currentLocation;  								break;  							}  							case ElementType.Connection:		// start dragging end of connection to new input connector  							{  								BringElementToFront(DragElement);  								var connection			= DragElement as NodeConnection;  								var outputConnector		= connection.From;  								FocusElement			= outputConnector.Node;  								if (Disconnect(connection))  									DragElement	= outputConnector;  								else  									DragElement = null;    								goto case ElementType.OutputConnector;  							}  							case ElementType.InputConnector:	// drag connection from input or output connector  							case ElementType.OutputConnector:  							{  								snappedLocation = lastLocation = currentLocation;  								needRedraw = true;  								break;  							}  						}
Missing Default,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnDoubleClick,The following switch statement is missing a default case: switch (element.ElementType)  			{  				case ElementType.Connection:  					((NodeConnection)element).DoDoubleClick();  					break;  				case ElementType.NodeItem:  					var item = element as NodeItem;  					if (item.OnDoubleClick())  					{  						this.Refresh();  						return;  					}  					element = item.Node;  					goto case ElementType.Node;  				case ElementType.Node:  					var node = element as Node;  					node.Collapsed = !node.Collapsed;  					FocusElement = node;  					this.Refresh();  					break;  			}
Missing Default,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnMouseClick,The following switch statement is missing a default case: switch (element.ElementType)  				{  					case ElementType.NodeItem:  					{  						if (ModifierKeys != Keys.None)  							return;    						var item = element as NodeItem;  						if (item.OnClick())  						{  							ignoreDoubleClick = true; // to avoid double-click from firing  							this.Refresh();  							return;  						}  						break;  					}  				}
Missing Default,Graph,GraphControl,C:\repos\LogicalError_Graph\Graph\GraphControl.cs,OnKeyUp,The following switch statement is missing a default case: switch (FocusElement.ElementType)  				{  					case ElementType.Node:			RemoveNode(FocusElement as Node); break;  					case ElementType.Connection:	Disconnect(FocusElement as NodeConnection); break;  					case ElementType.NodeSelection:  					{  						var selection = FocusElement as NodeSelection;  						foreach(var node in selection.Nodes)  							RemoveNode(node);   						break;  					}  				}
