Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportToXlsx,The method has 110 lines of code.
Complex Method,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,CreateSqlTableFromExcelColumns,Cyclomatic complexity of the method is 8
Complex Method,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,LoadExcelDataToDatabase,Cyclomatic complexity of the method is 9
Complex Method,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,SaveFileToDatabase,Cyclomatic complexity of the method is 10
Complex Method,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,StoreData,Cyclomatic complexity of the method is 8
Complex Method,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,StoreDataCsvToDatabase,Cyclomatic complexity of the method is 17
Complex Method,ExcelReportsDatastore,ExcelOpenXmlReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOpenXmlReader.cs,ReadExcelFile,Cyclomatic complexity of the method is 8
Complex Method,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,Cyclomatic complexity of the method is 11
Complex Method,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportBigDataToXlsx,Cyclomatic complexity of the method is 9
Complex Method,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportToXlsx,Cyclomatic complexity of the method is 44
Complex Method,ExcelReportsDatastore,DatabaseReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\DatabaseReader.cs,GetDatabaseDataTable,Cyclomatic complexity of the method is 10
Complex Method,ExcelReportsDatastore,DatabaseReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\DatabaseReader.cs,GetDatabaseDataTable,Cyclomatic complexity of the method is 8
Complex Method,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,Cyclomatic complexity of the method is 11
Complex Method,ExcelReportsDatastore.Reports.Generator,ReplicateReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\ReplicateReportGenerator.cs,GenerateReport,Cyclomatic complexity of the method is 11
Complex Method,ExcelReportsDatastore.Reports.Loader,ExcelReportDataLoader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Loader\ExcelReportDataLoader.cs,LoadReportData,Cyclomatic complexity of the method is 9
Complex Method,ExcelReportsDatastore.Reports.Loader,ExcelReportDataLoader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Loader\ExcelReportDataLoader.cs,StoreCsvDataToDatabase,Cyclomatic complexity of the method is 17
Long Statement,ExcelReportsDatastore.Helpers,ConnectionStringHelper,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Helpers\ConnectionStringHelper.cs,GetConnectionString,The length of the statement  "      var t = ConfigurationManager.AppSettings["ExcelReportsDatabaseEntities"];*/var connectionString = ConfigurationManager.ConnectionStrings ["Context"]; " is 149.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,CreateSqlTableFromExcelColumns,The length of the statement  "			columnsNames = string.IsNullOrEmpty (columnsNames) ? string.Format ("[{0}] INT IDENTITY(1'1) PRIMARY KEY"' columnName) : string.Format ("{0}' [{1}] INT IDENTITY(1'1) PRIMARY KEY"' columnsNames' columnName); " is 206.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,CreateSqlTableFromExcelColumns,The length of the statement  "		columnsNames = string.IsNullOrEmpty (columnsNames) ? string.Format ("[{0}] NVARCHAR(500) NULL"' columnName) : string.Format ("{0}' [{1}] NVARCHAR(500)"' columnsNames' columnName); " is 179.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,GetExcelDataTable,The length of the statement  "              "Provider=Microsoft.ACE.OLEDB.12.0; Data Source= {0}; Extended Properties=\"Excel 12.0;IMEX=1;HDR=YES;TypeGuessRows=0;ImportMixedTypes=Text\"";*//*var connectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filename" is 230.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,GetLocalConnection,The length of the statement  "                @"Data Source=C:\Users\bbdnet1087\Documents\Visual Studio 2012\Projects\ExcelReportsGenerator\ExcelReportsDatastore\ExcelReportsDatabase.sdf;Max Database Size=4091;Max Buffer Size=4091;Persist Security Info=False;";*/try { " is 222.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,GetSheetNames,The length of the statement  "	string excelColumns = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + excelFile + ";" + "Extended Properties=\"Excel 12.0 Xml;HDR=YES\""; " is 140.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,LoadExcelDataToDatabase,The length of the statement  "		book = excelApplication.Workbooks.Open (filePath' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value); " is 260.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,LoadExcelDataToDatabase,The length of the statement  "		// @"Data Source=C:\Users\bbdnet1087\Documents\Visual Studio 2012\Projects\ExcelReportsGenerator\ExcelReportsDatastore\ExcelReportsDatabase.sdf;Max Database Size=4091;Max Buffer Size=4091;Persist Security Info=False;"; " is 218.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,LoadExcelDataToDatabase,The length of the statement  "		string elapsedTime = string.Format ("{0:00}:{1:00}:{2:00}.{3:00}"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10); " is 123.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,LoadExcelDataToDatabase,The length of the statement  "		/* string DatabaseConnectionString2 = ConnectionStringHelper.GetConnectionString();*/// @"Data Source=C:\Users\bbdnet1087\Documents\Visual Studio 2012\Projects\ExcelReportsGenerator\ExcelReportsDatastore\ExcelReportsDatabase.sdf;Max Database Size=4091;Max Buffer Size=4091;Persist Security Info=False;"; " is 303.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,SaveFileToDatabase,The length of the statement  "	var excelConnString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1;ImportMixedTypes=Text;TypeGuessRows=0\""; " is 176.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,SaveFileToDatabase,The length of the statement  "	// string connectionString = @"Data Source=(LocalDb)\v11.0;Initial Catalog=ExcelReportsDb;Integrated Security=True; MultipleActiveResultSets=True"; " is 147.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,SaveFileToDatabase,The length of the statement  "                @"Data Source=C:\Users\bbdnet1087\Documents\Visual Studio 2012\Projects\ExcelReportsGenerator\ExcelReportsDatastore\ExcelReportsDatabase.sdf;Max Database Size=4091;Max Buffer Size=4091;Persist Security Info=False;";*/try { " is 222.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,CreateSqlTableFromExcelColumns,The length of the statement  "		columns = string.IsNullOrEmpty (columns) ? string.Format ("[{0}] NVARCHAR(250) NULL"' columnName) : string.Format ("{0}' {1} NVARCHAR(250)"' columns' columnName); " is 162.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,GetExcelRowValuesByIndex,The length of the statement  "			book = excelApplication.Workbooks.Open (excelFilePath' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value); " is 265.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,deleteme,The length of the statement  "		book = excelApplication.Workbooks.Open (excelFilePath' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value); " is 265.
Long Statement,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,deleteme,The length of the statement  "		string elapsedTime = string.Format ("{0:00}:{1:00}:{2:00}.{3:00}"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10); " is 123.
Long Statement,ExcelReportsDatastore,ExcelOpenXmlReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOpenXmlReader.cs,ReadExcelRow,The length of the statement  "				sharedStringItems = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem> ().ToArray<SharedStringItem> (); " is 132.
Long Statement,ExcelReportsDatastore,ExcelOpenXmlReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOpenXmlReader.cs,ReadExcelFile,The length of the statement  "				sharedStringItems = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem> ().ToArray<SharedStringItem> (); " is 132.
Long Statement,ExcelReportsDatastore,ExcelOpenXmlReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOpenXmlReader.cs,ReadExcelFile,The length of the statement  "			string elapsedTime = string.Format ("{0:00}:{1:00}:{2:00}.{3:00}"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10); " is 123.
Long Statement,ExcelReportsDatastore,ExcelOpenXmlReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOpenXmlReader.cs,CreateTableWithHeaderFromExcel,The length of the statement  "	select GetCellValue (tempCell)).Aggregate ("ID"' (current' cellValue) => string.IsNullOrEmpty (current) ? cellValue : string.Format ("{0}|{1}"' current' cellValue)); " is 165.
Long Statement,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The length of the statement  "		var selectDisctinctDissectQuery = string.Format ("select DISTINCT {0} from {1}"' reportData.ColumnNameFilter' "ExcelDataTable"); " is 128.
Long Statement,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The length of the statement  "					var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue); " is 130.
Long Statement,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The length of the statement  "					var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName)); " is 122.
Long Statement,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportBigDataToXlsx,The length of the statement  "		wb.SaveAs (fileName' XlFileFormat.xlWorkbookDefault' Type.Missing' Type.Missing' false' false' XlSaveAsAccessMode.xlNoChange' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing); " is 196.
Long Statement,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportToXlsx,The length of the statement  "			strCn = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileName + ";Extended Properties='Excel 12.0 Macro;HDR=YES' "; " is 121.
Long Statement,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The length of the statement  "		var selectDisctinctDissectQuery = string.Format ("select DISTINCT {0} from {1}"' reportData.ColumnNameFilter' "ExcelDataTable"); " is 128.
Long Statement,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The length of the statement  "					var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue); " is 130.
Long Statement,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The length of the statement  "					var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName)); " is 122.
Long Statement,ExcelReportsDatastore.Reports.Generator,ReplicateReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\ReplicateReportGenerator.cs,GenerateReport,The length of the statement  "					/*ExcelReportsUtils.Dialogs.ShowInformation("Only columns that contains numbers can be used to replicate data' please select the correct column and try again");" is 160.
Long Statement,ExcelReportsDatastore.Reports.Loader,ExcelReportDataLoader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Loader\ExcelReportDataLoader.cs,LoadReportData,The length of the statement  "		book = excelApplication.Workbooks.Open (reportData.FileName' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value); " is 271.
Long Statement,ExcelReportsDatastore.Reports.Loader,ExcelReportDataLoader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Loader\ExcelReportDataLoader.cs,GetExcelRowValuesByIndex,The length of the statement  "			book = excelApplication.Workbooks.Open (excelFilePath' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value); " is 265.
Magic Number,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,LoadExcelDataToDatabase,The following statement contains a magic number: try {  	book = excelApplication.Workbooks.Open (filePath' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value);  	const string TempOutputFile = @"C:\Temp\output.csv";  	if (File.Exists (TempOutputFile)) {  		File.Delete (TempOutputFile);  	}  	book.SaveAs (TempOutputFile' XlFileFormat.xlCurrentPlatformText);  	book.Close (false);  	excelApplication.Quit ();  	book = null;  	excelApplication = null;  	// @"Data Source=C:\Users\bbdnet1087\Documents\Visual Studio 2012\Projects\ExcelReportsGenerator\ExcelReportsDatastore\ExcelReportsDatabase.sdf;Max Database Size=4091;Max Buffer Size=4091;Persist Security Info=False;";  	using (var sqlCeConnection = new SqlCeConnection (ConnectionStringHelper.ExcelDatabaseConnectionString)) {  		try {  			if (sqlCeConnection.State == ConnectionState.Closed) {  				sqlCeConnection.Open ();  			}  		}  		catch (Exception exception) {  			// engine.Repair(null' RepairOption.DeleteCorruptedRows);  			Console.WriteLine (exception);  		}  		StoreDataCsvToDatabase (sqlCeConnection' TempOutputFile' filePath);  	}  	stopWatch.Stop ();  	// Get the elapsed time as a TimeSpan value.  	TimeSpan ts = stopWatch.Elapsed;  	// Format and display the TimeSpan value.  	string elapsedTime = string.Format ("{0:00}:{1:00}:{2:00}.{3:00}"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	var dissectQuery = string.Format ("select top 10000 * from ExcelDataTable");  	/* string DatabaseConnectionString2 = ConnectionStringHelper.GetConnectionString();*/// @"Data Source=C:\Users\bbdnet1087\Documents\Visual Studio 2012\Projects\ExcelReportsGenerator\ExcelReportsDatastore\ExcelReportsDatabase.sdf;Max Database Size=4091;Max Buffer Size=4091;Persist Security Info=False;";  	using (var sqlCeConnection = new SqlCeConnection (ConnectionStringHelper.ExcelDatabaseConnectionString)) {  		sqlCeConnection.Open ();  		return DatabaseReader.GetDatabaseDataTable (sqlCeConnection' dissectQuery);  	}  }  catch (Exception exception) {  	throw new Exception (exception.Message);  }  finally {  	//range = null;  	sheet = null;  	if (book != null) {  		book.Close (false' Missing.Value' Missing.Value);  	}  	book = null;  	if (excelApplication != null) {  		excelApplication.Quit ();  	}  	excelApplication = null;  }  
Magic Number,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,CreateSqlTableFromExcelColumns,The following statement contains a magic number: for (var i = 0; i < columnsInfo.Rows.Count; i++) {  	var columnName = columnsInfo.Rows [i].ItemArray [3].ToString ();  	if (string.IsNullOrEmpty (columnName)) {  		continue;  	}  	columnName = columnName.Replace (" "' "_");  	if (columnName.Equals ("Group")) {  		columnName = "Groups";  	}  	if (columns.Contains (columnName) || columnName == "F1" || columnName == "F2") {  		continue;  	}  	++totalColunms;  	columns = string.IsNullOrEmpty (columns) ? string.Format ("[{0}] NVARCHAR(250) NULL"' columnName) : string.Format ("{0}' {1} NVARCHAR(250)"' columns' columnName);  }  
Magic Number,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,GetExcelColumnName,The following statement contains a magic number: while (dividend > 0) {  	int modulo = (dividend - 1) % 26;  	columnName = Convert.ToChar (65 + modulo) + columnName;  	dividend = (dividend - modulo) / 26;  }  
Magic Number,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,GetExcelColumnName,The following statement contains a magic number: while (dividend > 0) {  	int modulo = (dividend - 1) % 26;  	columnName = Convert.ToChar (65 + modulo) + columnName;  	dividend = (dividend - modulo) / 26;  }  
Magic Number,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,GetExcelColumnName,The following statement contains a magic number: while (dividend > 0) {  	int modulo = (dividend - 1) % 26;  	columnName = Convert.ToChar (65 + modulo) + columnName;  	dividend = (dividend - modulo) / 26;  }  
Magic Number,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,GetExcelColumnName,The following statement contains a magic number: columnName = Convert.ToChar (65 + modulo) + columnName;  
Magic Number,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,GetExcelColumnName,The following statement contains a magic number: dividend = (dividend - modulo) / 26;  
Magic Number,ExcelReportsDatastore,ExcelOleDbReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOleDbReader.cs,deleteme,The following statement contains a magic number: try {  	book = excelApplication.Workbooks.Open (excelFilePath' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value' Missing.Value);  	sheet = (Worksheet)book.Worksheets [1];  	range = sheet.Range ["A1"' Missing.Value];  	/*range = range.End[XlDirection.xlToRight];                  range = range.End[XlDirection.xlDown];*/range = range.SpecialCells (XlCellType.xlCellTypeLastCell);  	string mainDownAddress = range.Address [false' false' XlReferenceStyle.xlA1' Type.Missing' Type.Missing];  	range = sheet.Range ["A1"' mainDownAddress];  	int rowCount = range.Rows.Count;  	int columnCount = range.Columns.Count;  	for (int rowIndex = 1; rowIndex <= rowCount; rowIndex++) {  		var startCellRange = string.Format ("A{0}"' rowIndex);  		range = sheet.Range [startCellRange' Missing.Value];  		range = range.End [XlDirection.xlToRight];  		string downAddress = range.Address [false' false' XlReferenceStyle.xlA1' Type.Missing' Type.Missing];  		range = sheet.Range [startCellRange' downAddress];  		var values = (object['])range.Value2;  		columnCount = range.Columns.Count;  		for (int i = 1; i <= columnCount; i++) {  			var val = values [1' i];  			var cellValues = val != null ? val.ToString () : null;  		}  	}  	stopWatch.Stop ();  	// Get the elapsed time as a TimeSpan value.  	TimeSpan ts = stopWatch.Elapsed;  	// Format and display the TimeSpan value.  	string elapsedTime = string.Format ("{0:00}:{1:00}:{2:00}.{3:00}"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  }  catch (Exception exception) {  	throw new Exception (exception.Message);  }  finally {  	range = null;  	sheet = null;  	if (book != null) {  		book.Close (false' Missing.Value' Missing.Value);  	}  	book = null;  	if (excelApplication != null) {  		excelApplication.Quit ();  	}  	excelApplication = null;  }  
Magic Number,ExcelReportsDatastore,ExcelOpenXmlReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOpenXmlReader.cs,GetColumnIndexFromName,The following statement contains a magic number: for (int i = name.Length - 1; i >= 0; i--) {  	number += (name [i] - 'A' + 1) * pow;  	pow *= 26;  }  
Magic Number,ExcelReportsDatastore,ExcelOpenXmlReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOpenXmlReader.cs,GetColumnIndexFromName,The following statement contains a magic number: pow *= 26;  
Magic Number,ExcelReportsDatastore,ExcelOpenXmlReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOpenXmlReader.cs,ReadExcelFile,The following statement contains a magic number: try {  	// Open the file. You can pass 'false'' if you just need to open the file for reading.  	using (var spreadsheetDocument = SpreadsheetDocument.Open (fileName' false)) {  		WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;  		var totalColumns = 0;  		var stopWatch = new Stopwatch ();  		stopWatch.Start ();  		foreach (Sheet sheet in workbookPart.Workbook.Descendants<Sheet> ()) {  			var worksheetPart = workbookPart.GetPartById (sheet.Id) as WorksheetPart;  			sharedStringItems = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem> ().ToArray<SharedStringItem> ();  			var rowIndex = 0;  			// Create a OpenXmlReader that can iterate through the worksheet parts and read the values in it.  			var reader = OpenXmlReader.Create (worksheetPart);  			while (reader.Read ()) {  				if (reader.ElementType != typeof(Row)) {  					continue;  				}  				var row = (Row)reader.LoadCurrentElement ();  				var cells = row.Descendants<Cell> ().ToArray ();  				if (rowIndex > 0) {  					StoreExcelRecordToDatabaseTable (localDatabaseConnection' cells' totalColumns);  				}  				else {  					totalColumns = CreateTableWithHeaderFromExcel (cells' localDatabaseConnection);  				}  				rowIndex++;  			}  			break;  		}  		stopWatch.Stop ();  		// Get the elapsed time as a TimeSpan value.  		TimeSpan ts = stopWatch.Elapsed;  		// Format and display the TimeSpan value.  		string elapsedTime = string.Format ("{0:00}:{1:00}:{2:00}.{3:00}"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  	}  	var dissectQuery = string.Format ("select top 10000 * from ExcelDataTable");  	return DatabaseReader.GetDatabaseDataTable (localDatabaseConnection' dissectQuery);  }  catch (Exception e) {  	throw new Exception (e.Message);  }  finally {  	localDatabaseConnection.Close ();  }  
Magic Number,ExcelReportsDatastore,ExcelOpenXmlReader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelOpenXmlReader.cs,ReadExcelFile,The following statement contains a magic number: using (var spreadsheetDocument = SpreadsheetDocument.Open (fileName' false)) {  	WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;  	var totalColumns = 0;  	var stopWatch = new Stopwatch ();  	stopWatch.Start ();  	foreach (Sheet sheet in workbookPart.Workbook.Descendants<Sheet> ()) {  		var worksheetPart = workbookPart.GetPartById (sheet.Id) as WorksheetPart;  		sharedStringItems = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem> ().ToArray<SharedStringItem> ();  		var rowIndex = 0;  		// Create a OpenXmlReader that can iterate through the worksheet parts and read the values in it.  		var reader = OpenXmlReader.Create (worksheetPart);  		while (reader.Read ()) {  			if (reader.ElementType != typeof(Row)) {  				continue;  			}  			var row = (Row)reader.LoadCurrentElement ();  			var cells = row.Descendants<Cell> ().ToArray ();  			if (rowIndex > 0) {  				StoreExcelRecordToDatabaseTable (localDatabaseConnection' cells' totalColumns);  			}  			else {  				totalColumns = CreateTableWithHeaderFromExcel (cells' localDatabaseConnection);  			}  			rowIndex++;  		}  		break;  	}  	stopWatch.Stop ();  	// Get the elapsed time as a TimeSpan value.  	TimeSpan ts = stopWatch.Elapsed;  	// Format and display the TimeSpan value.  	string elapsedTime = string.Format ("{0:00}:{1:00}:{2:00}.{3:00}"' ts.Hours' ts.Minutes' ts.Seconds' ts.Milliseconds / 10);  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: try {  	if (reportData == null) {  		return;  	}  	connection.Open ();  	var selectDisctinctDissectQuery = string.Format ("select DISTINCT {0} from {1}"' reportData.ColumnNameFilter' "ExcelDataTable");  	using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  		using (var dissectColumnReader = cmd.ExecuteReader ()) {  			while (dissectColumnReader.Read ()) {  				string dissectValue = dissectColumnReader.GetString (0);  				if (string.IsNullOrEmpty (dissectValue)) {  					continue;  				}  				var newValue = dissectValue.Replace ("'"' "''");  				var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  				var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  				dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  				var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  				var sheetName = dissectValue;  				// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  				if (sheetName.Length > 30) {  					sheetName = sheetName.Substring (0' 30);  				}  				if (dataTable.Rows.Count > 10000) {  					ExportBigDataToXlsx (dataTable' filename' sheetName);  				}  				else {  					ExportToXlsx (dataTable' filename' sheetName);  				}  			}  		}  	}  	// run the rest of the program  }  catch (Exception ex) {  	ExcelReportsUtils.Dialogs.ShowError (ex);  }  finally {  	connection.Dispose ();  	GC.Collect ();  	GC.WaitForPendingFinalizers ();  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: try {  	if (reportData == null) {  		return;  	}  	connection.Open ();  	var selectDisctinctDissectQuery = string.Format ("select DISTINCT {0} from {1}"' reportData.ColumnNameFilter' "ExcelDataTable");  	using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  		using (var dissectColumnReader = cmd.ExecuteReader ()) {  			while (dissectColumnReader.Read ()) {  				string dissectValue = dissectColumnReader.GetString (0);  				if (string.IsNullOrEmpty (dissectValue)) {  					continue;  				}  				var newValue = dissectValue.Replace ("'"' "''");  				var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  				var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  				dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  				var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  				var sheetName = dissectValue;  				// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  				if (sheetName.Length > 30) {  					sheetName = sheetName.Substring (0' 30);  				}  				if (dataTable.Rows.Count > 10000) {  					ExportBigDataToXlsx (dataTable' filename' sheetName);  				}  				else {  					ExportToXlsx (dataTable' filename' sheetName);  				}  			}  		}  	}  	// run the rest of the program  }  catch (Exception ex) {  	ExcelReportsUtils.Dialogs.ShowError (ex);  }  finally {  	connection.Dispose ();  	GC.Collect ();  	GC.WaitForPendingFinalizers ();  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: try {  	if (reportData == null) {  		return;  	}  	connection.Open ();  	var selectDisctinctDissectQuery = string.Format ("select DISTINCT {0} from {1}"' reportData.ColumnNameFilter' "ExcelDataTable");  	using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  		using (var dissectColumnReader = cmd.ExecuteReader ()) {  			while (dissectColumnReader.Read ()) {  				string dissectValue = dissectColumnReader.GetString (0);  				if (string.IsNullOrEmpty (dissectValue)) {  					continue;  				}  				var newValue = dissectValue.Replace ("'"' "''");  				var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  				var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  				dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  				var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  				var sheetName = dissectValue;  				// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  				if (sheetName.Length > 30) {  					sheetName = sheetName.Substring (0' 30);  				}  				if (dataTable.Rows.Count > 10000) {  					ExportBigDataToXlsx (dataTable' filename' sheetName);  				}  				else {  					ExportToXlsx (dataTable' filename' sheetName);  				}  			}  		}  	}  	// run the rest of the program  }  catch (Exception ex) {  	ExcelReportsUtils.Dialogs.ShowError (ex);  }  finally {  	connection.Dispose ();  	GC.Collect ();  	GC.WaitForPendingFinalizers ();  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  	using (var dissectColumnReader = cmd.ExecuteReader ()) {  		while (dissectColumnReader.Read ()) {  			string dissectValue = dissectColumnReader.GetString (0);  			if (string.IsNullOrEmpty (dissectValue)) {  				continue;  			}  			var newValue = dissectValue.Replace ("'"' "''");  			var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  			var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  			dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  			var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  			var sheetName = dissectValue;  			// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  			if (sheetName.Length > 30) {  				sheetName = sheetName.Substring (0' 30);  			}  			if (dataTable.Rows.Count > 10000) {  				ExportBigDataToXlsx (dataTable' filename' sheetName);  			}  			else {  				ExportToXlsx (dataTable' filename' sheetName);  			}  		}  	}  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  	using (var dissectColumnReader = cmd.ExecuteReader ()) {  		while (dissectColumnReader.Read ()) {  			string dissectValue = dissectColumnReader.GetString (0);  			if (string.IsNullOrEmpty (dissectValue)) {  				continue;  			}  			var newValue = dissectValue.Replace ("'"' "''");  			var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  			var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  			dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  			var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  			var sheetName = dissectValue;  			// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  			if (sheetName.Length > 30) {  				sheetName = sheetName.Substring (0' 30);  			}  			if (dataTable.Rows.Count > 10000) {  				ExportBigDataToXlsx (dataTable' filename' sheetName);  			}  			else {  				ExportToXlsx (dataTable' filename' sheetName);  			}  		}  	}  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  	using (var dissectColumnReader = cmd.ExecuteReader ()) {  		while (dissectColumnReader.Read ()) {  			string dissectValue = dissectColumnReader.GetString (0);  			if (string.IsNullOrEmpty (dissectValue)) {  				continue;  			}  			var newValue = dissectValue.Replace ("'"' "''");  			var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  			var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  			dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  			var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  			var sheetName = dissectValue;  			// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  			if (sheetName.Length > 30) {  				sheetName = sheetName.Substring (0' 30);  			}  			if (dataTable.Rows.Count > 10000) {  				ExportBigDataToXlsx (dataTable' filename' sheetName);  			}  			else {  				ExportToXlsx (dataTable' filename' sheetName);  			}  		}  	}  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: using (var dissectColumnReader = cmd.ExecuteReader ()) {  	while (dissectColumnReader.Read ()) {  		string dissectValue = dissectColumnReader.GetString (0);  		if (string.IsNullOrEmpty (dissectValue)) {  			continue;  		}  		var newValue = dissectValue.Replace ("'"' "''");  		var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  		var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  		dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  		var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  		var sheetName = dissectValue;  		// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  		if (sheetName.Length > 30) {  			sheetName = sheetName.Substring (0' 30);  		}  		if (dataTable.Rows.Count > 10000) {  			ExportBigDataToXlsx (dataTable' filename' sheetName);  		}  		else {  			ExportToXlsx (dataTable' filename' sheetName);  		}  	}  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: using (var dissectColumnReader = cmd.ExecuteReader ()) {  	while (dissectColumnReader.Read ()) {  		string dissectValue = dissectColumnReader.GetString (0);  		if (string.IsNullOrEmpty (dissectValue)) {  			continue;  		}  		var newValue = dissectValue.Replace ("'"' "''");  		var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  		var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  		dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  		var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  		var sheetName = dissectValue;  		// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  		if (sheetName.Length > 30) {  			sheetName = sheetName.Substring (0' 30);  		}  		if (dataTable.Rows.Count > 10000) {  			ExportBigDataToXlsx (dataTable' filename' sheetName);  		}  		else {  			ExportToXlsx (dataTable' filename' sheetName);  		}  	}  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: using (var dissectColumnReader = cmd.ExecuteReader ()) {  	while (dissectColumnReader.Read ()) {  		string dissectValue = dissectColumnReader.GetString (0);  		if (string.IsNullOrEmpty (dissectValue)) {  			continue;  		}  		var newValue = dissectValue.Replace ("'"' "''");  		var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  		var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  		dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  		var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  		var sheetName = dissectValue;  		// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  		if (sheetName.Length > 30) {  			sheetName = sheetName.Substring (0' 30);  		}  		if (dataTable.Rows.Count > 10000) {  			ExportBigDataToXlsx (dataTable' filename' sheetName);  		}  		else {  			ExportToXlsx (dataTable' filename' sheetName);  		}  	}  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: while (dissectColumnReader.Read ()) {  	string dissectValue = dissectColumnReader.GetString (0);  	if (string.IsNullOrEmpty (dissectValue)) {  		continue;  	}  	var newValue = dissectValue.Replace ("'"' "''");  	var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  	var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  	dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  	var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  	var sheetName = dissectValue;  	// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  	if (sheetName.Length > 30) {  		sheetName = sheetName.Substring (0' 30);  	}  	if (dataTable.Rows.Count > 10000) {  		ExportBigDataToXlsx (dataTable' filename' sheetName);  	}  	else {  		ExportToXlsx (dataTable' filename' sheetName);  	}  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: while (dissectColumnReader.Read ()) {  	string dissectValue = dissectColumnReader.GetString (0);  	if (string.IsNullOrEmpty (dissectValue)) {  		continue;  	}  	var newValue = dissectValue.Replace ("'"' "''");  	var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  	var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  	dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  	var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  	var sheetName = dissectValue;  	// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  	if (sheetName.Length > 30) {  		sheetName = sheetName.Substring (0' 30);  	}  	if (dataTable.Rows.Count > 10000) {  		ExportBigDataToXlsx (dataTable' filename' sheetName);  	}  	else {  		ExportToXlsx (dataTable' filename' sheetName);  	}  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: while (dissectColumnReader.Read ()) {  	string dissectValue = dissectColumnReader.GetString (0);  	if (string.IsNullOrEmpty (dissectValue)) {  		continue;  	}  	var newValue = dissectValue.Replace ("'"' "''");  	var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  	var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  	dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  	var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  	var sheetName = dissectValue;  	// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(sheetName));  	if (sheetName.Length > 30) {  		sheetName = sheetName.Substring (0' 30);  	}  	if (dataTable.Rows.Count > 10000) {  		ExportBigDataToXlsx (dataTable' filename' sheetName);  	}  	else {  		ExportToXlsx (dataTable' filename' sheetName);  	}  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: if (sheetName.Length > 30) {  	sheetName = sheetName.Substring (0' 30);  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: if (sheetName.Length > 30) {  	sheetName = sheetName.Substring (0' 30);  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: sheetName = sheetName.Substring (0' 30);  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,Dissect,The following statement contains a magic number: if (dataTable.Rows.Count > 10000) {  	ExportBigDataToXlsx (dataTable' filename' sheetName);  }  else {  	ExportToXlsx (dataTable' filename' sheetName);  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportBigDataToXlsx,The following statement contains a magic number: if (table != null && table.Rows.Count > 0) {  	// Determine the number of chunks  	int chunkSize = 100000;  	double chunkCountD = table.Rows.Count / (double)chunkSize;  	int chunkCount = table.Rows.Count / chunkSize;  	chunkCount = chunkCountD > chunkCount ? chunkCount + 1 : chunkCount;  	// Instantiate excel  	var excel = new Application {  		Visible = false'  		ScreenUpdating = false'  		DisplayAlerts = false  	};  	// Get a workbook  	Workbook wb = excel.Workbooks.Add ();  	// Get a worksheet  	Worksheet ws = wb.Worksheets.Add ();  	ws.Name = sheetName;  	// Add column names to excel  	int col = 1;  	foreach (DataColumn c in table.Columns) {  		ws.Cells [1' col] = c.ColumnName;  		col++;  	}  	// Build 2D array  	int i = 0;  	var data = new string[table.Rows.Count' table.Columns.Count];  	foreach (DataRow row in table.Rows) {  		int j = 0;  		foreach (DataColumn c in table.Columns) {  			data [i' j] = row [c].ToString ();  			j++;  		}  		i++;  	}  	int processed = 0;  	int data2DLength = data.GetLength (1);  	for (int chunk = 1; chunk <= chunkCount; chunk++) {  		if (table.Rows.Count - processed < chunkSize) {  			chunkSize = table.Rows.Count - processed;  		}  		var chunkData = new string[chunkSize' data2DLength];  		int l = 0;  		for (int k = processed; k < chunkSize + processed; k++) {  			for (int m = 0; m < data2DLength; m++) {  				chunkData [l' m] = table.Rows [k] [m].ToString ();  			}  			l++;  		}  		// Set the range value to the chunk 2d array  		ws.Range [ws.Cells [2 + processed' 1]' ws.Cells [processed + chunkSize + 1' data2DLength]].Value2 = chunkData;  		processed += chunkSize;  	}  	wb.SaveAs (fileName' XlFileFormat.xlWorkbookDefault' Type.Missing' Type.Missing' false' false' XlSaveAsAccessMode.xlNoChange' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing);  	wb.Close ();  	excel.Quit ();  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportBigDataToXlsx,The following statement contains a magic number: if (table != null && table.Rows.Count > 0) {  	// Determine the number of chunks  	int chunkSize = 100000;  	double chunkCountD = table.Rows.Count / (double)chunkSize;  	int chunkCount = table.Rows.Count / chunkSize;  	chunkCount = chunkCountD > chunkCount ? chunkCount + 1 : chunkCount;  	// Instantiate excel  	var excel = new Application {  		Visible = false'  		ScreenUpdating = false'  		DisplayAlerts = false  	};  	// Get a workbook  	Workbook wb = excel.Workbooks.Add ();  	// Get a worksheet  	Worksheet ws = wb.Worksheets.Add ();  	ws.Name = sheetName;  	// Add column names to excel  	int col = 1;  	foreach (DataColumn c in table.Columns) {  		ws.Cells [1' col] = c.ColumnName;  		col++;  	}  	// Build 2D array  	int i = 0;  	var data = new string[table.Rows.Count' table.Columns.Count];  	foreach (DataRow row in table.Rows) {  		int j = 0;  		foreach (DataColumn c in table.Columns) {  			data [i' j] = row [c].ToString ();  			j++;  		}  		i++;  	}  	int processed = 0;  	int data2DLength = data.GetLength (1);  	for (int chunk = 1; chunk <= chunkCount; chunk++) {  		if (table.Rows.Count - processed < chunkSize) {  			chunkSize = table.Rows.Count - processed;  		}  		var chunkData = new string[chunkSize' data2DLength];  		int l = 0;  		for (int k = processed; k < chunkSize + processed; k++) {  			for (int m = 0; m < data2DLength; m++) {  				chunkData [l' m] = table.Rows [k] [m].ToString ();  			}  			l++;  		}  		// Set the range value to the chunk 2d array  		ws.Range [ws.Cells [2 + processed' 1]' ws.Cells [processed + chunkSize + 1' data2DLength]].Value2 = chunkData;  		processed += chunkSize;  	}  	wb.SaveAs (fileName' XlFileFormat.xlWorkbookDefault' Type.Missing' Type.Missing' false' false' XlSaveAsAccessMode.xlNoChange' Type.Missing' Type.Missing' Type.Missing' Type.Missing' Type.Missing);  	wb.Close ();  	excel.Quit ();  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportBigDataToXlsx,The following statement contains a magic number: for (int chunk = 1; chunk <= chunkCount; chunk++) {  	if (table.Rows.Count - processed < chunkSize) {  		chunkSize = table.Rows.Count - processed;  	}  	var chunkData = new string[chunkSize' data2DLength];  	int l = 0;  	for (int k = processed; k < chunkSize + processed; k++) {  		for (int m = 0; m < data2DLength; m++) {  			chunkData [l' m] = table.Rows [k] [m].ToString ();  		}  		l++;  	}  	// Set the range value to the chunk 2d array  	ws.Range [ws.Cells [2 + processed' 1]' ws.Cells [processed + chunkSize + 1' data2DLength]].Value2 = chunkData;  	processed += chunkSize;  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportBigDataToXlsx,The following statement contains a magic number: ws.Range [ws.Cells [2 + processed' 1]' ws.Cells [processed + chunkSize + 1' data2DLength]].Value2 = chunkData;  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportToXlsx,The following statement contains a magic number: if (sheetName.Length > 30) {  	sheetName = sheetName.Substring (0' 30);  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportToXlsx,The following statement contains a magic number: if (sheetName.Length > 30) {  	sheetName = sheetName.Substring (0' 30);  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportToXlsx,The following statement contains a magic number: sheetName = sheetName.Substring (0' 30);  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,ExportToXlsx,The following statement contains a magic number: if (selectedRows.Count > 65000 && fileName.ToLower ().EndsWith (".xls")) {  	// use Excel 2007 for large sheets.  	fileName = fileName.ToLower ().Replace (".xls"' string.Empty) + ".xlsx";  }  
Magic Number,ExcelReportsDatastore,ExcelWriter,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\ExcelWriter.cs,TestExport2,The following statement contains a magic number: ws.Range [ws.Cells [2' 1]' ws.Cells [table.Rows.Count + 1' table.Columns.Count]].Value2 = data;  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: try {  	if (reportData == null) {  		return;  	}  	connection.Open ();  	var selectDisctinctDissectQuery = string.Format ("select DISTINCT {0} from {1}"' reportData.ColumnNameFilter' "ExcelDataTable");  	using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  		using (var dissectColumnReader = cmd.ExecuteReader ()) {  			while (dissectColumnReader.Read ()) {  				var dissectValue = dissectColumnReader.GetString (0);  				if (string.IsNullOrEmpty (dissectValue)) {  					continue;  				}  				var newValue = dissectValue.Replace ("'"' "''");  				var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  				var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  				dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  				var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  				var sheetName = dissectValue;  				// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  				if (sheetName.Length > 30) {  					sheetName = sheetName.Substring (0' 30);  				}  				//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  				if (dataTable.Rows.Count > 10000) {  					ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  				}  				else {  					ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  				}  			}  		}  	}  }  catch (Exception ex) {  	ExcelReportsUtils.Dialogs.ShowError (ex);  }  finally {  	connection.Dispose ();  	GC.Collect ();  	GC.WaitForPendingFinalizers ();  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: try {  	if (reportData == null) {  		return;  	}  	connection.Open ();  	var selectDisctinctDissectQuery = string.Format ("select DISTINCT {0} from {1}"' reportData.ColumnNameFilter' "ExcelDataTable");  	using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  		using (var dissectColumnReader = cmd.ExecuteReader ()) {  			while (dissectColumnReader.Read ()) {  				var dissectValue = dissectColumnReader.GetString (0);  				if (string.IsNullOrEmpty (dissectValue)) {  					continue;  				}  				var newValue = dissectValue.Replace ("'"' "''");  				var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  				var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  				dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  				var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  				var sheetName = dissectValue;  				// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  				if (sheetName.Length > 30) {  					sheetName = sheetName.Substring (0' 30);  				}  				//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  				if (dataTable.Rows.Count > 10000) {  					ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  				}  				else {  					ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  				}  			}  		}  	}  }  catch (Exception ex) {  	ExcelReportsUtils.Dialogs.ShowError (ex);  }  finally {  	connection.Dispose ();  	GC.Collect ();  	GC.WaitForPendingFinalizers ();  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: try {  	if (reportData == null) {  		return;  	}  	connection.Open ();  	var selectDisctinctDissectQuery = string.Format ("select DISTINCT {0} from {1}"' reportData.ColumnNameFilter' "ExcelDataTable");  	using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  		using (var dissectColumnReader = cmd.ExecuteReader ()) {  			while (dissectColumnReader.Read ()) {  				var dissectValue = dissectColumnReader.GetString (0);  				if (string.IsNullOrEmpty (dissectValue)) {  					continue;  				}  				var newValue = dissectValue.Replace ("'"' "''");  				var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  				var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  				dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  				var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  				var sheetName = dissectValue;  				// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  				if (sheetName.Length > 30) {  					sheetName = sheetName.Substring (0' 30);  				}  				//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  				if (dataTable.Rows.Count > 10000) {  					ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  				}  				else {  					ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  				}  			}  		}  	}  }  catch (Exception ex) {  	ExcelReportsUtils.Dialogs.ShowError (ex);  }  finally {  	connection.Dispose ();  	GC.Collect ();  	GC.WaitForPendingFinalizers ();  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  	using (var dissectColumnReader = cmd.ExecuteReader ()) {  		while (dissectColumnReader.Read ()) {  			var dissectValue = dissectColumnReader.GetString (0);  			if (string.IsNullOrEmpty (dissectValue)) {  				continue;  			}  			var newValue = dissectValue.Replace ("'"' "''");  			var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  			var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  			dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  			var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  			var sheetName = dissectValue;  			// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  			if (sheetName.Length > 30) {  				sheetName = sheetName.Substring (0' 30);  			}  			//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  			if (dataTable.Rows.Count > 10000) {  				ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  			}  			else {  				ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  			}  		}  	}  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  	using (var dissectColumnReader = cmd.ExecuteReader ()) {  		while (dissectColumnReader.Read ()) {  			var dissectValue = dissectColumnReader.GetString (0);  			if (string.IsNullOrEmpty (dissectValue)) {  				continue;  			}  			var newValue = dissectValue.Replace ("'"' "''");  			var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  			var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  			dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  			var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  			var sheetName = dissectValue;  			// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  			if (sheetName.Length > 30) {  				sheetName = sheetName.Substring (0' 30);  			}  			//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  			if (dataTable.Rows.Count > 10000) {  				ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  			}  			else {  				ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  			}  		}  	}  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: using (var cmd = new SqlCeCommand (selectDisctinctDissectQuery' connection)) {  	using (var dissectColumnReader = cmd.ExecuteReader ()) {  		while (dissectColumnReader.Read ()) {  			var dissectValue = dissectColumnReader.GetString (0);  			if (string.IsNullOrEmpty (dissectValue)) {  				continue;  			}  			var newValue = dissectValue.Replace ("'"' "''");  			var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  			var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  			dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  			var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  			var sheetName = dissectValue;  			// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  			if (sheetName.Length > 30) {  				sheetName = sheetName.Substring (0' 30);  			}  			//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  			if (dataTable.Rows.Count > 10000) {  				ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  			}  			else {  				ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  			}  		}  	}  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: using (var dissectColumnReader = cmd.ExecuteReader ()) {  	while (dissectColumnReader.Read ()) {  		var dissectValue = dissectColumnReader.GetString (0);  		if (string.IsNullOrEmpty (dissectValue)) {  			continue;  		}  		var newValue = dissectValue.Replace ("'"' "''");  		var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  		var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  		dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  		var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  		var sheetName = dissectValue;  		// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  		if (sheetName.Length > 30) {  			sheetName = sheetName.Substring (0' 30);  		}  		//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  		if (dataTable.Rows.Count > 10000) {  			ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  		}  		else {  			ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  		}  	}  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: using (var dissectColumnReader = cmd.ExecuteReader ()) {  	while (dissectColumnReader.Read ()) {  		var dissectValue = dissectColumnReader.GetString (0);  		if (string.IsNullOrEmpty (dissectValue)) {  			continue;  		}  		var newValue = dissectValue.Replace ("'"' "''");  		var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  		var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  		dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  		var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  		var sheetName = dissectValue;  		// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  		if (sheetName.Length > 30) {  			sheetName = sheetName.Substring (0' 30);  		}  		//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  		if (dataTable.Rows.Count > 10000) {  			ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  		}  		else {  			ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  		}  	}  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: using (var dissectColumnReader = cmd.ExecuteReader ()) {  	while (dissectColumnReader.Read ()) {  		var dissectValue = dissectColumnReader.GetString (0);  		if (string.IsNullOrEmpty (dissectValue)) {  			continue;  		}  		var newValue = dissectValue.Replace ("'"' "''");  		var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  		var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  		dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  		var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  		var sheetName = dissectValue;  		// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  		if (sheetName.Length > 30) {  			sheetName = sheetName.Substring (0' 30);  		}  		//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  		if (dataTable.Rows.Count > 10000) {  			ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  		}  		else {  			ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  		}  	}  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: while (dissectColumnReader.Read ()) {  	var dissectValue = dissectColumnReader.GetString (0);  	if (string.IsNullOrEmpty (dissectValue)) {  		continue;  	}  	var newValue = dissectValue.Replace ("'"' "''");  	var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  	var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  	dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  	var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  	var sheetName = dissectValue;  	// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  	if (sheetName.Length > 30) {  		sheetName = sheetName.Substring (0' 30);  	}  	//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  	if (dataTable.Rows.Count > 10000) {  		ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  	}  	else {  		ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  	}  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: while (dissectColumnReader.Read ()) {  	var dissectValue = dissectColumnReader.GetString (0);  	if (string.IsNullOrEmpty (dissectValue)) {  		continue;  	}  	var newValue = dissectValue.Replace ("'"' "''");  	var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  	var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  	dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  	var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  	var sheetName = dissectValue;  	// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  	if (sheetName.Length > 30) {  		sheetName = sheetName.Substring (0' 30);  	}  	//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  	if (dataTable.Rows.Count > 10000) {  		ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  	}  	else {  		ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  	}  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: while (dissectColumnReader.Read ()) {  	var dissectValue = dissectColumnReader.GetString (0);  	if (string.IsNullOrEmpty (dissectValue)) {  		continue;  	}  	var newValue = dissectValue.Replace ("'"' "''");  	var dissectQuery = string.Format ("select * from {0} Where [{1}]='{2}'"' "ExcelDataTable"' reportData.ColumnNameFilter' newValue);  	var dataTable = DatabaseReader.GetDatabaseDataTable (connection' dissectQuery);  	dissectValue = dissectValue.RemoveInvalidCharacterForFilename ();  	var filename = string.Format (@"{0}\{1}_{2}"' reportData.Directory' dissectValue' Path.GetFileName (reportData.FileName));  	var sheetName = dissectValue;  	// var filename = string.Format(@"{0}\{1}.{2}"' directory' dissectValue' Path.GetExtension(fileName));  	if (sheetName.Length > 30) {  		sheetName = sheetName.Substring (0' 30);  	}  	//ExcelWriter.ExportBigDataToXlsx(dataTable' filename' sheetName);  	if (dataTable.Rows.Count > 10000) {  		ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  	}  	else {  		ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  	}  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: if (sheetName.Length > 30) {  	sheetName = sheetName.Substring (0' 30);  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: if (sheetName.Length > 30) {  	sheetName = sheetName.Substring (0' 30);  }  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: sheetName = sheetName.Substring (0' 30);  
Magic Number,ExcelReportsDatastore.Reports.Generator,DissectReportGenerator,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Generator\DissectReportGenerator.cs,GenerateReport,The following statement contains a magic number: if (dataTable.Rows.Count > 10000) {  	ExcelWriter.ExportBigDataToXlsx (dataTable' filename' sheetName);  }  else {  	ExcelWriter.ExportToXlsx (dataTable' filename' sheetName);  }  
Magic Number,ExcelReportsDatastore.Reports.Loader,ExcelReportDataLoader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Loader\ExcelReportDataLoader.cs,GetExcelColumnName,The following statement contains a magic number: while (dividend > 0) {  	int modulo = (dividend - 1) % 26;  	columnName = Convert.ToChar (65 + modulo) + columnName;  	dividend = (dividend - modulo) / 26;  }  
Magic Number,ExcelReportsDatastore.Reports.Loader,ExcelReportDataLoader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Loader\ExcelReportDataLoader.cs,GetExcelColumnName,The following statement contains a magic number: while (dividend > 0) {  	int modulo = (dividend - 1) % 26;  	columnName = Convert.ToChar (65 + modulo) + columnName;  	dividend = (dividend - modulo) / 26;  }  
Magic Number,ExcelReportsDatastore.Reports.Loader,ExcelReportDataLoader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Loader\ExcelReportDataLoader.cs,GetExcelColumnName,The following statement contains a magic number: while (dividend > 0) {  	int modulo = (dividend - 1) % 26;  	columnName = Convert.ToChar (65 + modulo) + columnName;  	dividend = (dividend - modulo) / 26;  }  
Magic Number,ExcelReportsDatastore.Reports.Loader,ExcelReportDataLoader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Loader\ExcelReportDataLoader.cs,GetExcelColumnName,The following statement contains a magic number: columnName = Convert.ToChar (65 + modulo) + columnName;  
Magic Number,ExcelReportsDatastore.Reports.Loader,ExcelReportDataLoader,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Reports\Loader\ExcelReportDataLoader.cs,GetExcelColumnName,The following statement contains a magic number: dividend = (dividend - modulo) / 26;  
Missing Default,ExcelReportsDatastore.Factories,GenerateReportFactory,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Factories\GenerateReportFactory.cs,GetReportGeneratorInstance,The following switch statement is missing a default case: switch (reportGeneratorType) {  case ReportGeneratorType.DissectData: {  	return new DissectReportGenerator ();  }  case ReportGeneratorType.ReplicateData: {  	return new ReplicateReportGenerator ();  }  case ReportGeneratorType.DataTableToExcelReport: {  	return new DataTableToExcelReportGenerator ();  }  }  
Missing Default,ExcelReportsDatastore.Factories,LoadReportFactory,C:\repos\benitazz_ReportSource\ExcelReportsDatastore\Factories\LoadReportFactory.cs,GetReportLoaderInstance,The following switch statement is missing a default case: switch (reportLoaderType) {  case ReportLoaderType.ExcelReport: {  	return new ExcelReportDataLoader ();  }  case ReportLoaderType.TextReport: {  	return new TextReportDataLoader ();  }  }  
