Implementation smell,Namespace,Class,File,Method,Description
Long Method,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The method has 281 lines of code.
Long Method,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The method has 150 lines of code.
Long Method,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The method has 145 lines of code.
Complex Method,Duplicati.Server,LiveControls,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LiveControls.cs,LiveControls,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.Server,LiveControls,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LiveControls.cs,SystemEvents_PowerModeChanged,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,Cyclomatic complexity of the method is 31
Complex Method,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,GetNextValidTime,Cyclomatic complexity of the method is 14
Complex Method,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,Cyclomatic complexity of the method is 21
Complex Method,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,Cyclomatic complexity of the method is 20
Complex Method,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,Cyclomatic complexity of the method is 13
Complex Method,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,GetCommandLine,Cyclomatic complexity of the method is 13
Complex Method,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,GetCommandLineParts,Cyclomatic complexity of the method is 12
Complex Method,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,Cyclomatic complexity of the method is 49
Complex Method,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadata,Cyclomatic complexity of the method is 10
Complex Method,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,Cyclomatic complexity of the method is 17
Complex Method,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,Cyclomatic complexity of the method is 16
Complex Method,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,OverwriteAndUpdateDb,Cyclomatic complexity of the method is 12
Complex Method,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,Cyclomatic complexity of the method is 29
Complex Method,Duplicati.Server.WebServer,Server,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\Server.cs,Server,Cyclomatic complexity of the method is 19
Complex Method,Duplicati.Server.WebServer,Server,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\Server.cs,CreateServer,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,DoProcess,Cyclomatic complexity of the method is 19
Complex Method,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,Cyclomatic complexity of the method is 13
Complex Method,Duplicati.Server.WebServer.RESTMethods,SystemInfo,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\SystemInfo.cs,POST,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,Cyclomatic complexity of the method is 15
Complex Method,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,POST,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Server.WebServer.RESTMethods,ServerState,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\ServerState.cs,POST,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Server.WebServer.RESTMethods,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Help.cs,GET,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Server.WebServer.RESTMethods,ServerSettings,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\ServerSettings.cs,PATCH,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,Export,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,GET,Cyclomatic complexity of the method is 21
Complex Method,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,POST,Cyclomatic complexity of the method is 31
Complex Method,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,PUT,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,Cyclomatic complexity of the method is 20
Complex Method,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,Process,Cyclomatic complexity of the method is 15
Complex Method,Duplicati.Server.WebServer.RESTMethods,LogData,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\LogData.cs,DumpTable,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Server.WebServer.RESTMethods,RemoteOperation,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\RemoteOperation.cs,TestConnection,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Server.WebServer.RESTMethods,RemoteOperation,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\RemoteOperation.cs,GET,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Server.WebServer.RESTMethods,RemoteOperation,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\RemoteOperation.cs,POST,Cyclomatic complexity of the method is 13
Complex Method,Duplicati.Server.WebServer.RESTMethods,BackupDefaults,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\BackupDefaults.cs,MergeJsonObjects,Cyclomatic complexity of the method is 28
Complex Method,Duplicati.Server.WebServer.RESTMethods,Updates,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Updates.cs,POST,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Server.WebServer.RESTMethods,Task,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Task.cs,POST,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Server.WebServer.RESTMethods,Captcha,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Captcha.cs,POST,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,POST,Cyclomatic complexity of the method is 8
Long Parameter List,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,CreateListTask,The method has 6 parameters.
Long Parameter List,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,CreateRestoreTask,The method has 7 parameters.
Long Parameter List,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,RegisterNotification,The method has 7 parameters.
Long Parameter List,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,OverwriteAndUpdateDb,The method has 5 parameters.
Long Parameter List,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,OverwriteAndUpdateDb,The method has 6 parameters.
Long Parameter List,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,HandleControlCGI,The method has 5 parameters.
Long Parameter List,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,DoProcess,The method has 6 parameters.
Long Parameter List,Duplicati.Server.WebServer.RESTMethods,LogData,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\LogData.cs,DumpTable,The method has 5 parameters.
Long Statement,Duplicati.Server,LiveControls,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LiveControls.cs,RegisterHibernateMonitor,The length of the statement  "	Microsoft.Win32.SystemEvents.PowerModeChanged += new Microsoft.Win32.PowerModeChangedEventHandler (SystemEvents_PowerModeChanged); " is 130.
Long Statement,Duplicati.Server,LiveControls,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LiveControls.cs,UnregisterHibernateMonitor,The length of the statement  "	Microsoft.Win32.SystemEvents.PowerModeChanged -= new Microsoft.Win32.PowerModeChangedEventHandler (SystemEvents_PowerModeChanged); " is 130.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,Main,The length of the statement  "	return Duplicati.Library.AutoUpdater.UpdaterManager.RunFromMostRecent (typeof(Program).GetMethod ("RealMain")' args' Duplicati.Library.AutoUpdater.AutoUpdateStrategy.Never); " is 173.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "		Environment.SetEnvironmentVariable ("PATH"' Environment.GetEnvironmentVariable ("PATH") + System.IO.Path.PathSeparator.ToString () + System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "win-tools")); " is 266.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "	bool writeConsole = System.Reflection.Assembly.GetEntryAssembly () == System.Reflection.Assembly.GetExecutingAssembly (); " is 121.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "	if (!Library.Utility.Utility.IsClientLinux && string.IsNullOrEmpty (Environment.GetEnvironmentVariable (DB_KEY_ENV_NAME))) { " is 124.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "	Dictionary<string' string> commandlineOptions = Duplicati.Library.Utility.CommandLineParser.ExtractOptions (new List<string> (args)); " is 133.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "		if (s.Equals ("help"' StringComparison.InvariantCultureIgnoreCase) || s.Equals ("/help"' StringComparison.InvariantCultureIgnoreCase) || s.Equals ("usage"' StringComparison.InvariantCultureIgnoreCase) || s.Equals ("/usage"' StringComparison.InvariantCultureIgnoreCase)) " is 269.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "		                bool portableMode = commandlineOptions.ContainsKey("portable-mode") ? Library.Utility.Utility.ParseBool(commandlineOptions["portable-mode"]' true) : false;" is 155.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "                    Environment.SetEnvironmentVariable(DATAFOLDER_ENV_NAME' System.IO.Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' Library.AutoUpdater.AutoUpdateSettings.AppName));" is 205.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "		Version sqliteVersion = new Version ((string)Duplicati.Library.SQLiteHelper.SQLiteLoader.SQLiteConnectionType.GetProperty ("SQLiteVersion").GetValue (null' null)); " is 163.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "			Program.UseDatabaseEncryption = commandlineOptions.ContainsKey ("unencrypted-database") ? !Library.Utility.Utility.ParseBool (commandlineOptions ["unencrypted-database"]' true) : false; " is 185.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "			                    Program.UseDatabaseEncryption = commandlineOptions.ContainsKey("unencrypted-database") ? !Library.Utility.Utility.ParseBool(commandlineOptions["unencrypted-database"]' true) : true;" is 181.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "			Duplicati.Library.SQLiteHelper.DatabaseUpgrader.UpgradeDatabase (con' DatabasePath' typeof(Duplicati.Server.Database.Connection)); " is 130.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "			PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromDays (1)); " is 127.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The length of the statement  "			PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromHours (1)); " is 128.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,StartOrStopUsageReporter,The length of the statement  "	var disableUsageReporter = string.Equals (DataConnection.ApplicationSettings.UsageReporterLevel' "none"' StringComparison.InvariantCultureIgnoreCase) || string.Equals (DataConnection.ApplicationSettings.UsageReporterLevel' "disabled"' StringComparison.InvariantCultureIgnoreCase); " is 280.
Long Statement,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,StartOrStopUsageReporter,The length of the statement  "	if (!Enum.TryParse<Library.UsageReporter.ReportType> (DataConnection.ApplicationSettings.UsageReporterLevel' true' out reportLevel)) " is 132.
Long Statement,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The length of the statement  "						start = GetNextValidTime (start' new DateTime (Math.Max (DateTime.UtcNow.AddSeconds (1).Ticks' start.AddSeconds (1).Ticks)' DateTimeKind.Utc)' sc.Repeat' sc.AllowedDays); " is 170.
Long Statement,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The length of the statement  "			using (System.IO.StreamReader sr = new System.IO.StreamReader (Duplicati.Library.Utility.Utility.IsClientLinux ? UnixSupport.File.OpenExclusive (e.FullPath' System.IO.FileAccess.ReadWrite) : new System.IO.FileStream (e.FullPath' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.None))) " is 308.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,GetCommandLine,The length of the statement  "	var exe = System.IO.Path.Combine (Library.AutoUpdater.UpdaterManager.InstalledBaseDir' System.IO.Path.GetFileName (typeof(Duplicati.CommandLine.Commands).Assembly.Location)); " is 174.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The length of the statement  "			var all_tasks = string.Equals (options ["store-task-config"]' "all"' StringComparison.InvariantCultureIgnoreCase) || string.Equals (options ["store-task-config"]' "*"' StringComparison.InvariantCultureIgnoreCase); " is 213.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The length of the statement  "						taskdata = Program.DataConnection.Backups.Where (x => !x.IsTemporary).Select (x => Program.DataConnection.PrepareBackupForExport (Program.DataConnection.GetBackup (x.ID))); " is 172.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The length of the statement  "					var r = controller.Repair (data.FilterStrings == null ? null : new Library.Utility.FilterExpression (data.FilterStrings)); " is 122.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The length of the statement  "						Program.DataConnection.RegisterNotification (NotificationType.Information' "Bugreport ready"' "Bugreport is ready for download"' null' null' "bug-report:created:" + tempid' (n' a) => n); " is 186.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The length of the statement  "		Program.DataConnection.LogError (data.Backup.ID' string.Format ("Failed while executing \"{0}\" with id: {1}"' data.Operation' data.Backup.ID)' ex); " is 148.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadataError,The length of the statement  "	Program.DataConnection.RegisterNotification (NotificationType.Error' backup.IsTemporary ? "Error" : string.Format ("Error while running {0}"' backup.Name)' ex.Message' ex' backup.ID' "backup:show-log"' (n' a) => { " is 213.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadata,The length of the statement  "		backup.Metadata ["LastStarted"] = Library.Utility.Utility.SerializeDateTime (((Duplicati.Library.Interface.IBasicResults)o).BeginTime.ToUniversalTime ()); " is 154.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadata,The length of the statement  "		backup.Metadata ["LastFinished"] = Library.Utility.Utility.SerializeDateTime (((Duplicati.Library.Interface.IBasicResults)o).EndTime.ToUniversalTime ()); " is 153.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadata,The length of the statement  "		backup.Metadata ["LastBackupStarted"] = Library.Utility.Utility.SerializeDateTime (((Duplicati.Library.Interface.IBasicResults)o).BeginTime.ToUniversalTime ()); " is 160.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadata,The length of the statement  "		backup.Metadata ["LastBackupFinished"] = Library.Utility.Utility.SerializeDateTime (((Duplicati.Library.Interface.IBasicResults)o).EndTime.ToUniversalTime ()); " is 159.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadata,The length of the statement  "			Program.DataConnection.RegisterNotification (NotificationType.Error' backup.IsTemporary ? "Warning" : string.Format ("Warning while running {0}"' backup.Name)' r.FilesWithError > 0 ? string.Format ("Errors affected {0} file(s) "' r.FilesWithError) : string.Format ("Got {0} warning(s) "' r.Warnings.Count ())' null' backup.ID' "backup:show-log"' (n' a) => { " is 357.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadata,The length of the statement  "			var type = r.ParsedResult == Library.Interface.ParsedResultType.Warning ? NotificationType.Warning : NotificationType.Error; " is 124.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadata,The length of the statement  "			var title = r.ParsedResult == Library.Interface.ParsedResultType.Warning ? (backup.IsTemporary ? "Warning" : string.Format ("Warning while running {0}"' backup.Name)) : (backup.IsTemporary ? "Error" : string.Format ("Error while running {0}"' backup.Name)); " is 257.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,UpdateMetadata,The length of the statement  "			var message = r.ParsedResult == Library.Interface.ParsedResultType.Warning ? string.Format ("Got {0} warning(s) "' r.Warnings.Count ()) : string.Format ("Got {0} error(s) "' r.Errors.Count ()); " is 193.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,DisableModule,The length of the statement  "		options ["enable-module"] = string.Join ("'"' emods.Where (x => module.Equals (x' StringComparison.InvariantCultureIgnoreCase))); " is 129.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,ApplyFilter,The length of the statement  "		let exp = n.Expression.StartsWith ("[") && n.Expression.EndsWith ("]") ? SpecialFolders.ExpandEnvironmentVariablesRegexp (n.Expression) : SpecialFolders.ExpandEnvironmentVariables (n.Expression) " is 194.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,ApplyFilter,The length of the statement  "		select (Duplicati.Library.Utility.IFilter)(new Duplicati.Library.Utility.FilterExpression (exp' n.Include))).Aggregate ((a' b) => Duplicati.Library.Utility.FilterExpression.Combine (a' b)); " is 189.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,GetCommonOptions,The length of the statement  "	select n).ToDictionary (k => k.Name.StartsWith ("--"' StringComparison.Ordinal) ? k.Name.Substring (2) : k.Name' k => k.Value); " is 127.
Long Statement,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,GetCommonFilter,The length of the statement  "	select (Duplicati.Library.Utility.IFilter)(new Duplicati.Library.Utility.FilterExpression (exp' n.Include))).Aggregate ((a' b) => Duplicati.Library.Utility.FilterExpression.Combine (a' b)); " is 189.
Long Statement,Duplicati.Server,SpecialFolders,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SpecialFolders.cs,TryAdd,The length of the statement  "		if (!string.IsNullOrWhiteSpace (folder) && System.IO.Path.IsPathRooted (folder) && System.IO.Directory.Exists (folder)) { " is 121.
Long Statement,Duplicati.Server,SpecialFolders,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SpecialFolders.cs,GetSourceNames,The length of the statement  "			return new KeyValuePair<string' string> (x' x.Substring (0' x.Length - 1).Substring (x.Substring (0' x.Length - 1).LastIndexOf ("/") + 1)); " is 139.
Long Statement,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The length of the statement  "			if (!Enum.TryParse<Library.AutoUpdater.ReleaseType> (Program.DataConnection.ApplicationSettings.UpdateChannel' true' out rt)) " is 125.
Long Statement,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The length of the statement  "			rt = rt == Duplicati.Library.AutoUpdater.ReleaseType.Unknown ? Duplicati.Library.AutoUpdater.AutoUpdateSettings.DefaultUpdateChannel : rt; " is 138.
Long Statement,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The length of the statement  "			if (Program.DataConnection.ApplicationSettings.UpdatedVersion != null && Duplicati.Library.AutoUpdater.UpdaterManager.TryParseVersion (Program.DataConnection.ApplicationSettings.UpdatedVersion.Version) > System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version) { " is 276.
Long Statement,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The length of the statement  "				Program.DataConnection.RegisterNotification (NotificationType.Information' "Found update"' Program.DataConnection.ApplicationSettings.UpdatedVersion.Displayname' null' null' "update:new"' (self' all) => { " is 204.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetMetadata,The length of the statement  "		return ReadFromDb (rd => new KeyValuePair<string' string> (ConvertToString (rd' 0)' ConvertToString (rd' 1))' @"SELECT ""Name""' ""Value"" FROM ""Metadata"" WHERE ""BackupID"" = ? "' id).ToDictionary (k => k.Key' k => k.Value); " is 227.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,SetMetadata,The length of the statement  "			}' values ?? new Dictionary<string' string> ()' @"INSERT INTO ""Metadata"" (""BackupID""' ""Name""' ""Value"") VALUES (?' ?' ?)"' f => new object[] { " is 149.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetFilters,The length of the statement  "		}' @"SELECT ""Order""' ""Include""' ""Expression"" FROM ""Filter"" WHERE ""BackupID"" = ? ORDER BY ""Order"" "' id).ToArray (); " is 127.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,SetFilters,The length of the statement  "			}' values' @"INSERT INTO ""Filter"" (""BackupID""' ""Order""' ""Include""' ""Expression"") VALUES (?' ?' ?' ?)"' f => new object[] { " is 132.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetSources,The length of the statement  "		return ReadFromDb (rd => ConvertToString (rd' 0)' @"SELECT ""Path"" FROM ""Source"" WHERE ""BackupID"" = ?"' id).ToArray (); " is 124.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetSchedule,The length of the statement  "		}' @"SELECT ""ID""' ""Tags""' ""Time""' ""Repeat""' ""LastRun""' ""Rule"" FROM ""Schedule"" WHERE ID = ?"' id).FirstOrDefault (); " is 129.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,AddOrUpdateBackup,The length of the statement  "				var guess = System.IO.Path.Combine (folder' System.IO.Path.ChangeExtension (Duplicati.Library.Main.DatabaseLocator.GenerateRandomName ()' ".sqlite")); " is 150.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,AddOrUpdateBackup,The length of the statement  "			}' update ? @"UPDATE ""Backup"" SET ""Name""=?' ""Tags""=?' ""TargetURL""=? WHERE ""ID""=?" : @"INSERT INTO ""Backup"" (""Name""' ""Tags""' ""TargetURL""' ""DBPath"") VALUES (?'?'?'?)"' n => { " is 192.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,AddOrUpdateSchedule,The length of the statement  "		}' update ? @"UPDATE ""Schedule"" SET ""Tags""=?' ""Time""=?' ""Repeat""=?' ""LastRun""=?' ""Rule""=? WHERE ""ID""=?" : @"INSERT INTO ""Schedule"" (""Tags""' ""Time""' ""Repeat""' ""LastRun""' ""Rule"") VALUES (?'?'?'?'?)"' n => new object[] { " is 243.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,DismissNotification,The length of the statement  "		Program.DataConnection.ApplicationSettings.UnackedError = notifications.Where (x => x.ID != id && x.Type == Duplicati.Server.Serialization.NotificationType.Error).Any (); " is 170.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,DismissNotification,The length of the statement  "		Program.DataConnection.ApplicationSettings.UnackedWarning = notifications.Where (x => x.ID != id && x.Type == Duplicati.Server.Serialization.NotificationType.Warning).Any (); " is 174.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetUISettings,The length of the statement  "		return ReadFromDb (rd => new KeyValuePair<string' string> (ConvertToString (rd' 0) ?? ""' ConvertToString (rd' 1) ?? "")' @"SELECT ""Key""' ""Value"" FROM ""UIStorage"" WHERE ""Scheme"" = ?"' scheme).ToDictionary (x => x.Key' x => x.Value); " is 240.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,DeleteFromDb,The length of the statement  "				throw new Exception (string.Format ("Too many records attempted deleted from table {0} for id {1}: {2}"' tablename' id' r)); " is 124.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetORMFields,The length of the statement  "	var flags = System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public; " is 142.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ReadFromDb,The length of the statement  "	var sql = string.Format (@"SELECT ""{0}"" FROM ""{1}"" {2} {3}"' string.Join (@"""' """' properties.Select (x => x.Name))' typeof(T).Name' string.IsNullOrWhiteSpace (whereclause) ? "" : " WHERE "' whereclause ?? ""); " is 216.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,OverwriteAndUpdateDb,The length of the statement  "		sql = string.Format (@"UPDATE ""{0}"" SET {1} WHERE ""ID""=?"' typeof(T).Name' string.Join (@"' "' properties.Select (x => string.Format (@"""{0}""=?"' x.Name)))); " is 163.
Long Statement,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,OverwriteAndUpdateDb,The length of the statement  "		sql = string.Format (@"INSERT INTO ""{0}"" (""{1}"") VALUES ({2})"' typeof(T).Name' string.Join (@"""' """' properties.Select (x => x.Name))' string.Join (@"' "' properties.Select (x => "?"))); " is 193.
Long Statement,Duplicati.Server.Database,ServerSettings,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\ServerSettings.cs,ReloadSettings,The length of the statement  "		foreach (var n in typeof(CONST).GetFields (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Static).Select (x => (string)x.GetValue (null))) " is 208.
Long Statement,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,FindXSRFToken,The length of the statement  "		var xsrfq = request.Form [XSRF_HEADER_NAME] ?? request.Form [Duplicati.Library.Utility.Uri.UrlEncode (XSRF_HEADER_NAME)]; " is 121.
Long Statement,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,FindXSRFToken,The length of the statement  "		var xsrfq = request.QueryString [XSRF_HEADER_NAME] ?? request.QueryString [Duplicati.Library.Utility.Uri.UrlEncode (XSRF_HEADER_NAME)]; " is 135.
Long Statement,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,FindAuthCookie,The length of the statement  "	var authcookie = request.Cookies [AUTH_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (AUTH_COOKIE_NAME)]; " is 122.
Long Statement,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,FindAuthCookie,The length of the statement  "	var authquery = request.QueryString ["auth-token"] ?? request.QueryString [Library.Utility.Uri.UrlEncode ("auth-token")]; " is 121.
Long Statement,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,HasXSRFCookie,The length of the statement  "	var xsrfcookie = request.Cookies [XSRF_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (XSRF_COOKIE_NAME)]; " is 122.
Long Statement,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The length of the statement  "				var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)]; " is 122.
Long Statement,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The length of the statement  "	var limitedAccess = request.Uri.AbsolutePath.StartsWith (RESTHandler.API_URI_PATH' StringComparison.InvariantCultureIgnoreCase); " is 128.
Long Statement,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The length of the statement  "	if (request.Uri.AbsolutePath.StartsWith (CAPTCHA_IMAGE_URI' StringComparison.InvariantCultureIgnoreCase) && request.Method == "GET") " is 132.
Long Statement,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The length of the statement  "	if ("/".Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase) || "/index.html".Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) { " is 185.
Long Statement,Duplicati.Server.WebServer,Server,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\Server.cs,CreateServer,The length of the statement  "                        userroot.StartsWith(Library.Utility.Utility.AppendDirSeparator(System.Reflection.Assembly.GetExecutingAssembly().Location)' Library.Utility.Utility.ClientFilenameStringComparision)" is 180.
Long Statement,Duplicati.Server.WebServer,Server,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\Server.cs,CreateServer,The length of the statement  "                        userroot.StartsWith(Library.Utility.Utility.AppendDirSeparator(Program.StartupPath)' Library.Utility.Utility.ClientFilenameStringComparision)" is 141.
Long Statement,Duplicati.Server.WebServer,Server,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\Server.cs,CreateServer,The length of the statement  "	if (install_webroot != webroot && System.IO.Directory.Exists (System.IO.Path.Combine (install_webroot' "customized"))) { " is 120.
Long Statement,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,HandleControlCGI,The length of the statement  "	DoProcess (request' response' session' method' module.Name.ToLowerInvariant ()' (request.Method.ToUpper () == "POST" ? request.Form : request.QueryString) ["id"].Value); " is 169.
Long Statement,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,ParseRequestCulture,The length of the statement  "	return ParseRequestCulture (string.Format ("{0}'{1}"' info.Request.Headers ["X-UI-Language"]' info.Request.Headers ["Accept-Language"])); " is 137.
Long Statement,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,ParseRequestCulture,The length of the statement  "			float.TryParse (y.Substring (2)' System.Globalization.NumberStyles.Float' System.Globalization.CultureInfo.InvariantCulture' out f); " is 132.
Long Statement,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,ParseRequestCulture,The length of the statement  "	.Where (x => !string.IsNullOrWhiteSpace (x) && Library.Localization.LocalizationService.ParseCulture (x) != null).Select (x => Library.Localization.LocalizationService.ParseCulture (x))// And get the first that works " is 216.
Long Statement,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,DoProcess,The length of the statement  "						var r = info.Request.GetType ().GetField ("_queryString"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance); " is 142.
Long Statement,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,DoProcess,The length of the statement  "					var r = info.Request.GetType ().GetMethod ("AssignForm"' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance' null' new Type[] { " is 159.
Long Statement,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateRandomAnswer,The length of the statement  "	return new string (Enumerable.Range (0' len).Select (x => allowedchars [rnd.Next (0' allowedchars.Length)]).ToArray ()); " is 120.
Long Statement,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The length of the statement  "							graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y)); " is 168.
Long Statement,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The length of the statement  "							graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y)); " is 152.
Long Statement,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The length of the statement  "							graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)); " is 151.
Long Statement,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The length of the statement  "					graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y)); " is 192.
Long Statement,Duplicati.Server.WebServer.RESTMethods,MSSQL,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\MSSQL.cs,RealGET,The length of the statement  "	if (!mssqlUtility.IsMSSQLInstalled || !new WindowsPrincipal (WindowsIdentity.GetCurrent ()).IsInRole (WindowsBuiltInRole.Administrator)) { " is 138.
Long Statement,Duplicati.Server.WebServer.RESTMethods,HyperV,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\HyperV.cs,RealGET,The length of the statement  "	if (!hypervUtility.IsHyperVInstalled || !new WindowsPrincipal (WindowsIdentity.GetCurrent ()).IsInRole (WindowsBuiltInRole.Administrator)) { " is 140.
Long Statement,Duplicati.Server.WebServer.RESTMethods,SystemInfo,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\SystemInfo.cs,SystemData,The length of the statement  "	var browserlanguage = RESTHandler.ParseDefaultRequestCulture (info) ?? System.Globalization.CultureInfo.InvariantCulture; " is 121.
Long Statement,Duplicati.Server.WebServer.RESTMethods,SystemInfo,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\SystemInfo.cs,SystemData,The length of the statement  "		MonoVersion = Duplicati.Library.Utility.Utility.IsMono ? Duplicati.Library.Utility.Utility.MonoVersion.ToString () : null' " is 122.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The length of the statement  "	var output_template = "<html><body><script type=\"text/javascript\">var jso = 'JSO'; var rp = null; try { rp = parent['CBM']; } catch (e) {}; if (rp) { rp('MSG'' jso); } else { alert; rp('MSG'); };</script></body></html>"; " is 222.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The length of the statement  "					while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) " is 148.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The length of the statement  "					if (Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) { " is 134.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The length of the statement  "						info.BodyWriter.Write (output_template.Replace ("MSG"' "There already exists a backup with the name: " + basename.Replace ("\'"' "\\'"))); " is 138.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The length of the statement  "				info.BodyWriter.Write (output_template.Replace ("MSG"' "Import completed' but a browser issue prevents loading the contents. Try using the direct import method instead.")); " is 172.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The length of the statement  "		info.BodyWriter.Write (output_template.Replace ("MSG"' ex.Message.Replace ("\'"' "\\'").Replace ("\r"' "\\r").Replace ("\n"' "\\n"))); " is 134.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,POST,The length of the statement  "				if (Program.DataConnection.Backups.Where (x => x.Name.Equals (data.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) { " is 135.
Long Statement,Duplicati.Server.WebServer.RESTMethods,ServerSettings,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\ServerSettings.cs,GET,The length of the statement  "	var adv_props = Program.DataConnection.GetSettings (Database.Connection.SERVER_SETTINGS_ID).Where (x => !string.IsNullOrWhiteSpace (x.Name)).Union (Program.DataConnection.Settings.Where (x => !string.IsNullOrWhiteSpace (x.Name) && x.Name.StartsWith ("--"' StringComparison.Ordinal))); " is 284.
Long Statement,Duplicati.Server.WebServer.RESTMethods,ServerSettings,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\ServerSettings.cs,PATCH,The length of the statement  "		var serversettings = data.Where (x => !string.IsNullOrWhiteSpace (x.Key)).ToDictionary (x => x.Key' x => x.Key.StartsWith ("--"' StringComparison.Ordinal) ? null : x.Value); " is 173.
Long Statement,Duplicati.Server.WebServer.RESTMethods,ServerSettings,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\ServerSettings.cs,PATCH,The length of the statement  "		var globalsettings = data.Where (x => !string.IsNullOrWhiteSpace (x.Key) && x.Key.StartsWith ("--"' StringComparison.Ordinal)); " is 127.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,SearchFiles,The length of the statement  "	var foldercontents = Duplicati.Library.Utility.Utility.ParseBool (info.Request.QueryString ["folder-contents"].Value' false); " is 125.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,ListFileSets,The length of the statement  "	var r = Runner.Run (Runner.CreateTask (DuplicatiOperation.List' backup' extra)' false) as Duplicati.Library.Interface.IListResults; " is 131.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,ListFileSets,The length of the statement  "	if (r.EncryptedFiles && backup.Settings.Any (x => string.Equals ("--no-encryption"' x.Name' StringComparison.InvariantCultureIgnoreCase))) " is 138.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,FetchLogData,The length of the statement  "			info.OutputOK (LogData.DumpTable (cmd' "LogData"' "ID"' info.Request.QueryString ["offset"].Value' info.Request.QueryString ["pagesize"].Value)); " is 145.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,FetchRemoteLogData,The length of the statement  "			var dt = LogData.DumpTable (cmd' "RemoteOperation"' "ID"' info.Request.QueryString ["offset"].Value' info.Request.QueryString ["pagesize"].Value); " is 146.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,parsePaths,The length of the statement  "	if (!string.IsNullOrWhiteSpace (rawpaths) && rawpaths.StartsWith ("["' StringComparison.Ordinal) && rawpaths.EndsWith ("]"' StringComparison.Ordinal)) " is 150.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DoRepair,The length of the statement  "	var task = Runner.CreateTask (repairUpdate ? DuplicatiOperation.RepairUpdate : DuplicatiOperation.Repair' backup' extra' filters); " is 130.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,POST,The length of the statement  "				var ipx = Serializer.Deserialize<Database.Backup> (new StringReader (Newtonsoft.Json.JsonConvert.SerializeObject (bk))); " is 120.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,PUT,The length of the statement  "				if (Program.DataConnection.Backups.Where (x => x.Name.Equals (data.Backup.Name' StringComparison.InvariantCultureIgnoreCase) && x.ID != data.Backup.ID).Any ()) { " is 161.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Acknowledgements,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Acknowledgements.cs,GET,The length of the statement  "	var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "acknowledgements.txt"); " is 154.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Changelog,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Changelog.cs,GET,The length of the statement  "		var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt"); " is 147.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Tags,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Tags.cs,GET,The length of the statement  "	var r = from n in Serializable.ServerSettings.CompressionModules.Union (Serializable.ServerSettings.EncryptionModules).Union (Serializable.ServerSettings.BackendModules).Union (Serializable.ServerSettings.GenericModules) " is 220.
Long Statement,Duplicati.Server.WebServer.RESTMethods,ServerSetting,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\ServerSetting.cs,GET,The length of the statement  "		var prop = Program.DataConnection.Settings.FirstOrDefault (x => string.Equals (key' x.Name' StringComparison.InvariantCultureIgnoreCase)); " is 138.
Long Statement,Duplicati.Server.WebServer.RESTMethods,ServerSetting,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\ServerSetting.cs,PUT,The length of the statement  "		var prop = settings.Where (x => string.Equals (key' x.Name' StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault (); " is 124.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,Process,The length of the statement  "			var node = SpecialFolders.Nodes.Where (x => x.id.Equals (tk' StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault (); " is 125.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,Process,The length of the statement  "			res = DriveInfo.GetDrives ().Where (di => (di.DriveType == DriveType.Fixed || di.DriveType == DriveType.Network || di.DriveType == DriveType.Removable) && di.IsReady// Only try to create TreeNode entries for drives who were ready 'now' " is 235.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,TryCreateTreeNodeForDrive,The length of the statement  "			text = (string.IsNullOrWhiteSpace (driveInfo.VolumeLabel) ? driveInfo.RootDirectory.FullName.Replace ('\\'' ' ') : driveInfo.VolumeLabel + " - " + driveInfo.RootDirectory.FullName.Replace ('\\'' ' ')) + "(" + driveInfo.DriveType + ")"' " is 235.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,ListFolderAsNodes,The length of the statement  "	Func<string' bool> hasSubElements = p => skipFiles ? Directory.EnumerateDirectories (p).Any () : Directory.EnumerateFileSystemEntries (p).Any (); " is 145.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,ListFolderAsNodes,The length of the statement  "	var systemIO = Library.Utility.Utility.IsClientLinux ? (Duplicati.Library.Snapshots.ISystemIO)new Duplicati.Library.Snapshots.SystemIOLinux () : (Duplicati.Library.Snapshots.ISystemIO)new Duplicati.Library.Snapshots.SystemIOWindows (); " is 235.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,ListFolderAsNodes,The length of the statement  "				iconCls = isFolder ? (accesible ? (isSymlink ? "x-tree-icon-symlink" : "x-tree-icon-parent") : "x-tree-icon-locked") : "x-tree-icon-leaf"' " is 138.
Long Statement,Duplicati.Server.WebServer.RESTMethods,LogData,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\LogData.cs,GET,The length of the statement  "			res = DumpTable (x' "ErrorLog"' "Timestamp"' info.Request.QueryString ["offset"].Value' info.Request.QueryString ["pagesize"].Value); " is 133.
Long Statement,Duplicati.Server.WebServer.RESTMethods,LogData,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\LogData.cs,DumpTable,The length of the statement  "	if (!string.IsNullOrWhiteSpace (offset_str) && long.TryParse (offset_str' out offset) && !string.IsNullOrEmpty (pagingfield)) { " is 127.
Long Statement,Duplicati.Server.WebServer.RESTMethods,RemoteOperation,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\RemoteOperation.cs,TestConnection,The length of the statement  "			info.ReportServerError (string.Format (@"incorrect-host-key:""{0}""' accepted-host-key:""{1}"""' hex.ReportedHostKey' hex.AcceptedHostKey)); " is 140.
Long Statement,Duplicati.Server.WebServer.RESTMethods,BackupDefaults,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\BackupDefaults.cs,GET,The length of the statement  "		using (var s = new System.IO.StreamReader (System.Reflection.Assembly.GetExecutingAssembly ().GetManifestResourceStream (System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Name + ".newbackup.json"))) " is 210.
Long Statement,Duplicati.Server.WebServer.RESTMethods,BackupDefaults,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\BackupDefaults.cs,MergeJsonObjects,The length of the statement  "					sp.Value = new Newtonsoft.Json.Linq.JArray (((Newtonsoft.Json.Linq.JArray)sp.Value).Union ((Newtonsoft.Json.Linq.JArray)p.Value)); " is 130.
Long Statement,Duplicati.Server.WebServer.RESTMethods,WebModule,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\WebModule.cs,POST,The length of the statement  "	var m = Duplicati.Library.DynamicLoader.WebLoader.Modules.Where (x => x.Key.Equals (key' StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault (); " is 153.
Long Statement,Duplicati.Server.WebServer.RESTMethods,WebModule,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\WebModule.cs,POST,The length of the statement  "		Result = m.Execute (info.Request.Form.Where (x => !x.Name.Equals ("command"' StringComparison.InvariantCultureIgnoreCase)).ToDictionary (x => x.Name' x => x.Value)) " is 164.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Licenses,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Licenses.cs,GET,The length of the statement  "	var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (Duplicati.Library.Utility.Utility.getEntryAssembly ().Location)' "licenses"); " is 145.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Captcha,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Captcha.cs,SolvedCaptcha,The length of the statement  "		return tp.Attempts >= 0 && string.Equals (tp.Answer' answer' StringComparison.InvariantCultureIgnoreCase) && tp.Target == target && tp.Expires >= DateTime.Now; " is 159.
Long Statement,Duplicati.Server.WebServer.RESTMethods,Captcha,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Captcha.cs,POST,The length of the statement  "				info.ReportClientError ("Too many captchas' wait 2 minutes and try again"' System.Net.HttpStatusCode.ServiceUnavailable); " is 121.
Long Statement,Duplicati.Server.Strings,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Strings.cs,ServerdatafolderLong,The length of the statement  "	return LC.L (@"Duplicati needs to store a small database with all settings. Use this option to choose where the settings are stored. This option can also be set with the environment variable {0}."' envname); " is 207.
Long Statement,Duplicati.Server.Strings,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Strings.cs,ServerencryptionkeyLong,The length of the statement  "	return LC.L (@"This option sets the encryption key used to scramble the local settings database. This option can also be set with the environment variable {0}. Use the option --{1} to disable the database scrambling."' envname' decryptionoption); " is 246.
Long Statement,Duplicati.Server.Strings,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Strings.cs,InvalidTimeSetupError,The length of the statement  "	return LC.L (@"Unable to find a valid date' given the start date {0}' the repetition interval {1} and the allowed days {2}"' startdate' interval' alloweddays); " is 159.
Long Statement,Duplicati.Server.Strings,Server,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Strings.cs,ServerStartFailure,The length of the statement  "	return LC.L (@"Unable to open a socket for listening' tried ports: {0}"' string.Join ("'"' from n in (portstried ?? new int[0]) " is 127.
Complex Conditional,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The conditional expression  "s.Equals ("help"' StringComparison.InvariantCultureIgnoreCase) || s.Equals ("/help"' StringComparison.InvariantCultureIgnoreCase) || s.Equals ("usage"' StringComparison.InvariantCultureIgnoreCase) || s.Equals ("/usage"' StringComparison.InvariantCultureIgnoreCase)"  is complex.
Complex Conditional,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,StartCleanupTask,The conditional expression  "m_cleanupTask == null || m_cleanupTask.IsCompleted || m_cleanupTask.IsFaulted || m_cleanupTask.IsCanceled"  is complex.
Empty Catch Block,Duplicati.Server,LiveControls,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LiveControls.cs,LiveControls,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,LiveControls,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LiveControls.cs,LiveControls,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,LiveControls,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LiveControls.cs,SystemEvents_PowerModeChanged,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,OpenDatabase,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,SpecialFolders,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SpecialFolders.cs,TryAdd,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,SpecialFolders,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SpecialFolders.cs,TryAdd,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,SpecialFolders,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SpecialFolders.cs,SpecialFolders,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,SpecialFolders,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SpecialFolders.cs,GetSourceNames,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The method has an empty catch block.
Empty Catch Block,Duplicati.Server,LogWriteHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LogWriteHandler.cs,WriteMessage,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ConvertToInt64,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ConvertToEnum,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.WebServer,Server,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\Server.cs,Server,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,FetchRemoteLogData,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,Process,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,ListFolderAsNodes,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,ListFolderAsNodes,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.WebServer.RESTMethods,Filesystem,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Filesystem.cs,ListFolderAsNodes,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.WebServer.RESTMethods,BackupDefaults,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\BackupDefaults.cs,GET,The method has an empty catch block.
Empty Catch Block,Duplicati.Server.WebServer.RESTMethods,BackupDefaults,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\BackupDefaults.cs,GET,The method has an empty catch block.
Magic Number,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The following statement contains a magic number: try {  	try {  		//This will also create Program.DATAFOLDER if it does not exist  		Instance = new SingleInstance (Duplicati.Library.AutoUpdater.AutoUpdateSettings.AppName' Program.DATAFOLDER);  	} catch (Exception ex) {  		if (writeConsole) {  			Console.WriteLine (Strings.Program.StartupFailure (ex));  			return;  		} else {  			throw new Exception (Strings.Program.StartupFailure (ex));  		}  	}  	if (!Instance.IsFirstInstance) {  		if (writeConsole) {  			Console.WriteLine (Strings.Program.AnotherInstanceDetected);  			return;  		} else {  			throw new SingleInstance.MultipleInstanceException (Strings.Program.AnotherInstanceDetected);  		}  	}  	// Setup the log redirect  	Duplicati.Library.Logging.Log.CurrentLog = Program.LogHandler;  	if (commandlineOptions.ContainsKey ("log-file")) {  		if (System.IO.File.Exists (commandlineOptions ["log-file"]))  			System.IO.File.Delete (commandlineOptions ["log-file"]);  		var loglevel = Duplicati.Library.Logging.LogMessageType.Error;  		if (commandlineOptions.ContainsKey ("log-level"))  			Enum.TryParse<Duplicati.Library.Logging.LogMessageType> (commandlineOptions ["log-level"]' true' out loglevel);  		Program.LogHandler.SetServerFile (commandlineOptions ["log-file"]' loglevel);  	}  	Version sqliteVersion = new Version ((string)Duplicati.Library.SQLiteHelper.SQLiteLoader.SQLiteConnectionType.GetProperty ("SQLiteVersion").GetValue (null' null));  	if (sqliteVersion < new Version (3' 6' 3)) {  		if (writeConsole) {  			//The official Mono SQLite provider is also broken with less than 3.6.3  			Console.WriteLine (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  			return;  		} else {  			throw new Exception (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  		}  	}  	//Create the connection instance  	var con = Duplicati.Library.SQLiteHelper.SQLiteLoader.LoadConnection ();  	try {  		DatabasePath = System.IO.Path.Combine (Program.DATAFOLDER' "Duplicati-server.sqlite");  		if (!System.IO.Directory.Exists (System.IO.Path.GetDirectoryName (DatabasePath)))  			System.IO.Directory.CreateDirectory (System.IO.Path.GetDirectoryName (DatabasePath));  		#if DEBUG  		//Default is to not use encryption for debugging  		Program.UseDatabaseEncryption = commandlineOptions.ContainsKey ("unencrypted-database") ? !Library.Utility.Utility.ParseBool (commandlineOptions ["unencrypted-database"]' true) : false;  		#else  		                    Program.UseDatabaseEncryption = commandlineOptions.ContainsKey("unencrypted-database") ? !Library.Utility.Utility.ParseBool(commandlineOptions["unencrypted-database"]' true) : true; #endif  		con.ConnectionString = "Data Source=" + DatabasePath;  		//Attempt to open the database' handling any encryption present  		OpenDatabase (con);  		Duplicati.Library.SQLiteHelper.DatabaseUpgrader.UpgradeDatabase (con' DatabasePath' typeof(Duplicati.Server.Database.Connection));  	} catch (Exception ex) {  		//Unwrap the reflection exceptions  		if (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  			ex = ex.InnerException;  		if (writeConsole) {  			Console.WriteLine (Strings.Program.DatabaseOpenError (ex.Message));  			return;  		} else {  			throw new Exception (Strings.Program.DatabaseOpenError (ex.Message)' ex);  		}  	}  	DataConnection = new Duplicati.Server.Database.Connection (con);  	if (!DataConnection.ApplicationSettings.FixedInvalidBackupId)  		DataConnection.FixInvalidBackupId ();  	StartOrStopUsageReporter ();  	if (commandlineOptions.ContainsKey ("webservice-password"))  		Program.DataConnection.ApplicationSettings.SetWebserverPassword (commandlineOptions ["webservice-password"]);  	ApplicationExitEvent = new System.Threading.ManualResetEvent (false);  	Duplicati.Library.AutoUpdater.UpdaterManager.OnError += (Exception obj) => {  		Program.DataConnection.LogError (null' "Error in updater"' obj);  	};  	UpdatePoller = new UpdatePollThread ();  	DateTime lastPurge = new DateTime (0);  	System.Threading.TimerCallback purgeTempFilesCallback = x => {  		try {  			if (Math.Abs ((DateTime.Now - lastPurge).TotalHours) < 23)  				return;  			lastPurge = DateTime.Now;  			foreach (var e in Program.DataConnection.GetTempFiles ().Where (f => f.Expires < DateTime.Now)) {  				try {  					if (System.IO.File.Exists (e.Path))  						System.IO.File.Delete (e.Path);  				} catch (Exception ex) {  					Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' e.Path)' ex);  				}  				Program.DataConnection.DeleteTempFile (e.ID);  			}  			Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  				Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' path)' ex);  			});  			string pts;  			if (!commandlineOptions.TryGetValue ("log-retention"' out pts))  				pts = DEFAULT_LOG_RETENTION;  			Program.DataConnection.PurgeLogData (Library.Utility.Timeparser.ParseTimeInterval (pts' DateTime.Now' true));  		} catch (Exception ex) {  			Program.DataConnection.LogError (null' "Failed during temp file cleanup"' ex);  		}  	};  	try {  		PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromDays (1));  	} catch (ArgumentOutOfRangeException) {  		//Bugfix for older Mono' slightly more resources used to avoid large values in the period field  		PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromHours (1));  	}  	LiveControl = new LiveControls (DataConnection.ApplicationSettings);  	LiveControl.StateChanged += new EventHandler (LiveControl_StateChanged);  	LiveControl.ThreadPriorityChanged += new EventHandler (LiveControl_ThreadPriorityChanged);  	LiveControl.ThrottleSpeedChanged += new EventHandler (LiveControl_ThrottleSpeedChanged);  	Program.WorkThread = new Duplicati.Library.Utility.WorkerThread<Runner.IRunnerData> (x => {  		Runner.Run (x' true);  	}' LiveControl.State == LiveControls.LiveControlState.Paused);  	Program.Scheduler = new Scheduler (WorkThread);  	Program.WorkThread.StartingWork += (worker' task) => {  		SignalNewEvent (null' null);  	};  	Program.WorkThread.CompletedWork += (worker' task) => {  		SignalNewEvent (null' null);  	};  	Program.WorkThread.WorkQueueChanged += worker => {  		SignalNewEvent (null' null);  	};  	Program.Scheduler.NewSchedule += new EventHandler (SignalNewEvent);  	Program.WorkThread.OnError += (worker' task' exception) => {  		Program.DataConnection.LogError (task == null ? null : task.BackupID' "Error in worker"' exception);  	};  	var lastscheduleid = LastDataUpdateID;  	Program.StatusEventNotifyer.NewEvent += (sender' e) => {  		if (lastscheduleid != LastDataUpdateID) {  			lastscheduleid = LastDataUpdateID;  			Program.Scheduler.Reschedule ();  		}  	};  	Action<long' Exception> registerTaskResult = (id' ex) => {  		lock (Program.MainLock) {  			// If the new results says it crashed' we store that instead of success  			if (Program.TaskResultCache.Count > 0 && Program.TaskResultCache.Last ().Key == id) {  				if (ex != null && Program.TaskResultCache.Last ().Value == null)  					Program.TaskResultCache.RemoveAt (Program.TaskResultCache.Count - 1);  				else  					return;  			}  			Program.TaskResultCache.Add (new KeyValuePair<long' Exception> (id' ex));  			while (Program.TaskResultCache.Count > MAX_TASK_RESULT_CACHE_SIZE)  				Program.TaskResultCache.RemoveAt (0);  		}  	};  	Program.WorkThread.CompletedWork += (worker' task) => {  		registerTaskResult (task.TaskID' null);  	};  	Program.WorkThread.OnError += (worker' task' exception) => {  		registerTaskResult (task.TaskID' exception);  	};  	Program.WebServer = new WebServer.Server (commandlineOptions);  	if (Program.WebServer.Port != DataConnection.ApplicationSettings.LastWebserverPort)  		ServerPortChanged = true;  	DataConnection.ApplicationSettings.LastWebserverPort = Program.WebServer.Port;  	if (Library.Utility.Utility.ParseBoolOption (commandlineOptions' "ping-pong-keepalive")) {  		Program.PingPongThread = new System.Threading.Thread (PingPongMethod);  		Program.PingPongThread.IsBackground = true;  		Program.PingPongThread.Start ();  	}  	ServerStartedEvent.Set ();  	ApplicationExitEvent.WaitOne ();  } catch (SingleInstance.MultipleInstanceException mex) {  	System.Diagnostics.Trace.WriteLine (Strings.Program.SeriousError (mex.ToString ()));  	if (writeConsole)  		Console.WriteLine (Strings.Program.SeriousError (mex.ToString ()));  	else  		throw mex;  } catch (Exception ex) {  	System.Diagnostics.Trace.WriteLine (Strings.Program.SeriousError (ex.ToString ()));  	if (writeConsole)  		Console.WriteLine (Strings.Program.SeriousError (ex.ToString ()));  	else  		throw new Exception (Strings.Program.SeriousError (ex.ToString ())' ex);  } finally {  	StatusEventNotifyer.SignalNewEvent ();  	if (UpdatePoller != null)  		UpdatePoller.Terminate ();  	if (Scheduler != null)  		Scheduler.Terminate (true);  	if (WorkThread != null)  		WorkThread.Terminate (true);  	if (Instance != null)  		Instance.Dispose ();  	if (PurgeTempFilesTimer != null)  		PurgeTempFilesTimer.Dispose ();  	Library.UsageReporter.Reporter.ShutDown ();  	if (PingPongThread != null)  		try {  			PingPongThread.Abort ();  		} catch {  		}  	if (LogHandler != null)  		LogHandler.Dispose ();  }  
Magic Number,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The following statement contains a magic number: try {  	try {  		//This will also create Program.DATAFOLDER if it does not exist  		Instance = new SingleInstance (Duplicati.Library.AutoUpdater.AutoUpdateSettings.AppName' Program.DATAFOLDER);  	} catch (Exception ex) {  		if (writeConsole) {  			Console.WriteLine (Strings.Program.StartupFailure (ex));  			return;  		} else {  			throw new Exception (Strings.Program.StartupFailure (ex));  		}  	}  	if (!Instance.IsFirstInstance) {  		if (writeConsole) {  			Console.WriteLine (Strings.Program.AnotherInstanceDetected);  			return;  		} else {  			throw new SingleInstance.MultipleInstanceException (Strings.Program.AnotherInstanceDetected);  		}  	}  	// Setup the log redirect  	Duplicati.Library.Logging.Log.CurrentLog = Program.LogHandler;  	if (commandlineOptions.ContainsKey ("log-file")) {  		if (System.IO.File.Exists (commandlineOptions ["log-file"]))  			System.IO.File.Delete (commandlineOptions ["log-file"]);  		var loglevel = Duplicati.Library.Logging.LogMessageType.Error;  		if (commandlineOptions.ContainsKey ("log-level"))  			Enum.TryParse<Duplicati.Library.Logging.LogMessageType> (commandlineOptions ["log-level"]' true' out loglevel);  		Program.LogHandler.SetServerFile (commandlineOptions ["log-file"]' loglevel);  	}  	Version sqliteVersion = new Version ((string)Duplicati.Library.SQLiteHelper.SQLiteLoader.SQLiteConnectionType.GetProperty ("SQLiteVersion").GetValue (null' null));  	if (sqliteVersion < new Version (3' 6' 3)) {  		if (writeConsole) {  			//The official Mono SQLite provider is also broken with less than 3.6.3  			Console.WriteLine (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  			return;  		} else {  			throw new Exception (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  		}  	}  	//Create the connection instance  	var con = Duplicati.Library.SQLiteHelper.SQLiteLoader.LoadConnection ();  	try {  		DatabasePath = System.IO.Path.Combine (Program.DATAFOLDER' "Duplicati-server.sqlite");  		if (!System.IO.Directory.Exists (System.IO.Path.GetDirectoryName (DatabasePath)))  			System.IO.Directory.CreateDirectory (System.IO.Path.GetDirectoryName (DatabasePath));  		#if DEBUG  		//Default is to not use encryption for debugging  		Program.UseDatabaseEncryption = commandlineOptions.ContainsKey ("unencrypted-database") ? !Library.Utility.Utility.ParseBool (commandlineOptions ["unencrypted-database"]' true) : false;  		#else  		                    Program.UseDatabaseEncryption = commandlineOptions.ContainsKey("unencrypted-database") ? !Library.Utility.Utility.ParseBool(commandlineOptions["unencrypted-database"]' true) : true; #endif  		con.ConnectionString = "Data Source=" + DatabasePath;  		//Attempt to open the database' handling any encryption present  		OpenDatabase (con);  		Duplicati.Library.SQLiteHelper.DatabaseUpgrader.UpgradeDatabase (con' DatabasePath' typeof(Duplicati.Server.Database.Connection));  	} catch (Exception ex) {  		//Unwrap the reflection exceptions  		if (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  			ex = ex.InnerException;  		if (writeConsole) {  			Console.WriteLine (Strings.Program.DatabaseOpenError (ex.Message));  			return;  		} else {  			throw new Exception (Strings.Program.DatabaseOpenError (ex.Message)' ex);  		}  	}  	DataConnection = new Duplicati.Server.Database.Connection (con);  	if (!DataConnection.ApplicationSettings.FixedInvalidBackupId)  		DataConnection.FixInvalidBackupId ();  	StartOrStopUsageReporter ();  	if (commandlineOptions.ContainsKey ("webservice-password"))  		Program.DataConnection.ApplicationSettings.SetWebserverPassword (commandlineOptions ["webservice-password"]);  	ApplicationExitEvent = new System.Threading.ManualResetEvent (false);  	Duplicati.Library.AutoUpdater.UpdaterManager.OnError += (Exception obj) => {  		Program.DataConnection.LogError (null' "Error in updater"' obj);  	};  	UpdatePoller = new UpdatePollThread ();  	DateTime lastPurge = new DateTime (0);  	System.Threading.TimerCallback purgeTempFilesCallback = x => {  		try {  			if (Math.Abs ((DateTime.Now - lastPurge).TotalHours) < 23)  				return;  			lastPurge = DateTime.Now;  			foreach (var e in Program.DataConnection.GetTempFiles ().Where (f => f.Expires < DateTime.Now)) {  				try {  					if (System.IO.File.Exists (e.Path))  						System.IO.File.Delete (e.Path);  				} catch (Exception ex) {  					Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' e.Path)' ex);  				}  				Program.DataConnection.DeleteTempFile (e.ID);  			}  			Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  				Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' path)' ex);  			});  			string pts;  			if (!commandlineOptions.TryGetValue ("log-retention"' out pts))  				pts = DEFAULT_LOG_RETENTION;  			Program.DataConnection.PurgeLogData (Library.Utility.Timeparser.ParseTimeInterval (pts' DateTime.Now' true));  		} catch (Exception ex) {  			Program.DataConnection.LogError (null' "Failed during temp file cleanup"' ex);  		}  	};  	try {  		PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromDays (1));  	} catch (ArgumentOutOfRangeException) {  		//Bugfix for older Mono' slightly more resources used to avoid large values in the period field  		PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromHours (1));  	}  	LiveControl = new LiveControls (DataConnection.ApplicationSettings);  	LiveControl.StateChanged += new EventHandler (LiveControl_StateChanged);  	LiveControl.ThreadPriorityChanged += new EventHandler (LiveControl_ThreadPriorityChanged);  	LiveControl.ThrottleSpeedChanged += new EventHandler (LiveControl_ThrottleSpeedChanged);  	Program.WorkThread = new Duplicati.Library.Utility.WorkerThread<Runner.IRunnerData> (x => {  		Runner.Run (x' true);  	}' LiveControl.State == LiveControls.LiveControlState.Paused);  	Program.Scheduler = new Scheduler (WorkThread);  	Program.WorkThread.StartingWork += (worker' task) => {  		SignalNewEvent (null' null);  	};  	Program.WorkThread.CompletedWork += (worker' task) => {  		SignalNewEvent (null' null);  	};  	Program.WorkThread.WorkQueueChanged += worker => {  		SignalNewEvent (null' null);  	};  	Program.Scheduler.NewSchedule += new EventHandler (SignalNewEvent);  	Program.WorkThread.OnError += (worker' task' exception) => {  		Program.DataConnection.LogError (task == null ? null : task.BackupID' "Error in worker"' exception);  	};  	var lastscheduleid = LastDataUpdateID;  	Program.StatusEventNotifyer.NewEvent += (sender' e) => {  		if (lastscheduleid != LastDataUpdateID) {  			lastscheduleid = LastDataUpdateID;  			Program.Scheduler.Reschedule ();  		}  	};  	Action<long' Exception> registerTaskResult = (id' ex) => {  		lock (Program.MainLock) {  			// If the new results says it crashed' we store that instead of success  			if (Program.TaskResultCache.Count > 0 && Program.TaskResultCache.Last ().Key == id) {  				if (ex != null && Program.TaskResultCache.Last ().Value == null)  					Program.TaskResultCache.RemoveAt (Program.TaskResultCache.Count - 1);  				else  					return;  			}  			Program.TaskResultCache.Add (new KeyValuePair<long' Exception> (id' ex));  			while (Program.TaskResultCache.Count > MAX_TASK_RESULT_CACHE_SIZE)  				Program.TaskResultCache.RemoveAt (0);  		}  	};  	Program.WorkThread.CompletedWork += (worker' task) => {  		registerTaskResult (task.TaskID' null);  	};  	Program.WorkThread.OnError += (worker' task' exception) => {  		registerTaskResult (task.TaskID' exception);  	};  	Program.WebServer = new WebServer.Server (commandlineOptions);  	if (Program.WebServer.Port != DataConnection.ApplicationSettings.LastWebserverPort)  		ServerPortChanged = true;  	DataConnection.ApplicationSettings.LastWebserverPort = Program.WebServer.Port;  	if (Library.Utility.Utility.ParseBoolOption (commandlineOptions' "ping-pong-keepalive")) {  		Program.PingPongThread = new System.Threading.Thread (PingPongMethod);  		Program.PingPongThread.IsBackground = true;  		Program.PingPongThread.Start ();  	}  	ServerStartedEvent.Set ();  	ApplicationExitEvent.WaitOne ();  } catch (SingleInstance.MultipleInstanceException mex) {  	System.Diagnostics.Trace.WriteLine (Strings.Program.SeriousError (mex.ToString ()));  	if (writeConsole)  		Console.WriteLine (Strings.Program.SeriousError (mex.ToString ()));  	else  		throw mex;  } catch (Exception ex) {  	System.Diagnostics.Trace.WriteLine (Strings.Program.SeriousError (ex.ToString ()));  	if (writeConsole)  		Console.WriteLine (Strings.Program.SeriousError (ex.ToString ()));  	else  		throw new Exception (Strings.Program.SeriousError (ex.ToString ())' ex);  } finally {  	StatusEventNotifyer.SignalNewEvent ();  	if (UpdatePoller != null)  		UpdatePoller.Terminate ();  	if (Scheduler != null)  		Scheduler.Terminate (true);  	if (WorkThread != null)  		WorkThread.Terminate (true);  	if (Instance != null)  		Instance.Dispose ();  	if (PurgeTempFilesTimer != null)  		PurgeTempFilesTimer.Dispose ();  	Library.UsageReporter.Reporter.ShutDown ();  	if (PingPongThread != null)  		try {  			PingPongThread.Abort ();  		} catch {  		}  	if (LogHandler != null)  		LogHandler.Dispose ();  }  
Magic Number,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The following statement contains a magic number: try {  	try {  		//This will also create Program.DATAFOLDER if it does not exist  		Instance = new SingleInstance (Duplicati.Library.AutoUpdater.AutoUpdateSettings.AppName' Program.DATAFOLDER);  	} catch (Exception ex) {  		if (writeConsole) {  			Console.WriteLine (Strings.Program.StartupFailure (ex));  			return;  		} else {  			throw new Exception (Strings.Program.StartupFailure (ex));  		}  	}  	if (!Instance.IsFirstInstance) {  		if (writeConsole) {  			Console.WriteLine (Strings.Program.AnotherInstanceDetected);  			return;  		} else {  			throw new SingleInstance.MultipleInstanceException (Strings.Program.AnotherInstanceDetected);  		}  	}  	// Setup the log redirect  	Duplicati.Library.Logging.Log.CurrentLog = Program.LogHandler;  	if (commandlineOptions.ContainsKey ("log-file")) {  		if (System.IO.File.Exists (commandlineOptions ["log-file"]))  			System.IO.File.Delete (commandlineOptions ["log-file"]);  		var loglevel = Duplicati.Library.Logging.LogMessageType.Error;  		if (commandlineOptions.ContainsKey ("log-level"))  			Enum.TryParse<Duplicati.Library.Logging.LogMessageType> (commandlineOptions ["log-level"]' true' out loglevel);  		Program.LogHandler.SetServerFile (commandlineOptions ["log-file"]' loglevel);  	}  	Version sqliteVersion = new Version ((string)Duplicati.Library.SQLiteHelper.SQLiteLoader.SQLiteConnectionType.GetProperty ("SQLiteVersion").GetValue (null' null));  	if (sqliteVersion < new Version (3' 6' 3)) {  		if (writeConsole) {  			//The official Mono SQLite provider is also broken with less than 3.6.3  			Console.WriteLine (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  			return;  		} else {  			throw new Exception (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  		}  	}  	//Create the connection instance  	var con = Duplicati.Library.SQLiteHelper.SQLiteLoader.LoadConnection ();  	try {  		DatabasePath = System.IO.Path.Combine (Program.DATAFOLDER' "Duplicati-server.sqlite");  		if (!System.IO.Directory.Exists (System.IO.Path.GetDirectoryName (DatabasePath)))  			System.IO.Directory.CreateDirectory (System.IO.Path.GetDirectoryName (DatabasePath));  		#if DEBUG  		//Default is to not use encryption for debugging  		Program.UseDatabaseEncryption = commandlineOptions.ContainsKey ("unencrypted-database") ? !Library.Utility.Utility.ParseBool (commandlineOptions ["unencrypted-database"]' true) : false;  		#else  		                    Program.UseDatabaseEncryption = commandlineOptions.ContainsKey("unencrypted-database") ? !Library.Utility.Utility.ParseBool(commandlineOptions["unencrypted-database"]' true) : true; #endif  		con.ConnectionString = "Data Source=" + DatabasePath;  		//Attempt to open the database' handling any encryption present  		OpenDatabase (con);  		Duplicati.Library.SQLiteHelper.DatabaseUpgrader.UpgradeDatabase (con' DatabasePath' typeof(Duplicati.Server.Database.Connection));  	} catch (Exception ex) {  		//Unwrap the reflection exceptions  		if (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  			ex = ex.InnerException;  		if (writeConsole) {  			Console.WriteLine (Strings.Program.DatabaseOpenError (ex.Message));  			return;  		} else {  			throw new Exception (Strings.Program.DatabaseOpenError (ex.Message)' ex);  		}  	}  	DataConnection = new Duplicati.Server.Database.Connection (con);  	if (!DataConnection.ApplicationSettings.FixedInvalidBackupId)  		DataConnection.FixInvalidBackupId ();  	StartOrStopUsageReporter ();  	if (commandlineOptions.ContainsKey ("webservice-password"))  		Program.DataConnection.ApplicationSettings.SetWebserverPassword (commandlineOptions ["webservice-password"]);  	ApplicationExitEvent = new System.Threading.ManualResetEvent (false);  	Duplicati.Library.AutoUpdater.UpdaterManager.OnError += (Exception obj) => {  		Program.DataConnection.LogError (null' "Error in updater"' obj);  	};  	UpdatePoller = new UpdatePollThread ();  	DateTime lastPurge = new DateTime (0);  	System.Threading.TimerCallback purgeTempFilesCallback = x => {  		try {  			if (Math.Abs ((DateTime.Now - lastPurge).TotalHours) < 23)  				return;  			lastPurge = DateTime.Now;  			foreach (var e in Program.DataConnection.GetTempFiles ().Where (f => f.Expires < DateTime.Now)) {  				try {  					if (System.IO.File.Exists (e.Path))  						System.IO.File.Delete (e.Path);  				} catch (Exception ex) {  					Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' e.Path)' ex);  				}  				Program.DataConnection.DeleteTempFile (e.ID);  			}  			Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  				Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' path)' ex);  			});  			string pts;  			if (!commandlineOptions.TryGetValue ("log-retention"' out pts))  				pts = DEFAULT_LOG_RETENTION;  			Program.DataConnection.PurgeLogData (Library.Utility.Timeparser.ParseTimeInterval (pts' DateTime.Now' true));  		} catch (Exception ex) {  			Program.DataConnection.LogError (null' "Failed during temp file cleanup"' ex);  		}  	};  	try {  		PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromDays (1));  	} catch (ArgumentOutOfRangeException) {  		//Bugfix for older Mono' slightly more resources used to avoid large values in the period field  		PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromHours (1));  	}  	LiveControl = new LiveControls (DataConnection.ApplicationSettings);  	LiveControl.StateChanged += new EventHandler (LiveControl_StateChanged);  	LiveControl.ThreadPriorityChanged += new EventHandler (LiveControl_ThreadPriorityChanged);  	LiveControl.ThrottleSpeedChanged += new EventHandler (LiveControl_ThrottleSpeedChanged);  	Program.WorkThread = new Duplicati.Library.Utility.WorkerThread<Runner.IRunnerData> (x => {  		Runner.Run (x' true);  	}' LiveControl.State == LiveControls.LiveControlState.Paused);  	Program.Scheduler = new Scheduler (WorkThread);  	Program.WorkThread.StartingWork += (worker' task) => {  		SignalNewEvent (null' null);  	};  	Program.WorkThread.CompletedWork += (worker' task) => {  		SignalNewEvent (null' null);  	};  	Program.WorkThread.WorkQueueChanged += worker => {  		SignalNewEvent (null' null);  	};  	Program.Scheduler.NewSchedule += new EventHandler (SignalNewEvent);  	Program.WorkThread.OnError += (worker' task' exception) => {  		Program.DataConnection.LogError (task == null ? null : task.BackupID' "Error in worker"' exception);  	};  	var lastscheduleid = LastDataUpdateID;  	Program.StatusEventNotifyer.NewEvent += (sender' e) => {  		if (lastscheduleid != LastDataUpdateID) {  			lastscheduleid = LastDataUpdateID;  			Program.Scheduler.Reschedule ();  		}  	};  	Action<long' Exception> registerTaskResult = (id' ex) => {  		lock (Program.MainLock) {  			// If the new results says it crashed' we store that instead of success  			if (Program.TaskResultCache.Count > 0 && Program.TaskResultCache.Last ().Key == id) {  				if (ex != null && Program.TaskResultCache.Last ().Value == null)  					Program.TaskResultCache.RemoveAt (Program.TaskResultCache.Count - 1);  				else  					return;  			}  			Program.TaskResultCache.Add (new KeyValuePair<long' Exception> (id' ex));  			while (Program.TaskResultCache.Count > MAX_TASK_RESULT_CACHE_SIZE)  				Program.TaskResultCache.RemoveAt (0);  		}  	};  	Program.WorkThread.CompletedWork += (worker' task) => {  		registerTaskResult (task.TaskID' null);  	};  	Program.WorkThread.OnError += (worker' task' exception) => {  		registerTaskResult (task.TaskID' exception);  	};  	Program.WebServer = new WebServer.Server (commandlineOptions);  	if (Program.WebServer.Port != DataConnection.ApplicationSettings.LastWebserverPort)  		ServerPortChanged = true;  	DataConnection.ApplicationSettings.LastWebserverPort = Program.WebServer.Port;  	if (Library.Utility.Utility.ParseBoolOption (commandlineOptions' "ping-pong-keepalive")) {  		Program.PingPongThread = new System.Threading.Thread (PingPongMethod);  		Program.PingPongThread.IsBackground = true;  		Program.PingPongThread.Start ();  	}  	ServerStartedEvent.Set ();  	ApplicationExitEvent.WaitOne ();  } catch (SingleInstance.MultipleInstanceException mex) {  	System.Diagnostics.Trace.WriteLine (Strings.Program.SeriousError (mex.ToString ()));  	if (writeConsole)  		Console.WriteLine (Strings.Program.SeriousError (mex.ToString ()));  	else  		throw mex;  } catch (Exception ex) {  	System.Diagnostics.Trace.WriteLine (Strings.Program.SeriousError (ex.ToString ()));  	if (writeConsole)  		Console.WriteLine (Strings.Program.SeriousError (ex.ToString ()));  	else  		throw new Exception (Strings.Program.SeriousError (ex.ToString ())' ex);  } finally {  	StatusEventNotifyer.SignalNewEvent ();  	if (UpdatePoller != null)  		UpdatePoller.Terminate ();  	if (Scheduler != null)  		Scheduler.Terminate (true);  	if (WorkThread != null)  		WorkThread.Terminate (true);  	if (Instance != null)  		Instance.Dispose ();  	if (PurgeTempFilesTimer != null)  		PurgeTempFilesTimer.Dispose ();  	Library.UsageReporter.Reporter.ShutDown ();  	if (PingPongThread != null)  		try {  			PingPongThread.Abort ();  		} catch {  		}  	if (LogHandler != null)  		LogHandler.Dispose ();  }  
Magic Number,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The following statement contains a magic number: try {  	try {  		//This will also create Program.DATAFOLDER if it does not exist  		Instance = new SingleInstance (Duplicati.Library.AutoUpdater.AutoUpdateSettings.AppName' Program.DATAFOLDER);  	} catch (Exception ex) {  		if (writeConsole) {  			Console.WriteLine (Strings.Program.StartupFailure (ex));  			return;  		} else {  			throw new Exception (Strings.Program.StartupFailure (ex));  		}  	}  	if (!Instance.IsFirstInstance) {  		if (writeConsole) {  			Console.WriteLine (Strings.Program.AnotherInstanceDetected);  			return;  		} else {  			throw new SingleInstance.MultipleInstanceException (Strings.Program.AnotherInstanceDetected);  		}  	}  	// Setup the log redirect  	Duplicati.Library.Logging.Log.CurrentLog = Program.LogHandler;  	if (commandlineOptions.ContainsKey ("log-file")) {  		if (System.IO.File.Exists (commandlineOptions ["log-file"]))  			System.IO.File.Delete (commandlineOptions ["log-file"]);  		var loglevel = Duplicati.Library.Logging.LogMessageType.Error;  		if (commandlineOptions.ContainsKey ("log-level"))  			Enum.TryParse<Duplicati.Library.Logging.LogMessageType> (commandlineOptions ["log-level"]' true' out loglevel);  		Program.LogHandler.SetServerFile (commandlineOptions ["log-file"]' loglevel);  	}  	Version sqliteVersion = new Version ((string)Duplicati.Library.SQLiteHelper.SQLiteLoader.SQLiteConnectionType.GetProperty ("SQLiteVersion").GetValue (null' null));  	if (sqliteVersion < new Version (3' 6' 3)) {  		if (writeConsole) {  			//The official Mono SQLite provider is also broken with less than 3.6.3  			Console.WriteLine (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  			return;  		} else {  			throw new Exception (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  		}  	}  	//Create the connection instance  	var con = Duplicati.Library.SQLiteHelper.SQLiteLoader.LoadConnection ();  	try {  		DatabasePath = System.IO.Path.Combine (Program.DATAFOLDER' "Duplicati-server.sqlite");  		if (!System.IO.Directory.Exists (System.IO.Path.GetDirectoryName (DatabasePath)))  			System.IO.Directory.CreateDirectory (System.IO.Path.GetDirectoryName (DatabasePath));  		#if DEBUG  		//Default is to not use encryption for debugging  		Program.UseDatabaseEncryption = commandlineOptions.ContainsKey ("unencrypted-database") ? !Library.Utility.Utility.ParseBool (commandlineOptions ["unencrypted-database"]' true) : false;  		#else  		                    Program.UseDatabaseEncryption = commandlineOptions.ContainsKey("unencrypted-database") ? !Library.Utility.Utility.ParseBool(commandlineOptions["unencrypted-database"]' true) : true; #endif  		con.ConnectionString = "Data Source=" + DatabasePath;  		//Attempt to open the database' handling any encryption present  		OpenDatabase (con);  		Duplicati.Library.SQLiteHelper.DatabaseUpgrader.UpgradeDatabase (con' DatabasePath' typeof(Duplicati.Server.Database.Connection));  	} catch (Exception ex) {  		//Unwrap the reflection exceptions  		if (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  			ex = ex.InnerException;  		if (writeConsole) {  			Console.WriteLine (Strings.Program.DatabaseOpenError (ex.Message));  			return;  		} else {  			throw new Exception (Strings.Program.DatabaseOpenError (ex.Message)' ex);  		}  	}  	DataConnection = new Duplicati.Server.Database.Connection (con);  	if (!DataConnection.ApplicationSettings.FixedInvalidBackupId)  		DataConnection.FixInvalidBackupId ();  	StartOrStopUsageReporter ();  	if (commandlineOptions.ContainsKey ("webservice-password"))  		Program.DataConnection.ApplicationSettings.SetWebserverPassword (commandlineOptions ["webservice-password"]);  	ApplicationExitEvent = new System.Threading.ManualResetEvent (false);  	Duplicati.Library.AutoUpdater.UpdaterManager.OnError += (Exception obj) => {  		Program.DataConnection.LogError (null' "Error in updater"' obj);  	};  	UpdatePoller = new UpdatePollThread ();  	DateTime lastPurge = new DateTime (0);  	System.Threading.TimerCallback purgeTempFilesCallback = x => {  		try {  			if (Math.Abs ((DateTime.Now - lastPurge).TotalHours) < 23)  				return;  			lastPurge = DateTime.Now;  			foreach (var e in Program.DataConnection.GetTempFiles ().Where (f => f.Expires < DateTime.Now)) {  				try {  					if (System.IO.File.Exists (e.Path))  						System.IO.File.Delete (e.Path);  				} catch (Exception ex) {  					Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' e.Path)' ex);  				}  				Program.DataConnection.DeleteTempFile (e.ID);  			}  			Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  				Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' path)' ex);  			});  			string pts;  			if (!commandlineOptions.TryGetValue ("log-retention"' out pts))  				pts = DEFAULT_LOG_RETENTION;  			Program.DataConnection.PurgeLogData (Library.Utility.Timeparser.ParseTimeInterval (pts' DateTime.Now' true));  		} catch (Exception ex) {  			Program.DataConnection.LogError (null' "Failed during temp file cleanup"' ex);  		}  	};  	try {  		PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromDays (1));  	} catch (ArgumentOutOfRangeException) {  		//Bugfix for older Mono' slightly more resources used to avoid large values in the period field  		PurgeTempFilesTimer = new System.Threading.Timer (purgeTempFilesCallback' null' TimeSpan.FromHours (1)' TimeSpan.FromHours (1));  	}  	LiveControl = new LiveControls (DataConnection.ApplicationSettings);  	LiveControl.StateChanged += new EventHandler (LiveControl_StateChanged);  	LiveControl.ThreadPriorityChanged += new EventHandler (LiveControl_ThreadPriorityChanged);  	LiveControl.ThrottleSpeedChanged += new EventHandler (LiveControl_ThrottleSpeedChanged);  	Program.WorkThread = new Duplicati.Library.Utility.WorkerThread<Runner.IRunnerData> (x => {  		Runner.Run (x' true);  	}' LiveControl.State == LiveControls.LiveControlState.Paused);  	Program.Scheduler = new Scheduler (WorkThread);  	Program.WorkThread.StartingWork += (worker' task) => {  		SignalNewEvent (null' null);  	};  	Program.WorkThread.CompletedWork += (worker' task) => {  		SignalNewEvent (null' null);  	};  	Program.WorkThread.WorkQueueChanged += worker => {  		SignalNewEvent (null' null);  	};  	Program.Scheduler.NewSchedule += new EventHandler (SignalNewEvent);  	Program.WorkThread.OnError += (worker' task' exception) => {  		Program.DataConnection.LogError (task == null ? null : task.BackupID' "Error in worker"' exception);  	};  	var lastscheduleid = LastDataUpdateID;  	Program.StatusEventNotifyer.NewEvent += (sender' e) => {  		if (lastscheduleid != LastDataUpdateID) {  			lastscheduleid = LastDataUpdateID;  			Program.Scheduler.Reschedule ();  		}  	};  	Action<long' Exception> registerTaskResult = (id' ex) => {  		lock (Program.MainLock) {  			// If the new results says it crashed' we store that instead of success  			if (Program.TaskResultCache.Count > 0 && Program.TaskResultCache.Last ().Key == id) {  				if (ex != null && Program.TaskResultCache.Last ().Value == null)  					Program.TaskResultCache.RemoveAt (Program.TaskResultCache.Count - 1);  				else  					return;  			}  			Program.TaskResultCache.Add (new KeyValuePair<long' Exception> (id' ex));  			while (Program.TaskResultCache.Count > MAX_TASK_RESULT_CACHE_SIZE)  				Program.TaskResultCache.RemoveAt (0);  		}  	};  	Program.WorkThread.CompletedWork += (worker' task) => {  		registerTaskResult (task.TaskID' null);  	};  	Program.WorkThread.OnError += (worker' task' exception) => {  		registerTaskResult (task.TaskID' exception);  	};  	Program.WebServer = new WebServer.Server (commandlineOptions);  	if (Program.WebServer.Port != DataConnection.ApplicationSettings.LastWebserverPort)  		ServerPortChanged = true;  	DataConnection.ApplicationSettings.LastWebserverPort = Program.WebServer.Port;  	if (Library.Utility.Utility.ParseBoolOption (commandlineOptions' "ping-pong-keepalive")) {  		Program.PingPongThread = new System.Threading.Thread (PingPongMethod);  		Program.PingPongThread.IsBackground = true;  		Program.PingPongThread.Start ();  	}  	ServerStartedEvent.Set ();  	ApplicationExitEvent.WaitOne ();  } catch (SingleInstance.MultipleInstanceException mex) {  	System.Diagnostics.Trace.WriteLine (Strings.Program.SeriousError (mex.ToString ()));  	if (writeConsole)  		Console.WriteLine (Strings.Program.SeriousError (mex.ToString ()));  	else  		throw mex;  } catch (Exception ex) {  	System.Diagnostics.Trace.WriteLine (Strings.Program.SeriousError (ex.ToString ()));  	if (writeConsole)  		Console.WriteLine (Strings.Program.SeriousError (ex.ToString ()));  	else  		throw new Exception (Strings.Program.SeriousError (ex.ToString ())' ex);  } finally {  	StatusEventNotifyer.SignalNewEvent ();  	if (UpdatePoller != null)  		UpdatePoller.Terminate ();  	if (Scheduler != null)  		Scheduler.Terminate (true);  	if (WorkThread != null)  		WorkThread.Terminate (true);  	if (Instance != null)  		Instance.Dispose ();  	if (PurgeTempFilesTimer != null)  		PurgeTempFilesTimer.Dispose ();  	Library.UsageReporter.Reporter.ShutDown ();  	if (PingPongThread != null)  		try {  			PingPongThread.Abort ();  		} catch {  		}  	if (LogHandler != null)  		LogHandler.Dispose ();  }  
Magic Number,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The following statement contains a magic number: if (sqliteVersion < new Version (3' 6' 3)) {  	if (writeConsole) {  		//The official Mono SQLite provider is also broken with less than 3.6.3  		Console.WriteLine (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  		return;  	} else {  		throw new Exception (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  	}  }  
Magic Number,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The following statement contains a magic number: if (sqliteVersion < new Version (3' 6' 3)) {  	if (writeConsole) {  		//The official Mono SQLite provider is also broken with less than 3.6.3  		Console.WriteLine (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  		return;  	} else {  		throw new Exception (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  	}  }  
Magic Number,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The following statement contains a magic number: if (sqliteVersion < new Version (3' 6' 3)) {  	if (writeConsole) {  		//The official Mono SQLite provider is also broken with less than 3.6.3  		Console.WriteLine (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  		return;  	} else {  		throw new Exception (Strings.Program.WrongSQLiteVersion (sqliteVersion' "3.6.3"));  	}  }  
Magic Number,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The following statement contains a magic number: try {  	if (Math.Abs ((DateTime.Now - lastPurge).TotalHours) < 23)  		return;  	lastPurge = DateTime.Now;  	foreach (var e in Program.DataConnection.GetTempFiles ().Where (f => f.Expires < DateTime.Now)) {  		try {  			if (System.IO.File.Exists (e.Path))  				System.IO.File.Delete (e.Path);  		} catch (Exception ex) {  			Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' e.Path)' ex);  		}  		Program.DataConnection.DeleteTempFile (e.ID);  	}  	Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  		Program.DataConnection.LogError (null' string.Format ("Failed to delete temp file: {0}"' path)' ex);  	});  	string pts;  	if (!commandlineOptions.TryGetValue ("log-retention"' out pts))  		pts = DEFAULT_LOG_RETENTION;  	Program.DataConnection.PurgeLogData (Library.Utility.Timeparser.ParseTimeInterval (pts' DateTime.Now' true));  } catch (Exception ex) {  	Program.DataConnection.LogError (null' "Failed during temp file cleanup"' ex);  }  
Magic Number,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,RealMain,The following statement contains a magic number: if (Math.Abs ((DateTime.Now - lastPurge).TotalHours) < 23)  	return;  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,GetNextValidTime,The following statement contains a magic number: if (res >= firstdate) {  	var ts = Timeparser.ParseTimeSpan (repetition);  	if (ts.TotalDays >= 1) {  		// We jump in days' so we pick the first valid day after firstdate  		for (var n = 0; n < 8; n++)  			if (IsDateAllowed (res' allowedDays))  				break;  			else  				res = res.AddDays (1);  	} else {  		// We jump less than a day' so we keep adding the repetition until  		// we hit a valid day  		i = 50000;  		while (!IsDateAllowed (res' allowedDays) && i-- > 0)  			res = Timeparser.ParseTimeInterval (repetition' res);  	}  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,GetNextValidTime,The following statement contains a magic number: if (res >= firstdate) {  	var ts = Timeparser.ParseTimeSpan (repetition);  	if (ts.TotalDays >= 1) {  		// We jump in days' so we pick the first valid day after firstdate  		for (var n = 0; n < 8; n++)  			if (IsDateAllowed (res' allowedDays))  				break;  			else  				res = res.AddDays (1);  	} else {  		// We jump less than a day' so we keep adding the repetition until  		// we hit a valid day  		i = 50000;  		while (!IsDateAllowed (res' allowedDays) && i-- > 0)  			res = Timeparser.ParseTimeInterval (repetition' res);  	}  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,GetNextValidTime,The following statement contains a magic number: if (ts.TotalDays >= 1) {  	// We jump in days' so we pick the first valid day after firstdate  	for (var n = 0; n < 8; n++)  		if (IsDateAllowed (res' allowedDays))  			break;  		else  			res = res.AddDays (1);  } else {  	// We jump less than a day' so we keep adding the repetition until  	// we hit a valid day  	i = 50000;  	while (!IsDateAllowed (res' allowedDays) && i-- > 0)  		res = Timeparser.ParseTimeInterval (repetition' res);  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,GetNextValidTime,The following statement contains a magic number: if (ts.TotalDays >= 1) {  	// We jump in days' so we pick the first valid day after firstdate  	for (var n = 0; n < 8; n++)  		if (IsDateAllowed (res' allowedDays))  			break;  		else  			res = res.AddDays (1);  } else {  	// We jump less than a day' so we keep adding the repetition until  	// we hit a valid day  	i = 50000;  	while (!IsDateAllowed (res' allowedDays) && i-- > 0)  		res = Timeparser.ParseTimeInterval (repetition' res);  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,GetNextValidTime,The following statement contains a magic number: for (var n = 0; n < 8; n++)  	if (IsDateAllowed (res' allowedDays))  		break;  	else  		res = res.AddDays (1);  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,GetNextValidTime,The following statement contains a magic number: i = 50000;  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: while (!m_terminate) {  	//TODO: As this is executed repeatedly we should cache it  	// to avoid frequent db lookups  	//Determine schedule list  	var lst = Program.DataConnection.Schedules;  	foreach (var sc in lst) {  		if (!string.IsNullOrEmpty (sc.Repeat)) {  			KeyValuePair<long' DateTime> startkey;  			DateTime last = new DateTime (0' DateTimeKind.Utc);  			DateTime start;  			var scticks = sc.Time.Ticks;  			if (!scheduled.TryGetValue (sc.ID' out startkey) || startkey.Key != scticks) {  				start = new DateTime (scticks' DateTimeKind.Utc);  				last = sc.LastRun;  			} else {  				start = startkey.Value;  			}  			try {  				start = GetNextValidTime (start' last' sc.Repeat' sc.AllowedDays);  			} catch (Exception ex) {  				Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  			}  			//If time is exceeded' run it now  			if (start <= DateTime.UtcNow) {  				var jobsToRun = new List<Server.Runner.IRunnerData> ();  				//TODO: Cache this to avoid frequent lookups  				foreach (var id in Program.DataConnection.GetBackupIDsForTags (sc.Tags).Distinct ().Select (x => x.ToString ())) {  					//See if it is already queued  					var tmplst = from n in m_worker.CurrentTasks  					where n.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup  					select n.Backup;  					var tastTemp = m_worker.CurrentTask;  					if (tastTemp != null && tastTemp.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup)  						tmplst.Union (new[] {  							tastTemp.Backup  						});  					//If it is not already in queue' put it there  					if (!tmplst.Any (x => x.ID == id)) {  						var entry = Program.DataConnection.GetBackup (id);  						if (entry != null)  							jobsToRun.Add (Server.Runner.CreateTask (Duplicati.Server.Serialization.DuplicatiOperation.Backup' entry));  					}  				}  				//Caluclate next time' by finding the first entry later than now  				try {  					start = GetNextValidTime (start' new DateTime (Math.Max (DateTime.UtcNow.AddSeconds (1).Ticks' start.AddSeconds (1).Ticks)' DateTimeKind.Utc)' sc.Repeat' sc.AllowedDays);  				} catch (Exception ex) {  					Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  					continue;  				}  				Server.Runner.IRunnerData lastJob = jobsToRun.LastOrDefault ();  				if (lastJob != null && lastJob != null)  					lock (m_lock)  						m_updateTasks [lastJob] = new Tuple<ISchedule' DateTime' DateTime> (sc' start' DateTime.UtcNow);  				foreach (var job in jobsToRun)  					m_worker.AddTask (job);  				if (start < DateTime.UtcNow) {  					//TODO: Report this somehow  					continue;  				}  			}  			scheduled [sc.ID] = new KeyValuePair<long' DateTime> (scticks' start);  		}  	}  	var existing = lst.ToDictionary (x => x.ID);  	//Sort them' lock as we assign the m_schedule variable  	lock (m_lock)  		m_schedule = (from n in scheduled  		where existing.ContainsKey (n.Key)  		orderby n.Value.Value  		select new KeyValuePair<DateTime' ISchedule> (n.Value.Value' existing [n.Key])).ToArray ();  	// Remove unused entries                          	foreach (var c in (from n in scheduled  	where !existing.ContainsKey (n.Key)  	select n.Key).ToArray ())  		scheduled.Remove (c);  	//Raise event if needed  	if (NewSchedule != null)  		NewSchedule (this' null);  	int waittime = 0;  	//Figure out a sensible amount of time to sleep the thread  	if (scheduled.Count > 0) {  		//When is the next run scheduled?  		TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  		if (nextrun.TotalMilliseconds < 0)  			continue;  		//Don't sleep for more than 5 minutes  		waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  	} else {  		//No tasks' check back later  		waittime = 60 * 1000;  	}  	//Waiting on the event' enables a wakeup call from termination  	// never use waittime = 0  	m_event.WaitOne (Math.Max (100' waittime)' false);  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: while (!m_terminate) {  	//TODO: As this is executed repeatedly we should cache it  	// to avoid frequent db lookups  	//Determine schedule list  	var lst = Program.DataConnection.Schedules;  	foreach (var sc in lst) {  		if (!string.IsNullOrEmpty (sc.Repeat)) {  			KeyValuePair<long' DateTime> startkey;  			DateTime last = new DateTime (0' DateTimeKind.Utc);  			DateTime start;  			var scticks = sc.Time.Ticks;  			if (!scheduled.TryGetValue (sc.ID' out startkey) || startkey.Key != scticks) {  				start = new DateTime (scticks' DateTimeKind.Utc);  				last = sc.LastRun;  			} else {  				start = startkey.Value;  			}  			try {  				start = GetNextValidTime (start' last' sc.Repeat' sc.AllowedDays);  			} catch (Exception ex) {  				Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  			}  			//If time is exceeded' run it now  			if (start <= DateTime.UtcNow) {  				var jobsToRun = new List<Server.Runner.IRunnerData> ();  				//TODO: Cache this to avoid frequent lookups  				foreach (var id in Program.DataConnection.GetBackupIDsForTags (sc.Tags).Distinct ().Select (x => x.ToString ())) {  					//See if it is already queued  					var tmplst = from n in m_worker.CurrentTasks  					where n.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup  					select n.Backup;  					var tastTemp = m_worker.CurrentTask;  					if (tastTemp != null && tastTemp.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup)  						tmplst.Union (new[] {  							tastTemp.Backup  						});  					//If it is not already in queue' put it there  					if (!tmplst.Any (x => x.ID == id)) {  						var entry = Program.DataConnection.GetBackup (id);  						if (entry != null)  							jobsToRun.Add (Server.Runner.CreateTask (Duplicati.Server.Serialization.DuplicatiOperation.Backup' entry));  					}  				}  				//Caluclate next time' by finding the first entry later than now  				try {  					start = GetNextValidTime (start' new DateTime (Math.Max (DateTime.UtcNow.AddSeconds (1).Ticks' start.AddSeconds (1).Ticks)' DateTimeKind.Utc)' sc.Repeat' sc.AllowedDays);  				} catch (Exception ex) {  					Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  					continue;  				}  				Server.Runner.IRunnerData lastJob = jobsToRun.LastOrDefault ();  				if (lastJob != null && lastJob != null)  					lock (m_lock)  						m_updateTasks [lastJob] = new Tuple<ISchedule' DateTime' DateTime> (sc' start' DateTime.UtcNow);  				foreach (var job in jobsToRun)  					m_worker.AddTask (job);  				if (start < DateTime.UtcNow) {  					//TODO: Report this somehow  					continue;  				}  			}  			scheduled [sc.ID] = new KeyValuePair<long' DateTime> (scticks' start);  		}  	}  	var existing = lst.ToDictionary (x => x.ID);  	//Sort them' lock as we assign the m_schedule variable  	lock (m_lock)  		m_schedule = (from n in scheduled  		where existing.ContainsKey (n.Key)  		orderby n.Value.Value  		select new KeyValuePair<DateTime' ISchedule> (n.Value.Value' existing [n.Key])).ToArray ();  	// Remove unused entries                          	foreach (var c in (from n in scheduled  	where !existing.ContainsKey (n.Key)  	select n.Key).ToArray ())  		scheduled.Remove (c);  	//Raise event if needed  	if (NewSchedule != null)  		NewSchedule (this' null);  	int waittime = 0;  	//Figure out a sensible amount of time to sleep the thread  	if (scheduled.Count > 0) {  		//When is the next run scheduled?  		TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  		if (nextrun.TotalMilliseconds < 0)  			continue;  		//Don't sleep for more than 5 minutes  		waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  	} else {  		//No tasks' check back later  		waittime = 60 * 1000;  	}  	//Waiting on the event' enables a wakeup call from termination  	// never use waittime = 0  	m_event.WaitOne (Math.Max (100' waittime)' false);  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: while (!m_terminate) {  	//TODO: As this is executed repeatedly we should cache it  	// to avoid frequent db lookups  	//Determine schedule list  	var lst = Program.DataConnection.Schedules;  	foreach (var sc in lst) {  		if (!string.IsNullOrEmpty (sc.Repeat)) {  			KeyValuePair<long' DateTime> startkey;  			DateTime last = new DateTime (0' DateTimeKind.Utc);  			DateTime start;  			var scticks = sc.Time.Ticks;  			if (!scheduled.TryGetValue (sc.ID' out startkey) || startkey.Key != scticks) {  				start = new DateTime (scticks' DateTimeKind.Utc);  				last = sc.LastRun;  			} else {  				start = startkey.Value;  			}  			try {  				start = GetNextValidTime (start' last' sc.Repeat' sc.AllowedDays);  			} catch (Exception ex) {  				Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  			}  			//If time is exceeded' run it now  			if (start <= DateTime.UtcNow) {  				var jobsToRun = new List<Server.Runner.IRunnerData> ();  				//TODO: Cache this to avoid frequent lookups  				foreach (var id in Program.DataConnection.GetBackupIDsForTags (sc.Tags).Distinct ().Select (x => x.ToString ())) {  					//See if it is already queued  					var tmplst = from n in m_worker.CurrentTasks  					where n.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup  					select n.Backup;  					var tastTemp = m_worker.CurrentTask;  					if (tastTemp != null && tastTemp.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup)  						tmplst.Union (new[] {  							tastTemp.Backup  						});  					//If it is not already in queue' put it there  					if (!tmplst.Any (x => x.ID == id)) {  						var entry = Program.DataConnection.GetBackup (id);  						if (entry != null)  							jobsToRun.Add (Server.Runner.CreateTask (Duplicati.Server.Serialization.DuplicatiOperation.Backup' entry));  					}  				}  				//Caluclate next time' by finding the first entry later than now  				try {  					start = GetNextValidTime (start' new DateTime (Math.Max (DateTime.UtcNow.AddSeconds (1).Ticks' start.AddSeconds (1).Ticks)' DateTimeKind.Utc)' sc.Repeat' sc.AllowedDays);  				} catch (Exception ex) {  					Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  					continue;  				}  				Server.Runner.IRunnerData lastJob = jobsToRun.LastOrDefault ();  				if (lastJob != null && lastJob != null)  					lock (m_lock)  						m_updateTasks [lastJob] = new Tuple<ISchedule' DateTime' DateTime> (sc' start' DateTime.UtcNow);  				foreach (var job in jobsToRun)  					m_worker.AddTask (job);  				if (start < DateTime.UtcNow) {  					//TODO: Report this somehow  					continue;  				}  			}  			scheduled [sc.ID] = new KeyValuePair<long' DateTime> (scticks' start);  		}  	}  	var existing = lst.ToDictionary (x => x.ID);  	//Sort them' lock as we assign the m_schedule variable  	lock (m_lock)  		m_schedule = (from n in scheduled  		where existing.ContainsKey (n.Key)  		orderby n.Value.Value  		select new KeyValuePair<DateTime' ISchedule> (n.Value.Value' existing [n.Key])).ToArray ();  	// Remove unused entries                          	foreach (var c in (from n in scheduled  	where !existing.ContainsKey (n.Key)  	select n.Key).ToArray ())  		scheduled.Remove (c);  	//Raise event if needed  	if (NewSchedule != null)  		NewSchedule (this' null);  	int waittime = 0;  	//Figure out a sensible amount of time to sleep the thread  	if (scheduled.Count > 0) {  		//When is the next run scheduled?  		TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  		if (nextrun.TotalMilliseconds < 0)  			continue;  		//Don't sleep for more than 5 minutes  		waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  	} else {  		//No tasks' check back later  		waittime = 60 * 1000;  	}  	//Waiting on the event' enables a wakeup call from termination  	// never use waittime = 0  	m_event.WaitOne (Math.Max (100' waittime)' false);  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: while (!m_terminate) {  	//TODO: As this is executed repeatedly we should cache it  	// to avoid frequent db lookups  	//Determine schedule list  	var lst = Program.DataConnection.Schedules;  	foreach (var sc in lst) {  		if (!string.IsNullOrEmpty (sc.Repeat)) {  			KeyValuePair<long' DateTime> startkey;  			DateTime last = new DateTime (0' DateTimeKind.Utc);  			DateTime start;  			var scticks = sc.Time.Ticks;  			if (!scheduled.TryGetValue (sc.ID' out startkey) || startkey.Key != scticks) {  				start = new DateTime (scticks' DateTimeKind.Utc);  				last = sc.LastRun;  			} else {  				start = startkey.Value;  			}  			try {  				start = GetNextValidTime (start' last' sc.Repeat' sc.AllowedDays);  			} catch (Exception ex) {  				Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  			}  			//If time is exceeded' run it now  			if (start <= DateTime.UtcNow) {  				var jobsToRun = new List<Server.Runner.IRunnerData> ();  				//TODO: Cache this to avoid frequent lookups  				foreach (var id in Program.DataConnection.GetBackupIDsForTags (sc.Tags).Distinct ().Select (x => x.ToString ())) {  					//See if it is already queued  					var tmplst = from n in m_worker.CurrentTasks  					where n.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup  					select n.Backup;  					var tastTemp = m_worker.CurrentTask;  					if (tastTemp != null && tastTemp.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup)  						tmplst.Union (new[] {  							tastTemp.Backup  						});  					//If it is not already in queue' put it there  					if (!tmplst.Any (x => x.ID == id)) {  						var entry = Program.DataConnection.GetBackup (id);  						if (entry != null)  							jobsToRun.Add (Server.Runner.CreateTask (Duplicati.Server.Serialization.DuplicatiOperation.Backup' entry));  					}  				}  				//Caluclate next time' by finding the first entry later than now  				try {  					start = GetNextValidTime (start' new DateTime (Math.Max (DateTime.UtcNow.AddSeconds (1).Ticks' start.AddSeconds (1).Ticks)' DateTimeKind.Utc)' sc.Repeat' sc.AllowedDays);  				} catch (Exception ex) {  					Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  					continue;  				}  				Server.Runner.IRunnerData lastJob = jobsToRun.LastOrDefault ();  				if (lastJob != null && lastJob != null)  					lock (m_lock)  						m_updateTasks [lastJob] = new Tuple<ISchedule' DateTime' DateTime> (sc' start' DateTime.UtcNow);  				foreach (var job in jobsToRun)  					m_worker.AddTask (job);  				if (start < DateTime.UtcNow) {  					//TODO: Report this somehow  					continue;  				}  			}  			scheduled [sc.ID] = new KeyValuePair<long' DateTime> (scticks' start);  		}  	}  	var existing = lst.ToDictionary (x => x.ID);  	//Sort them' lock as we assign the m_schedule variable  	lock (m_lock)  		m_schedule = (from n in scheduled  		where existing.ContainsKey (n.Key)  		orderby n.Value.Value  		select new KeyValuePair<DateTime' ISchedule> (n.Value.Value' existing [n.Key])).ToArray ();  	// Remove unused entries                          	foreach (var c in (from n in scheduled  	where !existing.ContainsKey (n.Key)  	select n.Key).ToArray ())  		scheduled.Remove (c);  	//Raise event if needed  	if (NewSchedule != null)  		NewSchedule (this' null);  	int waittime = 0;  	//Figure out a sensible amount of time to sleep the thread  	if (scheduled.Count > 0) {  		//When is the next run scheduled?  		TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  		if (nextrun.TotalMilliseconds < 0)  			continue;  		//Don't sleep for more than 5 minutes  		waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  	} else {  		//No tasks' check back later  		waittime = 60 * 1000;  	}  	//Waiting on the event' enables a wakeup call from termination  	// never use waittime = 0  	m_event.WaitOne (Math.Max (100' waittime)' false);  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: while (!m_terminate) {  	//TODO: As this is executed repeatedly we should cache it  	// to avoid frequent db lookups  	//Determine schedule list  	var lst = Program.DataConnection.Schedules;  	foreach (var sc in lst) {  		if (!string.IsNullOrEmpty (sc.Repeat)) {  			KeyValuePair<long' DateTime> startkey;  			DateTime last = new DateTime (0' DateTimeKind.Utc);  			DateTime start;  			var scticks = sc.Time.Ticks;  			if (!scheduled.TryGetValue (sc.ID' out startkey) || startkey.Key != scticks) {  				start = new DateTime (scticks' DateTimeKind.Utc);  				last = sc.LastRun;  			} else {  				start = startkey.Value;  			}  			try {  				start = GetNextValidTime (start' last' sc.Repeat' sc.AllowedDays);  			} catch (Exception ex) {  				Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  			}  			//If time is exceeded' run it now  			if (start <= DateTime.UtcNow) {  				var jobsToRun = new List<Server.Runner.IRunnerData> ();  				//TODO: Cache this to avoid frequent lookups  				foreach (var id in Program.DataConnection.GetBackupIDsForTags (sc.Tags).Distinct ().Select (x => x.ToString ())) {  					//See if it is already queued  					var tmplst = from n in m_worker.CurrentTasks  					where n.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup  					select n.Backup;  					var tastTemp = m_worker.CurrentTask;  					if (tastTemp != null && tastTemp.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup)  						tmplst.Union (new[] {  							tastTemp.Backup  						});  					//If it is not already in queue' put it there  					if (!tmplst.Any (x => x.ID == id)) {  						var entry = Program.DataConnection.GetBackup (id);  						if (entry != null)  							jobsToRun.Add (Server.Runner.CreateTask (Duplicati.Server.Serialization.DuplicatiOperation.Backup' entry));  					}  				}  				//Caluclate next time' by finding the first entry later than now  				try {  					start = GetNextValidTime (start' new DateTime (Math.Max (DateTime.UtcNow.AddSeconds (1).Ticks' start.AddSeconds (1).Ticks)' DateTimeKind.Utc)' sc.Repeat' sc.AllowedDays);  				} catch (Exception ex) {  					Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  					continue;  				}  				Server.Runner.IRunnerData lastJob = jobsToRun.LastOrDefault ();  				if (lastJob != null && lastJob != null)  					lock (m_lock)  						m_updateTasks [lastJob] = new Tuple<ISchedule' DateTime' DateTime> (sc' start' DateTime.UtcNow);  				foreach (var job in jobsToRun)  					m_worker.AddTask (job);  				if (start < DateTime.UtcNow) {  					//TODO: Report this somehow  					continue;  				}  			}  			scheduled [sc.ID] = new KeyValuePair<long' DateTime> (scticks' start);  		}  	}  	var existing = lst.ToDictionary (x => x.ID);  	//Sort them' lock as we assign the m_schedule variable  	lock (m_lock)  		m_schedule = (from n in scheduled  		where existing.ContainsKey (n.Key)  		orderby n.Value.Value  		select new KeyValuePair<DateTime' ISchedule> (n.Value.Value' existing [n.Key])).ToArray ();  	// Remove unused entries                          	foreach (var c in (from n in scheduled  	where !existing.ContainsKey (n.Key)  	select n.Key).ToArray ())  		scheduled.Remove (c);  	//Raise event if needed  	if (NewSchedule != null)  		NewSchedule (this' null);  	int waittime = 0;  	//Figure out a sensible amount of time to sleep the thread  	if (scheduled.Count > 0) {  		//When is the next run scheduled?  		TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  		if (nextrun.TotalMilliseconds < 0)  			continue;  		//Don't sleep for more than 5 minutes  		waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  	} else {  		//No tasks' check back later  		waittime = 60 * 1000;  	}  	//Waiting on the event' enables a wakeup call from termination  	// never use waittime = 0  	m_event.WaitOne (Math.Max (100' waittime)' false);  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: while (!m_terminate) {  	//TODO: As this is executed repeatedly we should cache it  	// to avoid frequent db lookups  	//Determine schedule list  	var lst = Program.DataConnection.Schedules;  	foreach (var sc in lst) {  		if (!string.IsNullOrEmpty (sc.Repeat)) {  			KeyValuePair<long' DateTime> startkey;  			DateTime last = new DateTime (0' DateTimeKind.Utc);  			DateTime start;  			var scticks = sc.Time.Ticks;  			if (!scheduled.TryGetValue (sc.ID' out startkey) || startkey.Key != scticks) {  				start = new DateTime (scticks' DateTimeKind.Utc);  				last = sc.LastRun;  			} else {  				start = startkey.Value;  			}  			try {  				start = GetNextValidTime (start' last' sc.Repeat' sc.AllowedDays);  			} catch (Exception ex) {  				Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  			}  			//If time is exceeded' run it now  			if (start <= DateTime.UtcNow) {  				var jobsToRun = new List<Server.Runner.IRunnerData> ();  				//TODO: Cache this to avoid frequent lookups  				foreach (var id in Program.DataConnection.GetBackupIDsForTags (sc.Tags).Distinct ().Select (x => x.ToString ())) {  					//See if it is already queued  					var tmplst = from n in m_worker.CurrentTasks  					where n.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup  					select n.Backup;  					var tastTemp = m_worker.CurrentTask;  					if (tastTemp != null && tastTemp.Operation == Duplicati.Server.Serialization.DuplicatiOperation.Backup)  						tmplst.Union (new[] {  							tastTemp.Backup  						});  					//If it is not already in queue' put it there  					if (!tmplst.Any (x => x.ID == id)) {  						var entry = Program.DataConnection.GetBackup (id);  						if (entry != null)  							jobsToRun.Add (Server.Runner.CreateTask (Duplicati.Server.Serialization.DuplicatiOperation.Backup' entry));  					}  				}  				//Caluclate next time' by finding the first entry later than now  				try {  					start = GetNextValidTime (start' new DateTime (Math.Max (DateTime.UtcNow.AddSeconds (1).Ticks' start.AddSeconds (1).Ticks)' DateTimeKind.Utc)' sc.Repeat' sc.AllowedDays);  				} catch (Exception ex) {  					Program.DataConnection.LogError (sc.ID.ToString ()' "Scheduler failed to find next date"' ex);  					continue;  				}  				Server.Runner.IRunnerData lastJob = jobsToRun.LastOrDefault ();  				if (lastJob != null && lastJob != null)  					lock (m_lock)  						m_updateTasks [lastJob] = new Tuple<ISchedule' DateTime' DateTime> (sc' start' DateTime.UtcNow);  				foreach (var job in jobsToRun)  					m_worker.AddTask (job);  				if (start < DateTime.UtcNow) {  					//TODO: Report this somehow  					continue;  				}  			}  			scheduled [sc.ID] = new KeyValuePair<long' DateTime> (scticks' start);  		}  	}  	var existing = lst.ToDictionary (x => x.ID);  	//Sort them' lock as we assign the m_schedule variable  	lock (m_lock)  		m_schedule = (from n in scheduled  		where existing.ContainsKey (n.Key)  		orderby n.Value.Value  		select new KeyValuePair<DateTime' ISchedule> (n.Value.Value' existing [n.Key])).ToArray ();  	// Remove unused entries                          	foreach (var c in (from n in scheduled  	where !existing.ContainsKey (n.Key)  	select n.Key).ToArray ())  		scheduled.Remove (c);  	//Raise event if needed  	if (NewSchedule != null)  		NewSchedule (this' null);  	int waittime = 0;  	//Figure out a sensible amount of time to sleep the thread  	if (scheduled.Count > 0) {  		//When is the next run scheduled?  		TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  		if (nextrun.TotalMilliseconds < 0)  			continue;  		//Don't sleep for more than 5 minutes  		waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  	} else {  		//No tasks' check back later  		waittime = 60 * 1000;  	}  	//Waiting on the event' enables a wakeup call from termination  	// never use waittime = 0  	m_event.WaitOne (Math.Max (100' waittime)' false);  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: if (scheduled.Count > 0) {  	//When is the next run scheduled?  	TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  	if (nextrun.TotalMilliseconds < 0)  		continue;  	//Don't sleep for more than 5 minutes  	waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  } else {  	//No tasks' check back later  	waittime = 60 * 1000;  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: if (scheduled.Count > 0) {  	//When is the next run scheduled?  	TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  	if (nextrun.TotalMilliseconds < 0)  		continue;  	//Don't sleep for more than 5 minutes  	waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  } else {  	//No tasks' check back later  	waittime = 60 * 1000;  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: if (scheduled.Count > 0) {  	//When is the next run scheduled?  	TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  	if (nextrun.TotalMilliseconds < 0)  		continue;  	//Don't sleep for more than 5 minutes  	waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  } else {  	//No tasks' check back later  	waittime = 60 * 1000;  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: if (scheduled.Count > 0) {  	//When is the next run scheduled?  	TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  	if (nextrun.TotalMilliseconds < 0)  		continue;  	//Don't sleep for more than 5 minutes  	waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  } else {  	//No tasks' check back later  	waittime = 60 * 1000;  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: if (scheduled.Count > 0) {  	//When is the next run scheduled?  	TimeSpan nextrun = scheduled.Values.Min (x => x.Value) - DateTime.UtcNow;  	if (nextrun.TotalMilliseconds < 0)  		continue;  	//Don't sleep for more than 5 minutes  	waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  } else {  	//No tasks' check back later  	waittime = 60 * 1000;  }  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: waittime = (int)Math.Min (nextrun.TotalMilliseconds' 60 * 1000 * 5);  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: waittime = 60 * 1000;  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: waittime = 60 * 1000;  
Magic Number,Duplicati.Server,Scheduler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Scheduler.cs,Runner,The following statement contains a magic number: m_event.WaitOne (Math.Max (100' waittime)' false);  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The following statement contains a magic number: if (m_file != null) {  	m_filewatcher = new System.IO.FileSystemWatcher (m_controldir);  	m_filewatcher.Created += new System.IO.FileSystemEventHandler (m_filewatcher_Created);  	m_filewatcher.EnableRaisingEvents = true;  	DateTime startup = System.IO.File.GetLastWriteTime (m_lockfilename);  	//Clean up any files that were created before the app launched  	foreach (string s in System.IO.Directory.GetFiles (m_controldir))  		if (s != m_lockfilename && System.IO.File.GetCreationTime (s) < startup)  			try {  				System.IO.File.Delete (s);  			} catch {  			}  } else {  	//Wait for the initial process to signal that the filewatcher is activated  	int retrycount = 5;  	while (retrycount > 0 && new System.IO.FileInfo (m_lockfilename).Length == 0) {  		System.Threading.Thread.Sleep (500);  		retrycount--;  	}  	//HACK: the unix file lock does not allow us to read the file length when the file is locked  	if (new System.IO.FileInfo (m_lockfilename).Length == 0)  		if (!Library.Utility.Utility.IsClientLinux)  			throw new Exception ("The file was locked' but had no data");  	//Notify the other process that we have started  	string filename = System.IO.Path.Combine (m_controldir' COMM_FILE_PREFIX + Guid.NewGuid ().ToString ());  	//Write out the commandline arguments  	string[] cmdargs = System.Environment.GetCommandLineArgs ();  	using (System.IO.StreamWriter sw = new System.IO.StreamWriter (Library.Utility.Utility.IsClientLinux ? UnixSupport.File.OpenExclusive (filename' System.IO.FileAccess.Write) : new System.IO.FileStream (filename' System.IO.FileMode.CreateNew' System.IO.FileAccess.Write' System.IO.FileShare.None)))  		for (int i = 1; i < cmdargs.Length; i++)  			//Skip the first' as that is the filename  			sw.WriteLine (cmdargs [i]);  	//Wait for the other process to delete the file' indicating that it is processed  	retrycount = 5;  	while (retrycount > 0 && System.IO.File.Exists (filename)) {  		System.Threading.Thread.Sleep (500);  		retrycount--;  	}  	//This may happen if the other process is closing as we write the command  	if (System.IO.File.Exists (filename)) {  		//Try to clean up' so the other process does not spuriously show this  		try {  			System.IO.File.Delete (filename);  		} catch {  		}  		throw new Exception ("The lock file was locked' but the locking process did not respond to the start command");  	}  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The following statement contains a magic number: if (m_file != null) {  	m_filewatcher = new System.IO.FileSystemWatcher (m_controldir);  	m_filewatcher.Created += new System.IO.FileSystemEventHandler (m_filewatcher_Created);  	m_filewatcher.EnableRaisingEvents = true;  	DateTime startup = System.IO.File.GetLastWriteTime (m_lockfilename);  	//Clean up any files that were created before the app launched  	foreach (string s in System.IO.Directory.GetFiles (m_controldir))  		if (s != m_lockfilename && System.IO.File.GetCreationTime (s) < startup)  			try {  				System.IO.File.Delete (s);  			} catch {  			}  } else {  	//Wait for the initial process to signal that the filewatcher is activated  	int retrycount = 5;  	while (retrycount > 0 && new System.IO.FileInfo (m_lockfilename).Length == 0) {  		System.Threading.Thread.Sleep (500);  		retrycount--;  	}  	//HACK: the unix file lock does not allow us to read the file length when the file is locked  	if (new System.IO.FileInfo (m_lockfilename).Length == 0)  		if (!Library.Utility.Utility.IsClientLinux)  			throw new Exception ("The file was locked' but had no data");  	//Notify the other process that we have started  	string filename = System.IO.Path.Combine (m_controldir' COMM_FILE_PREFIX + Guid.NewGuid ().ToString ());  	//Write out the commandline arguments  	string[] cmdargs = System.Environment.GetCommandLineArgs ();  	using (System.IO.StreamWriter sw = new System.IO.StreamWriter (Library.Utility.Utility.IsClientLinux ? UnixSupport.File.OpenExclusive (filename' System.IO.FileAccess.Write) : new System.IO.FileStream (filename' System.IO.FileMode.CreateNew' System.IO.FileAccess.Write' System.IO.FileShare.None)))  		for (int i = 1; i < cmdargs.Length; i++)  			//Skip the first' as that is the filename  			sw.WriteLine (cmdargs [i]);  	//Wait for the other process to delete the file' indicating that it is processed  	retrycount = 5;  	while (retrycount > 0 && System.IO.File.Exists (filename)) {  		System.Threading.Thread.Sleep (500);  		retrycount--;  	}  	//This may happen if the other process is closing as we write the command  	if (System.IO.File.Exists (filename)) {  		//Try to clean up' so the other process does not spuriously show this  		try {  			System.IO.File.Delete (filename);  		} catch {  		}  		throw new Exception ("The lock file was locked' but the locking process did not respond to the start command");  	}  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The following statement contains a magic number: if (m_file != null) {  	m_filewatcher = new System.IO.FileSystemWatcher (m_controldir);  	m_filewatcher.Created += new System.IO.FileSystemEventHandler (m_filewatcher_Created);  	m_filewatcher.EnableRaisingEvents = true;  	DateTime startup = System.IO.File.GetLastWriteTime (m_lockfilename);  	//Clean up any files that were created before the app launched  	foreach (string s in System.IO.Directory.GetFiles (m_controldir))  		if (s != m_lockfilename && System.IO.File.GetCreationTime (s) < startup)  			try {  				System.IO.File.Delete (s);  			} catch {  			}  } else {  	//Wait for the initial process to signal that the filewatcher is activated  	int retrycount = 5;  	while (retrycount > 0 && new System.IO.FileInfo (m_lockfilename).Length == 0) {  		System.Threading.Thread.Sleep (500);  		retrycount--;  	}  	//HACK: the unix file lock does not allow us to read the file length when the file is locked  	if (new System.IO.FileInfo (m_lockfilename).Length == 0)  		if (!Library.Utility.Utility.IsClientLinux)  			throw new Exception ("The file was locked' but had no data");  	//Notify the other process that we have started  	string filename = System.IO.Path.Combine (m_controldir' COMM_FILE_PREFIX + Guid.NewGuid ().ToString ());  	//Write out the commandline arguments  	string[] cmdargs = System.Environment.GetCommandLineArgs ();  	using (System.IO.StreamWriter sw = new System.IO.StreamWriter (Library.Utility.Utility.IsClientLinux ? UnixSupport.File.OpenExclusive (filename' System.IO.FileAccess.Write) : new System.IO.FileStream (filename' System.IO.FileMode.CreateNew' System.IO.FileAccess.Write' System.IO.FileShare.None)))  		for (int i = 1; i < cmdargs.Length; i++)  			//Skip the first' as that is the filename  			sw.WriteLine (cmdargs [i]);  	//Wait for the other process to delete the file' indicating that it is processed  	retrycount = 5;  	while (retrycount > 0 && System.IO.File.Exists (filename)) {  		System.Threading.Thread.Sleep (500);  		retrycount--;  	}  	//This may happen if the other process is closing as we write the command  	if (System.IO.File.Exists (filename)) {  		//Try to clean up' so the other process does not spuriously show this  		try {  			System.IO.File.Delete (filename);  		} catch {  		}  		throw new Exception ("The lock file was locked' but the locking process did not respond to the start command");  	}  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The following statement contains a magic number: if (m_file != null) {  	m_filewatcher = new System.IO.FileSystemWatcher (m_controldir);  	m_filewatcher.Created += new System.IO.FileSystemEventHandler (m_filewatcher_Created);  	m_filewatcher.EnableRaisingEvents = true;  	DateTime startup = System.IO.File.GetLastWriteTime (m_lockfilename);  	//Clean up any files that were created before the app launched  	foreach (string s in System.IO.Directory.GetFiles (m_controldir))  		if (s != m_lockfilename && System.IO.File.GetCreationTime (s) < startup)  			try {  				System.IO.File.Delete (s);  			} catch {  			}  } else {  	//Wait for the initial process to signal that the filewatcher is activated  	int retrycount = 5;  	while (retrycount > 0 && new System.IO.FileInfo (m_lockfilename).Length == 0) {  		System.Threading.Thread.Sleep (500);  		retrycount--;  	}  	//HACK: the unix file lock does not allow us to read the file length when the file is locked  	if (new System.IO.FileInfo (m_lockfilename).Length == 0)  		if (!Library.Utility.Utility.IsClientLinux)  			throw new Exception ("The file was locked' but had no data");  	//Notify the other process that we have started  	string filename = System.IO.Path.Combine (m_controldir' COMM_FILE_PREFIX + Guid.NewGuid ().ToString ());  	//Write out the commandline arguments  	string[] cmdargs = System.Environment.GetCommandLineArgs ();  	using (System.IO.StreamWriter sw = new System.IO.StreamWriter (Library.Utility.Utility.IsClientLinux ? UnixSupport.File.OpenExclusive (filename' System.IO.FileAccess.Write) : new System.IO.FileStream (filename' System.IO.FileMode.CreateNew' System.IO.FileAccess.Write' System.IO.FileShare.None)))  		for (int i = 1; i < cmdargs.Length; i++)  			//Skip the first' as that is the filename  			sw.WriteLine (cmdargs [i]);  	//Wait for the other process to delete the file' indicating that it is processed  	retrycount = 5;  	while (retrycount > 0 && System.IO.File.Exists (filename)) {  		System.Threading.Thread.Sleep (500);  		retrycount--;  	}  	//This may happen if the other process is closing as we write the command  	if (System.IO.File.Exists (filename)) {  		//Try to clean up' so the other process does not spuriously show this  		try {  			System.IO.File.Delete (filename);  		} catch {  		}  		throw new Exception ("The lock file was locked' but the locking process did not respond to the start command");  	}  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The following statement contains a magic number: while (retrycount > 0 && new System.IO.FileInfo (m_lockfilename).Length == 0) {  	System.Threading.Thread.Sleep (500);  	retrycount--;  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The following statement contains a magic number: retrycount = 5;  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The following statement contains a magic number: while (retrycount > 0 && System.IO.File.Exists (filename)) {  	System.Threading.Thread.Sleep (500);  	retrycount--;  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,SingleInstance,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: if (Library.Utility.Utility.IsClientLinux)  	System.Threading.Thread.Sleep (1000);  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: do {  	try {  		//If the other process deleted the file' just quit  		if (!System.IO.File.Exists (e.FullPath))  			return;  		List<string> args = new List<string> ();  		using (System.IO.StreamReader sr = new System.IO.StreamReader (Duplicati.Library.Utility.Utility.IsClientLinux ? UnixSupport.File.OpenExclusive (e.FullPath' System.IO.FileAccess.ReadWrite) : new System.IO.FileStream (e.FullPath' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.None)))  			while (!sr.EndOfStream)  				args.Add (sr.ReadLine ());  		commandline = args.ToArray ();  		//Remove the file to notify the other process that we have correctly processed the call  		System.IO.File.Delete (e.FullPath);  	} catch {  	}  	//If file-reading failed' wait a little before retry  	if (commandline == null) {  		System.Threading.Thread.Sleep (500);  		retrycount--;  	}  } while (retrycount > 0 && commandline == null);  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: if (commandline == null) {  	System.Threading.Thread.Sleep (500);  	retrycount--;  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: if (commandline == null) {  	//There is nothing we can do :(  } else {  	//If we read the data but did not delete the file' the other end still hangs  	//and waits for us to clean up' so try again.  	retrycount = 5;  	while (retrycount > 0 && System.IO.File.Exists (e.FullPath)) {  		try {  			System.IO.File.Delete (e.FullPath);  		} catch {  			//Wait before the retry  			System.Threading.Thread.Sleep (500);  		}  		retrycount--;  	}  	//If this happens' the other process will give an error message  	if (System.IO.File.Exists (e.FullPath)) {  		//There is nothing we can do :(  	}  	//Finally inform this instance about the call  	if (SecondInstanceDetected != null)  		SecondInstanceDetected (commandline);  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: if (commandline == null) {  	//There is nothing we can do :(  } else {  	//If we read the data but did not delete the file' the other end still hangs  	//and waits for us to clean up' so try again.  	retrycount = 5;  	while (retrycount > 0 && System.IO.File.Exists (e.FullPath)) {  		try {  			System.IO.File.Delete (e.FullPath);  		} catch {  			//Wait before the retry  			System.Threading.Thread.Sleep (500);  		}  		retrycount--;  	}  	//If this happens' the other process will give an error message  	if (System.IO.File.Exists (e.FullPath)) {  		//There is nothing we can do :(  	}  	//Finally inform this instance about the call  	if (SecondInstanceDetected != null)  		SecondInstanceDetected (commandline);  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: retrycount = 5;  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: while (retrycount > 0 && System.IO.File.Exists (e.FullPath)) {  	try {  		System.IO.File.Delete (e.FullPath);  	} catch {  		//Wait before the retry  		System.Threading.Thread.Sleep (500);  	}  	retrycount--;  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: try {  	System.IO.File.Delete (e.FullPath);  } catch {  	//Wait before the retry  	System.Threading.Thread.Sleep (500);  }  
Magic Number,Duplicati.Server,SingleInstance,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\SingleInstance.cs,m_filewatcher_Created,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The following statement contains a magic number: try {  	var sink = new MessageSink (data.TaskID' backup.ID);  	if (fromQueue) {  		Program.GenerateProgressState = () => sink.Copy ();  		Program.StatusEventNotifyer.SignalNewEvent ();  	}  	var options = ApplyOptions (backup' data.Operation' GetCommonOptions (backup' data.Operation));  	if (data.ExtraOptions != null)  		foreach (var k in data.ExtraOptions)  			options [k.Key] = k.Value;  	// Pack in the system or task config for easy restore  	if (data.Operation == DuplicatiOperation.Backup && options.ContainsKey ("store-task-config")) {  		var all_tasks = string.Equals (options ["store-task-config"]' "all"' StringComparison.InvariantCultureIgnoreCase) || string.Equals (options ["store-task-config"]' "*"' StringComparison.InvariantCultureIgnoreCase);  		var this_task = Duplicati.Library.Utility.Utility.ParseBool (options ["store-task-config"]' false);  		options.Remove ("store-task-config");  		if (all_tasks || this_task) {  			if (tempfolder == null)  				tempfolder = new Duplicati.Library.Utility.TempFolder ();  			var temppath = System.IO.Path.Combine (tempfolder' "task-setup.json");  			using (var tempfile = Duplicati.Library.Utility.TempFile.WrapExistingFile (temppath)) {  				object taskdata = null;  				if (all_tasks)  					taskdata = Program.DataConnection.Backups.Where (x => !x.IsTemporary).Select (x => Program.DataConnection.PrepareBackupForExport (Program.DataConnection.GetBackup (x.ID)));  				else  					taskdata = new[] {  						Program.DataConnection.PrepareBackupForExport (data.Backup)  					};  				using (var fs = System.IO.File.OpenWrite (tempfile))  					using (var sw = new System.IO.StreamWriter (fs' System.Text.Encoding.UTF8))  						Serializer.SerializeJson (sw' taskdata' true);  				tempfile.Protected = true;  				string controlfiles = null;  				options.TryGetValue ("control-files"' out controlfiles);  				if (string.IsNullOrWhiteSpace (controlfiles))  					controlfiles = tempfile;  				else  					controlfiles += System.IO.Path.PathSeparator + tempfile;  				options ["control-files"] = controlfiles;  			}  		}  	}  	using (tempfolder)  		using (var controller = new Duplicati.Library.Main.Controller (backup.TargetURL' options' sink)) {  			((RunnerData)data).Controller = controller;  			switch (data.Operation) {  			case DuplicatiOperation.Backup: {  				var filter = ApplyFilter (backup' data.Operation' GetCommonFilter (backup' data.Operation));  				var sources = (from n in backup.Sources  				let p = SpecialFolders.ExpandEnvironmentVariables (n)  				where !string.IsNullOrWhiteSpace (p)  				select p).ToArray ();  				var r = controller.Backup (sources' filter);  				UpdateMetadata (backup' r);  				return r;  			}  			case DuplicatiOperation.List: {  				var r = controller.List (data.FilterStrings);  				UpdateMetadata (backup' r);  				return r;  			}  			case DuplicatiOperation.Repair: {  				var r = controller.Repair (data.FilterStrings == null ? null : new Library.Utility.FilterExpression (data.FilterStrings));  				UpdateMetadata (backup' r);  				return r;  			}  			case DuplicatiOperation.RepairUpdate: {  				var r = controller.UpdateDatabaseWithVersions ();  				UpdateMetadata (backup' r);  				return r;  			}  			case DuplicatiOperation.Remove: {  				var r = controller.Delete ();  				UpdateMetadata (backup' r);  				return r;  			}  			case DuplicatiOperation.Restore: {  				var r = controller.Restore (data.FilterStrings);  				UpdateMetadata (backup' r);  				return r;  			}  			case DuplicatiOperation.Verify: {  				var r = controller.Test ();  				UpdateMetadata (backup' r);  				return r;  			}  			case DuplicatiOperation.Compact: {  				var r = controller.Compact ();  				UpdateMetadata (backup' r);  				return r;  			}  			case DuplicatiOperation.CreateReport: {  				using (var tf = new Duplicati.Library.Utility.TempFile ()) {  					var r = controller.CreateLogDatabase (tf);  					var tempid = Program.DataConnection.RegisterTempFile ("create-bug-report"' r.TargetPath' DateTime.Now.AddDays (3));  					if (string.Equals (tf' r.TargetPath' Library.Utility.Utility.ClientFilenameStringComparision))  						tf.Protected = true;  					Program.DataConnection.RegisterNotification (NotificationType.Information' "Bugreport ready"' "Bugreport is ready for download"' null' null' "bug-report:created:" + tempid' (n' a) => n);  					return r;  				}  			}  			case DuplicatiOperation.ListRemote: {  				var r = controller.ListRemote ();  				UpdateMetadata (backup' r);  				return r;  			}  			case DuplicatiOperation.Delete: {  				if (Library.Utility.Utility.ParseBoolOption (data.ExtraOptions' "delete-remote-files"))  					controller.DeleteAllRemoteFiles ();  				if (Library.Utility.Utility.ParseBoolOption (data.ExtraOptions' "delete-local-db")) {  					string dbpath;  					options.TryGetValue ("db-path"' out dbpath);  					if (!string.IsNullOrWhiteSpace (dbpath) && System.IO.File.Exists (dbpath))  						System.IO.File.Delete (dbpath);  				}  				Program.DataConnection.DeleteBackup (backup);  				Program.Scheduler.Reschedule ();  				return null;  			}  			default:  				//TODO: Log this  				return null;  			}  		}  } catch (Exception ex) {  	Program.DataConnection.LogError (data.Backup.ID' string.Format ("Failed while executing \"{0}\" with id: {1}"' data.Operation' data.Backup.ID)' ex);  	UpdateMetadataError (data.Backup' ex);  	Library.UsageReporter.Reporter.Report (ex);  	if (!fromQueue)  		throw;  	return null;  } finally {  	((RunnerData)data).Controller = null;  }  
Magic Number,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The following statement contains a magic number: using (tempfolder)  	using (var controller = new Duplicati.Library.Main.Controller (backup.TargetURL' options' sink)) {  		((RunnerData)data).Controller = controller;  		switch (data.Operation) {  		case DuplicatiOperation.Backup: {  			var filter = ApplyFilter (backup' data.Operation' GetCommonFilter (backup' data.Operation));  			var sources = (from n in backup.Sources  			let p = SpecialFolders.ExpandEnvironmentVariables (n)  			where !string.IsNullOrWhiteSpace (p)  			select p).ToArray ();  			var r = controller.Backup (sources' filter);  			UpdateMetadata (backup' r);  			return r;  		}  		case DuplicatiOperation.List: {  			var r = controller.List (data.FilterStrings);  			UpdateMetadata (backup' r);  			return r;  		}  		case DuplicatiOperation.Repair: {  			var r = controller.Repair (data.FilterStrings == null ? null : new Library.Utility.FilterExpression (data.FilterStrings));  			UpdateMetadata (backup' r);  			return r;  		}  		case DuplicatiOperation.RepairUpdate: {  			var r = controller.UpdateDatabaseWithVersions ();  			UpdateMetadata (backup' r);  			return r;  		}  		case DuplicatiOperation.Remove: {  			var r = controller.Delete ();  			UpdateMetadata (backup' r);  			return r;  		}  		case DuplicatiOperation.Restore: {  			var r = controller.Restore (data.FilterStrings);  			UpdateMetadata (backup' r);  			return r;  		}  		case DuplicatiOperation.Verify: {  			var r = controller.Test ();  			UpdateMetadata (backup' r);  			return r;  		}  		case DuplicatiOperation.Compact: {  			var r = controller.Compact ();  			UpdateMetadata (backup' r);  			return r;  		}  		case DuplicatiOperation.CreateReport: {  			using (var tf = new Duplicati.Library.Utility.TempFile ()) {  				var r = controller.CreateLogDatabase (tf);  				var tempid = Program.DataConnection.RegisterTempFile ("create-bug-report"' r.TargetPath' DateTime.Now.AddDays (3));  				if (string.Equals (tf' r.TargetPath' Library.Utility.Utility.ClientFilenameStringComparision))  					tf.Protected = true;  				Program.DataConnection.RegisterNotification (NotificationType.Information' "Bugreport ready"' "Bugreport is ready for download"' null' null' "bug-report:created:" + tempid' (n' a) => n);  				return r;  			}  		}  		case DuplicatiOperation.ListRemote: {  			var r = controller.ListRemote ();  			UpdateMetadata (backup' r);  			return r;  		}  		case DuplicatiOperation.Delete: {  			if (Library.Utility.Utility.ParseBoolOption (data.ExtraOptions' "delete-remote-files"))  				controller.DeleteAllRemoteFiles ();  			if (Library.Utility.Utility.ParseBoolOption (data.ExtraOptions' "delete-local-db")) {  				string dbpath;  				options.TryGetValue ("db-path"' out dbpath);  				if (!string.IsNullOrWhiteSpace (dbpath) && System.IO.File.Exists (dbpath))  					System.IO.File.Delete (dbpath);  			}  			Program.DataConnection.DeleteBackup (backup);  			Program.Scheduler.Reschedule ();  			return null;  		}  		default:  			//TODO: Log this  			return null;  		}  	}  
Magic Number,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The following statement contains a magic number: using (var controller = new Duplicati.Library.Main.Controller (backup.TargetURL' options' sink)) {  	((RunnerData)data).Controller = controller;  	switch (data.Operation) {  	case DuplicatiOperation.Backup: {  		var filter = ApplyFilter (backup' data.Operation' GetCommonFilter (backup' data.Operation));  		var sources = (from n in backup.Sources  		let p = SpecialFolders.ExpandEnvironmentVariables (n)  		where !string.IsNullOrWhiteSpace (p)  		select p).ToArray ();  		var r = controller.Backup (sources' filter);  		UpdateMetadata (backup' r);  		return r;  	}  	case DuplicatiOperation.List: {  		var r = controller.List (data.FilterStrings);  		UpdateMetadata (backup' r);  		return r;  	}  	case DuplicatiOperation.Repair: {  		var r = controller.Repair (data.FilterStrings == null ? null : new Library.Utility.FilterExpression (data.FilterStrings));  		UpdateMetadata (backup' r);  		return r;  	}  	case DuplicatiOperation.RepairUpdate: {  		var r = controller.UpdateDatabaseWithVersions ();  		UpdateMetadata (backup' r);  		return r;  	}  	case DuplicatiOperation.Remove: {  		var r = controller.Delete ();  		UpdateMetadata (backup' r);  		return r;  	}  	case DuplicatiOperation.Restore: {  		var r = controller.Restore (data.FilterStrings);  		UpdateMetadata (backup' r);  		return r;  	}  	case DuplicatiOperation.Verify: {  		var r = controller.Test ();  		UpdateMetadata (backup' r);  		return r;  	}  	case DuplicatiOperation.Compact: {  		var r = controller.Compact ();  		UpdateMetadata (backup' r);  		return r;  	}  	case DuplicatiOperation.CreateReport: {  		using (var tf = new Duplicati.Library.Utility.TempFile ()) {  			var r = controller.CreateLogDatabase (tf);  			var tempid = Program.DataConnection.RegisterTempFile ("create-bug-report"' r.TargetPath' DateTime.Now.AddDays (3));  			if (string.Equals (tf' r.TargetPath' Library.Utility.Utility.ClientFilenameStringComparision))  				tf.Protected = true;  			Program.DataConnection.RegisterNotification (NotificationType.Information' "Bugreport ready"' "Bugreport is ready for download"' null' null' "bug-report:created:" + tempid' (n' a) => n);  			return r;  		}  	}  	case DuplicatiOperation.ListRemote: {  		var r = controller.ListRemote ();  		UpdateMetadata (backup' r);  		return r;  	}  	case DuplicatiOperation.Delete: {  		if (Library.Utility.Utility.ParseBoolOption (data.ExtraOptions' "delete-remote-files"))  			controller.DeleteAllRemoteFiles ();  		if (Library.Utility.Utility.ParseBoolOption (data.ExtraOptions' "delete-local-db")) {  			string dbpath;  			options.TryGetValue ("db-path"' out dbpath);  			if (!string.IsNullOrWhiteSpace (dbpath) && System.IO.File.Exists (dbpath))  				System.IO.File.Delete (dbpath);  		}  		Program.DataConnection.DeleteBackup (backup);  		Program.Scheduler.Reschedule ();  		return null;  	}  	default:  		//TODO: Log this  		return null;  	}  }  
Magic Number,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The following statement contains a magic number: switch (data.Operation) {  case DuplicatiOperation.Backup: {  	var filter = ApplyFilter (backup' data.Operation' GetCommonFilter (backup' data.Operation));  	var sources = (from n in backup.Sources  	let p = SpecialFolders.ExpandEnvironmentVariables (n)  	where !string.IsNullOrWhiteSpace (p)  	select p).ToArray ();  	var r = controller.Backup (sources' filter);  	UpdateMetadata (backup' r);  	return r;  }  case DuplicatiOperation.List: {  	var r = controller.List (data.FilterStrings);  	UpdateMetadata (backup' r);  	return r;  }  case DuplicatiOperation.Repair: {  	var r = controller.Repair (data.FilterStrings == null ? null : new Library.Utility.FilterExpression (data.FilterStrings));  	UpdateMetadata (backup' r);  	return r;  }  case DuplicatiOperation.RepairUpdate: {  	var r = controller.UpdateDatabaseWithVersions ();  	UpdateMetadata (backup' r);  	return r;  }  case DuplicatiOperation.Remove: {  	var r = controller.Delete ();  	UpdateMetadata (backup' r);  	return r;  }  case DuplicatiOperation.Restore: {  	var r = controller.Restore (data.FilterStrings);  	UpdateMetadata (backup' r);  	return r;  }  case DuplicatiOperation.Verify: {  	var r = controller.Test ();  	UpdateMetadata (backup' r);  	return r;  }  case DuplicatiOperation.Compact: {  	var r = controller.Compact ();  	UpdateMetadata (backup' r);  	return r;  }  case DuplicatiOperation.CreateReport: {  	using (var tf = new Duplicati.Library.Utility.TempFile ()) {  		var r = controller.CreateLogDatabase (tf);  		var tempid = Program.DataConnection.RegisterTempFile ("create-bug-report"' r.TargetPath' DateTime.Now.AddDays (3));  		if (string.Equals (tf' r.TargetPath' Library.Utility.Utility.ClientFilenameStringComparision))  			tf.Protected = true;  		Program.DataConnection.RegisterNotification (NotificationType.Information' "Bugreport ready"' "Bugreport is ready for download"' null' null' "bug-report:created:" + tempid' (n' a) => n);  		return r;  	}  }  case DuplicatiOperation.ListRemote: {  	var r = controller.ListRemote ();  	UpdateMetadata (backup' r);  	return r;  }  case DuplicatiOperation.Delete: {  	if (Library.Utility.Utility.ParseBoolOption (data.ExtraOptions' "delete-remote-files"))  		controller.DeleteAllRemoteFiles ();  	if (Library.Utility.Utility.ParseBoolOption (data.ExtraOptions' "delete-local-db")) {  		string dbpath;  		options.TryGetValue ("db-path"' out dbpath);  		if (!string.IsNullOrWhiteSpace (dbpath) && System.IO.File.Exists (dbpath))  			System.IO.File.Delete (dbpath);  	}  	Program.DataConnection.DeleteBackup (backup);  	Program.Scheduler.Reschedule ();  	return null;  }  default:  	//TODO: Log this  	return null;  }  
Magic Number,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,Run,The following statement contains a magic number: using (var tf = new Duplicati.Library.Utility.TempFile ()) {  	var r = controller.CreateLogDatabase (tf);  	var tempid = Program.DataConnection.RegisterTempFile ("create-bug-report"' r.TargetPath' DateTime.Now.AddDays (3));  	if (string.Equals (tf' r.TargetPath' Library.Utility.Utility.ClientFilenameStringComparision))  		tf.Protected = true;  	Program.DataConnection.RegisterNotification (NotificationType.Information' "Bugreport ready"' "Bugreport is ready for download"' null' null' "bug-report:created:" + tempid' (n' a) => n);  	return r;  }  
Magic Number,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,ApplyOptions,The following statement contains a magic number: foreach (var o in backup.Settings)  	if (o.Name.StartsWith ("--") && TestIfOptionApplies (backup' mode' o.Filter))  		options [o.Name.Substring (2)] = o.Value;  
Magic Number,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,ApplyOptions,The following statement contains a magic number: if (o.Name.StartsWith ("--") && TestIfOptionApplies (backup' mode' o.Filter))  	options [o.Name.Substring (2)] = o.Value;  
Magic Number,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,ApplyOptions,The following statement contains a magic number: options [o.Name.Substring (2)] = o.Value;  
Magic Number,Duplicati.Server,Runner,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Runner.cs,GetCommonOptions,The following statement contains a magic number: return (from n in Program.DataConnection.Settings  where TestIfOptionApplies (backup' mode' n.Filter)  select n).ToDictionary (k => k.Name.StartsWith ("--"' StringComparison.Ordinal) ? k.Name.Substring (2) : k.Name' k => k.Value);  
Magic Number,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The following statement contains a magic number: while (!m_terminated) {  	var nextCheck = Program.DataConnection.ApplicationSettings.NextUpdateCheck;  	if (nextCheck < DateTime.UtcNow || m_forceCheck) {  		lock (m_lock)  			m_forceCheck = false;  		ThreadState = UpdatePollerStates.Checking;  		Program.StatusEventNotifyer.SignalNewEvent ();  		DateTime started = DateTime.UtcNow;  		Program.DataConnection.ApplicationSettings.LastUpdateCheck = started;  		nextCheck = Program.DataConnection.ApplicationSettings.NextUpdateCheck;  		Library.AutoUpdater.ReleaseType rt;  		if (!Enum.TryParse<Library.AutoUpdater.ReleaseType> (Program.DataConnection.ApplicationSettings.UpdateChannel' true' out rt))  			rt = Duplicati.Library.AutoUpdater.ReleaseType.Unknown;  		// Choose the default channel in case we have unknown  		rt = rt == Duplicati.Library.AutoUpdater.ReleaseType.Unknown ? Duplicati.Library.AutoUpdater.AutoUpdateSettings.DefaultUpdateChannel : rt;  		try {  			var update = Duplicati.Library.AutoUpdater.UpdaterManager.CheckForUpdate (rt);  			if (update != null)  				Program.DataConnection.ApplicationSettings.UpdatedVersion = update;  		} catch {  		}  		// It could be that we have registered an update from a more unstable channel'   		// but the user has switched to a more stable channel.  		// In that case we discard the old update to avoid offering it.  		if (Program.DataConnection.ApplicationSettings.UpdatedVersion != null) {  			Library.AutoUpdater.ReleaseType updatert;  			var updatertstring = Program.DataConnection.ApplicationSettings.UpdatedVersion.ReleaseType;  			if (string.Equals (updatertstring' "preview"' StringComparison.OrdinalIgnoreCase))  				updatertstring = Library.AutoUpdater.ReleaseType.Experimental.ToString ();  			if (!Enum.TryParse<Library.AutoUpdater.ReleaseType> (updatertstring' true' out updatert))  				updatert = Duplicati.Library.AutoUpdater.ReleaseType.Nightly;  			if (updatert == Duplicati.Library.AutoUpdater.ReleaseType.Unknown)  				updatert = Duplicati.Library.AutoUpdater.ReleaseType.Nightly;  			if (updatert > rt)  				Program.DataConnection.ApplicationSettings.UpdatedVersion = null;  		}  		if (Program.DataConnection.ApplicationSettings.UpdatedVersion != null && Duplicati.Library.AutoUpdater.UpdaterManager.TryParseVersion (Program.DataConnection.ApplicationSettings.UpdatedVersion.Version) > System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version) {  			Program.DataConnection.RegisterNotification (NotificationType.Information' "Found update"' Program.DataConnection.ApplicationSettings.UpdatedVersion.Displayname' null' null' "update:new"' (self' all) => {  				return all.Where (x => x.Action == "update:new").FirstOrDefault () ?? self;  			});  		}  	}  	if (m_download) {  		lock (m_lock)  			m_download = false;  		var v = Program.DataConnection.ApplicationSettings.UpdatedVersion;  		if (v != null) {  			ThreadState = UpdatePollerStates.Downloading;  			Program.StatusEventNotifyer.SignalNewEvent ();  			if (Duplicati.Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (v' pg => {  				DownloadProgess = pg;  			}))  				Program.StatusEventNotifyer.SignalNewEvent ();  		}  	}  	DownloadProgess = 0;  	if (ThreadState != UpdatePollerStates.Waiting) {  		ThreadState = UpdatePollerStates.Waiting;  		Program.StatusEventNotifyer.SignalNewEvent ();  	}  	var waitTime = nextCheck - DateTime.UtcNow;  	if (waitTime.TotalSeconds < 5)  		waitTime = TimeSpan.FromSeconds (5);  	m_waitSignal.WaitOne (waitTime' true);  }  
Magic Number,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The following statement contains a magic number: while (!m_terminated) {  	var nextCheck = Program.DataConnection.ApplicationSettings.NextUpdateCheck;  	if (nextCheck < DateTime.UtcNow || m_forceCheck) {  		lock (m_lock)  			m_forceCheck = false;  		ThreadState = UpdatePollerStates.Checking;  		Program.StatusEventNotifyer.SignalNewEvent ();  		DateTime started = DateTime.UtcNow;  		Program.DataConnection.ApplicationSettings.LastUpdateCheck = started;  		nextCheck = Program.DataConnection.ApplicationSettings.NextUpdateCheck;  		Library.AutoUpdater.ReleaseType rt;  		if (!Enum.TryParse<Library.AutoUpdater.ReleaseType> (Program.DataConnection.ApplicationSettings.UpdateChannel' true' out rt))  			rt = Duplicati.Library.AutoUpdater.ReleaseType.Unknown;  		// Choose the default channel in case we have unknown  		rt = rt == Duplicati.Library.AutoUpdater.ReleaseType.Unknown ? Duplicati.Library.AutoUpdater.AutoUpdateSettings.DefaultUpdateChannel : rt;  		try {  			var update = Duplicati.Library.AutoUpdater.UpdaterManager.CheckForUpdate (rt);  			if (update != null)  				Program.DataConnection.ApplicationSettings.UpdatedVersion = update;  		} catch {  		}  		// It could be that we have registered an update from a more unstable channel'   		// but the user has switched to a more stable channel.  		// In that case we discard the old update to avoid offering it.  		if (Program.DataConnection.ApplicationSettings.UpdatedVersion != null) {  			Library.AutoUpdater.ReleaseType updatert;  			var updatertstring = Program.DataConnection.ApplicationSettings.UpdatedVersion.ReleaseType;  			if (string.Equals (updatertstring' "preview"' StringComparison.OrdinalIgnoreCase))  				updatertstring = Library.AutoUpdater.ReleaseType.Experimental.ToString ();  			if (!Enum.TryParse<Library.AutoUpdater.ReleaseType> (updatertstring' true' out updatert))  				updatert = Duplicati.Library.AutoUpdater.ReleaseType.Nightly;  			if (updatert == Duplicati.Library.AutoUpdater.ReleaseType.Unknown)  				updatert = Duplicati.Library.AutoUpdater.ReleaseType.Nightly;  			if (updatert > rt)  				Program.DataConnection.ApplicationSettings.UpdatedVersion = null;  		}  		if (Program.DataConnection.ApplicationSettings.UpdatedVersion != null && Duplicati.Library.AutoUpdater.UpdaterManager.TryParseVersion (Program.DataConnection.ApplicationSettings.UpdatedVersion.Version) > System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version) {  			Program.DataConnection.RegisterNotification (NotificationType.Information' "Found update"' Program.DataConnection.ApplicationSettings.UpdatedVersion.Displayname' null' null' "update:new"' (self' all) => {  				return all.Where (x => x.Action == "update:new").FirstOrDefault () ?? self;  			});  		}  	}  	if (m_download) {  		lock (m_lock)  			m_download = false;  		var v = Program.DataConnection.ApplicationSettings.UpdatedVersion;  		if (v != null) {  			ThreadState = UpdatePollerStates.Downloading;  			Program.StatusEventNotifyer.SignalNewEvent ();  			if (Duplicati.Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (v' pg => {  				DownloadProgess = pg;  			}))  				Program.StatusEventNotifyer.SignalNewEvent ();  		}  	}  	DownloadProgess = 0;  	if (ThreadState != UpdatePollerStates.Waiting) {  		ThreadState = UpdatePollerStates.Waiting;  		Program.StatusEventNotifyer.SignalNewEvent ();  	}  	var waitTime = nextCheck - DateTime.UtcNow;  	if (waitTime.TotalSeconds < 5)  		waitTime = TimeSpan.FromSeconds (5);  	m_waitSignal.WaitOne (waitTime' true);  }  
Magic Number,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The following statement contains a magic number: if (waitTime.TotalSeconds < 5)  	waitTime = TimeSpan.FromSeconds (5);  
Magic Number,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The following statement contains a magic number: if (waitTime.TotalSeconds < 5)  	waitTime = TimeSpan.FromSeconds (5);  
Magic Number,Duplicati.Server,UpdatePollThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\UpdatePollThread.cs,Run,The following statement contains a magic number: waitTime = TimeSpan.FromSeconds (5);  
Magic Number,Duplicati.Server,LogWriteHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LogWriteHandler.cs,RenewTimeout,The following statement contains a magic number: lock (m_lock) {  	m_timeouts [(int)type] = DateTime.Now.AddSeconds (30);  	m_anytimeouts = true;  	if (m_buffer == null || m_buffer.Size == INACTIVE_SIZE)  		m_buffer = new RingBuffer<LogEntry> (ACTIVE_SIZE' m_buffer);  }  
Magic Number,Duplicati.Server,LogWriteHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\LogWriteHandler.cs,RenewTimeout,The following statement contains a magic number: m_timeouts [(int)type] = DateTime.Now.AddSeconds (30);  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,Connection,The following statement contains a magic number: for (var i = 0; i < 4; i++)  	m_errorcmd.Parameters.Add (m_errorcmd.CreateParameter ());  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,LogError,The following statement contains a magic number: lock (m_lock) {  	long id;  	if (!long.TryParse (backupid' out id))  		id = -1;  	((System.Data.IDbDataParameter)m_errorcmd.Parameters [0]).Value = id;  	((System.Data.IDbDataParameter)m_errorcmd.Parameters [1]).Value = message;  	((System.Data.IDbDataParameter)m_errorcmd.Parameters [2]).Value = ex == null ? null : ex.ToString ();  	((System.Data.IDbDataParameter)m_errorcmd.Parameters [3]).Value = NormalizeDateTimeToEpochSeconds (DateTime.UtcNow);  	m_errorcmd.ExecuteNonQuery ();  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,LogError,The following statement contains a magic number: lock (m_lock) {  	long id;  	if (!long.TryParse (backupid' out id))  		id = -1;  	((System.Data.IDbDataParameter)m_errorcmd.Parameters [0]).Value = id;  	((System.Data.IDbDataParameter)m_errorcmd.Parameters [1]).Value = message;  	((System.Data.IDbDataParameter)m_errorcmd.Parameters [2]).Value = ex == null ? null : ex.ToString ();  	((System.Data.IDbDataParameter)m_errorcmd.Parameters [3]).Value = NormalizeDateTimeToEpochSeconds (DateTime.UtcNow);  	m_errorcmd.ExecuteNonQuery ();  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,LogError,The following statement contains a magic number: ((System.Data.IDbDataParameter)m_errorcmd.Parameters [2]).Value = ex == null ? null : ex.ToString ();  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,LogError,The following statement contains a magic number: ((System.Data.IDbDataParameter)m_errorcmd.Parameters [3]).Value = NormalizeDateTimeToEpochSeconds (DateTime.UtcNow);  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetFilters,The following statement contains a magic number: lock (m_lock)  	return ReadFromDb (rd => (IFilter)new Filter () {  		Order = ConvertToInt64 (rd' 0)'  		Include = ConvertToBoolean (rd' 1)'  		Expression = ConvertToString (rd' 2) ?? ""  	}' @"SELECT ""Order""' ""Include""' ""Expression"" FROM ""Filter"" WHERE ""BackupID"" = ? ORDER BY ""Order"" "' id).ToArray ();  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetFilters,The following statement contains a magic number: return ReadFromDb (rd => (IFilter)new Filter () {  	Order = ConvertToInt64 (rd' 0)'  	Include = ConvertToBoolean (rd' 1)'  	Expression = ConvertToString (rd' 2) ?? ""  }' @"SELECT ""Order""' ""Include""' ""Expression"" FROM ""Filter"" WHERE ""BackupID"" = ? ORDER BY ""Order"" "' id).ToArray ();  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetSettings,The following statement contains a magic number: lock (m_lock)  	return ReadFromDb (rd => (ISetting)new Setting () {  		Filter = ConvertToString (rd' 0) ?? ""'  		Name = ConvertToString (rd' 1) ?? ""'  		Value = ConvertToString (rd' 2) ?? ""  	//TODO: Attach the argument information  	}' @"SELECT ""Filter""' ""Name""' ""Value"" FROM ""Option"" WHERE ""BackupID"" = ?"' id).ToArray ();  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetSettings,The following statement contains a magic number: return ReadFromDb (rd => (ISetting)new Setting () {  	Filter = ConvertToString (rd' 0) ?? ""'  	Name = ConvertToString (rd' 1) ?? ""'  	Value = ConvertToString (rd' 2) ?? ""  //TODO: Attach the argument information  }' @"SELECT ""Filter""' ""Name""' ""Value"" FROM ""Option"" WHERE ""BackupID"" = ?"' id).ToArray ();  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetBackup,The following statement contains a magic number: lock (m_lock) {  	var bk = ReadFromDb (rd => new Backup () {  		ID = ConvertToInt64 (rd' 0).ToString ()'  		Name = ConvertToString (rd' 1)'  		Tags = (ConvertToString (rd' 2) ?? "").Split (new char[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries)'  		TargetURL = ConvertToString (rd' 3)'  		DBPath = ConvertToString (rd' 4)'  	}' @"SELECT ""ID""' ""Name""' ""Tags""' ""TargetURL""' ""DBPath"" FROM ""Backup"" WHERE ID = ?"' id).FirstOrDefault ();  	if (bk != null)  		bk.LoadChildren (this);  	return bk;  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetBackup,The following statement contains a magic number: lock (m_lock) {  	var bk = ReadFromDb (rd => new Backup () {  		ID = ConvertToInt64 (rd' 0).ToString ()'  		Name = ConvertToString (rd' 1)'  		Tags = (ConvertToString (rd' 2) ?? "").Split (new char[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries)'  		TargetURL = ConvertToString (rd' 3)'  		DBPath = ConvertToString (rd' 4)'  	}' @"SELECT ""ID""' ""Name""' ""Tags""' ""TargetURL""' ""DBPath"" FROM ""Backup"" WHERE ID = ?"' id).FirstOrDefault ();  	if (bk != null)  		bk.LoadChildren (this);  	return bk;  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetBackup,The following statement contains a magic number: lock (m_lock) {  	var bk = ReadFromDb (rd => new Backup () {  		ID = ConvertToInt64 (rd' 0).ToString ()'  		Name = ConvertToString (rd' 1)'  		Tags = (ConvertToString (rd' 2) ?? "").Split (new char[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries)'  		TargetURL = ConvertToString (rd' 3)'  		DBPath = ConvertToString (rd' 4)'  	}' @"SELECT ""ID""' ""Name""' ""Tags""' ""TargetURL""' ""DBPath"" FROM ""Backup"" WHERE ID = ?"' id).FirstOrDefault ();  	if (bk != null)  		bk.LoadChildren (this);  	return bk;  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetSchedule,The following statement contains a magic number: lock (m_lock) {  	var bk = ReadFromDb (rd => new Schedule () {  		ID = ConvertToInt64 (rd' 0)'  		Tags = (ConvertToString (rd' 1) ?? "").Split (new char[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries)'  		Time = ConvertToDateTime (rd' 2)'  		Repeat = ConvertToString (rd' 3)'  		LastRun = ConvertToDateTime (rd' 4)'  		Rule = ConvertToString (rd' 5)'  	}' @"SELECT ""ID""' ""Tags""' ""Time""' ""Repeat""' ""LastRun""' ""Rule"" FROM ""Schedule"" WHERE ID = ?"' id).FirstOrDefault ();  	return bk;  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetSchedule,The following statement contains a magic number: lock (m_lock) {  	var bk = ReadFromDb (rd => new Schedule () {  		ID = ConvertToInt64 (rd' 0)'  		Tags = (ConvertToString (rd' 1) ?? "").Split (new char[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries)'  		Time = ConvertToDateTime (rd' 2)'  		Repeat = ConvertToString (rd' 3)'  		LastRun = ConvertToDateTime (rd' 4)'  		Rule = ConvertToString (rd' 5)'  	}' @"SELECT ""ID""' ""Tags""' ""Time""' ""Repeat""' ""LastRun""' ""Rule"" FROM ""Schedule"" WHERE ID = ?"' id).FirstOrDefault ();  	return bk;  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetSchedule,The following statement contains a magic number: lock (m_lock) {  	var bk = ReadFromDb (rd => new Schedule () {  		ID = ConvertToInt64 (rd' 0)'  		Tags = (ConvertToString (rd' 1) ?? "").Split (new char[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries)'  		Time = ConvertToDateTime (rd' 2)'  		Repeat = ConvertToString (rd' 3)'  		LastRun = ConvertToDateTime (rd' 4)'  		Rule = ConvertToString (rd' 5)'  	}' @"SELECT ""ID""' ""Tags""' ""Time""' ""Repeat""' ""LastRun""' ""Rule"" FROM ""Schedule"" WHERE ID = ?"' id).FirstOrDefault ();  	return bk;  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,GetSchedule,The following statement contains a magic number: lock (m_lock) {  	var bk = ReadFromDb (rd => new Schedule () {  		ID = ConvertToInt64 (rd' 0)'  		Tags = (ConvertToString (rd' 1) ?? "").Split (new char[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries)'  		Time = ConvertToDateTime (rd' 2)'  		Repeat = ConvertToString (rd' 3)'  		LastRun = ConvertToDateTime (rd' 4)'  		Rule = ConvertToString (rd' 5)'  	}' @"SELECT ""ID""' ""Tags""' ""Time""' ""Repeat""' ""LastRun""' ""Rule"" FROM ""Schedule"" WHERE ID = ?"' id).FirstOrDefault ();  	return bk;  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (item.Settings != null) {  	foreach (var s in item.Settings)  		if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  			disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  		else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  			passphrase = s.Value;  		else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  			int i;  			if (!int.TryParse (s.Value' out i) || i <= 0)  				return "Retention value must be a positive integer";  		} else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  				if (ts <= TimeSpan.FromMinutes (5))  					return "Retention value must be more than 5 minutes";  			} catch {  				return "Retention value must be a valid timespan";  			}  		} else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  				if (ds < 1024 * 1024)  					return "DBlock size must be at least 1MB";  			} catch {  				return "DBlock value must be a valid size string";  			}  		} else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  				if (ds < 1024 || ds > int.MaxValue)  					return "The blocksize must be at least 1KB";  			} catch {  				return "The blocksize value must be a valid size string";  			}  		} else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  			if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  				return "The prefix cannot contain hyphens (-)";  		}  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (item.Settings != null) {  	foreach (var s in item.Settings)  		if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  			disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  		else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  			passphrase = s.Value;  		else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  			int i;  			if (!int.TryParse (s.Value' out i) || i <= 0)  				return "Retention value must be a positive integer";  		} else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  				if (ts <= TimeSpan.FromMinutes (5))  					return "Retention value must be more than 5 minutes";  			} catch {  				return "Retention value must be a valid timespan";  			}  		} else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  				if (ds < 1024 * 1024)  					return "DBlock size must be at least 1MB";  			} catch {  				return "DBlock value must be a valid size string";  			}  		} else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  				if (ds < 1024 || ds > int.MaxValue)  					return "The blocksize must be at least 1KB";  			} catch {  				return "The blocksize value must be a valid size string";  			}  		} else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  			if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  				return "The prefix cannot contain hyphens (-)";  		}  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (item.Settings != null) {  	foreach (var s in item.Settings)  		if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  			disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  		else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  			passphrase = s.Value;  		else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  			int i;  			if (!int.TryParse (s.Value' out i) || i <= 0)  				return "Retention value must be a positive integer";  		} else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  				if (ts <= TimeSpan.FromMinutes (5))  					return "Retention value must be more than 5 minutes";  			} catch {  				return "Retention value must be a valid timespan";  			}  		} else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  				if (ds < 1024 * 1024)  					return "DBlock size must be at least 1MB";  			} catch {  				return "DBlock value must be a valid size string";  			}  		} else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  				if (ds < 1024 || ds > int.MaxValue)  					return "The blocksize must be at least 1KB";  			} catch {  				return "The blocksize value must be a valid size string";  			}  		} else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  			if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  				return "The prefix cannot contain hyphens (-)";  		}  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (item.Settings != null) {  	foreach (var s in item.Settings)  		if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  			disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  		else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  			passphrase = s.Value;  		else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  			int i;  			if (!int.TryParse (s.Value' out i) || i <= 0)  				return "Retention value must be a positive integer";  		} else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  				if (ts <= TimeSpan.FromMinutes (5))  					return "Retention value must be more than 5 minutes";  			} catch {  				return "Retention value must be a valid timespan";  			}  		} else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  				if (ds < 1024 * 1024)  					return "DBlock size must be at least 1MB";  			} catch {  				return "DBlock value must be a valid size string";  			}  		} else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  			try {  				var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  				if (ds < 1024 || ds > int.MaxValue)  					return "The blocksize must be at least 1KB";  			} catch {  				return "The blocksize value must be a valid size string";  			}  		} else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  			if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  				return "The prefix cannot contain hyphens (-)";  		}  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: foreach (var s in item.Settings)  	if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  		disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  	else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  		passphrase = s.Value;  	else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  		int i;  		if (!int.TryParse (s.Value' out i) || i <= 0)  			return "Retention value must be a positive integer";  	} else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  			if (ts <= TimeSpan.FromMinutes (5))  				return "Retention value must be more than 5 minutes";  		} catch {  			return "Retention value must be a valid timespan";  		}  	} else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  			if (ds < 1024 * 1024)  				return "DBlock size must be at least 1MB";  		} catch {  			return "DBlock value must be a valid size string";  		}  	} else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  			if (ds < 1024 || ds > int.MaxValue)  				return "The blocksize must be at least 1KB";  		} catch {  			return "The blocksize value must be a valid size string";  		}  	} else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  		if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  			return "The prefix cannot contain hyphens (-)";  	}  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: foreach (var s in item.Settings)  	if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  		disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  	else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  		passphrase = s.Value;  	else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  		int i;  		if (!int.TryParse (s.Value' out i) || i <= 0)  			return "Retention value must be a positive integer";  	} else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  			if (ts <= TimeSpan.FromMinutes (5))  				return "Retention value must be more than 5 minutes";  		} catch {  			return "Retention value must be a valid timespan";  		}  	} else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  			if (ds < 1024 * 1024)  				return "DBlock size must be at least 1MB";  		} catch {  			return "DBlock value must be a valid size string";  		}  	} else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  			if (ds < 1024 || ds > int.MaxValue)  				return "The blocksize must be at least 1KB";  		} catch {  			return "The blocksize value must be a valid size string";  		}  	} else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  		if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  			return "The prefix cannot contain hyphens (-)";  	}  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: foreach (var s in item.Settings)  	if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  		disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  	else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  		passphrase = s.Value;  	else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  		int i;  		if (!int.TryParse (s.Value' out i) || i <= 0)  			return "Retention value must be a positive integer";  	} else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  			if (ts <= TimeSpan.FromMinutes (5))  				return "Retention value must be more than 5 minutes";  		} catch {  			return "Retention value must be a valid timespan";  		}  	} else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  			if (ds < 1024 * 1024)  				return "DBlock size must be at least 1MB";  		} catch {  			return "DBlock value must be a valid size string";  		}  	} else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  			if (ds < 1024 || ds > int.MaxValue)  				return "The blocksize must be at least 1KB";  		} catch {  			return "The blocksize value must be a valid size string";  		}  	} else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  		if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  			return "The prefix cannot contain hyphens (-)";  	}  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: foreach (var s in item.Settings)  	if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  		disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  	else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  		passphrase = s.Value;  	else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  		int i;  		if (!int.TryParse (s.Value' out i) || i <= 0)  			return "Retention value must be a positive integer";  	} else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  			if (ts <= TimeSpan.FromMinutes (5))  				return "Retention value must be more than 5 minutes";  		} catch {  			return "Retention value must be a valid timespan";  		}  	} else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  			if (ds < 1024 * 1024)  				return "DBlock size must be at least 1MB";  		} catch {  			return "DBlock value must be a valid size string";  		}  	} else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  		try {  			var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  			if (ds < 1024 || ds > int.MaxValue)  				return "The blocksize must be at least 1KB";  		} catch {  			return "The blocksize value must be a valid size string";  		}  	} else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  		if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  			return "The prefix cannot contain hyphens (-)";  	}  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  	disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  	passphrase = s.Value;  else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  	disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  	passphrase = s.Value;  else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  	disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  	passphrase = s.Value;  else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "--no-encryption"' StringComparison.InvariantCultureIgnoreCase))  	disabled_encryption = string.IsNullOrWhiteSpace (s.Value) ? true : Library.Utility.Utility.ParseBool (s.Value' false);  else if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  	passphrase = s.Value;  else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  	passphrase = s.Value;  else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  	passphrase = s.Value;  else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  	passphrase = s.Value;  else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "passphrase"' StringComparison.InvariantCultureIgnoreCase))  	passphrase = s.Value;  else if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "keep-versions"' StringComparison.InvariantCultureIgnoreCase)) {  	int i;  	if (!int.TryParse (s.Value' out i) || i <= 0)  		return "Retention value must be a positive integer";  } else if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "keep-time"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Retention value must be more than 5 minutes";  	} catch {  		return "Retention value must be a valid timespan";  	}  } else if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: try {  	var ts = Library.Utility.Timeparser.ParseTimeSpan (s.Value);  	if (ts <= TimeSpan.FromMinutes (5))  		return "Retention value must be more than 5 minutes";  } catch {  	return "Retention value must be a valid timespan";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (ts <= TimeSpan.FromMinutes (5))  	return "Retention value must be more than 5 minutes";  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "dblock-size"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 * 1024)  			return "DBlock size must be at least 1MB";  	} catch {  		return "DBlock value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: try {  	var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  	if (ds < 1024 * 1024)  		return "DBlock size must be at least 1MB";  } catch {  	return "DBlock value must be a valid size string";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: try {  	var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  	if (ds < 1024 * 1024)  		return "DBlock size must be at least 1MB";  } catch {  	return "DBlock value must be a valid size string";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (ds < 1024 * 1024)  	return "DBlock size must be at least 1MB";  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (ds < 1024 * 1024)  	return "DBlock size must be at least 1MB";  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (string.Equals (s.Name' "--blocksize"' StringComparison.InvariantCultureIgnoreCase)) {  	try {  		var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  		if (ds < 1024 || ds > int.MaxValue)  			return "The blocksize must be at least 1KB";  	} catch {  		return "The blocksize value must be a valid size string";  	}  } else if (string.Equals (s.Name' "--prefix"' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (s.Value) && s.Value.Contains ("-"))  		return "The prefix cannot contain hyphens (-)";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: try {  	var ds = Library.Utility.Sizeparser.ParseSize (s.Value);  	if (ds < 1024 || ds > int.MaxValue)  		return "The blocksize must be at least 1KB";  } catch {  	return "The blocksize value must be a valid size string";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (ds < 1024 || ds > int.MaxValue)  	return "The blocksize must be at least 1KB";  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (schedule != null) {  	try {  		var ts = Library.Utility.Timeparser.ParseTimeSpan (schedule.Repeat);  		if (ts <= TimeSpan.FromMinutes (5))  			return "Schedule repetition time must be more than 5 minutes";  	} catch {  		return "Schedule repetition value must be a valid timespan";  	}  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: try {  	var ts = Library.Utility.Timeparser.ParseTimeSpan (schedule.Repeat);  	if (ts <= TimeSpan.FromMinutes (5))  		return "Schedule repetition time must be more than 5 minutes";  } catch {  	return "Schedule repetition value must be a valid timespan";  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,ValidateBackup,The following statement contains a magic number: if (ts <= TimeSpan.FromMinutes (5))  	return "Schedule repetition time must be more than 5 minutes";  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,AddOrUpdateBackup,The following statement contains a magic number: lock (m_lock) {  	bool update = item.ID != null;  	if (!update && item.DBPath == null) {  		var folder = Program.DATAFOLDER;  		if (!System.IO.Directory.Exists (folder))  			System.IO.Directory.CreateDirectory (folder);  		for (var i = 0; i < 100; i++) {  			var guess = System.IO.Path.Combine (folder' System.IO.Path.ChangeExtension (Duplicati.Library.Main.DatabaseLocator.GenerateRandomName ()' ".sqlite"));  			if (!System.IO.File.Exists (guess)) {  				((Backup)item).DBPath = guess;  				break;  			}  		}  		if (item.DBPath == null)  			throw new Exception ("Unable to generate a unique database file name");  	}  	using (var tr = m_connection.BeginTransaction ()) {  		OverwriteAndUpdateDb (tr' null' new object[] {  			long.Parse (item.ID ?? "-1")  		}' new IBackup[] {  			item  		}' update ? @"UPDATE ""Backup"" SET ""Name""=?' ""Tags""=?' ""TargetURL""=? WHERE ""ID""=?" : @"INSERT INTO ""Backup"" (""Name""' ""Tags""' ""TargetURL""' ""DBPath"") VALUES (?'?'?'?)"' n => {  			if (n.TargetURL.IndexOf (Duplicati.Server.WebServer.Server.PASSWORD_PLACEHOLDER) >= 0)  				throw new Exception ("Attempted to save a backup with the password placeholder");  			if (update && long.Parse (n.ID) <= 0)  				throw new Exception ("Invalid update' cannot update application settings through update method");  			return new object[] {  				n.Name'  				string.Join ("'"' n.Tags ?? new string[0])'  				n.TargetURL'  				update ? (object)item.ID : (object)n.DBPath  			};  		});  		if (!update)  			using (var cmd = m_connection.CreateCommand ()) {  				cmd.Transaction = tr;  				cmd.CommandText = @"SELECT last_insert_rowid();";  				item.ID = ExecuteScalarInt64 (cmd).ToString ();  			}  		var id = long.Parse (item.ID);  		if (long.Parse (item.ID) <= 0)  			throw new Exception ("Invalid addition' cannot update application settings through update method");  		SetSources (item.Sources' id' tr);  		SetSettings (item.Settings' id' tr);  		SetFilters (item.Filters' id' tr);  		SetMetadata (item.Metadata' id' tr);  		if (updateSchedule) {  			var tags = new string[] {  				"ID=" + item.ID  			};  			var existing = GetScheduleIDsFromTags (tags);  			if (schedule == null && existing.Any ())  				DeleteFromDb ("Schedule"' existing.First ()' tr);  			else if (schedule != null) {  				if (existing.Any ()) {  					var cur = GetSchedule (existing.First ());  					cur.AllowedDays = schedule.AllowedDays;  					cur.Repeat = schedule.Repeat;  					cur.Tags = schedule.Tags;  					cur.Time = schedule.Time;  					schedule = cur;  				} else {  					schedule.ID = -1;  				}  				schedule.Tags = tags;  				AddOrUpdateSchedule (schedule' tr);  			}  		}  		tr.Commit ();  		System.Threading.Interlocked.Increment (ref Program.LastDataUpdateID);  		Program.StatusEventNotifyer.SignalNewEvent ();  	}  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,AddOrUpdateBackup,The following statement contains a magic number: if (!update && item.DBPath == null) {  	var folder = Program.DATAFOLDER;  	if (!System.IO.Directory.Exists (folder))  		System.IO.Directory.CreateDirectory (folder);  	for (var i = 0; i < 100; i++) {  		var guess = System.IO.Path.Combine (folder' System.IO.Path.ChangeExtension (Duplicati.Library.Main.DatabaseLocator.GenerateRandomName ()' ".sqlite"));  		if (!System.IO.File.Exists (guess)) {  			((Backup)item).DBPath = guess;  			break;  		}  	}  	if (item.DBPath == null)  		throw new Exception ("Unable to generate a unique database file name");  }  
Magic Number,Duplicati.Server.Database,Connection,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\Connection.cs,AddOrUpdateBackup,The following statement contains a magic number: for (var i = 0; i < 100; i++) {  	var guess = System.IO.Path.Combine (folder' System.IO.Path.ChangeExtension (Duplicati.Library.Main.DatabaseLocator.GenerateRandomName ()' ".sqlite"));  	if (!System.IO.File.Exists (guess)) {  		((Backup)item).DBPath = guess;  		break;  	}  }  
Magic Number,Duplicati.Server.Database,ServerSettings,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Database\ServerSettings.cs,SetWebserverPassword,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (password)) {  	lock (m_connection.m_lock) {  		m_values [CONST.SERVER_PASSPHRASE] = "";  		m_values [CONST.SERVER_PASSPHRASE_SALT] = "";  	}  	SaveSettings ();  } else {  	var prng = System.Security.Cryptography.RNGCryptoServiceProvider.Create ();  	var buf = new byte[32];  	prng.GetBytes (buf);  	var salt = Convert.ToBase64String (buf);  	var sha256 = System.Security.Cryptography.SHA256.Create ();  	var str = System.Text.Encoding.UTF8.GetBytes (password);  	sha256.TransformBlock (str' 0' str.Length' str' 0);  	sha256.TransformFinalBlock (buf' 0' buf.Length);  	var pwd = Convert.ToBase64String (sha256.Hash);  	lock (m_connection.m_lock) {  		m_values [CONST.SERVER_PASSPHRASE] = pwd;  		m_values [CONST.SERVER_PASSPHRASE_SALT] = salt;  	}  	SaveSettings ();  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,AddXSRFTokenToRespone,The following statement contains a magic number: if (m_activexsrf.Count > 500)  	return false;  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (LOGOUT_SCRIPT_URI.Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (auth_token)) {  		// Remove the active auth token  		m_activeTokens.TryRemove (auth_token' out tmpDateTime);  	}  	response.Status = System.Net.HttpStatusCode.NoContent;  	response.Reason = "OK";  	return true;  } else if (LOGIN_SCRIPT_URI.Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) {  	// Remove expired nonces  	foreach (var k in (from n in m_activeNonces  	where DateTime.UtcNow > n.Value.Item1  	select n.Key))  		m_activeNonces.TryRemove (k' out tmpTuple);  	if (input ["get-nonce"] != null && !string.IsNullOrWhiteSpace (input ["get-nonce"].Value)) {  		if (m_activeNonces.Count > 50) {  			response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  			response.Reason = "Too many active login attempts";  			return true;  		}  		var buf = new byte[32];  		var expires = DateTime.UtcNow.AddMinutes (AUTH_TIMEOUT_MINUTES);  		m_prng.GetBytes (buf);  		var nonce = Convert.ToBase64String (buf);  		var sha256 = System.Security.Cryptography.SHA256.Create ();  		sha256.TransformBlock (buf' 0' buf.Length' buf' 0);  		buf = Convert.FromBase64String (Program.DataConnection.ApplicationSettings.WebserverPassword);  		sha256.TransformFinalBlock (buf' 0' buf.Length);  		var pwd = Convert.ToBase64String (sha256.Hash);  		m_activeNonces.AddOrUpdate (nonce' key => new Tuple<DateTime' string> (expires' pwd)' (key' existingValue) => {  			// Simulate the original behavior => if the nonce' against all odds' is already used  			// we throw an ArgumentException  			throw new ArgumentException ("An element with the same key already exists in the dictionary.");  		});  		response.Cookies.Add (new HttpServer.ResponseCookie (NONCE_COOKIE_NAME' nonce' expires));  		using (var bw = new BodyWriter (response' request)) {  			bw.OutputOK (new {  				Status = "OK"'  				Nonce = nonce'  				Salt = Program.DataConnection.ApplicationSettings.WebserverPasswordSalt  			});  		}  		return true;  	} else {  		if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  			var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  			var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  			var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  			if (m_activeNonces.ContainsKey (urldecoded))  				nonce = urldecoded;  			if (!m_activeNonces.ContainsKey (nonce)) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var pwd = m_activeNonces [nonce].Item2;  			// Remove the nonce  			m_activeNonces.TryRemove (nonce' out tmpTuple);  			if (pwd != input ["password"].Value) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var buf = new byte[32];  			var expires = DateTime.UtcNow.AddHours (1);  			m_prng.GetBytes (buf);  			var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  			while (token.Length > 0 && token.EndsWith ("="))  				token = token.Substring (0' token.Length - 1);  			m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  				// Simulate the original behavior => if the token' against all odds' is already used  				// we throw an ArgumentException  				throw new ArgumentException ("An element with the same key already exists in the dictionary.");  			});  			response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  			using (var bw = new BodyWriter (response' request))  				bw.OutputOK ();  			return true;  		}  	}  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (LOGOUT_SCRIPT_URI.Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (auth_token)) {  		// Remove the active auth token  		m_activeTokens.TryRemove (auth_token' out tmpDateTime);  	}  	response.Status = System.Net.HttpStatusCode.NoContent;  	response.Reason = "OK";  	return true;  } else if (LOGIN_SCRIPT_URI.Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) {  	// Remove expired nonces  	foreach (var k in (from n in m_activeNonces  	where DateTime.UtcNow > n.Value.Item1  	select n.Key))  		m_activeNonces.TryRemove (k' out tmpTuple);  	if (input ["get-nonce"] != null && !string.IsNullOrWhiteSpace (input ["get-nonce"].Value)) {  		if (m_activeNonces.Count > 50) {  			response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  			response.Reason = "Too many active login attempts";  			return true;  		}  		var buf = new byte[32];  		var expires = DateTime.UtcNow.AddMinutes (AUTH_TIMEOUT_MINUTES);  		m_prng.GetBytes (buf);  		var nonce = Convert.ToBase64String (buf);  		var sha256 = System.Security.Cryptography.SHA256.Create ();  		sha256.TransformBlock (buf' 0' buf.Length' buf' 0);  		buf = Convert.FromBase64String (Program.DataConnection.ApplicationSettings.WebserverPassword);  		sha256.TransformFinalBlock (buf' 0' buf.Length);  		var pwd = Convert.ToBase64String (sha256.Hash);  		m_activeNonces.AddOrUpdate (nonce' key => new Tuple<DateTime' string> (expires' pwd)' (key' existingValue) => {  			// Simulate the original behavior => if the nonce' against all odds' is already used  			// we throw an ArgumentException  			throw new ArgumentException ("An element with the same key already exists in the dictionary.");  		});  		response.Cookies.Add (new HttpServer.ResponseCookie (NONCE_COOKIE_NAME' nonce' expires));  		using (var bw = new BodyWriter (response' request)) {  			bw.OutputOK (new {  				Status = "OK"'  				Nonce = nonce'  				Salt = Program.DataConnection.ApplicationSettings.WebserverPasswordSalt  			});  		}  		return true;  	} else {  		if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  			var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  			var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  			var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  			if (m_activeNonces.ContainsKey (urldecoded))  				nonce = urldecoded;  			if (!m_activeNonces.ContainsKey (nonce)) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var pwd = m_activeNonces [nonce].Item2;  			// Remove the nonce  			m_activeNonces.TryRemove (nonce' out tmpTuple);  			if (pwd != input ["password"].Value) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var buf = new byte[32];  			var expires = DateTime.UtcNow.AddHours (1);  			m_prng.GetBytes (buf);  			var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  			while (token.Length > 0 && token.EndsWith ("="))  				token = token.Substring (0' token.Length - 1);  			m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  				// Simulate the original behavior => if the token' against all odds' is already used  				// we throw an ArgumentException  				throw new ArgumentException ("An element with the same key already exists in the dictionary.");  			});  			response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  			using (var bw = new BodyWriter (response' request))  				bw.OutputOK ();  			return true;  		}  	}  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (LOGOUT_SCRIPT_URI.Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) {  	if (!string.IsNullOrWhiteSpace (auth_token)) {  		// Remove the active auth token  		m_activeTokens.TryRemove (auth_token' out tmpDateTime);  	}  	response.Status = System.Net.HttpStatusCode.NoContent;  	response.Reason = "OK";  	return true;  } else if (LOGIN_SCRIPT_URI.Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) {  	// Remove expired nonces  	foreach (var k in (from n in m_activeNonces  	where DateTime.UtcNow > n.Value.Item1  	select n.Key))  		m_activeNonces.TryRemove (k' out tmpTuple);  	if (input ["get-nonce"] != null && !string.IsNullOrWhiteSpace (input ["get-nonce"].Value)) {  		if (m_activeNonces.Count > 50) {  			response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  			response.Reason = "Too many active login attempts";  			return true;  		}  		var buf = new byte[32];  		var expires = DateTime.UtcNow.AddMinutes (AUTH_TIMEOUT_MINUTES);  		m_prng.GetBytes (buf);  		var nonce = Convert.ToBase64String (buf);  		var sha256 = System.Security.Cryptography.SHA256.Create ();  		sha256.TransformBlock (buf' 0' buf.Length' buf' 0);  		buf = Convert.FromBase64String (Program.DataConnection.ApplicationSettings.WebserverPassword);  		sha256.TransformFinalBlock (buf' 0' buf.Length);  		var pwd = Convert.ToBase64String (sha256.Hash);  		m_activeNonces.AddOrUpdate (nonce' key => new Tuple<DateTime' string> (expires' pwd)' (key' existingValue) => {  			// Simulate the original behavior => if the nonce' against all odds' is already used  			// we throw an ArgumentException  			throw new ArgumentException ("An element with the same key already exists in the dictionary.");  		});  		response.Cookies.Add (new HttpServer.ResponseCookie (NONCE_COOKIE_NAME' nonce' expires));  		using (var bw = new BodyWriter (response' request)) {  			bw.OutputOK (new {  				Status = "OK"'  				Nonce = nonce'  				Salt = Program.DataConnection.ApplicationSettings.WebserverPasswordSalt  			});  		}  		return true;  	} else {  		if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  			var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  			var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  			var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  			if (m_activeNonces.ContainsKey (urldecoded))  				nonce = urldecoded;  			if (!m_activeNonces.ContainsKey (nonce)) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var pwd = m_activeNonces [nonce].Item2;  			// Remove the nonce  			m_activeNonces.TryRemove (nonce' out tmpTuple);  			if (pwd != input ["password"].Value) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var buf = new byte[32];  			var expires = DateTime.UtcNow.AddHours (1);  			m_prng.GetBytes (buf);  			var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  			while (token.Length > 0 && token.EndsWith ("="))  				token = token.Substring (0' token.Length - 1);  			m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  				// Simulate the original behavior => if the token' against all odds' is already used  				// we throw an ArgumentException  				throw new ArgumentException ("An element with the same key already exists in the dictionary.");  			});  			response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  			using (var bw = new BodyWriter (response' request))  				bw.OutputOK ();  			return true;  		}  	}  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (LOGIN_SCRIPT_URI.Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) {  	// Remove expired nonces  	foreach (var k in (from n in m_activeNonces  	where DateTime.UtcNow > n.Value.Item1  	select n.Key))  		m_activeNonces.TryRemove (k' out tmpTuple);  	if (input ["get-nonce"] != null && !string.IsNullOrWhiteSpace (input ["get-nonce"].Value)) {  		if (m_activeNonces.Count > 50) {  			response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  			response.Reason = "Too many active login attempts";  			return true;  		}  		var buf = new byte[32];  		var expires = DateTime.UtcNow.AddMinutes (AUTH_TIMEOUT_MINUTES);  		m_prng.GetBytes (buf);  		var nonce = Convert.ToBase64String (buf);  		var sha256 = System.Security.Cryptography.SHA256.Create ();  		sha256.TransformBlock (buf' 0' buf.Length' buf' 0);  		buf = Convert.FromBase64String (Program.DataConnection.ApplicationSettings.WebserverPassword);  		sha256.TransformFinalBlock (buf' 0' buf.Length);  		var pwd = Convert.ToBase64String (sha256.Hash);  		m_activeNonces.AddOrUpdate (nonce' key => new Tuple<DateTime' string> (expires' pwd)' (key' existingValue) => {  			// Simulate the original behavior => if the nonce' against all odds' is already used  			// we throw an ArgumentException  			throw new ArgumentException ("An element with the same key already exists in the dictionary.");  		});  		response.Cookies.Add (new HttpServer.ResponseCookie (NONCE_COOKIE_NAME' nonce' expires));  		using (var bw = new BodyWriter (response' request)) {  			bw.OutputOK (new {  				Status = "OK"'  				Nonce = nonce'  				Salt = Program.DataConnection.ApplicationSettings.WebserverPasswordSalt  			});  		}  		return true;  	} else {  		if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  			var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  			var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  			var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  			if (m_activeNonces.ContainsKey (urldecoded))  				nonce = urldecoded;  			if (!m_activeNonces.ContainsKey (nonce)) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var pwd = m_activeNonces [nonce].Item2;  			// Remove the nonce  			m_activeNonces.TryRemove (nonce' out tmpTuple);  			if (pwd != input ["password"].Value) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var buf = new byte[32];  			var expires = DateTime.UtcNow.AddHours (1);  			m_prng.GetBytes (buf);  			var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  			while (token.Length > 0 && token.EndsWith ("="))  				token = token.Substring (0' token.Length - 1);  			m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  				// Simulate the original behavior => if the token' against all odds' is already used  				// we throw an ArgumentException  				throw new ArgumentException ("An element with the same key already exists in the dictionary.");  			});  			response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  			using (var bw = new BodyWriter (response' request))  				bw.OutputOK ();  			return true;  		}  	}  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (LOGIN_SCRIPT_URI.Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) {  	// Remove expired nonces  	foreach (var k in (from n in m_activeNonces  	where DateTime.UtcNow > n.Value.Item1  	select n.Key))  		m_activeNonces.TryRemove (k' out tmpTuple);  	if (input ["get-nonce"] != null && !string.IsNullOrWhiteSpace (input ["get-nonce"].Value)) {  		if (m_activeNonces.Count > 50) {  			response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  			response.Reason = "Too many active login attempts";  			return true;  		}  		var buf = new byte[32];  		var expires = DateTime.UtcNow.AddMinutes (AUTH_TIMEOUT_MINUTES);  		m_prng.GetBytes (buf);  		var nonce = Convert.ToBase64String (buf);  		var sha256 = System.Security.Cryptography.SHA256.Create ();  		sha256.TransformBlock (buf' 0' buf.Length' buf' 0);  		buf = Convert.FromBase64String (Program.DataConnection.ApplicationSettings.WebserverPassword);  		sha256.TransformFinalBlock (buf' 0' buf.Length);  		var pwd = Convert.ToBase64String (sha256.Hash);  		m_activeNonces.AddOrUpdate (nonce' key => new Tuple<DateTime' string> (expires' pwd)' (key' existingValue) => {  			// Simulate the original behavior => if the nonce' against all odds' is already used  			// we throw an ArgumentException  			throw new ArgumentException ("An element with the same key already exists in the dictionary.");  		});  		response.Cookies.Add (new HttpServer.ResponseCookie (NONCE_COOKIE_NAME' nonce' expires));  		using (var bw = new BodyWriter (response' request)) {  			bw.OutputOK (new {  				Status = "OK"'  				Nonce = nonce'  				Salt = Program.DataConnection.ApplicationSettings.WebserverPasswordSalt  			});  		}  		return true;  	} else {  		if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  			var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  			var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  			var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  			if (m_activeNonces.ContainsKey (urldecoded))  				nonce = urldecoded;  			if (!m_activeNonces.ContainsKey (nonce)) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var pwd = m_activeNonces [nonce].Item2;  			// Remove the nonce  			m_activeNonces.TryRemove (nonce' out tmpTuple);  			if (pwd != input ["password"].Value) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var buf = new byte[32];  			var expires = DateTime.UtcNow.AddHours (1);  			m_prng.GetBytes (buf);  			var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  			while (token.Length > 0 && token.EndsWith ("="))  				token = token.Substring (0' token.Length - 1);  			m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  				// Simulate the original behavior => if the token' against all odds' is already used  				// we throw an ArgumentException  				throw new ArgumentException ("An element with the same key already exists in the dictionary.");  			});  			response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  			using (var bw = new BodyWriter (response' request))  				bw.OutputOK ();  			return true;  		}  	}  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (LOGIN_SCRIPT_URI.Equals (request.Uri.AbsolutePath' StringComparison.InvariantCultureIgnoreCase)) {  	// Remove expired nonces  	foreach (var k in (from n in m_activeNonces  	where DateTime.UtcNow > n.Value.Item1  	select n.Key))  		m_activeNonces.TryRemove (k' out tmpTuple);  	if (input ["get-nonce"] != null && !string.IsNullOrWhiteSpace (input ["get-nonce"].Value)) {  		if (m_activeNonces.Count > 50) {  			response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  			response.Reason = "Too many active login attempts";  			return true;  		}  		var buf = new byte[32];  		var expires = DateTime.UtcNow.AddMinutes (AUTH_TIMEOUT_MINUTES);  		m_prng.GetBytes (buf);  		var nonce = Convert.ToBase64String (buf);  		var sha256 = System.Security.Cryptography.SHA256.Create ();  		sha256.TransformBlock (buf' 0' buf.Length' buf' 0);  		buf = Convert.FromBase64String (Program.DataConnection.ApplicationSettings.WebserverPassword);  		sha256.TransformFinalBlock (buf' 0' buf.Length);  		var pwd = Convert.ToBase64String (sha256.Hash);  		m_activeNonces.AddOrUpdate (nonce' key => new Tuple<DateTime' string> (expires' pwd)' (key' existingValue) => {  			// Simulate the original behavior => if the nonce' against all odds' is already used  			// we throw an ArgumentException  			throw new ArgumentException ("An element with the same key already exists in the dictionary.");  		});  		response.Cookies.Add (new HttpServer.ResponseCookie (NONCE_COOKIE_NAME' nonce' expires));  		using (var bw = new BodyWriter (response' request)) {  			bw.OutputOK (new {  				Status = "OK"'  				Nonce = nonce'  				Salt = Program.DataConnection.ApplicationSettings.WebserverPasswordSalt  			});  		}  		return true;  	} else {  		if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  			var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  			var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  			var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  			if (m_activeNonces.ContainsKey (urldecoded))  				nonce = urldecoded;  			if (!m_activeNonces.ContainsKey (nonce)) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var pwd = m_activeNonces [nonce].Item2;  			// Remove the nonce  			m_activeNonces.TryRemove (nonce' out tmpTuple);  			if (pwd != input ["password"].Value) {  				response.Status = System.Net.HttpStatusCode.Unauthorized;  				response.Reason = "Unauthorized";  				response.ContentType = "application/json";  				return true;  			}  			var buf = new byte[32];  			var expires = DateTime.UtcNow.AddHours (1);  			m_prng.GetBytes (buf);  			var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  			while (token.Length > 0 && token.EndsWith ("="))  				token = token.Substring (0' token.Length - 1);  			m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  				// Simulate the original behavior => if the token' against all odds' is already used  				// we throw an ArgumentException  				throw new ArgumentException ("An element with the same key already exists in the dictionary.");  			});  			response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  			using (var bw = new BodyWriter (response' request))  				bw.OutputOK ();  			return true;  		}  	}  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (input ["get-nonce"] != null && !string.IsNullOrWhiteSpace (input ["get-nonce"].Value)) {  	if (m_activeNonces.Count > 50) {  		response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  		response.Reason = "Too many active login attempts";  		return true;  	}  	var buf = new byte[32];  	var expires = DateTime.UtcNow.AddMinutes (AUTH_TIMEOUT_MINUTES);  	m_prng.GetBytes (buf);  	var nonce = Convert.ToBase64String (buf);  	var sha256 = System.Security.Cryptography.SHA256.Create ();  	sha256.TransformBlock (buf' 0' buf.Length' buf' 0);  	buf = Convert.FromBase64String (Program.DataConnection.ApplicationSettings.WebserverPassword);  	sha256.TransformFinalBlock (buf' 0' buf.Length);  	var pwd = Convert.ToBase64String (sha256.Hash);  	m_activeNonces.AddOrUpdate (nonce' key => new Tuple<DateTime' string> (expires' pwd)' (key' existingValue) => {  		// Simulate the original behavior => if the nonce' against all odds' is already used  		// we throw an ArgumentException  		throw new ArgumentException ("An element with the same key already exists in the dictionary.");  	});  	response.Cookies.Add (new HttpServer.ResponseCookie (NONCE_COOKIE_NAME' nonce' expires));  	using (var bw = new BodyWriter (response' request)) {  		bw.OutputOK (new {  			Status = "OK"'  			Nonce = nonce'  			Salt = Program.DataConnection.ApplicationSettings.WebserverPasswordSalt  		});  	}  	return true;  } else {  	if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  		var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  		var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  		var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  		if (m_activeNonces.ContainsKey (urldecoded))  			nonce = urldecoded;  		if (!m_activeNonces.ContainsKey (nonce)) {  			response.Status = System.Net.HttpStatusCode.Unauthorized;  			response.Reason = "Unauthorized";  			response.ContentType = "application/json";  			return true;  		}  		var pwd = m_activeNonces [nonce].Item2;  		// Remove the nonce  		m_activeNonces.TryRemove (nonce' out tmpTuple);  		if (pwd != input ["password"].Value) {  			response.Status = System.Net.HttpStatusCode.Unauthorized;  			response.Reason = "Unauthorized";  			response.ContentType = "application/json";  			return true;  		}  		var buf = new byte[32];  		var expires = DateTime.UtcNow.AddHours (1);  		m_prng.GetBytes (buf);  		var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  		while (token.Length > 0 && token.EndsWith ("="))  			token = token.Substring (0' token.Length - 1);  		m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  			// Simulate the original behavior => if the token' against all odds' is already used  			// we throw an ArgumentException  			throw new ArgumentException ("An element with the same key already exists in the dictionary.");  		});  		response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  		using (var bw = new BodyWriter (response' request))  			bw.OutputOK ();  		return true;  	}  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (input ["get-nonce"] != null && !string.IsNullOrWhiteSpace (input ["get-nonce"].Value)) {  	if (m_activeNonces.Count > 50) {  		response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  		response.Reason = "Too many active login attempts";  		return true;  	}  	var buf = new byte[32];  	var expires = DateTime.UtcNow.AddMinutes (AUTH_TIMEOUT_MINUTES);  	m_prng.GetBytes (buf);  	var nonce = Convert.ToBase64String (buf);  	var sha256 = System.Security.Cryptography.SHA256.Create ();  	sha256.TransformBlock (buf' 0' buf.Length' buf' 0);  	buf = Convert.FromBase64String (Program.DataConnection.ApplicationSettings.WebserverPassword);  	sha256.TransformFinalBlock (buf' 0' buf.Length);  	var pwd = Convert.ToBase64String (sha256.Hash);  	m_activeNonces.AddOrUpdate (nonce' key => new Tuple<DateTime' string> (expires' pwd)' (key' existingValue) => {  		// Simulate the original behavior => if the nonce' against all odds' is already used  		// we throw an ArgumentException  		throw new ArgumentException ("An element with the same key already exists in the dictionary.");  	});  	response.Cookies.Add (new HttpServer.ResponseCookie (NONCE_COOKIE_NAME' nonce' expires));  	using (var bw = new BodyWriter (response' request)) {  		bw.OutputOK (new {  			Status = "OK"'  			Nonce = nonce'  			Salt = Program.DataConnection.ApplicationSettings.WebserverPasswordSalt  		});  	}  	return true;  } else {  	if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  		var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  		var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  		var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  		if (m_activeNonces.ContainsKey (urldecoded))  			nonce = urldecoded;  		if (!m_activeNonces.ContainsKey (nonce)) {  			response.Status = System.Net.HttpStatusCode.Unauthorized;  			response.Reason = "Unauthorized";  			response.ContentType = "application/json";  			return true;  		}  		var pwd = m_activeNonces [nonce].Item2;  		// Remove the nonce  		m_activeNonces.TryRemove (nonce' out tmpTuple);  		if (pwd != input ["password"].Value) {  			response.Status = System.Net.HttpStatusCode.Unauthorized;  			response.Reason = "Unauthorized";  			response.ContentType = "application/json";  			return true;  		}  		var buf = new byte[32];  		var expires = DateTime.UtcNow.AddHours (1);  		m_prng.GetBytes (buf);  		var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  		while (token.Length > 0 && token.EndsWith ("="))  			token = token.Substring (0' token.Length - 1);  		m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  			// Simulate the original behavior => if the token' against all odds' is already used  			// we throw an ArgumentException  			throw new ArgumentException ("An element with the same key already exists in the dictionary.");  		});  		response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  		using (var bw = new BodyWriter (response' request))  			bw.OutputOK ();  		return true;  	}  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (input ["get-nonce"] != null && !string.IsNullOrWhiteSpace (input ["get-nonce"].Value)) {  	if (m_activeNonces.Count > 50) {  		response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  		response.Reason = "Too many active login attempts";  		return true;  	}  	var buf = new byte[32];  	var expires = DateTime.UtcNow.AddMinutes (AUTH_TIMEOUT_MINUTES);  	m_prng.GetBytes (buf);  	var nonce = Convert.ToBase64String (buf);  	var sha256 = System.Security.Cryptography.SHA256.Create ();  	sha256.TransformBlock (buf' 0' buf.Length' buf' 0);  	buf = Convert.FromBase64String (Program.DataConnection.ApplicationSettings.WebserverPassword);  	sha256.TransformFinalBlock (buf' 0' buf.Length);  	var pwd = Convert.ToBase64String (sha256.Hash);  	m_activeNonces.AddOrUpdate (nonce' key => new Tuple<DateTime' string> (expires' pwd)' (key' existingValue) => {  		// Simulate the original behavior => if the nonce' against all odds' is already used  		// we throw an ArgumentException  		throw new ArgumentException ("An element with the same key already exists in the dictionary.");  	});  	response.Cookies.Add (new HttpServer.ResponseCookie (NONCE_COOKIE_NAME' nonce' expires));  	using (var bw = new BodyWriter (response' request)) {  		bw.OutputOK (new {  			Status = "OK"'  			Nonce = nonce'  			Salt = Program.DataConnection.ApplicationSettings.WebserverPasswordSalt  		});  	}  	return true;  } else {  	if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  		var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  		var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  		var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  		if (m_activeNonces.ContainsKey (urldecoded))  			nonce = urldecoded;  		if (!m_activeNonces.ContainsKey (nonce)) {  			response.Status = System.Net.HttpStatusCode.Unauthorized;  			response.Reason = "Unauthorized";  			response.ContentType = "application/json";  			return true;  		}  		var pwd = m_activeNonces [nonce].Item2;  		// Remove the nonce  		m_activeNonces.TryRemove (nonce' out tmpTuple);  		if (pwd != input ["password"].Value) {  			response.Status = System.Net.HttpStatusCode.Unauthorized;  			response.Reason = "Unauthorized";  			response.ContentType = "application/json";  			return true;  		}  		var buf = new byte[32];  		var expires = DateTime.UtcNow.AddHours (1);  		m_prng.GetBytes (buf);  		var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  		while (token.Length > 0 && token.EndsWith ("="))  			token = token.Substring (0' token.Length - 1);  		m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  			// Simulate the original behavior => if the token' against all odds' is already used  			// we throw an ArgumentException  			throw new ArgumentException ("An element with the same key already exists in the dictionary.");  		});  		response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  		using (var bw = new BodyWriter (response' request))  			bw.OutputOK ();  		return true;  	}  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (m_activeNonces.Count > 50) {  	response.Status = System.Net.HttpStatusCode.ServiceUnavailable;  	response.Reason = "Too many active login attempts";  	return true;  }  
Magic Number,Duplicati.Server.WebServer,AuthenticationHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\AuthenticationHandler.cs,Process,The following statement contains a magic number: if (input ["password"] != null && !string.IsNullOrWhiteSpace (input ["password"].Value)) {  	var nonce_el = request.Cookies [NONCE_COOKIE_NAME] ?? request.Cookies [Library.Utility.Uri.UrlEncode (NONCE_COOKIE_NAME)];  	var nonce = nonce_el == null || string.IsNullOrWhiteSpace (nonce_el.Value) ? "" : nonce_el.Value;  	var urldecoded = nonce == null ? "" : Duplicati.Library.Utility.Uri.UrlDecode (nonce);  	if (m_activeNonces.ContainsKey (urldecoded))  		nonce = urldecoded;  	if (!m_activeNonces.ContainsKey (nonce)) {  		response.Status = System.Net.HttpStatusCode.Unauthorized;  		response.Reason = "Unauthorized";  		response.ContentType = "application/json";  		return true;  	}  	var pwd = m_activeNonces [nonce].Item2;  	// Remove the nonce  	m_activeNonces.TryRemove (nonce' out tmpTuple);  	if (pwd != input ["password"].Value) {  		response.Status = System.Net.HttpStatusCode.Unauthorized;  		response.Reason = "Unauthorized";  		response.ContentType = "application/json";  		return true;  	}  	var buf = new byte[32];  	var expires = DateTime.UtcNow.AddHours (1);  	m_prng.GetBytes (buf);  	var token = Duplicati.Library.Utility.Utility.Base64UrlEncode (buf);  	while (token.Length > 0 && token.EndsWith ("="))  		token = token.Substring (0' token.Length - 1);  	m_activeTokens.AddOrUpdate (token' key => expires' (key' existingValue) => {  		// Simulate the original behavior => if the token' against all odds' is already used  		// we throw an ArgumentException  		throw new ArgumentException ("An element with the same key already exists in the dictionary.");  	});  	response.Cookies.Add (new HttpServer.ResponseCookie (AUTH_COOKIE_NAME' token' expires));  	using (var bw = new BodyWriter (response' request))  		bw.OutputOK ();  	return true;  }  
Magic Number,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,ParseRequestCulture,The following statement contains a magic number: return _cultureCache [acceptheader] = // Parse headers like "Accept-Language: da' en-gb;q=0.8' en;q=0.7"  acceptheader.Split (new[] {  	"'"  }' StringSplitOptions.RemoveEmptyEntries).Select (x => {  	var opts = x.Split (new[] {  		";"  	}' StringSplitOptions.RemoveEmptyEntries);  	var lang = opts.FirstOrDefault ();  	var weight = opts.Where (y => y.StartsWith ("q="' StringComparison.InvariantCultureIgnoreCase)).Select (y => {  		float f;  		float.TryParse (y.Substring (2)' System.Globalization.NumberStyles.Float' System.Globalization.CultureInfo.InvariantCulture' out f);  		return f;  	}).FirstOrDefault ();  	// Set the default weight=1  	if (weight <= 0.001 && weight >= 0)  		weight = 1;  	return new KeyValuePair<string' float> (lang' weight);  })// Handle priority  .OrderByDescending (x => x.Value).Select (x => x.Key).Distinct ()// Filter invalid/unsupported items  .Where (x => !string.IsNullOrWhiteSpace (x) && Library.Localization.LocalizationService.ParseCulture (x) != null).Select (x => Library.Localization.LocalizationService.ParseCulture (x))// And get the first that works  .FirstOrDefault ();  
Magic Number,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,ParseRequestCulture,The following statement contains a magic number: return _cultureCache [acceptheader] = // Parse headers like "Accept-Language: da' en-gb;q=0.8' en;q=0.7"  acceptheader.Split (new[] {  	"'"  }' StringSplitOptions.RemoveEmptyEntries).Select (x => {  	var opts = x.Split (new[] {  		";"  	}' StringSplitOptions.RemoveEmptyEntries);  	var lang = opts.FirstOrDefault ();  	var weight = opts.Where (y => y.StartsWith ("q="' StringComparison.InvariantCultureIgnoreCase)).Select (y => {  		float f;  		float.TryParse (y.Substring (2)' System.Globalization.NumberStyles.Float' System.Globalization.CultureInfo.InvariantCulture' out f);  		return f;  	}).FirstOrDefault ();  	// Set the default weight=1  	if (weight <= 0.001 && weight >= 0)  		weight = 1;  	return new KeyValuePair<string' float> (lang' weight);  })// Handle priority  .OrderByDescending (x => x.Value).Select (x => x.Key).Distinct ()// Filter invalid/unsupported items  .Where (x => !string.IsNullOrWhiteSpace (x) && Library.Localization.LocalizationService.ParseCulture (x) != null).Select (x => Library.Localization.LocalizationService.ParseCulture (x))// And get the first that works  .FirstOrDefault ();  
Magic Number,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,ParseRequestCulture,The following statement contains a magic number: float.TryParse (y.Substring (2)' System.Globalization.NumberStyles.Float' System.Globalization.CultureInfo.InvariantCulture' out f);  
Magic Number,Duplicati.Server.WebServer,RESTHandler,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTHandler.cs,ParseRequestCulture,The following statement contains a magic number: if (weight <= 0.001 && weight >= 0)  	weight = 1;  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: if (size.Width == 0 || size.Height == 0)  	size = new Size ((answer.Length + 1) * fontsize' fontsize * 2);  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: size = new Size ((answer.Length + 1) * fontsize' fontsize * 2);  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var graphics = Graphics.FromImage (bmp))  	using (var font1 = new Font ("Ariel"' fontsize))  		using (var font2 = new Font ("Ariel"' fontsize))  			using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  				graphics.Clear (Color.White);  				graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  				// Apply a some background string to make it hard to do OCR  				foreach (var color in new[] {  					Color.Yellow'  					Color.LightGreen'  					Color.GreenYellow  				})  					using (var brush = new SolidBrush (color))  						graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  				var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  				// Create a vertical background lines  				for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  					using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  						graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  				spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  				// Create a horizontal background lines  				for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  					using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  						graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  				// Draw the actual answer  				graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  				return bmp;  			}  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var graphics = Graphics.FromImage (bmp))  	using (var font1 = new Font ("Ariel"' fontsize))  		using (var font2 = new Font ("Ariel"' fontsize))  			using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  				graphics.Clear (Color.White);  				graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  				// Apply a some background string to make it hard to do OCR  				foreach (var color in new[] {  					Color.Yellow'  					Color.LightGreen'  					Color.GreenYellow  				})  					using (var brush = new SolidBrush (color))  						graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  				var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  				// Create a vertical background lines  				for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  					using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  						graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  				spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  				// Create a horizontal background lines  				for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  					using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  						graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  				// Draw the actual answer  				graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  				return bmp;  			}  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var graphics = Graphics.FromImage (bmp))  	using (var font1 = new Font ("Ariel"' fontsize))  		using (var font2 = new Font ("Ariel"' fontsize))  			using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  				graphics.Clear (Color.White);  				graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  				// Apply a some background string to make it hard to do OCR  				foreach (var color in new[] {  					Color.Yellow'  					Color.LightGreen'  					Color.GreenYellow  				})  					using (var brush = new SolidBrush (color))  						graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  				var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  				// Create a vertical background lines  				for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  					using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  						graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  				spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  				// Create a horizontal background lines  				for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  					using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  						graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  				// Draw the actual answer  				graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  				return bmp;  			}  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var font1 = new Font ("Ariel"' fontsize))  	using (var font2 = new Font ("Ariel"' fontsize))  		using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  			graphics.Clear (Color.White);  			graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  			// Apply a some background string to make it hard to do OCR  			foreach (var color in new[] {  				Color.Yellow'  				Color.LightGreen'  				Color.GreenYellow  			})  				using (var brush = new SolidBrush (color))  					graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  			var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  			// Create a vertical background lines  			for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  				using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  					graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  			spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  			// Create a horizontal background lines  			for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  				using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  					graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  			// Draw the actual answer  			graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  			return bmp;  		}  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var font1 = new Font ("Ariel"' fontsize))  	using (var font2 = new Font ("Ariel"' fontsize))  		using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  			graphics.Clear (Color.White);  			graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  			// Apply a some background string to make it hard to do OCR  			foreach (var color in new[] {  				Color.Yellow'  				Color.LightGreen'  				Color.GreenYellow  			})  				using (var brush = new SolidBrush (color))  					graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  			var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  			// Create a vertical background lines  			for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  				using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  					graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  			spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  			// Create a horizontal background lines  			for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  				using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  					graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  			// Draw the actual answer  			graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  			return bmp;  		}  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var font1 = new Font ("Ariel"' fontsize))  	using (var font2 = new Font ("Ariel"' fontsize))  		using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  			graphics.Clear (Color.White);  			graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  			// Apply a some background string to make it hard to do OCR  			foreach (var color in new[] {  				Color.Yellow'  				Color.LightGreen'  				Color.GreenYellow  			})  				using (var brush = new SolidBrush (color))  					graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  			var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  			// Create a vertical background lines  			for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  				using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  					graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  			spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  			// Create a horizontal background lines  			for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  				using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  					graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  			// Draw the actual answer  			graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  			return bmp;  		}  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var font2 = new Font ("Ariel"' fontsize))  	using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  		graphics.Clear (Color.White);  		graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  		// Apply a some background string to make it hard to do OCR  		foreach (var color in new[] {  			Color.Yellow'  			Color.LightGreen'  			Color.GreenYellow  		})  			using (var brush = new SolidBrush (color))  				graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  		var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  		// Create a vertical background lines  		for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  			using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  				graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  		spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  		// Create a horizontal background lines  		for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  			using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  				graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  		// Draw the actual answer  		graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  		return bmp;  	}  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var font2 = new Font ("Ariel"' fontsize))  	using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  		graphics.Clear (Color.White);  		graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  		// Apply a some background string to make it hard to do OCR  		foreach (var color in new[] {  			Color.Yellow'  			Color.LightGreen'  			Color.GreenYellow  		})  			using (var brush = new SolidBrush (color))  				graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  		var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  		// Create a vertical background lines  		for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  			using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  				graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  		spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  		// Create a horizontal background lines  		for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  			using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  				graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  		// Draw the actual answer  		graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  		return bmp;  	}  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var font2 = new Font ("Ariel"' fontsize))  	using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  		graphics.Clear (Color.White);  		graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  		// Apply a some background string to make it hard to do OCR  		foreach (var color in new[] {  			Color.Yellow'  			Color.LightGreen'  			Color.GreenYellow  		})  			using (var brush = new SolidBrush (color))  				graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  		var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  		// Create a vertical background lines  		for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  			using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  				graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  		spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  		// Create a horizontal background lines  		for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  			using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  				graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  		// Draw the actual answer  		graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  		return bmp;  	}  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  	graphics.Clear (Color.White);  	graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  	// Apply a some background string to make it hard to do OCR  	foreach (var color in new[] {  		Color.Yellow'  		Color.LightGreen'  		Color.GreenYellow  	})  		using (var brush = new SolidBrush (color))  			graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  	var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  	// Create a vertical background lines  	for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  		using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  			graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  	spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  	// Create a horizontal background lines  	for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  		using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  			graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  	// Draw the actual answer  	graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  	return bmp;  }  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  	graphics.Clear (Color.White);  	graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  	// Apply a some background string to make it hard to do OCR  	foreach (var color in new[] {  		Color.Yellow'  		Color.LightGreen'  		Color.GreenYellow  	})  		using (var brush = new SolidBrush (color))  			graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  	var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  	// Create a vertical background lines  	for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  		using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  			graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  	spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  	// Create a horizontal background lines  	for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  		using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  			graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  	// Draw the actual answer  	graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  	return bmp;  }  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: using (var font3 = new HatchBrush (HatchStyle.Shingle' Color.GhostWhite' Color.DarkBlue)) {  	graphics.Clear (Color.White);  	graphics.TextRenderingHint = TextRenderingHint.AntiAlias;  	// Apply a some background string to make it hard to do OCR  	foreach (var color in new[] {  		Color.Yellow'  		Color.LightGreen'  		Color.GreenYellow  	})  		using (var brush = new SolidBrush (color))  			graphics.DrawString (CreateRandomAnswer (minlength: answer.Length' maxlength: answer.Length)' font2' brush' rnd.Next (-stray_x' stray_x)' rnd.Next (-stray_y' stray_y));  	var spacing = (size.Width / fontsize) + rnd.Next (0' stray_x);  	// Create a vertical background lines  	for (var i = rnd.Next (0' stray_x); i < size.Width; i += spacing)  		using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  			graphics.DrawLine (pen' i + rnd.Next (-stray_x' stray_x)' rnd.Next (0' stray_y)' i + rnd.Next (-stray_x' stray_x)' size.Height - rnd.Next (0' stray_y));  	spacing = (size.Height / fontsize) + rnd.Next (0' stray_y);  	// Create a horizontal background lines  	for (var i = rnd.Next (0' stray_y); i < size.Height; i += spacing)  		using (var pen = new Pen (BRUSH_COLORS [rnd.Next (0' BRUSH_COLORS.Length)]))  			graphics.DrawLine (pen' rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y)' size.Width - rnd.Next (0' stray_x)' i + rnd.Next (-stray_y' stray_y));  	// Draw the actual answer  	graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  	return bmp;  }  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  
Magic Number,Duplicati.Server.WebServer,CaptchaUtil,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\CaptchaUtil.cs,CreateCaptcha,The following statement contains a magic number: graphics.DrawString (answer' font1' font3' ((size.Width - (fontsize * answer.Length)) / 2) + rnd.Next (-stray_x' stray_x)' ((size.Height - (fontsize * 2)) / 2) + rnd.Next (-stray_y' stray_y));  
Magic Number,Duplicati.Server.WebServer.RESTMethods,RequestInfo,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\RequestInfo.cs,LongPollCheck,The following statement contains a magic number: if (Library.Utility.Utility.ParseBool (input ["longpoll"].Value' false)) {  	long lastEventId;  	if (!long.TryParse (input ["lasteventid"].Value' out lastEventId)) {  		ReportClientError ("When activating long poll' the request must include the last event id");  		isError = true;  		return false;  	}  	TimeSpan ts;  	try {  		ts = Library.Utility.Timeparser.ParseTimeSpan (input ["duration"].Value);  	} catch (Exception ex) {  		ReportClientError ("Invalid duration: " + ex.Message);  		isError = true;  		return false;  	}  	if (ts <= TimeSpan.FromSeconds (10) || ts.TotalMilliseconds > int.MaxValue) {  		ReportClientError ("Invalid duration' must be at least 10 seconds' and less than " + int.MaxValue + " milliseconds");  		isError = true;  		return false;  	}  	isError = false;  	id = poller.Wait (lastEventId' (int)ts.TotalMilliseconds);  	return true;  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,RequestInfo,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\RequestInfo.cs,LongPollCheck,The following statement contains a magic number: if (ts <= TimeSpan.FromSeconds (10) || ts.TotalMilliseconds > int.MaxValue) {  	ReportClientError ("Invalid duration' must be at least 10 seconds' and less than " + int.MaxValue + " milliseconds");  	isError = true;  	return false;  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: try {  	var input = info.Request.Form;  	var cmdline = Library.Utility.Utility.ParseBool (input ["cmdline"].Value' false);  	var direct = Library.Utility.Utility.ParseBool (input ["direct"].Value' false);  	output_template = output_template.Replace ("CBM"' input ["callback"].Value);  	if (cmdline) {  		info.Response.ContentType = "text/html";  		info.BodyWriter.Write (output_template.Replace ("MSG"' "Import from commandline not yet implemented"));  	} else {  		Serializable.ImportExportStructure ipx;  		var file = info.Request.Form.GetFile ("config");  		if (file == null)  			throw new Exception ("No file uploaded");  		var buf = new byte[3];  		using (var fs = System.IO.File.OpenRead (file.Filename)) {  			fs.Read (buf' 0' buf.Length);  			fs.Position = 0;  			if (buf [0] == 'A' && buf [1] == 'E' && buf [2] == 'S') {  				var passphrase = input ["passphrase"].Value;  				using (var m = new Duplicati.Library.Encryption.AESEncryption (passphrase' new Dictionary<string' string> ()))  					using (var m2 = m.Decrypt (fs))  						using (var sr = new System.IO.StreamReader (m2))  							ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  			} else {  				using (var sr = new System.IO.StreamReader (fs))  					ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  			}  		}  		ipx.Backup.ID = null;  		((Database.Backup)ipx.Backup).DBPath = null;  		if (ipx.Schedule != null)  			ipx.Schedule.ID = -1;  		if (direct) {  			lock (Program.DataConnection.m_lock) {  				var basename = ipx.Backup.Name;  				var c = 0;  				while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ())  					ipx.Backup.Name = basename + " (" + c.ToString () + ")";  				if (Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) {  					info.BodyWriter.SetOK ();  					info.Response.ContentType = "text/html";  					info.BodyWriter.Write (output_template.Replace ("MSG"' "There already exists a backup with the name: " + basename.Replace ("\'"' "\\'")));  				}  				var err = Program.DataConnection.ValidateBackup (ipx.Backup' ipx.Schedule);  				if (!string.IsNullOrWhiteSpace (err)) {  					info.ReportClientError (err);  					return;  				}  				Program.DataConnection.AddOrUpdateBackupAndSchedule (ipx.Backup' ipx.Schedule);  			}  			info.Response.ContentType = "text/html";  			info.BodyWriter.Write (output_template.Replace ("MSG"' "OK"));  		} else {  			using (var sw = new StringWriter ()) {  				Serializer.SerializeJson (sw' ipx' true);  				output_template = output_template.Replace ("'JSO'"' sw.ToString ());  			}  			info.BodyWriter.Write (output_template.Replace ("MSG"' "Import completed' but a browser issue prevents loading the contents. Try using the direct import method instead."));  		}  	}  } catch (Exception ex) {  	Program.DataConnection.LogError (""' "Failed to import backup"' ex);  	info.Response.ContentType = "text/html";  	info.BodyWriter.Write (output_template.Replace ("MSG"' ex.Message.Replace ("\'"' "\\'").Replace ("\r"' "\\r").Replace ("\n"' "\\n")));  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: try {  	var input = info.Request.Form;  	var cmdline = Library.Utility.Utility.ParseBool (input ["cmdline"].Value' false);  	var direct = Library.Utility.Utility.ParseBool (input ["direct"].Value' false);  	output_template = output_template.Replace ("CBM"' input ["callback"].Value);  	if (cmdline) {  		info.Response.ContentType = "text/html";  		info.BodyWriter.Write (output_template.Replace ("MSG"' "Import from commandline not yet implemented"));  	} else {  		Serializable.ImportExportStructure ipx;  		var file = info.Request.Form.GetFile ("config");  		if (file == null)  			throw new Exception ("No file uploaded");  		var buf = new byte[3];  		using (var fs = System.IO.File.OpenRead (file.Filename)) {  			fs.Read (buf' 0' buf.Length);  			fs.Position = 0;  			if (buf [0] == 'A' && buf [1] == 'E' && buf [2] == 'S') {  				var passphrase = input ["passphrase"].Value;  				using (var m = new Duplicati.Library.Encryption.AESEncryption (passphrase' new Dictionary<string' string> ()))  					using (var m2 = m.Decrypt (fs))  						using (var sr = new System.IO.StreamReader (m2))  							ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  			} else {  				using (var sr = new System.IO.StreamReader (fs))  					ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  			}  		}  		ipx.Backup.ID = null;  		((Database.Backup)ipx.Backup).DBPath = null;  		if (ipx.Schedule != null)  			ipx.Schedule.ID = -1;  		if (direct) {  			lock (Program.DataConnection.m_lock) {  				var basename = ipx.Backup.Name;  				var c = 0;  				while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ())  					ipx.Backup.Name = basename + " (" + c.ToString () + ")";  				if (Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) {  					info.BodyWriter.SetOK ();  					info.Response.ContentType = "text/html";  					info.BodyWriter.Write (output_template.Replace ("MSG"' "There already exists a backup with the name: " + basename.Replace ("\'"' "\\'")));  				}  				var err = Program.DataConnection.ValidateBackup (ipx.Backup' ipx.Schedule);  				if (!string.IsNullOrWhiteSpace (err)) {  					info.ReportClientError (err);  					return;  				}  				Program.DataConnection.AddOrUpdateBackupAndSchedule (ipx.Backup' ipx.Schedule);  			}  			info.Response.ContentType = "text/html";  			info.BodyWriter.Write (output_template.Replace ("MSG"' "OK"));  		} else {  			using (var sw = new StringWriter ()) {  				Serializer.SerializeJson (sw' ipx' true);  				output_template = output_template.Replace ("'JSO'"' sw.ToString ());  			}  			info.BodyWriter.Write (output_template.Replace ("MSG"' "Import completed' but a browser issue prevents loading the contents. Try using the direct import method instead."));  		}  	}  } catch (Exception ex) {  	Program.DataConnection.LogError (""' "Failed to import backup"' ex);  	info.Response.ContentType = "text/html";  	info.BodyWriter.Write (output_template.Replace ("MSG"' ex.Message.Replace ("\'"' "\\'").Replace ("\r"' "\\r").Replace ("\n"' "\\n")));  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: try {  	var input = info.Request.Form;  	var cmdline = Library.Utility.Utility.ParseBool (input ["cmdline"].Value' false);  	var direct = Library.Utility.Utility.ParseBool (input ["direct"].Value' false);  	output_template = output_template.Replace ("CBM"' input ["callback"].Value);  	if (cmdline) {  		info.Response.ContentType = "text/html";  		info.BodyWriter.Write (output_template.Replace ("MSG"' "Import from commandline not yet implemented"));  	} else {  		Serializable.ImportExportStructure ipx;  		var file = info.Request.Form.GetFile ("config");  		if (file == null)  			throw new Exception ("No file uploaded");  		var buf = new byte[3];  		using (var fs = System.IO.File.OpenRead (file.Filename)) {  			fs.Read (buf' 0' buf.Length);  			fs.Position = 0;  			if (buf [0] == 'A' && buf [1] == 'E' && buf [2] == 'S') {  				var passphrase = input ["passphrase"].Value;  				using (var m = new Duplicati.Library.Encryption.AESEncryption (passphrase' new Dictionary<string' string> ()))  					using (var m2 = m.Decrypt (fs))  						using (var sr = new System.IO.StreamReader (m2))  							ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  			} else {  				using (var sr = new System.IO.StreamReader (fs))  					ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  			}  		}  		ipx.Backup.ID = null;  		((Database.Backup)ipx.Backup).DBPath = null;  		if (ipx.Schedule != null)  			ipx.Schedule.ID = -1;  		if (direct) {  			lock (Program.DataConnection.m_lock) {  				var basename = ipx.Backup.Name;  				var c = 0;  				while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ())  					ipx.Backup.Name = basename + " (" + c.ToString () + ")";  				if (Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) {  					info.BodyWriter.SetOK ();  					info.Response.ContentType = "text/html";  					info.BodyWriter.Write (output_template.Replace ("MSG"' "There already exists a backup with the name: " + basename.Replace ("\'"' "\\'")));  				}  				var err = Program.DataConnection.ValidateBackup (ipx.Backup' ipx.Schedule);  				if (!string.IsNullOrWhiteSpace (err)) {  					info.ReportClientError (err);  					return;  				}  				Program.DataConnection.AddOrUpdateBackupAndSchedule (ipx.Backup' ipx.Schedule);  			}  			info.Response.ContentType = "text/html";  			info.BodyWriter.Write (output_template.Replace ("MSG"' "OK"));  		} else {  			using (var sw = new StringWriter ()) {  				Serializer.SerializeJson (sw' ipx' true);  				output_template = output_template.Replace ("'JSO'"' sw.ToString ());  			}  			info.BodyWriter.Write (output_template.Replace ("MSG"' "Import completed' but a browser issue prevents loading the contents. Try using the direct import method instead."));  		}  	}  } catch (Exception ex) {  	Program.DataConnection.LogError (""' "Failed to import backup"' ex);  	info.Response.ContentType = "text/html";  	info.BodyWriter.Write (output_template.Replace ("MSG"' ex.Message.Replace ("\'"' "\\'").Replace ("\r"' "\\r").Replace ("\n"' "\\n")));  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: if (cmdline) {  	info.Response.ContentType = "text/html";  	info.BodyWriter.Write (output_template.Replace ("MSG"' "Import from commandline not yet implemented"));  } else {  	Serializable.ImportExportStructure ipx;  	var file = info.Request.Form.GetFile ("config");  	if (file == null)  		throw new Exception ("No file uploaded");  	var buf = new byte[3];  	using (var fs = System.IO.File.OpenRead (file.Filename)) {  		fs.Read (buf' 0' buf.Length);  		fs.Position = 0;  		if (buf [0] == 'A' && buf [1] == 'E' && buf [2] == 'S') {  			var passphrase = input ["passphrase"].Value;  			using (var m = new Duplicati.Library.Encryption.AESEncryption (passphrase' new Dictionary<string' string> ()))  				using (var m2 = m.Decrypt (fs))  					using (var sr = new System.IO.StreamReader (m2))  						ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  		} else {  			using (var sr = new System.IO.StreamReader (fs))  				ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  		}  	}  	ipx.Backup.ID = null;  	((Database.Backup)ipx.Backup).DBPath = null;  	if (ipx.Schedule != null)  		ipx.Schedule.ID = -1;  	if (direct) {  		lock (Program.DataConnection.m_lock) {  			var basename = ipx.Backup.Name;  			var c = 0;  			while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ())  				ipx.Backup.Name = basename + " (" + c.ToString () + ")";  			if (Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) {  				info.BodyWriter.SetOK ();  				info.Response.ContentType = "text/html";  				info.BodyWriter.Write (output_template.Replace ("MSG"' "There already exists a backup with the name: " + basename.Replace ("\'"' "\\'")));  			}  			var err = Program.DataConnection.ValidateBackup (ipx.Backup' ipx.Schedule);  			if (!string.IsNullOrWhiteSpace (err)) {  				info.ReportClientError (err);  				return;  			}  			Program.DataConnection.AddOrUpdateBackupAndSchedule (ipx.Backup' ipx.Schedule);  		}  		info.Response.ContentType = "text/html";  		info.BodyWriter.Write (output_template.Replace ("MSG"' "OK"));  	} else {  		using (var sw = new StringWriter ()) {  			Serializer.SerializeJson (sw' ipx' true);  			output_template = output_template.Replace ("'JSO'"' sw.ToString ());  		}  		info.BodyWriter.Write (output_template.Replace ("MSG"' "Import completed' but a browser issue prevents loading the contents. Try using the direct import method instead."));  	}  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: if (cmdline) {  	info.Response.ContentType = "text/html";  	info.BodyWriter.Write (output_template.Replace ("MSG"' "Import from commandline not yet implemented"));  } else {  	Serializable.ImportExportStructure ipx;  	var file = info.Request.Form.GetFile ("config");  	if (file == null)  		throw new Exception ("No file uploaded");  	var buf = new byte[3];  	using (var fs = System.IO.File.OpenRead (file.Filename)) {  		fs.Read (buf' 0' buf.Length);  		fs.Position = 0;  		if (buf [0] == 'A' && buf [1] == 'E' && buf [2] == 'S') {  			var passphrase = input ["passphrase"].Value;  			using (var m = new Duplicati.Library.Encryption.AESEncryption (passphrase' new Dictionary<string' string> ()))  				using (var m2 = m.Decrypt (fs))  					using (var sr = new System.IO.StreamReader (m2))  						ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  		} else {  			using (var sr = new System.IO.StreamReader (fs))  				ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  		}  	}  	ipx.Backup.ID = null;  	((Database.Backup)ipx.Backup).DBPath = null;  	if (ipx.Schedule != null)  		ipx.Schedule.ID = -1;  	if (direct) {  		lock (Program.DataConnection.m_lock) {  			var basename = ipx.Backup.Name;  			var c = 0;  			while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ())  				ipx.Backup.Name = basename + " (" + c.ToString () + ")";  			if (Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) {  				info.BodyWriter.SetOK ();  				info.Response.ContentType = "text/html";  				info.BodyWriter.Write (output_template.Replace ("MSG"' "There already exists a backup with the name: " + basename.Replace ("\'"' "\\'")));  			}  			var err = Program.DataConnection.ValidateBackup (ipx.Backup' ipx.Schedule);  			if (!string.IsNullOrWhiteSpace (err)) {  				info.ReportClientError (err);  				return;  			}  			Program.DataConnection.AddOrUpdateBackupAndSchedule (ipx.Backup' ipx.Schedule);  		}  		info.Response.ContentType = "text/html";  		info.BodyWriter.Write (output_template.Replace ("MSG"' "OK"));  	} else {  		using (var sw = new StringWriter ()) {  			Serializer.SerializeJson (sw' ipx' true);  			output_template = output_template.Replace ("'JSO'"' sw.ToString ());  		}  		info.BodyWriter.Write (output_template.Replace ("MSG"' "Import completed' but a browser issue prevents loading the contents. Try using the direct import method instead."));  	}  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: if (cmdline) {  	info.Response.ContentType = "text/html";  	info.BodyWriter.Write (output_template.Replace ("MSG"' "Import from commandline not yet implemented"));  } else {  	Serializable.ImportExportStructure ipx;  	var file = info.Request.Form.GetFile ("config");  	if (file == null)  		throw new Exception ("No file uploaded");  	var buf = new byte[3];  	using (var fs = System.IO.File.OpenRead (file.Filename)) {  		fs.Read (buf' 0' buf.Length);  		fs.Position = 0;  		if (buf [0] == 'A' && buf [1] == 'E' && buf [2] == 'S') {  			var passphrase = input ["passphrase"].Value;  			using (var m = new Duplicati.Library.Encryption.AESEncryption (passphrase' new Dictionary<string' string> ()))  				using (var m2 = m.Decrypt (fs))  					using (var sr = new System.IO.StreamReader (m2))  						ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  		} else {  			using (var sr = new System.IO.StreamReader (fs))  				ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  		}  	}  	ipx.Backup.ID = null;  	((Database.Backup)ipx.Backup).DBPath = null;  	if (ipx.Schedule != null)  		ipx.Schedule.ID = -1;  	if (direct) {  		lock (Program.DataConnection.m_lock) {  			var basename = ipx.Backup.Name;  			var c = 0;  			while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ())  				ipx.Backup.Name = basename + " (" + c.ToString () + ")";  			if (Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) {  				info.BodyWriter.SetOK ();  				info.Response.ContentType = "text/html";  				info.BodyWriter.Write (output_template.Replace ("MSG"' "There already exists a backup with the name: " + basename.Replace ("\'"' "\\'")));  			}  			var err = Program.DataConnection.ValidateBackup (ipx.Backup' ipx.Schedule);  			if (!string.IsNullOrWhiteSpace (err)) {  				info.ReportClientError (err);  				return;  			}  			Program.DataConnection.AddOrUpdateBackupAndSchedule (ipx.Backup' ipx.Schedule);  		}  		info.Response.ContentType = "text/html";  		info.BodyWriter.Write (output_template.Replace ("MSG"' "OK"));  	} else {  		using (var sw = new StringWriter ()) {  			Serializer.SerializeJson (sw' ipx' true);  			output_template = output_template.Replace ("'JSO'"' sw.ToString ());  		}  		info.BodyWriter.Write (output_template.Replace ("MSG"' "Import completed' but a browser issue prevents loading the contents. Try using the direct import method instead."));  	}  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: using (var fs = System.IO.File.OpenRead (file.Filename)) {  	fs.Read (buf' 0' buf.Length);  	fs.Position = 0;  	if (buf [0] == 'A' && buf [1] == 'E' && buf [2] == 'S') {  		var passphrase = input ["passphrase"].Value;  		using (var m = new Duplicati.Library.Encryption.AESEncryption (passphrase' new Dictionary<string' string> ()))  			using (var m2 = m.Decrypt (fs))  				using (var sr = new System.IO.StreamReader (m2))  					ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  	} else {  		using (var sr = new System.IO.StreamReader (fs))  			ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  	}  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: if (buf [0] == 'A' && buf [1] == 'E' && buf [2] == 'S') {  	var passphrase = input ["passphrase"].Value;  	using (var m = new Duplicati.Library.Encryption.AESEncryption (passphrase' new Dictionary<string' string> ()))  		using (var m2 = m.Decrypt (fs))  			using (var sr = new System.IO.StreamReader (m2))  				ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  } else {  	using (var sr = new System.IO.StreamReader (fs))  		ipx = Serializer.Deserialize<Serializable.ImportExportStructure> (sr);  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: if (direct) {  	lock (Program.DataConnection.m_lock) {  		var basename = ipx.Backup.Name;  		var c = 0;  		while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ())  			ipx.Backup.Name = basename + " (" + c.ToString () + ")";  		if (Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) {  			info.BodyWriter.SetOK ();  			info.Response.ContentType = "text/html";  			info.BodyWriter.Write (output_template.Replace ("MSG"' "There already exists a backup with the name: " + basename.Replace ("\'"' "\\'")));  		}  		var err = Program.DataConnection.ValidateBackup (ipx.Backup' ipx.Schedule);  		if (!string.IsNullOrWhiteSpace (err)) {  			info.ReportClientError (err);  			return;  		}  		Program.DataConnection.AddOrUpdateBackupAndSchedule (ipx.Backup' ipx.Schedule);  	}  	info.Response.ContentType = "text/html";  	info.BodyWriter.Write (output_template.Replace ("MSG"' "OK"));  } else {  	using (var sw = new StringWriter ()) {  		Serializer.SerializeJson (sw' ipx' true);  		output_template = output_template.Replace ("'JSO'"' sw.ToString ());  	}  	info.BodyWriter.Write (output_template.Replace ("MSG"' "Import completed' but a browser issue prevents loading the contents. Try using the direct import method instead."));  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: lock (Program.DataConnection.m_lock) {  	var basename = ipx.Backup.Name;  	var c = 0;  	while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ())  		ipx.Backup.Name = basename + " (" + c.ToString () + ")";  	if (Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ()) {  		info.BodyWriter.SetOK ();  		info.Response.ContentType = "text/html";  		info.BodyWriter.Write (output_template.Replace ("MSG"' "There already exists a backup with the name: " + basename.Replace ("\'"' "\\'")));  	}  	var err = Program.DataConnection.ValidateBackup (ipx.Backup' ipx.Schedule);  	if (!string.IsNullOrWhiteSpace (err)) {  		info.ReportClientError (err);  		return;  	}  	Program.DataConnection.AddOrUpdateBackupAndSchedule (ipx.Backup' ipx.Schedule);  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backups,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backups.cs,ImportBackup,The following statement contains a magic number: while (c++ < 100 && Program.DataConnection.Backups.Where (x => x.Name.Equals (ipx.Backup.Name' StringComparison.InvariantCultureIgnoreCase)).Any ())  	ipx.Backup.Name = basename + " (" + c.ToString () + ")";  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,GET,The following statement contains a magic number: if (bk == null)  	info.ReportClientError ("Invalid or missing backup id"' System.Net.HttpStatusCode.NotFound);  else {  	if (parts.Length > 1) {  		var operation = parts.Last ().Split (new char[] {  			'/'  		}).First ().ToLowerInvariant ();  		switch (operation) {  		case "files":  			var filter = parts.Last ().Split (new char[] {  				'/'  			}' 2).Skip (1).FirstOrDefault ();  			if (!string.IsNullOrWhiteSpace (info.Request.QueryString ["filter"].Value))  				filter = info.Request.QueryString ["filter"].Value;  			SearchFiles (bk' filter' info);  			return;  		case "log":  			FetchLogData (bk' info);  			return;  		case "remotelog":  			FetchRemoteLogData (bk' info);  			return;  		case "filesets":  			ListFileSets (bk' info);  			return;  		case "export":  			Export (bk' info);  			return;  		case "isdbusedelsewhere":  			IsDBUsedElseWhere (bk' info);  			return;  		case "isactive":  			IsActive (bk' info);  			return;  		default:  			info.ReportClientError (string.Format ("Invalid component: {0}"' operation));  			return;  		}  	}  	var scheduleId = Program.DataConnection.GetScheduleIDsFromTags (new string[] {  		"ID=" + bk.ID  	});  	var schedule = scheduleId.Any () ? Program.DataConnection.GetSchedule (scheduleId.First ()) : null;  	var sourcenames = SpecialFolders.GetSourceNames (bk);  	//TODO: Filter out the password in both settings and the target url  	info.OutputOK (new GetResponse () {  		success = true'  		data = new GetResponse.GetResponseData () {  			Schedule = schedule'  			Backup = bk'  			DisplayNames = sourcenames  		}  	});  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,GET,The following statement contains a magic number: if (parts.Length > 1) {  	var operation = parts.Last ().Split (new char[] {  		'/'  	}).First ().ToLowerInvariant ();  	switch (operation) {  	case "files":  		var filter = parts.Last ().Split (new char[] {  			'/'  		}' 2).Skip (1).FirstOrDefault ();  		if (!string.IsNullOrWhiteSpace (info.Request.QueryString ["filter"].Value))  			filter = info.Request.QueryString ["filter"].Value;  		SearchFiles (bk' filter' info);  		return;  	case "log":  		FetchLogData (bk' info);  		return;  	case "remotelog":  		FetchRemoteLogData (bk' info);  		return;  	case "filesets":  		ListFileSets (bk' info);  		return;  	case "export":  		Export (bk' info);  		return;  	case "isdbusedelsewhere":  		IsDBUsedElseWhere (bk' info);  		return;  	case "isactive":  		IsActive (bk' info);  		return;  	default:  		info.ReportClientError (string.Format ("Invalid component: {0}"' operation));  		return;  	}  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,GET,The following statement contains a magic number: switch (operation) {  case "files":  	var filter = parts.Last ().Split (new char[] {  		'/'  	}' 2).Skip (1).FirstOrDefault ();  	if (!string.IsNullOrWhiteSpace (info.Request.QueryString ["filter"].Value))  		filter = info.Request.QueryString ["filter"].Value;  	SearchFiles (bk' filter' info);  	return;  case "log":  	FetchLogData (bk' info);  	return;  case "remotelog":  	FetchRemoteLogData (bk' info);  	return;  case "filesets":  	ListFileSets (bk' info);  	return;  case "export":  	Export (bk' info);  	return;  case "isdbusedelsewhere":  	IsDBUsedElseWhere (bk' info);  	return;  case "isactive":  	IsActive (bk' info);  	return;  default:  	info.ReportClientError (string.Format ("Invalid component: {0}"' operation));  	return;  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: if (Program.WorkThread.Active) {  	try {  		//TODO: It's not safe to access the values like this'   		//because the runner thread might interfere  		var nt = Program.WorkThread.CurrentTask;  		if (backup.Equals (nt == null ? null : nt.Backup)) {  			bool force;  			if (!bool.TryParse (info.Request.QueryString ["force"].Value' out force))  				force = false;  			if (!force) {  				info.OutputError (new {  					status = "failed"'  					reason = "backup-in-progress"  				});  				return;  			}  			bool hasPaused = Program.LiveControl.State == LiveControls.LiveControlState.Paused;  			Program.LiveControl.Pause ();  			try {  				for (int i = 0; i < 10; i++)  					if (Program.WorkThread.Active) {  						var t = Program.WorkThread.CurrentTask;  						if (backup.Equals (t == null ? null : t.Backup))  							System.Threading.Thread.Sleep (1000);  						else  							break;  					} else  						break;  			} finally {  			}  			if (Program.WorkThread.Active) {  				var t = Program.WorkThread.CurrentTask;  				if (backup.Equals (t == null ? null : t.Backup)) {  					if (hasPaused)  						Program.LiveControl.Resume ();  					info.OutputError (new {  						status = "failed"'  						reason = "backup-unstoppable"  					});  					return;  				}  			}  			if (hasPaused)  				Program.LiveControl.Resume ();  		}  	} catch (Exception ex) {  		info.OutputError (new {  			status = "error"'  			message = ex.Message  		});  		return;  	}  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: if (Program.WorkThread.Active) {  	try {  		//TODO: It's not safe to access the values like this'   		//because the runner thread might interfere  		var nt = Program.WorkThread.CurrentTask;  		if (backup.Equals (nt == null ? null : nt.Backup)) {  			bool force;  			if (!bool.TryParse (info.Request.QueryString ["force"].Value' out force))  				force = false;  			if (!force) {  				info.OutputError (new {  					status = "failed"'  					reason = "backup-in-progress"  				});  				return;  			}  			bool hasPaused = Program.LiveControl.State == LiveControls.LiveControlState.Paused;  			Program.LiveControl.Pause ();  			try {  				for (int i = 0; i < 10; i++)  					if (Program.WorkThread.Active) {  						var t = Program.WorkThread.CurrentTask;  						if (backup.Equals (t == null ? null : t.Backup))  							System.Threading.Thread.Sleep (1000);  						else  							break;  					} else  						break;  			} finally {  			}  			if (Program.WorkThread.Active) {  				var t = Program.WorkThread.CurrentTask;  				if (backup.Equals (t == null ? null : t.Backup)) {  					if (hasPaused)  						Program.LiveControl.Resume ();  					info.OutputError (new {  						status = "failed"'  						reason = "backup-unstoppable"  					});  					return;  				}  			}  			if (hasPaused)  				Program.LiveControl.Resume ();  		}  	} catch (Exception ex) {  		info.OutputError (new {  			status = "error"'  			message = ex.Message  		});  		return;  	}  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: try {  	//TODO: It's not safe to access the values like this'   	//because the runner thread might interfere  	var nt = Program.WorkThread.CurrentTask;  	if (backup.Equals (nt == null ? null : nt.Backup)) {  		bool force;  		if (!bool.TryParse (info.Request.QueryString ["force"].Value' out force))  			force = false;  		if (!force) {  			info.OutputError (new {  				status = "failed"'  				reason = "backup-in-progress"  			});  			return;  		}  		bool hasPaused = Program.LiveControl.State == LiveControls.LiveControlState.Paused;  		Program.LiveControl.Pause ();  		try {  			for (int i = 0; i < 10; i++)  				if (Program.WorkThread.Active) {  					var t = Program.WorkThread.CurrentTask;  					if (backup.Equals (t == null ? null : t.Backup))  						System.Threading.Thread.Sleep (1000);  					else  						break;  				} else  					break;  		} finally {  		}  		if (Program.WorkThread.Active) {  			var t = Program.WorkThread.CurrentTask;  			if (backup.Equals (t == null ? null : t.Backup)) {  				if (hasPaused)  					Program.LiveControl.Resume ();  				info.OutputError (new {  					status = "failed"'  					reason = "backup-unstoppable"  				});  				return;  			}  		}  		if (hasPaused)  			Program.LiveControl.Resume ();  	}  } catch (Exception ex) {  	info.OutputError (new {  		status = "error"'  		message = ex.Message  	});  	return;  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: try {  	//TODO: It's not safe to access the values like this'   	//because the runner thread might interfere  	var nt = Program.WorkThread.CurrentTask;  	if (backup.Equals (nt == null ? null : nt.Backup)) {  		bool force;  		if (!bool.TryParse (info.Request.QueryString ["force"].Value' out force))  			force = false;  		if (!force) {  			info.OutputError (new {  				status = "failed"'  				reason = "backup-in-progress"  			});  			return;  		}  		bool hasPaused = Program.LiveControl.State == LiveControls.LiveControlState.Paused;  		Program.LiveControl.Pause ();  		try {  			for (int i = 0; i < 10; i++)  				if (Program.WorkThread.Active) {  					var t = Program.WorkThread.CurrentTask;  					if (backup.Equals (t == null ? null : t.Backup))  						System.Threading.Thread.Sleep (1000);  					else  						break;  				} else  					break;  		} finally {  		}  		if (Program.WorkThread.Active) {  			var t = Program.WorkThread.CurrentTask;  			if (backup.Equals (t == null ? null : t.Backup)) {  				if (hasPaused)  					Program.LiveControl.Resume ();  				info.OutputError (new {  					status = "failed"'  					reason = "backup-unstoppable"  				});  				return;  			}  		}  		if (hasPaused)  			Program.LiveControl.Resume ();  	}  } catch (Exception ex) {  	info.OutputError (new {  		status = "error"'  		message = ex.Message  	});  	return;  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: if (backup.Equals (nt == null ? null : nt.Backup)) {  	bool force;  	if (!bool.TryParse (info.Request.QueryString ["force"].Value' out force))  		force = false;  	if (!force) {  		info.OutputError (new {  			status = "failed"'  			reason = "backup-in-progress"  		});  		return;  	}  	bool hasPaused = Program.LiveControl.State == LiveControls.LiveControlState.Paused;  	Program.LiveControl.Pause ();  	try {  		for (int i = 0; i < 10; i++)  			if (Program.WorkThread.Active) {  				var t = Program.WorkThread.CurrentTask;  				if (backup.Equals (t == null ? null : t.Backup))  					System.Threading.Thread.Sleep (1000);  				else  					break;  			} else  				break;  	} finally {  	}  	if (Program.WorkThread.Active) {  		var t = Program.WorkThread.CurrentTask;  		if (backup.Equals (t == null ? null : t.Backup)) {  			if (hasPaused)  				Program.LiveControl.Resume ();  			info.OutputError (new {  				status = "failed"'  				reason = "backup-unstoppable"  			});  			return;  		}  	}  	if (hasPaused)  		Program.LiveControl.Resume ();  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: if (backup.Equals (nt == null ? null : nt.Backup)) {  	bool force;  	if (!bool.TryParse (info.Request.QueryString ["force"].Value' out force))  		force = false;  	if (!force) {  		info.OutputError (new {  			status = "failed"'  			reason = "backup-in-progress"  		});  		return;  	}  	bool hasPaused = Program.LiveControl.State == LiveControls.LiveControlState.Paused;  	Program.LiveControl.Pause ();  	try {  		for (int i = 0; i < 10; i++)  			if (Program.WorkThread.Active) {  				var t = Program.WorkThread.CurrentTask;  				if (backup.Equals (t == null ? null : t.Backup))  					System.Threading.Thread.Sleep (1000);  				else  					break;  			} else  				break;  	} finally {  	}  	if (Program.WorkThread.Active) {  		var t = Program.WorkThread.CurrentTask;  		if (backup.Equals (t == null ? null : t.Backup)) {  			if (hasPaused)  				Program.LiveControl.Resume ();  			info.OutputError (new {  				status = "failed"'  				reason = "backup-unstoppable"  			});  			return;  		}  	}  	if (hasPaused)  		Program.LiveControl.Resume ();  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: try {  	for (int i = 0; i < 10; i++)  		if (Program.WorkThread.Active) {  			var t = Program.WorkThread.CurrentTask;  			if (backup.Equals (t == null ? null : t.Backup))  				System.Threading.Thread.Sleep (1000);  			else  				break;  		} else  			break;  } finally {  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: try {  	for (int i = 0; i < 10; i++)  		if (Program.WorkThread.Active) {  			var t = Program.WorkThread.CurrentTask;  			if (backup.Equals (t == null ? null : t.Backup))  				System.Threading.Thread.Sleep (1000);  			else  				break;  		} else  			break;  } finally {  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: for (int i = 0; i < 10; i++)  	if (Program.WorkThread.Active) {  		var t = Program.WorkThread.CurrentTask;  		if (backup.Equals (t == null ? null : t.Backup))  			System.Threading.Thread.Sleep (1000);  		else  			break;  	} else  		break;  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: for (int i = 0; i < 10; i++)  	if (Program.WorkThread.Active) {  		var t = Program.WorkThread.CurrentTask;  		if (backup.Equals (t == null ? null : t.Backup))  			System.Threading.Thread.Sleep (1000);  		else  			break;  	} else  		break;  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: if (Program.WorkThread.Active) {  	var t = Program.WorkThread.CurrentTask;  	if (backup.Equals (t == null ? null : t.Backup))  		System.Threading.Thread.Sleep (1000);  	else  		break;  } else  	break;  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: if (backup.Equals (t == null ? null : t.Backup))  	System.Threading.Thread.Sleep (1000);  else  	break;  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,DELETE,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,Duplicati.Server.WebServer.RESTMethods,LogData,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\LogData.cs,DumpTable,The following statement contains a magic number: if (!long.TryParse (pagesize_str' out pagesize))  	pagesize = 100;  
Magic Number,Duplicati.Server.WebServer.RESTMethods,LogData,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\LogData.cs,DumpTable,The following statement contains a magic number: pagesize = 100;  
Magic Number,Duplicati.Server.WebServer.RESTMethods,LogData,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\LogData.cs,DumpTable,The following statement contains a magic number: pagesize = Math.Max (10' Math.Min (500' pagesize));  
Magic Number,Duplicati.Server.WebServer.RESTMethods,LogData,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\LogData.cs,DumpTable,The following statement contains a magic number: pagesize = Math.Max (10' Math.Min (500' pagesize));  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Task,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Task.cs,POST,The following statement contains a magic number: if (parts.Length == 2 && long.TryParse (parts.First ()' out taskid)) {  	var task = Program.WorkThread.CurrentTask;  	var tasks = Program.WorkThread.CurrentTasks;  	if (task != null)  		tasks.Insert (0' task);  	task = tasks.Where (x => x.TaskID == taskid).FirstOrDefault ();  	if (task == null) {  		info.ReportClientError ("No such task"' System.Net.HttpStatusCode.NotFound);  		return;  	}  	switch (parts.Last ().ToLowerInvariant ()) {  	case "abort":  		task.Abort ();  		info.OutputOK ();  		return;  	case "stop":  		task.Stop ();  		info.OutputOK ();  		return;  	}  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Captcha,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Captcha.cs,POST,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (key)) {  	var target = info.Request.Param ["target"].Value;  	if (string.IsNullOrWhiteSpace (target)) {  		info.ReportClientError ("Missing target parameter");  		return;  	}  	var answer = CaptchaUtil.CreateRandomAnswer (minlength: 6' maxlength: 6);  	var nonce = Guid.NewGuid ().ToString ();  	string token;  	using (var ms = new System.IO.MemoryStream ()) {  		var bytes = System.Text.Encoding.UTF8.GetBytes (answer + nonce);  		ms.Write (bytes' 0' bytes.Length);  		ms.Position = 0;  		token = Library.Utility.Utility.Base64PlainToBase64Url (Library.Utility.Utility.CalculateHash (ms));  	}  	lock (m_lock) {  		var expired = m_captchas.Where (x => x.Value.Expires < DateTime.Now).Select (x => x.Key).ToArray ();  		foreach (var x in expired)  			m_captchas.Remove (x);  		if (m_captchas.Count > 3) {  			info.ReportClientError ("Too many captchas' wait 2 minutes and try again"' System.Net.HttpStatusCode.ServiceUnavailable);  			return;  		}  		m_captchas [token] = new CaptchaEntry (answer' target);  	}  	info.OutputOK (new {  		token = token  	});  } else {  	var answer = info.Request.Param ["answer"].Value;  	var target = info.Request.Param ["target"].Value;  	if (string.IsNullOrWhiteSpace (answer)) {  		info.ReportClientError ("Missing answer parameter");  		return;  	}  	if (string.IsNullOrWhiteSpace (target)) {  		info.ReportClientError ("Missing target parameter");  		return;  	}  	if (SolvedCaptcha (key' target' answer))  		info.OutputOK ();  	else  		info.ReportClientError ("Incorrect");  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Captcha,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Captcha.cs,POST,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (key)) {  	var target = info.Request.Param ["target"].Value;  	if (string.IsNullOrWhiteSpace (target)) {  		info.ReportClientError ("Missing target parameter");  		return;  	}  	var answer = CaptchaUtil.CreateRandomAnswer (minlength: 6' maxlength: 6);  	var nonce = Guid.NewGuid ().ToString ();  	string token;  	using (var ms = new System.IO.MemoryStream ()) {  		var bytes = System.Text.Encoding.UTF8.GetBytes (answer + nonce);  		ms.Write (bytes' 0' bytes.Length);  		ms.Position = 0;  		token = Library.Utility.Utility.Base64PlainToBase64Url (Library.Utility.Utility.CalculateHash (ms));  	}  	lock (m_lock) {  		var expired = m_captchas.Where (x => x.Value.Expires < DateTime.Now).Select (x => x.Key).ToArray ();  		foreach (var x in expired)  			m_captchas.Remove (x);  		if (m_captchas.Count > 3) {  			info.ReportClientError ("Too many captchas' wait 2 minutes and try again"' System.Net.HttpStatusCode.ServiceUnavailable);  			return;  		}  		m_captchas [token] = new CaptchaEntry (answer' target);  	}  	info.OutputOK (new {  		token = token  	});  } else {  	var answer = info.Request.Param ["answer"].Value;  	var target = info.Request.Param ["target"].Value;  	if (string.IsNullOrWhiteSpace (answer)) {  		info.ReportClientError ("Missing answer parameter");  		return;  	}  	if (string.IsNullOrWhiteSpace (target)) {  		info.ReportClientError ("Missing target parameter");  		return;  	}  	if (SolvedCaptcha (key' target' answer))  		info.OutputOK ();  	else  		info.ReportClientError ("Incorrect");  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Captcha,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Captcha.cs,POST,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (key)) {  	var target = info.Request.Param ["target"].Value;  	if (string.IsNullOrWhiteSpace (target)) {  		info.ReportClientError ("Missing target parameter");  		return;  	}  	var answer = CaptchaUtil.CreateRandomAnswer (minlength: 6' maxlength: 6);  	var nonce = Guid.NewGuid ().ToString ();  	string token;  	using (var ms = new System.IO.MemoryStream ()) {  		var bytes = System.Text.Encoding.UTF8.GetBytes (answer + nonce);  		ms.Write (bytes' 0' bytes.Length);  		ms.Position = 0;  		token = Library.Utility.Utility.Base64PlainToBase64Url (Library.Utility.Utility.CalculateHash (ms));  	}  	lock (m_lock) {  		var expired = m_captchas.Where (x => x.Value.Expires < DateTime.Now).Select (x => x.Key).ToArray ();  		foreach (var x in expired)  			m_captchas.Remove (x);  		if (m_captchas.Count > 3) {  			info.ReportClientError ("Too many captchas' wait 2 minutes and try again"' System.Net.HttpStatusCode.ServiceUnavailable);  			return;  		}  		m_captchas [token] = new CaptchaEntry (answer' target);  	}  	info.OutputOK (new {  		token = token  	});  } else {  	var answer = info.Request.Param ["answer"].Value;  	var target = info.Request.Param ["target"].Value;  	if (string.IsNullOrWhiteSpace (answer)) {  		info.ReportClientError ("Missing answer parameter");  		return;  	}  	if (string.IsNullOrWhiteSpace (target)) {  		info.ReportClientError ("Missing target parameter");  		return;  	}  	if (SolvedCaptcha (key' target' answer))  		info.OutputOK ();  	else  		info.ReportClientError ("Incorrect");  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Captcha,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Captcha.cs,POST,The following statement contains a magic number: lock (m_lock) {  	var expired = m_captchas.Where (x => x.Value.Expires < DateTime.Now).Select (x => x.Key).ToArray ();  	foreach (var x in expired)  		m_captchas.Remove (x);  	if (m_captchas.Count > 3) {  		info.ReportClientError ("Too many captchas' wait 2 minutes and try again"' System.Net.HttpStatusCode.ServiceUnavailable);  		return;  	}  	m_captchas [token] = new CaptchaEntry (answer' target);  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,Captcha,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Captcha.cs,POST,The following statement contains a magic number: if (m_captchas.Count > 3) {  	info.ReportClientError ("Too many captchas' wait 2 minutes and try again"' System.Net.HttpStatusCode.ServiceUnavailable);  	return;  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,RunCleanupAsync,The following statement contains a magic number: while (m_activeItems.Count > 0) {  	var oldest = m_activeItems.Values.OrderBy (x => x.LastAccess).FirstOrDefault ();  	if (oldest != null && DateTime.Now - oldest.LastAccess > TimeSpan.FromMinutes (5)) {  		m_activeItems.Remove (oldest.ID);  		oldest.Log.Dispose ();  		// Fix all expired' or stop running  		continue;  	}  	await System.Threading.Tasks.Task.Delay (TimeSpan.FromSeconds (60));  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,RunCleanupAsync,The following statement contains a magic number: while (m_activeItems.Count > 0) {  	var oldest = m_activeItems.Values.OrderBy (x => x.LastAccess).FirstOrDefault ();  	if (oldest != null && DateTime.Now - oldest.LastAccess > TimeSpan.FromMinutes (5)) {  		m_activeItems.Remove (oldest.ID);  		oldest.Log.Dispose ();  		// Fix all expired' or stop running  		continue;  	}  	await System.Threading.Tasks.Task.Delay (TimeSpan.FromSeconds (60));  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,RunCleanupAsync,The following statement contains a magic number: if (oldest != null && DateTime.Now - oldest.LastAccess > TimeSpan.FromMinutes (5)) {  	m_activeItems.Remove (oldest.ID);  	oldest.Log.Dispose ();  	// Fix all expired' or stop running  	continue;  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,RunCleanupAsync,The following statement contains a magic number: await System.Threading.Tasks.Task.Delay (TimeSpan.FromSeconds (60));  
Magic Number,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,GET,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (key)) {  	info.OutputOK (Duplicati.CommandLine.Program.SupportedCommands);  } else {  	ActiveRun t;  	if (!m_activeItems.TryGetValue (key' out t)) {  		info.OutputError (code: System.Net.HttpStatusCode.NotFound);  		return;  	}  	int pagesize;  	int offset;  	int.TryParse (info.Request.QueryString ["pagesize"].Value' out pagesize);  	int.TryParse (info.Request.QueryString ["offset"].Value' out offset);  	pagesize = Math.Max (10' Math.Min (500' pagesize));  	offset = Math.Max (0' offset);  	var items = new List<string> ();  	long count;  	bool started;  	bool finished;  	lock (t.Lock) {  		t.LastAccess = DateTime.Now;  		count = t.Log.Count;  		offset = Math.Min ((int)count' offset);  		items.AddRange (t.Log.Skip (offset).Take (pagesize));  		finished = t.Finished;  		started = t.Started;  	}  	info.OutputOK (new {  		Pagesize = pagesize'  		Offset = offset'  		Count = count'  		Items = items'  		Finished = finished'  		Started = started  	});  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,GET,The following statement contains a magic number: if (string.IsNullOrWhiteSpace (key)) {  	info.OutputOK (Duplicati.CommandLine.Program.SupportedCommands);  } else {  	ActiveRun t;  	if (!m_activeItems.TryGetValue (key' out t)) {  		info.OutputError (code: System.Net.HttpStatusCode.NotFound);  		return;  	}  	int pagesize;  	int offset;  	int.TryParse (info.Request.QueryString ["pagesize"].Value' out pagesize);  	int.TryParse (info.Request.QueryString ["offset"].Value' out offset);  	pagesize = Math.Max (10' Math.Min (500' pagesize));  	offset = Math.Max (0' offset);  	var items = new List<string> ();  	long count;  	bool started;  	bool finished;  	lock (t.Lock) {  		t.LastAccess = DateTime.Now;  		count = t.Log.Count;  		offset = Math.Min ((int)count' offset);  		items.AddRange (t.Log.Skip (offset).Take (pagesize));  		finished = t.Finished;  		started = t.Started;  	}  	info.OutputOK (new {  		Pagesize = pagesize'  		Offset = offset'  		Count = count'  		Items = items'  		Finished = finished'  		Started = started  	});  }  
Magic Number,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,GET,The following statement contains a magic number: pagesize = Math.Max (10' Math.Min (500' pagesize));  
Magic Number,Duplicati.Server.WebServer.RESTMethods,CommandLine,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\CommandLine.cs,GET,The following statement contains a magic number: pagesize = Math.Max (10' Math.Min (500' pagesize));  
Missing Default,Duplicati.Server,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\Program.cs,LiveControl_StateChanged,The following switch statement is missing a default case: switch (LiveControl.State) {  case LiveControls.LiveControlState.Paused: {  	WorkThread.Pause ();  	var t = WorkThread.CurrentTask;  	if (t != null)  		t.Pause ();  	break;  }  case LiveControls.LiveControlState.Running: {  	WorkThread.Resume ();  	var t = WorkThread.CurrentTask;  	if (t != null)  		t.Resume ();  	break;  }  }  
Missing Default,Duplicati.Server.WebServer.RESTMethods,Backup,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Backup.cs,POST,The following switch statement is missing a default case: switch (operation) {  case "deletedb":  	System.IO.File.Delete (bk.DBPath);  	info.OutputOK ();  	return;  case "movedb":  	UpdateDatabasePath (bk' info' true);  	return;  case "updatedb":  	UpdateDatabasePath (bk' info' false);  	return;  case "restore":  	RestoreFiles (bk' info);  	return;  case "createreport":  	CreateReport (bk' info);  	return;  case "repair":  	Repair (bk' info);  	return;  case "repairupdate":  	RepairUpdate (bk' info);  	return;  case "verify":  	Verify (bk' info);  	return;  case "compact":  	Compact (bk' info);  	return;  case "start":  case "run":  	RunBackup (bk' info);  	return;  case "report-remote-size":  	ReportRemoteSize (bk' info);  	return;  case "copytotemp":  	var ipx = Serializer.Deserialize<Database.Backup> (new StringReader (Newtonsoft.Json.JsonConvert.SerializeObject (bk)));  	using (var tf = new Duplicati.Library.Utility.TempFile ())  		ipx.DBPath = tf;  	ipx.ID = null;  	info.OutputOK (new {  		status = "OK"'  		ID = Program.DataConnection.RegisterTemporaryBackup (ipx)  	});  	return;  }  
Missing Default,Duplicati.Server.WebServer.RESTMethods,Task,F:\newReposMay17\duplicati_duplicati\Duplicati\Server\WebServer\RESTMethods\Task.cs,POST,The following switch statement is missing a default case: switch (parts.Last ().ToLowerInvariant ()) {  case "abort":  	task.Abort ();  	info.OutputOK ();  	return;  case "stop":  	task.Stop ();  	info.OutputOK ();  	return;  }  
