Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Duplicati.Library.Backend,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\CloudFiles.cs,CloudFiles,Cyclomatic complexity of the method is 16
Long Statement,Duplicati.Library.Backend,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\CloudFiles.cs,Delete,The length of the statement  "                if (wex.Response is System.Net.HttpWebResponse && ((System.Net.HttpWebResponse)wex.Response).StatusCode == System.Net.HttpStatusCode.NotFound) " is 142.
Long Statement,Duplicati.Library.Backend.Strings,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\Strings.cs,DescriptionAuthenticationURLLong_v2,The length of the statement  "{ return LC.L(@"CloudFiles use different servers for authentication based on where the account resides' use this option to set an alternate authentication URL. This option overrides --{0}."' optionname); }" is 205.
Long Statement,Duplicati.Library.Backend.Strings,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\Strings.cs,DescriptionUKAccountLong,The length of the statement  "{ return LC.L(@"Duplicati will assume that the credentials given are for a US account' use this option if the account is a UK based account. Note that this is equivalent to setting --{0}={1}."' optionname' optionvalue); }" is 221.
Empty Catch Block,Duplicati.Library.Backend,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\CloudFiles.cs,List,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Backend,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\CloudFiles.cs,Put,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Backend,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\CloudFiles.cs,Put,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Backend,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\CloudFiles.cs,Put,The method has an empty catch block.
Magic Number,Duplicati.Library.Backend,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\CloudFiles.cs,Delete,The following statement contains a magic number: try              {                  HttpWebRequest req = CreateRequest("/" + remotename' "");                    req.Method = "DELETE";                  Utility.AsyncHttpRequest areq = new Utility.AsyncHttpRequest(req);                  using (HttpWebResponse resp = (HttpWebResponse)areq.GetResponse())                  {                      if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)                          throw new FileMissingException();                        if ((int)resp.StatusCode >= 300)                          throw new WebException(Strings.CloudFiles.FileDeleteError' null' WebExceptionStatus.ProtocolError' resp);                      else                          using (areq.GetResponseStream())                          { }                  }              }              catch (System.Net.WebException wex)              {                  if (wex.Response is System.Net.HttpWebResponse && ((System.Net.HttpWebResponse)wex.Response).StatusCode == System.Net.HttpStatusCode.NotFound)                      throw new FileMissingException(wex);                  else                      throw;              }
Magic Number,Duplicati.Library.Backend,CloudFiles,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\CloudFiles\CloudFiles.cs,Put,The following statement contains a magic number: {                  string fileHash = null;                    long streamLen = -1;                  try { streamLen = stream.Length; }                  catch {}                      Utility.AsyncHttpRequest areq = new Utility.AsyncHttpRequest(req);                  using (System.IO.Stream s = areq.GetRequestStream(streamLen))                  using (var mds = new Utility.MD5CalculatingStream(s))                  {                      Utility.Utility.CopyStream(stream' mds' true' m_copybuffer);                      fileHash = mds.GetFinalHashString();                  }                    string md5Hash = null;                    //We need to verify the eTag locally                  try                  {                      using (HttpWebResponse resp = (HttpWebResponse)areq.GetResponse())                          if ((int)resp.StatusCode >= 300)                              throw new WebException(Strings.CloudFiles.FileUploadError' null' WebExceptionStatus.ProtocolError' resp);                          else                              md5Hash = resp.Headers["ETag"];                  }                  catch (WebException wex)                  {                      //Catch 404 and turn it into a FolderNotFound error                      if (wex.Response is HttpWebResponse && ((HttpWebResponse)wex.Response).StatusCode == HttpStatusCode.NotFound)                          throw new FolderMissingException(wex);                        //Other error' just re-throw                      throw;                  }                      if (md5Hash == null || md5Hash.ToLower() != fileHash.ToLower())                  {                      //Remove the broken file                      try { Delete(remotename); }                      catch { }                        throw new Exception(Strings.CloudFiles.ETagVerificationError);                  }              }
