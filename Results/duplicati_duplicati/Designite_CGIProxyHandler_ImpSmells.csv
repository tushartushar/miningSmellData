Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ShellExec,Cyclomatic complexity of the method is 8
Complex Method,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,Main,Cyclomatic complexity of the method is 9
Complex Method,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,Run,Cyclomatic complexity of the method is 22
Complex Method,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,Cyclomatic complexity of the method is 11
Complex Method,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardRequest,Cyclomatic complexity of the method is 11
Long Parameter List,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ShellExec,The method has 5 parameters.
Long Statement,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,Main,The length of the statement  "	using (var logout = new StreamWriter (File.Open (logfile' System.IO.FileMode.Append' FileAccess.Write' FileShare.ReadWrite))) " is 125.
Long Statement,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,Main,The length of the statement  "				logger.WriteDebugMessage (string.Format ("Redirects: {0}'{1}'{2}"' Console.IsInputRedirected' Console.IsOutputRedirected' Console.IsErrorRedirected)); " is 150.
Long Statement,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The length of the statement  "					logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN)); " is 151.
Long Statement,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The length of the statement  "						//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r))); " is 127.
Long Statement,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardRequest,The length of the statement  "				logger.WriteDebugMessage(string.Format("{0}: {1}"' k' env[k]));*/await sw.WriteAsync (string.Format ("{0} {1} HTTP/1.1{2}"' GetEnvArg ("REQUEST_METHOD"' "").Trim ()' path' CRLF)); " is 179.
Long Statement,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardRequest,The length of the statement  "		await sw.WriteAsync (string.Format ("{0}: {1}{2}"' key.Substring ("HTTP_".Length).Replace ("_"' "-")' env [key]' CRLF)); " is 120.
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ShellExec,The following statement contains a magic number: using (var p = Process.Start (psi)) {  	if (shell && args != null)  		await p.StandardInput.WriteLineAsync (args);  	var res = await p.StandardOutput.ReadToEndAsync ();  	p.WaitForExit ((int)TimeSpan.FromSeconds (5).TotalMilliseconds);  	if (p.ExitCode != exitcode && exitcode != -1)  		throw new Exception (string.Format ("Exit code was: {0}' stdout: {1}"' p.ExitCode' res));  	return res;  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ShellExec,The following statement contains a magic number: p.WaitForExit ((int)TimeSpan.FromSeconds (5).TotalMilliseconds);  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,Run,The following statement contains a magic number: if (!int.TryParse (proxy_port' out port))  	port = 8200;  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,Run,The following statement contains a magic number: port = 8200;  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while ((r = await source.ReadAsync (buf' offset' buf.Length - offset' canceltoken.Token)) != 0) {  	logger.WriteDebugMessage (string.Format ("Read {0} bytes"' r));  	offset += r;  	var ix = Array.IndexOf (buf' (byte)13' 0' offset);  	while (ix >= 0 && ix < offset - 1) {  		if (buf [ix + 1] == 10) {  			if (!status) {  				status = true;  				logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  				await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  				await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  				logger.WriteDebugMessage ("Wrote status line");  			} else {  				// Blank line and we are done  				if (ix - lastmatch == 0) {  					logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  					await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  					// Adjust remaining data length  					if (contentlength > 0)  						contentlength -= offset - lastmatch - 2;  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					while (contentlength > 0) {  						r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  						if (r == 0)  							break;  						contentlength -= r;  						await target.WriteAsync (buf' 0' r' canceltoken.Token);  						logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					}  					await target.FlushAsync (canceltoken.Token);  					//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  					logger.WriteDebugMessage (string.Format ("Completed response forward"));  					target.Close ();  					return;  				} else {  					var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  					if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  						if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  							contentlength = -1;  					logger.WriteDebugMessage ("Writing: " + header);  					await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  				}  			}  			lastmatch = ix + 2;  		}  		//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  		ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while ((r = await source.ReadAsync (buf' offset' buf.Length - offset' canceltoken.Token)) != 0) {  	logger.WriteDebugMessage (string.Format ("Read {0} bytes"' r));  	offset += r;  	var ix = Array.IndexOf (buf' (byte)13' 0' offset);  	while (ix >= 0 && ix < offset - 1) {  		if (buf [ix + 1] == 10) {  			if (!status) {  				status = true;  				logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  				await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  				await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  				logger.WriteDebugMessage ("Wrote status line");  			} else {  				// Blank line and we are done  				if (ix - lastmatch == 0) {  					logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  					await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  					// Adjust remaining data length  					if (contentlength > 0)  						contentlength -= offset - lastmatch - 2;  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					while (contentlength > 0) {  						r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  						if (r == 0)  							break;  						contentlength -= r;  						await target.WriteAsync (buf' 0' r' canceltoken.Token);  						logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					}  					await target.FlushAsync (canceltoken.Token);  					//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  					logger.WriteDebugMessage (string.Format ("Completed response forward"));  					target.Close ();  					return;  				} else {  					var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  					if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  						if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  							contentlength = -1;  					logger.WriteDebugMessage ("Writing: " + header);  					await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  				}  			}  			lastmatch = ix + 2;  		}  		//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  		ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while ((r = await source.ReadAsync (buf' offset' buf.Length - offset' canceltoken.Token)) != 0) {  	logger.WriteDebugMessage (string.Format ("Read {0} bytes"' r));  	offset += r;  	var ix = Array.IndexOf (buf' (byte)13' 0' offset);  	while (ix >= 0 && ix < offset - 1) {  		if (buf [ix + 1] == 10) {  			if (!status) {  				status = true;  				logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  				await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  				await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  				logger.WriteDebugMessage ("Wrote status line");  			} else {  				// Blank line and we are done  				if (ix - lastmatch == 0) {  					logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  					await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  					// Adjust remaining data length  					if (contentlength > 0)  						contentlength -= offset - lastmatch - 2;  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					while (contentlength > 0) {  						r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  						if (r == 0)  							break;  						contentlength -= r;  						await target.WriteAsync (buf' 0' r' canceltoken.Token);  						logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					}  					await target.FlushAsync (canceltoken.Token);  					//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  					logger.WriteDebugMessage (string.Format ("Completed response forward"));  					target.Close ();  					return;  				} else {  					var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  					if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  						if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  							contentlength = -1;  					logger.WriteDebugMessage ("Writing: " + header);  					await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  				}  			}  			lastmatch = ix + 2;  		}  		//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  		ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while ((r = await source.ReadAsync (buf' offset' buf.Length - offset' canceltoken.Token)) != 0) {  	logger.WriteDebugMessage (string.Format ("Read {0} bytes"' r));  	offset += r;  	var ix = Array.IndexOf (buf' (byte)13' 0' offset);  	while (ix >= 0 && ix < offset - 1) {  		if (buf [ix + 1] == 10) {  			if (!status) {  				status = true;  				logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  				await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  				await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  				logger.WriteDebugMessage ("Wrote status line");  			} else {  				// Blank line and we are done  				if (ix - lastmatch == 0) {  					logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  					await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  					// Adjust remaining data length  					if (contentlength > 0)  						contentlength -= offset - lastmatch - 2;  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					while (contentlength > 0) {  						r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  						if (r == 0)  							break;  						contentlength -= r;  						await target.WriteAsync (buf' 0' r' canceltoken.Token);  						logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					}  					await target.FlushAsync (canceltoken.Token);  					//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  					logger.WriteDebugMessage (string.Format ("Completed response forward"));  					target.Close ();  					return;  				} else {  					var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  					if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  						if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  							contentlength = -1;  					logger.WriteDebugMessage ("Writing: " + header);  					await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  				}  			}  			lastmatch = ix + 2;  		}  		//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  		ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while ((r = await source.ReadAsync (buf' offset' buf.Length - offset' canceltoken.Token)) != 0) {  	logger.WriteDebugMessage (string.Format ("Read {0} bytes"' r));  	offset += r;  	var ix = Array.IndexOf (buf' (byte)13' 0' offset);  	while (ix >= 0 && ix < offset - 1) {  		if (buf [ix + 1] == 10) {  			if (!status) {  				status = true;  				logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  				await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  				await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  				logger.WriteDebugMessage ("Wrote status line");  			} else {  				// Blank line and we are done  				if (ix - lastmatch == 0) {  					logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  					await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  					// Adjust remaining data length  					if (contentlength > 0)  						contentlength -= offset - lastmatch - 2;  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					while (contentlength > 0) {  						r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  						if (r == 0)  							break;  						contentlength -= r;  						await target.WriteAsync (buf' 0' r' canceltoken.Token);  						logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					}  					await target.FlushAsync (canceltoken.Token);  					//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  					logger.WriteDebugMessage (string.Format ("Completed response forward"));  					target.Close ();  					return;  				} else {  					var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  					if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  						if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  							contentlength = -1;  					logger.WriteDebugMessage ("Writing: " + header);  					await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  				}  			}  			lastmatch = ix + 2;  		}  		//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  		ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while ((r = await source.ReadAsync (buf' offset' buf.Length - offset' canceltoken.Token)) != 0) {  	logger.WriteDebugMessage (string.Format ("Read {0} bytes"' r));  	offset += r;  	var ix = Array.IndexOf (buf' (byte)13' 0' offset);  	while (ix >= 0 && ix < offset - 1) {  		if (buf [ix + 1] == 10) {  			if (!status) {  				status = true;  				logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  				await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  				await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  				logger.WriteDebugMessage ("Wrote status line");  			} else {  				// Blank line and we are done  				if (ix - lastmatch == 0) {  					logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  					await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  					// Adjust remaining data length  					if (contentlength > 0)  						contentlength -= offset - lastmatch - 2;  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					while (contentlength > 0) {  						r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  						if (r == 0)  							break;  						contentlength -= r;  						await target.WriteAsync (buf' 0' r' canceltoken.Token);  						logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					}  					await target.FlushAsync (canceltoken.Token);  					//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  					logger.WriteDebugMessage (string.Format ("Completed response forward"));  					target.Close ();  					return;  				} else {  					var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  					if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  						if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  							contentlength = -1;  					logger.WriteDebugMessage ("Writing: " + header);  					await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  				}  			}  			lastmatch = ix + 2;  		}  		//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  		ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while ((r = await source.ReadAsync (buf' offset' buf.Length - offset' canceltoken.Token)) != 0) {  	logger.WriteDebugMessage (string.Format ("Read {0} bytes"' r));  	offset += r;  	var ix = Array.IndexOf (buf' (byte)13' 0' offset);  	while (ix >= 0 && ix < offset - 1) {  		if (buf [ix + 1] == 10) {  			if (!status) {  				status = true;  				logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  				await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  				await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  				logger.WriteDebugMessage ("Wrote status line");  			} else {  				// Blank line and we are done  				if (ix - lastmatch == 0) {  					logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  					await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  					// Adjust remaining data length  					if (contentlength > 0)  						contentlength -= offset - lastmatch - 2;  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					while (contentlength > 0) {  						r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  						if (r == 0)  							break;  						contentlength -= r;  						await target.WriteAsync (buf' 0' r' canceltoken.Token);  						logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  					}  					await target.FlushAsync (canceltoken.Token);  					//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  					logger.WriteDebugMessage (string.Format ("Completed response forward"));  					target.Close ();  					return;  				} else {  					var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  					if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  						if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  							contentlength = -1;  					logger.WriteDebugMessage ("Writing: " + header);  					await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  				}  			}  			lastmatch = ix + 2;  		}  		//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  		ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while (ix >= 0 && ix < offset - 1) {  	if (buf [ix + 1] == 10) {  		if (!status) {  			status = true;  			logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  			await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  			await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  			logger.WriteDebugMessage ("Wrote status line");  		} else {  			// Blank line and we are done  			if (ix - lastmatch == 0) {  				logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  				await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  				// Adjust remaining data length  				if (contentlength > 0)  					contentlength -= offset - lastmatch - 2;  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				while (contentlength > 0) {  					r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  					if (r == 0)  						break;  					contentlength -= r;  					await target.WriteAsync (buf' 0' r' canceltoken.Token);  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				}  				await target.FlushAsync (canceltoken.Token);  				//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  				logger.WriteDebugMessage (string.Format ("Completed response forward"));  				target.Close ();  				return;  			} else {  				var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  				if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  					if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  						contentlength = -1;  				logger.WriteDebugMessage ("Writing: " + header);  				await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  			}  		}  		lastmatch = ix + 2;  	}  	//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  	ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while (ix >= 0 && ix < offset - 1) {  	if (buf [ix + 1] == 10) {  		if (!status) {  			status = true;  			logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  			await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  			await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  			logger.WriteDebugMessage ("Wrote status line");  		} else {  			// Blank line and we are done  			if (ix - lastmatch == 0) {  				logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  				await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  				// Adjust remaining data length  				if (contentlength > 0)  					contentlength -= offset - lastmatch - 2;  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				while (contentlength > 0) {  					r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  					if (r == 0)  						break;  					contentlength -= r;  					await target.WriteAsync (buf' 0' r' canceltoken.Token);  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				}  				await target.FlushAsync (canceltoken.Token);  				//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  				logger.WriteDebugMessage (string.Format ("Completed response forward"));  				target.Close ();  				return;  			} else {  				var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  				if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  					if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  						contentlength = -1;  				logger.WriteDebugMessage ("Writing: " + header);  				await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  			}  		}  		lastmatch = ix + 2;  	}  	//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  	ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while (ix >= 0 && ix < offset - 1) {  	if (buf [ix + 1] == 10) {  		if (!status) {  			status = true;  			logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  			await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  			await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  			logger.WriteDebugMessage ("Wrote status line");  		} else {  			// Blank line and we are done  			if (ix - lastmatch == 0) {  				logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  				await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  				// Adjust remaining data length  				if (contentlength > 0)  					contentlength -= offset - lastmatch - 2;  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				while (contentlength > 0) {  					r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  					if (r == 0)  						break;  					contentlength -= r;  					await target.WriteAsync (buf' 0' r' canceltoken.Token);  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				}  				await target.FlushAsync (canceltoken.Token);  				//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  				logger.WriteDebugMessage (string.Format ("Completed response forward"));  				target.Close ();  				return;  			} else {  				var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  				if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  					if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  						contentlength = -1;  				logger.WriteDebugMessage ("Writing: " + header);  				await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  			}  		}  		lastmatch = ix + 2;  	}  	//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  	ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while (ix >= 0 && ix < offset - 1) {  	if (buf [ix + 1] == 10) {  		if (!status) {  			status = true;  			logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  			await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  			await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  			logger.WriteDebugMessage ("Wrote status line");  		} else {  			// Blank line and we are done  			if (ix - lastmatch == 0) {  				logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  				await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  				// Adjust remaining data length  				if (contentlength > 0)  					contentlength -= offset - lastmatch - 2;  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				while (contentlength > 0) {  					r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  					if (r == 0)  						break;  					contentlength -= r;  					await target.WriteAsync (buf' 0' r' canceltoken.Token);  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				}  				await target.FlushAsync (canceltoken.Token);  				//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  				logger.WriteDebugMessage (string.Format ("Completed response forward"));  				target.Close ();  				return;  			} else {  				var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  				if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  					if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  						contentlength = -1;  				logger.WriteDebugMessage ("Writing: " + header);  				await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  			}  		}  		lastmatch = ix + 2;  	}  	//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  	ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while (ix >= 0 && ix < offset - 1) {  	if (buf [ix + 1] == 10) {  		if (!status) {  			status = true;  			logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  			await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  			await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  			logger.WriteDebugMessage ("Wrote status line");  		} else {  			// Blank line and we are done  			if (ix - lastmatch == 0) {  				logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  				await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  				// Adjust remaining data length  				if (contentlength > 0)  					contentlength -= offset - lastmatch - 2;  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				while (contentlength > 0) {  					r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  					if (r == 0)  						break;  					contentlength -= r;  					await target.WriteAsync (buf' 0' r' canceltoken.Token);  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				}  				await target.FlushAsync (canceltoken.Token);  				//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  				logger.WriteDebugMessage (string.Format ("Completed response forward"));  				target.Close ();  				return;  			} else {  				var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  				if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  					if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  						contentlength = -1;  				logger.WriteDebugMessage ("Writing: " + header);  				await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  			}  		}  		lastmatch = ix + 2;  	}  	//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  	ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: while (ix >= 0 && ix < offset - 1) {  	if (buf [ix + 1] == 10) {  		if (!status) {  			status = true;  			logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  			await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  			await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  			logger.WriteDebugMessage ("Wrote status line");  		} else {  			// Blank line and we are done  			if (ix - lastmatch == 0) {  				logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  				await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  				// Adjust remaining data length  				if (contentlength > 0)  					contentlength -= offset - lastmatch - 2;  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				while (contentlength > 0) {  					r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  					if (r == 0)  						break;  					contentlength -= r;  					await target.WriteAsync (buf' 0' r' canceltoken.Token);  					logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  				}  				await target.FlushAsync (canceltoken.Token);  				//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  				logger.WriteDebugMessage (string.Format ("Completed response forward"));  				target.Close ();  				return;  			} else {  				var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  				if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  					if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  						contentlength = -1;  				logger.WriteDebugMessage ("Writing: " + header);  				await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  			}  		}  		lastmatch = ix + 2;  	}  	//await logger.WriteDebugMessageAsync(string.Format("Buf stats: {0}'{1}'{2}'{3}"' buf.Length' ix' offset' lastmatch));  	ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (buf [ix + 1] == 10) {  	if (!status) {  		status = true;  		logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  		await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  		await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  		logger.WriteDebugMessage ("Wrote status line");  	} else {  		// Blank line and we are done  		if (ix - lastmatch == 0) {  			logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  			await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  			// Adjust remaining data length  			if (contentlength > 0)  				contentlength -= offset - lastmatch - 2;  			logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			while (contentlength > 0) {  				r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  				if (r == 0)  					break;  				contentlength -= r;  				await target.WriteAsync (buf' 0' r' canceltoken.Token);  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			}  			await target.FlushAsync (canceltoken.Token);  			//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  			logger.WriteDebugMessage (string.Format ("Completed response forward"));  			target.Close ();  			return;  		} else {  			var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  			if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  				if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  					contentlength = -1;  			logger.WriteDebugMessage ("Writing: " + header);  			await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  		}  	}  	lastmatch = ix + 2;  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (buf [ix + 1] == 10) {  	if (!status) {  		status = true;  		logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  		await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  		await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  		logger.WriteDebugMessage ("Wrote status line");  	} else {  		// Blank line and we are done  		if (ix - lastmatch == 0) {  			logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  			await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  			// Adjust remaining data length  			if (contentlength > 0)  				contentlength -= offset - lastmatch - 2;  			logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			while (contentlength > 0) {  				r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  				if (r == 0)  					break;  				contentlength -= r;  				await target.WriteAsync (buf' 0' r' canceltoken.Token);  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			}  			await target.FlushAsync (canceltoken.Token);  			//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  			logger.WriteDebugMessage (string.Format ("Completed response forward"));  			target.Close ();  			return;  		} else {  			var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  			if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  				if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  					contentlength = -1;  			logger.WriteDebugMessage ("Writing: " + header);  			await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  		}  	}  	lastmatch = ix + 2;  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (buf [ix + 1] == 10) {  	if (!status) {  		status = true;  		logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  		await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  		await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  		logger.WriteDebugMessage ("Wrote status line");  	} else {  		// Blank line and we are done  		if (ix - lastmatch == 0) {  			logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  			await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  			// Adjust remaining data length  			if (contentlength > 0)  				contentlength -= offset - lastmatch - 2;  			logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			while (contentlength > 0) {  				r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  				if (r == 0)  					break;  				contentlength -= r;  				await target.WriteAsync (buf' 0' r' canceltoken.Token);  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			}  			await target.FlushAsync (canceltoken.Token);  			//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  			logger.WriteDebugMessage (string.Format ("Completed response forward"));  			target.Close ();  			return;  		} else {  			var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  			if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  				if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  					contentlength = -1;  			logger.WriteDebugMessage ("Writing: " + header);  			await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  		}  	}  	lastmatch = ix + 2;  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (buf [ix + 1] == 10) {  	if (!status) {  		status = true;  		logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  		await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  		await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  		logger.WriteDebugMessage ("Wrote status line");  	} else {  		// Blank line and we are done  		if (ix - lastmatch == 0) {  			logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  			await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  			// Adjust remaining data length  			if (contentlength > 0)  				contentlength -= offset - lastmatch - 2;  			logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			while (contentlength > 0) {  				r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  				if (r == 0)  					break;  				contentlength -= r;  				await target.WriteAsync (buf' 0' r' canceltoken.Token);  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			}  			await target.FlushAsync (canceltoken.Token);  			//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  			logger.WriteDebugMessage (string.Format ("Completed response forward"));  			target.Close ();  			return;  		} else {  			var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  			if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  				if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  					contentlength = -1;  			logger.WriteDebugMessage ("Writing: " + header);  			await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  		}  	}  	lastmatch = ix + 2;  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (buf [ix + 1] == 10) {  	if (!status) {  		status = true;  		logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  		await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  		await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  		logger.WriteDebugMessage ("Wrote status line");  	} else {  		// Blank line and we are done  		if (ix - lastmatch == 0) {  			logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  			await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  			// Adjust remaining data length  			if (contentlength > 0)  				contentlength -= offset - lastmatch - 2;  			logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			while (contentlength > 0) {  				r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  				if (r == 0)  					break;  				contentlength -= r;  				await target.WriteAsync (buf' 0' r' canceltoken.Token);  				logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  			}  			await target.FlushAsync (canceltoken.Token);  			//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  			logger.WriteDebugMessage (string.Format ("Completed response forward"));  			target.Close ();  			return;  		} else {  			var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  			if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  				if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  					contentlength = -1;  			logger.WriteDebugMessage ("Writing: " + header);  			await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  		}  	}  	lastmatch = ix + 2;  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (!status) {  	status = true;  	logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  	await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  	await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  	logger.WriteDebugMessage ("Wrote status line");  } else {  	// Blank line and we are done  	if (ix - lastmatch == 0) {  		logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  		await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  		// Adjust remaining data length  		if (contentlength > 0)  			contentlength -= offset - lastmatch - 2;  		logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  		while (contentlength > 0) {  			r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  			if (r == 0)  				break;  			contentlength -= r;  			await target.WriteAsync (buf' 0' r' canceltoken.Token);  			logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  		}  		await target.FlushAsync (canceltoken.Token);  		//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  		logger.WriteDebugMessage (string.Format ("Completed response forward"));  		target.Close ();  		return;  	} else {  		var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  		if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  			if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  				contentlength = -1;  		logger.WriteDebugMessage ("Writing: " + header);  		await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (!status) {  	status = true;  	logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  	await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  	await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  	logger.WriteDebugMessage ("Wrote status line");  } else {  	// Blank line and we are done  	if (ix - lastmatch == 0) {  		logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  		await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  		// Adjust remaining data length  		if (contentlength > 0)  			contentlength -= offset - lastmatch - 2;  		logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  		while (contentlength > 0) {  			r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  			if (r == 0)  				break;  			contentlength -= r;  			await target.WriteAsync (buf' 0' r' canceltoken.Token);  			logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  		}  		await target.FlushAsync (canceltoken.Token);  		//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  		logger.WriteDebugMessage (string.Format ("Completed response forward"));  		target.Close ();  		return;  	} else {  		var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  		if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  			if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  				contentlength = -1;  		logger.WriteDebugMessage ("Writing: " + header);  		await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (!status) {  	status = true;  	logger.WriteDebugMessage ("Writing: Status: " + System.Text.Encoding.ASCII.GetString (buf' lastmatch + HTTP_HEAD_LEN' ix - lastmatch - HTTP_HEAD_LEN));  	await target.WriteAsync (STATUS_PREFIX' 0' STATUS_PREFIX.Length' canceltoken.Token);  	await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  	logger.WriteDebugMessage ("Wrote status line");  } else {  	// Blank line and we are done  	if (ix - lastmatch == 0) {  		logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  		await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  		// Adjust remaining data length  		if (contentlength > 0)  			contentlength -= offset - lastmatch - 2;  		logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  		while (contentlength > 0) {  			r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  			if (r == 0)  				break;  			contentlength -= r;  			await target.WriteAsync (buf' 0' r' canceltoken.Token);  			logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  		}  		await target.FlushAsync (canceltoken.Token);  		//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  		logger.WriteDebugMessage (string.Format ("Completed response forward"));  		target.Close ();  		return;  	} else {  		var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  		if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  			if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  				contentlength = -1;  		logger.WriteDebugMessage ("Writing: " + header);  		await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: await target.WriteAsync (buf' lastmatch + HTTP_HEAD_LEN' (ix - lastmatch - HTTP_HEAD_LEN) + 2' canceltoken.Token);  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (ix - lastmatch == 0) {  	logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  	await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  	// Adjust remaining data length  	if (contentlength > 0)  		contentlength -= offset - lastmatch - 2;  	logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  	while (contentlength > 0) {  		r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  		if (r == 0)  			break;  		contentlength -= r;  		await target.WriteAsync (buf' 0' r' canceltoken.Token);  		logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  	}  	await target.FlushAsync (canceltoken.Token);  	//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  	logger.WriteDebugMessage (string.Format ("Completed response forward"));  	target.Close ();  	return;  } else {  	var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  	if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  		if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  			contentlength = -1;  	logger.WriteDebugMessage ("Writing: " + header);  	await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (ix - lastmatch == 0) {  	logger.WriteDebugMessage (string.Format ("Completed header' writing remaining {0} bytes"' offset - lastmatch));  	await target.WriteAsync (buf' lastmatch' offset - lastmatch' canceltoken.Token);  	// Adjust remaining data length  	if (contentlength > 0)  		contentlength -= offset - lastmatch - 2;  	logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  	while (contentlength > 0) {  		r = await source.ReadAsync (buf' 0' (int)Math.Min (buf.Length' contentlength)' canceltoken.Token);  		if (r == 0)  			break;  		contentlength -= r;  		await target.WriteAsync (buf' 0' r' canceltoken.Token);  		logger.WriteDebugMessage (string.Format ("Body has remaining {0} bytes"' contentlength));  	}  	await target.FlushAsync (canceltoken.Token);  	//await logout.WriteDebugMessageAsync(string.Format("Last body chunck: {0}"' System.Text.Encoding.ASCII.GetString(buf' 0' r)));  	logger.WriteDebugMessage (string.Format ("Completed response forward"));  	target.Close ();  	return;  } else {  	var header = System.Text.Encoding.ASCII.GetString (buf' lastmatch' ix - lastmatch) ?? string.Empty;  	if (header.StartsWith ("Content-Length: "' StringComparison.OrdinalIgnoreCase))  		if (!long.TryParse (header.Substring ("Content-Length: ".Length)' out contentlength))  			contentlength = -1;  	logger.WriteDebugMessage ("Writing: " + header);  	await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: if (contentlength > 0)  	contentlength -= offset - lastmatch - 2;  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: contentlength -= offset - lastmatch - 2;  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: await target.WriteAsync (buf' lastmatch' (ix - lastmatch) + 2' canceltoken.Token);  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: lastmatch = ix + 2;  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardResponse,The following statement contains a magic number: ix = Array.IndexOf (buf' (byte)13' ix + 1' offset - ix - 1);  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardRequest,The following statement contains a magic number: if (new string[] {  	"POST"'  	"PUT"'  	"PATCH"  }.Contains (GetEnvArg ("REQUEST_METHOD"' "").Trim ().ToUpper ())) {  	logger.WriteDebugMessage (string.Format ("Copying StdIn"));  	using (var stdin = Console.OpenStandardInput ()) {  		logger.WriteDebugMessage ("Opened StdIn");  		long reqsize;  		if (!long.TryParse (GetEnvArg ("CONTENT_LENGTH")' out reqsize))  			reqsize = long.MaxValue;  		var buf = new byte[4 * 1024 * 1024];  		var r = 0;  		while (reqsize > 0) {  			logger.WriteDebugMessage (string.Format ("Remaining {0} bytes from stdin"' reqsize));  			r = await stdin.ReadAsync (buf' 0' buf.Length' canceltoken.Token);  			logger.WriteDebugMessage (string.Format ("Got {0} bytes from stdin"' r));  			if (r == 0)  				break;  			reqsize -= r;  			await sw.BaseStream.WriteAsync (buf' 0' r' canceltoken.Token);  		}  	}  	logger.WriteDebugMessage ("Copy stdin done");  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardRequest,The following statement contains a magic number: if (new string[] {  	"POST"'  	"PUT"'  	"PATCH"  }.Contains (GetEnvArg ("REQUEST_METHOD"' "").Trim ().ToUpper ())) {  	logger.WriteDebugMessage (string.Format ("Copying StdIn"));  	using (var stdin = Console.OpenStandardInput ()) {  		logger.WriteDebugMessage ("Opened StdIn");  		long reqsize;  		if (!long.TryParse (GetEnvArg ("CONTENT_LENGTH")' out reqsize))  			reqsize = long.MaxValue;  		var buf = new byte[4 * 1024 * 1024];  		var r = 0;  		while (reqsize > 0) {  			logger.WriteDebugMessage (string.Format ("Remaining {0} bytes from stdin"' reqsize));  			r = await stdin.ReadAsync (buf' 0' buf.Length' canceltoken.Token);  			logger.WriteDebugMessage (string.Format ("Got {0} bytes from stdin"' r));  			if (r == 0)  				break;  			reqsize -= r;  			await sw.BaseStream.WriteAsync (buf' 0' r' canceltoken.Token);  		}  	}  	logger.WriteDebugMessage ("Copy stdin done");  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardRequest,The following statement contains a magic number: if (new string[] {  	"POST"'  	"PUT"'  	"PATCH"  }.Contains (GetEnvArg ("REQUEST_METHOD"' "").Trim ().ToUpper ())) {  	logger.WriteDebugMessage (string.Format ("Copying StdIn"));  	using (var stdin = Console.OpenStandardInput ()) {  		logger.WriteDebugMessage ("Opened StdIn");  		long reqsize;  		if (!long.TryParse (GetEnvArg ("CONTENT_LENGTH")' out reqsize))  			reqsize = long.MaxValue;  		var buf = new byte[4 * 1024 * 1024];  		var r = 0;  		while (reqsize > 0) {  			logger.WriteDebugMessage (string.Format ("Remaining {0} bytes from stdin"' reqsize));  			r = await stdin.ReadAsync (buf' 0' buf.Length' canceltoken.Token);  			logger.WriteDebugMessage (string.Format ("Got {0} bytes from stdin"' r));  			if (r == 0)  				break;  			reqsize -= r;  			await sw.BaseStream.WriteAsync (buf' 0' r' canceltoken.Token);  		}  	}  	logger.WriteDebugMessage ("Copy stdin done");  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardRequest,The following statement contains a magic number: using (var stdin = Console.OpenStandardInput ()) {  	logger.WriteDebugMessage ("Opened StdIn");  	long reqsize;  	if (!long.TryParse (GetEnvArg ("CONTENT_LENGTH")' out reqsize))  		reqsize = long.MaxValue;  	var buf = new byte[4 * 1024 * 1024];  	var r = 0;  	while (reqsize > 0) {  		logger.WriteDebugMessage (string.Format ("Remaining {0} bytes from stdin"' reqsize));  		r = await stdin.ReadAsync (buf' 0' buf.Length' canceltoken.Token);  		logger.WriteDebugMessage (string.Format ("Got {0} bytes from stdin"' r));  		if (r == 0)  			break;  		reqsize -= r;  		await sw.BaseStream.WriteAsync (buf' 0' r' canceltoken.Token);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardRequest,The following statement contains a magic number: using (var stdin = Console.OpenStandardInput ()) {  	logger.WriteDebugMessage ("Opened StdIn");  	long reqsize;  	if (!long.TryParse (GetEnvArg ("CONTENT_LENGTH")' out reqsize))  		reqsize = long.MaxValue;  	var buf = new byte[4 * 1024 * 1024];  	var r = 0;  	while (reqsize > 0) {  		logger.WriteDebugMessage (string.Format ("Remaining {0} bytes from stdin"' reqsize));  		r = await stdin.ReadAsync (buf' 0' buf.Length' canceltoken.Token);  		logger.WriteDebugMessage (string.Format ("Got {0} bytes from stdin"' r));  		if (r == 0)  			break;  		reqsize -= r;  		await sw.BaseStream.WriteAsync (buf' 0' r' canceltoken.Token);  	}  }  
Magic Number,CGIProxyHandler,MainClass,F:\newReposMay17\duplicati_duplicati\Tools\CGIProxyHandler\Program.cs,ForwardRequest,The following statement contains a magic number: using (var stdin = Console.OpenStandardInput ()) {  	logger.WriteDebugMessage ("Opened StdIn");  	long reqsize;  	if (!long.TryParse (GetEnvArg ("CONTENT_LENGTH")' out reqsize))  		reqsize = long.MaxValue;  	var buf = new byte[4 * 1024 * 1024];  	var r = 0;  	while (reqsize > 0) {  		logger.WriteDebugMessage (string.Format ("Remaining {0} bytes from stdin"' reqsize));  		r = await stdin.ReadAsync (buf' 0' buf.Length' canceltoken.Token);  		logger.WriteDebugMessage (string.Format ("Got {0} bytes from stdin"' r));  		if (r == 0)  			break;  		reqsize -= r;  		await sw.BaseStream.WriteAsync (buf' 0' r' canceltoken.Token);  	}  }  
