Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.Tools,MozRoots,C:\repos\duplicati_duplicati\thirdparty\mozroots\mozroots.cs,Process,Cyclomatic complexity of the method is 16
Long Statement,Mono.Tools,MozRoots,C:\repos\duplicati_duplicati\thirdparty\mozroots\mozroots.cs,Process,The length of the statement  "					Console.WriteLine("WARNING: Downloading the trusted certificate list couldn't be done securely (error: {0})' continuing anyway. If you're using mozroots to bootstrap Mono's trust store on a clean system this might be OK' otherwise it could indicate a network intrusion. Please ensure you're using a trusted network or move to cert-sync."' sslPolicyErrors); " is 356.
Magic Number,Mono.Tools,MozRoots,C:\repos\duplicati_duplicati\thirdparty\mozroots\mozroots.cs,DecodeOctalString,The following statement contains a magic number: for (int i = 1; i < pieces.Length; i++)  			{  				data[i - 1] = (byte)((pieces[i][0] - '0' << 6) + (pieces[i][1] - '0' << 3) + (pieces[i][2] - '0'));  			}
Magic Number,Mono.Tools,MozRoots,C:\repos\duplicati_duplicati\thirdparty\mozroots\mozroots.cs,DecodeOctalString,The following statement contains a magic number: for (int i = 1; i < pieces.Length; i++)  			{  				data[i - 1] = (byte)((pieces[i][0] - '0' << 6) + (pieces[i][1] - '0' << 3) + (pieces[i][2] - '0'));  			}
Magic Number,Mono.Tools,MozRoots,C:\repos\duplicati_duplicati\thirdparty\mozroots\mozroots.cs,DecodeOctalString,The following statement contains a magic number: for (int i = 1; i < pieces.Length; i++)  			{  				data[i - 1] = (byte)((pieces[i][0] - '0' << 6) + (pieces[i][1] - '0' << 3) + (pieces[i][2] - '0'));  			}
Magic Number,Mono.Tools,MozRoots,C:\repos\duplicati_duplicati\thirdparty\mozroots\mozroots.cs,GetFile,The following statement contains a magic number: try  			{  				if (inputFile != null)  				{  					return File.OpenRead(inputFile);  				}  				else {  					WriteLine("Downloading from '{0}'..."' url);  					HttpWebRequest req = (HttpWebRequest)WebRequest.Create(url);  					req.Timeout = 10000;  					return req.GetResponse().GetResponseStream();  				}  			}  			catch  			{  				return null;  			}
