Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Duplicati.Library.Backend.Backblaze,B2,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\Backblaze\B2.cs,B2,Cyclomatic complexity of the method is 14
Long Statement,Duplicati.Library.Backend.Backblaze,B2,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\Backblaze\B2.cs,Put,The length of the statement  "                measure = typeof(OverrideableStream).GetField("m_basestream"' System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).GetValue(measure) as System.IO.Stream; " is 230.
Long Statement,Duplicati.Library.Backend.Backblaze,B2,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\Backblaze\B2.cs,Get,The length of the statement  "                req = new AsyncHttpRequest(m_helper.CreateRequest(string.Format("{0}/b2api/v1/b2_download_file_by_id?fileId={1}"' m_helper.DownloadUrl' Library.Utility.Uri.UrlEncode(GetFileID(remotename))))); " is 192.
Long Statement,Duplicati.Library.Backend.Backblaze,B2,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\Backblaze\B2.cs,Get,The length of the statement  "                req = new AsyncHttpRequest(m_helper.CreateRequest(string.Format("{0}/{1}{2}"' m_helper.DownloadUrl' m_urlencodedprefix' Library.Utility.Uri.UrlPathEncode(remotename)))); " is 169.
Empty Catch Block,Duplicati.Library.Backend.Backblaze,B2,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\Backblaze\B2.cs,Put,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Backend.Backblaze,B2AuthHelper,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\Backblaze\B2AuthHelper.cs,AttemptParseAndThrowException,The method has an empty catch block.
Magic Number,Duplicati.Library.Backend.Backblaze,B2,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\Backblaze\B2.cs,Put,The following statement contains a magic number: try              {                  var fileinfo = m_helper.GetJSONData<UploadFileResponse>(                      UploadUrlData.UploadUrl'                      req =>                      {                          req.Method = "POST";                          req.Headers["Authorization"] = UploadUrlData.AuthorizationToken;                          req.Headers["X-Bz-Content-Sha1"] = sha1;                          req.Headers["X-Bz-File-Name"] = m_urlencodedprefix + Utility.Uri.UrlPathEncode(remotename);                          req.ContentType = "application/octet-stream";                          req.ContentLength = stream.Length;                      }'                        req =>                      {                          using(var rs = req.GetRequestStream())                              Utility.Utility.CopyStream(stream' rs);                      }                  );                    // Delete old versions                  if (m_filecache.ContainsKey(remotename))                      Delete(remotename);                    m_filecache[remotename] = new List<FileEntity>();                                  m_filecache[remotename].Add(new FileEntity() {                      FileID = fileinfo.FileID'                      FileName = fileinfo.FileName'                      Action = "upload"'                      Size = fileinfo.ContentLength'                      UploadTimestamp = (long)(DateTime.UtcNow - Utility.Utility.EPOCH).TotalMilliseconds                  });              }              catch(Exception ex)              {                  m_filecache = null;                    var code = (int)B2AuthHelper.GetExceptionStatusCode(ex);                  if (code >= 500 && code <= 599)                      m_uploadUrl = null;                                    throw;              }              finally              {                  try                  {                      if (tmp != null)                          tmp.Dispose();                  }                  catch                  {                  }              }
Magic Number,Duplicati.Library.Backend.Backblaze,B2,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\Backblaze\B2.cs,Put,The following statement contains a magic number: try              {                  var fileinfo = m_helper.GetJSONData<UploadFileResponse>(                      UploadUrlData.UploadUrl'                      req =>                      {                          req.Method = "POST";                          req.Headers["Authorization"] = UploadUrlData.AuthorizationToken;                          req.Headers["X-Bz-Content-Sha1"] = sha1;                          req.Headers["X-Bz-File-Name"] = m_urlencodedprefix + Utility.Uri.UrlPathEncode(remotename);                          req.ContentType = "application/octet-stream";                          req.ContentLength = stream.Length;                      }'                        req =>                      {                          using(var rs = req.GetRequestStream())                              Utility.Utility.CopyStream(stream' rs);                      }                  );                    // Delete old versions                  if (m_filecache.ContainsKey(remotename))                      Delete(remotename);                    m_filecache[remotename] = new List<FileEntity>();                                  m_filecache[remotename].Add(new FileEntity() {                      FileID = fileinfo.FileID'                      FileName = fileinfo.FileName'                      Action = "upload"'                      Size = fileinfo.ContentLength'                      UploadTimestamp = (long)(DateTime.UtcNow - Utility.Utility.EPOCH).TotalMilliseconds                  });              }              catch(Exception ex)              {                  m_filecache = null;                    var code = (int)B2AuthHelper.GetExceptionStatusCode(ex);                  if (code >= 500 && code <= 599)                      m_uploadUrl = null;                                    throw;              }              finally              {                  try                  {                      if (tmp != null)                          tmp.Dispose();                  }                  catch                  {                  }              }
