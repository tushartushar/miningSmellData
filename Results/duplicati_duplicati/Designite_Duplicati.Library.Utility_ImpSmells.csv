Implementation smell,Namespace,Class,File,Method,Description
Long Method,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,The method has 138 lines of code.
Complex Method,Duplicati.Library.Utility,DefaultFilters,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DefaultFilters.cs,GetFilters,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Library.Utility,Timeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Timeparser.cs,ParseTimeInterval,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,CompareStreams,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,Uri,Cyclomatic complexity of the method is 8
Long Parameter List,Duplicati.Library.Utility,ThrottledStream,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The method has 5 parameters. Parameters: limit' count' last_sample' last_count' current_speed
Long Parameter List,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,The method has 6 parameters. Parameters: rootpath' callback' folderList' fileList' attributeReader' errorCallback
Long Parameter List,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The method has 7 parameters. Parameters: item' writer' filter' recurseobjects' indentation' collectionlimit' visited
Long Parameter List,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The method has 6 parameters. Parameters: item' sb' filter' recurseobjects' indentation' collectionlimit
Long Parameter List,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,Uri,The method has 7 parameters. Parameters: scheme' host' path' query' username' password' port
Long Parameter List,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,AsString,The method has 7 parameters. Parameters: scheme' host' path' query' username' password' port
Long Parameter List,Duplicati.Library.Utility,DataPump,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DirectStreamLink.cs,DataPump,The method has 6 parameters. Parameters: input' output' bufsize' callbackFinalizePumping' dontCloseInputWhenDone' dontCloseOutputWhenDone
Long Parameter List,Duplicati.Library.Utility,HttpContextSettings,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\CallContextSettings.cs,StartSession,The method has 5 parameters. Parameters: operationTimeout' readwriteTimeout' bufferRequests' acceptAnyCertificate' allowedCertificates
Long Identifier,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,,The length of the parameter ENVIRONMENT_VARIABLE_MATCHER_WINDOWS is 36.
Long Identifier,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,,The length of the parameter ENVIRONMENT_VARIABLE_MATCHER_LINUX is 34.
Long Statement,Duplicati.Library.Utility,AsyncWrapper,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\AsyncHttpRequest.cs,OnAsync,The length of the statement  "                        m_exception = new WebException(string.Format("{0} timed out"' m_isRequest ? "GetRequestStream" : "GetResponse")' ex' WebExceptionStatus.Timeout' ex is WebException ? ((WebException)ex).Response : null); " is 202.
Long Statement,Duplicati.Library.Utility,AsyncWrapper,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\AsyncHttpRequest.cs,OnAsync,The length of the statement  "                            try { resp = (WebResponse)r.GetType().GetProperty("Response"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).GetValue(r); } " is 160.
Long Statement,Duplicati.Library.Utility,AsyncWrapper,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\AsyncHttpRequest.cs,OnAsync,The length of the statement  "                                try { resp = (WebResponse)m_owner.m_request.GetType().GetField("webResponse"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).GetValue(m_owner.m_request); } " is 192.
Long Statement,Duplicati.Library.Utility,DefaultFilters,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DefaultFilters.cs,CreateWindowsFilters,The length of the statement  "                DefaultFilters.CreateWildcardFilter(@"*/AppData/Local/Packages/*")' // https://superuser.com/questions/490925/explain-windows-8-windows-store-appdata-packages-and-what-to-backup " is 177.
Long Statement,Duplicati.Library.Utility,DefaultFilters,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DefaultFilters.cs,CreateWildcardFilter,The length of the statement  "            // However' in order to match paths correctly' the directory separators need to be normalized to match the system default. " is 122.
Long Statement,Duplicati.Library.Utility,DefaultFilters,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DefaultFilters.cs,CreateRegexFilter,The length of the statement  "            // However' in order to match paths correctly' the directory separators need to be normalized to match the system default. " is 122.
Long Statement,Duplicati.Library.Utility,DefaultFilters,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DefaultFilters.cs,GetWindowsRegistryFiltersInternal,The length of the statement  "            var rk = Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive.LocalMachine' Microsoft.Win32.RegistryView.Default); " is 130.
Long Statement,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The length of the statement  "            if (size.EndsWith("tb"' StringComparison.Ordinal) || size.EndsWith("gb"' StringComparison.Ordinal) || size.EndsWith("mb"' StringComparison.Ordinal) || size.EndsWith("kb"' StringComparison.Ordinal) || size.EndsWith("b"' StringComparison.Ordinal)) " is 245.
Long Statement,Duplicati.Library.Utility,TempFile,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The length of the statement  "                    var n = string.Format("{0}_{1}_{2}_{3}"' f.GetMethod().DeclaringType.FullName' f.GetMethod().Name' Library.Utility.Utility.SerializeDateTime(DateTime.UtcNow)' Guid.NewGuid().ToString().Substring(0' 8)); " is 202.
Long Statement,Duplicati.Library.Utility,TempFile,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The length of the statement  "                        n = string.Format("{0}_{1}_{2}_{3}"' f.GetMethod().DeclaringType.Name' f.GetMethod().Name' Library.Utility.Utility.SerializeDateTime(DateTime.UtcNow)' Guid.NewGuid().ToString().Substring(0' 8)); " is 194.
Long Statement,Duplicati.Library.Utility,ThrottledStream,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,Read,The length of the statement  "				DelayIfRequired(ref m_readspeed' chunksize' ref m_last_read_sample' ref m_current_read_counter' ref m_current_read_speed); " is 122.
Long Statement,Duplicati.Library.Utility,ThrottledStream,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,Write,The length of the statement  "				DelayIfRequired(ref m_writespeed' chunksize' ref m_last_write_sample' ref m_current_write_counter' ref m_current_write_speed); " is 126.
Long Statement,Duplicati.Library.Utility,Timeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Timeparser.cs,ParseTimeInterval,The length of the statement  "            if (DateTime.TryParse(datestring' System.Globalization.CultureInfo.CurrentUICulture' System.Globalization.DateTimeStyles.AssumeLocal' out t)) " is 141.
Long Statement,Duplicati.Library.Utility,UrlUtillity,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\UrlUtillity.cs,OpenURL,The length of the statement  "                    var apps = new string[] {browserprogram' "xdg-open"' "chromium-browser"' "google-chrome"' "firefox"' "mozilla"' "konqueror"' "netscape"' "opera"' "epiphany" }; " is 159.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFiles,The length of the statement  "            return EnumerateFileSystemEntries(basepath' filter).Where(x => !x.EndsWith(DirectorySeparatorString' StringComparison.Ordinal)); " is 128.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFolders,The length of the statement  "            return EnumerateFileSystemEntries(basepath' filter).Where(x => x.EndsWith(DirectorySeparatorString' StringComparison.Ordinal)); " is 127.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,The length of the statement  "            return EnumerateFileSystemEntries(rootpath' callback' new FileSystemInteraction(System.IO.Directory.GetDirectories)' new FileSystemInteraction(System.IO.Directory.GetFiles)); " is 174.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,The length of the statement  "                    System.IO.FileAttributes attr = attributeReader == null ? System.IO.FileAttributes.Directory : attributeReader(rootpath); " is 121.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,CalculateHash,The length of the statement  "            using(System.IO.FileStream fs = System.IO.File.Open(path' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.Read)) " is 136.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReadFileWithDefaultEncoding,The length of the statement  "            using(System.IO.FileStream file = new System.IO.FileStream(filename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.Read)) " is 147.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,LocateFileInSystemPath,The length of the statement  "                string homedir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + System.IO.Path.PathSeparator.ToString(); " is 151.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,TryDeserializeDateTime,The length of the statement  "            return DateTime.TryParseExact(str' SERIALIZED_DATE_TIME_FORMAT' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.AssumeUniversal' out dt); " is 176.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReplaceFile,The length of the statement  "                        throw new Exception(string.Format("Failed to replace the file \"{0}\" volume with the \"{1}\"' error: {2}"' target' sourcefile' ex.Message)); " is 141.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,GetDriveLetterFromVolumeGuid,The length of the statement  "            using (System.Management.ManagementObjectSearcher searcher = new System.Management.ManagementObjectSearcher("Select * from Win32_Volume")) " is 138.
Long Statement,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,GetVolumeGuidsAndDriveLetters,The length of the statement  "            using (System.Management.ManagementObjectSearcher searcher = new System.Management.ManagementObjectSearcher("Select * from Win32_Volume")) " is 138.
Long Statement,Duplicati.Library.Utility,CommandLineParser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The length of the statement  "                    if (!string.IsNullOrEmpty(value) && value.Length > 1 && value.StartsWith("\""' StringComparison.Ordinal) && value.EndsWith("\""' StringComparison.Ordinal)) " is 155.
Long Statement,Duplicati.Library.Utility,FilterExpression,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,Expand,The length of the statement  "            if (filter.Length < 2 || (filter.StartsWith("["' StringComparison.Ordinal) && filter.EndsWith("]"' StringComparison.Ordinal))) " is 126.
Long Statement,Duplicati.Library.Utility,FilterExpression,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,Combine,The length of the statement  "            return new FilterExpression(first.m_filters.Union(second.m_filters).Select(x => x.Type == FilterType.Regexp ? ("[" + x.Filter + "]") : x.Filter)' first.Result); " is 160.
Long Statement,Duplicati.Library.Utility,FilterExpression,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,Combine,The length of the statement  "            if (first is FilterExpression && second is FilterExpression && ((FilterExpression)first).Result == ((FilterExpression)second).Result) " is 133.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                int[] inputPosStack = new int[(input.Length + 1) * (pattern.Length + 1)];   // Stack containing input positions that should be tested for further matching " is 154.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                int[] patternPosStack = new int[inputPosStack.Length];                      // Stack containing pattern positions that should be tested for further matching " is 156.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                int stackPos = -1;                                                          // Points to last occupied entry in stack; -1 indicates that stack is empty " is 151.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                bool['] pointTested = new bool[input.Length + 1' pattern.Length + 1];       // Each true value indicates that input position vs. pattern position has been tested " is 161.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                while (inputPos < input.Length && patternPos < pattern.Length && pattern[patternPos] != MULTIPLE_WILDCARD && (input[inputPos] == pattern[patternPos] || pattern[patternPos] == SINGLE_WILDCARD)) " is 192.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                    patternPos = patternPosStack[stackPos--];   // Matching will succeed if rest of the input string matches rest of the pattern " is 124.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                    if (inputPos == input.Length && (patternPos == pattern.Length || (patternPos == pattern.Length - 1 && pattern[patternPos] == MULTIPLE_WILDCARD))) " is 145.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                            // If we have reached next multiple wildcard character in pattern without breaking the matching sequence' then we have another candidate for full match " is 151.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                            // At the same time' pair (input position' pattern position) will be marked as tested' so that it will not be pushed to stack later again " is 137.
Long Statement,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The length of the statement  "                            if (((curPatternPos == pattern.Length && curInputPos == input.Length) || (curPatternPos < pattern.Length && pattern[curPatternPos] == MULTIPLE_WILDCARD))  " is 153.
Long Statement,Duplicati.Library.Utility,FileBackedList<T>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,Add,The length of the statement  "                throw new Exception(string.Format("Stream serializer wrote a different set of bytes than it was supposed to. Expected {0} bytes' but wrote {1} bytes"' m_stream.Position - pos' size)); " is 183.
Long Statement,Duplicati.Library.Utility,JoinedFilterExpression,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\JoinedFilterExpression.cs,Join,The length of the statement  "                if (first is FilterExpression && second is FilterExpression && ((FilterExpression)first).Result == ((FilterExpression)second).Result) " is 133.
Long Statement,Duplicati.Library.Utility,FilterCollector,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterCollector.cs,DoExtractOptions,The length of the statement  "                else if (key.Equals("default-filters"' StringComparison.OrdinalIgnoreCase) || key.Equals("default-filter"' StringComparison.OrdinalIgnoreCase)) " is 143.
Long Statement,Duplicati.Library.Utility,FilterCollector,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterCollector.cs,DoExtractOptions,The length of the statement  "                    m_filters.AddRange(DefaultFilters.GetFilters(Library.Utility.Utility.ExpandEnvironmentVariables(value ?? string.Empty))); " is 121.
Long Statement,Duplicati.Library.Utility,DirectStreamLink,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DirectStreamLink.cs,write,The length of the statement  "                    if (m_readerClosed) return; // we do not care about writes after reader has closed his stream (Note: PassThrough is still done). " is 128.
Long Statement,Duplicati.Library.Utility.Strings,SslCertificateValidator,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Strings.cs,VerifyCertificateException,The length of the statement  "{ return LC.L(@"The server certificate had the error {0} and the hash {1}{2}If you trust this certificate' use the commandline option --accept-specified-ssl-hash={1} to accept the server certificate anyway.{2}You can also attempt to import the server certificate into your operating systems trust pool."' error' hash' Environment.NewLine); }" is 341.
Long Statement,Duplicati.Library.Utility.Strings,SslCertificateValidator,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Strings.cs,VerifyCertificateHashError,The length of the statement  "{ return LC.L(@"Failed while validating certificate hash' error message: {0}' SSL error name: {1}"' exception' error); }" is 120.
Complex Conditional,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The conditional expression  "size.EndsWith("tb"' StringComparison.Ordinal) || size.EndsWith("gb"' StringComparison.Ordinal) || size.EndsWith("mb"' StringComparison.Ordinal) || size.EndsWith("kb"' StringComparison.Ordinal) || size.EndsWith("b"' StringComparison.Ordinal)"  is complex.
Complex Conditional,Duplicati.Library.Utility,CommandLineParser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The conditional expression  "!string.IsNullOrEmpty(value) && value.Length > 1 && value.StartsWith("\""' StringComparison.Ordinal) && value.EndsWith("\""' StringComparison.Ordinal)"  is complex.
Complex Conditional,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The conditional expression  "inputPos < input.Length && patternPos < pattern.Length && pattern[patternPos] != MULTIPLE_WILDCARD && (input[inputPos] == pattern[patternPos] || pattern[patternPos] == SINGLE_WILDCARD)"  is complex.
Complex Conditional,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The conditional expression  "inputPos == input.Length && (patternPos == pattern.Length || (patternPos == pattern.Length - 1 && pattern[patternPos] == MULTIPLE_WILDCARD))"  is complex.
Complex Conditional,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The conditional expression  "curInputPos < input.Length && curPatternPos < pattern.Length && pattern[curPatternPos] != MULTIPLE_WILDCARD &&                                      (input[curInputPos] == pattern[curPatternPos] || pattern[curPatternPos] == SINGLE_WILDCARD)"  is complex.
Complex Conditional,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,IsWildcardMatch,The conditional expression  "((curPatternPos == pattern.Length && curInputPos == input.Length) || (curPatternPos < pattern.Length && pattern[curPatternPos] == MULTIPLE_WILDCARD))                                   && !pointTested[curInputPos' curPatternPos]"  is complex.
Empty Catch Block,Duplicati.Library.Utility,AsyncHttpRequest,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\AsyncHttpRequest.cs,TrySetTimeout,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,AsyncWrapper,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\AsyncHttpRequest.cs,OnAsync,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,AsyncWrapper,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\AsyncHttpRequest.cs,OnAsync,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,DefaultFilters,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DefaultFilters.cs,GetWindowsRegistryFilters,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,TempFile,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,RemoveAllApplicationTempFiles,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,TempFile,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,TempFolder,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\TempFolder.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,CopyStream,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,CompareStreams,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,Which,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,LocateFileInSystemPath,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,LocateFileInSystemPath,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,LocateFileInSystemPath,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,ClearQueue,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,Uri,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlEncode,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlDecode,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,DataPump,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DirectStreamLink.cs,doRun,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,DataPump,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DirectStreamLink.cs,doRun,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,DataPump,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DirectStreamLink.cs,doRun,The method has an empty catch block.
Magic Number,Duplicati.Library.Utility,AsyncWrapper,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\AsyncHttpRequest.cs,GetResponseOrStream,The following statement contains a magic number: try                  {                      m_event.WaitOne();                  }                  catch (ThreadAbortException)                  {                      m_owner.m_request.Abort();                                            //Grant a little time for cleanups                      m_event.WaitOne((int)TimeSpan.FromSeconds(5).TotalMilliseconds' false);                        //The abort exception will automatically be rethrown                  }
Magic Number,Duplicati.Library.Utility,DefaultFilters,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DefaultFilters.cs,GetWindowsRegistryFiltersInternal,The following statement contains a magic number: return sk.GetValueNames()                   .Where(x => x != null)                   .SelectMany(x =>                   {                       var v = sk.GetValue(x);                       if (v is string)                           return new string[] { (string)v };                       else if (v is string[])                           return (string[])v;                       else                           return new string[0];                   })                   .Where(x => !string.IsNullOrWhiteSpace(x))                   .Select(x => Environment.ExpandEnvironmentVariables(x))                   .Where(x => !string.IsNullOrWhiteSpace(x))                   .Where(x => x.IndexOfAny(System.IO.Path.GetInvalidPathChars()) < 0)                   .Where(x => System.IO.Path.IsPathRooted(x))                   .Select(x => x.EndsWith(" /s"' StringComparison.OrdinalIgnoreCase) ? x.Substring(0' x.Length - 3).TrimEnd() : x)                   .ToArray();
Magic Number,Duplicati.Library.Utility,KeyGenerator,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: byte[] tmp = new byte[4];
Magic Number,Duplicati.Library.Utility,KeyGenerator,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: char[] res = new char[8];
Magic Number,Duplicati.Library.Utility,KeyGenerator,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: for (int i = 0; i < tmp.Length; i++)              {                  res[i * 2] = HEX_CHARS[tmp[i] & 0xF];                  res[i * 2 + 1] = HEX_CHARS[(tmp[i] >> 4) & 0xF];              }
Magic Number,Duplicati.Library.Utility,KeyGenerator,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: for (int i = 0; i < tmp.Length; i++)              {                  res[i * 2] = HEX_CHARS[tmp[i] & 0xF];                  res[i * 2 + 1] = HEX_CHARS[(tmp[i] >> 4) & 0xF];              }
Magic Number,Duplicati.Library.Utility,KeyGenerator,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: for (int i = 0; i < tmp.Length; i++)              {                  res[i * 2] = HEX_CHARS[tmp[i] & 0xF];                  res[i * 2 + 1] = HEX_CHARS[(tmp[i] >> 4) & 0xF];              }
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,Sizeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith("tb"' StringComparison.Ordinal))              {                  factor = 1024L * 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("gb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("mb"' StringComparison.Ordinal))              {                  factor = 1024 * 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("kb"' StringComparison.Ordinal))              {                  factor = 1024;                  size = size.Substring(0' size.Length - 2).Trim();              }              else if (size.EndsWith("b"' StringComparison.Ordinal))                  size = size.Substring(0' size.Length - 1).Trim();
Magic Number,Duplicati.Library.Utility,TempFile,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The following statement contains a magic number: foreach(var f in st.GetFrames())                  if (f.GetMethod().DeclaringType.Assembly != typeof(TempFile).Assembly)                  {                      var n = string.Format("{0}_{1}_{2}_{3}"' f.GetMethod().DeclaringType.FullName' f.GetMethod().Name' Library.Utility.Utility.SerializeDateTime(DateTime.UtcNow)' Guid.NewGuid().ToString().Substring(0' 8));                      if (n.IndexOfAny(System.IO.Path.GetInvalidFileNameChars()) >= 0)                          n = string.Format("{0}_{1}_{2}_{3}"' f.GetMethod().DeclaringType.Name' f.GetMethod().Name' Library.Utility.Utility.SerializeDateTime(DateTime.UtcNow)' Guid.NewGuid().ToString().Substring(0' 8));                      if (n.IndexOfAny(System.IO.Path.GetInvalidFileNameChars()) < 0)                      {                          lock(m_lock)                              m_fileTrace.Add(n' st);                          return n;                      }                  }
Magic Number,Duplicati.Library.Utility,TempFile,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The following statement contains a magic number: foreach(var f in st.GetFrames())                  if (f.GetMethod().DeclaringType.Assembly != typeof(TempFile).Assembly)                  {                      var n = string.Format("{0}_{1}_{2}_{3}"' f.GetMethod().DeclaringType.FullName' f.GetMethod().Name' Library.Utility.Utility.SerializeDateTime(DateTime.UtcNow)' Guid.NewGuid().ToString().Substring(0' 8));                      if (n.IndexOfAny(System.IO.Path.GetInvalidFileNameChars()) >= 0)                          n = string.Format("{0}_{1}_{2}_{3}"' f.GetMethod().DeclaringType.Name' f.GetMethod().Name' Library.Utility.Utility.SerializeDateTime(DateTime.UtcNow)' Guid.NewGuid().ToString().Substring(0' 8));                      if (n.IndexOfAny(System.IO.Path.GetInvalidFileNameChars()) < 0)                      {                          lock(m_lock)                              m_fileTrace.Add(n' st);                          return n;                      }                  }
Magic Number,Duplicati.Library.Utility,TempFile,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,RemoveOldApplicationTempFiles,The following statement contains a magic number: var expires = TimeSpan.FromDays(30);
Magic Number,Duplicati.Library.Utility,ThrottledStream,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,Read,The following statement contains a magic number: while (remaining > 0)  			{ 				// To avoid excessive waiting' the delay will wait at most 2 seconds' 				// so we split the blocks to limit the number of seconds we can wait 				UpdateLimits();  				var chunksize = (int)Math.Min(remaining' m_readspeed <= 0 ? remaining : m_readspeed * 2);  				DelayIfRequired(ref m_readspeed' chunksize' ref m_last_read_sample' ref m_current_read_counter' ref m_current_read_speed);    				var actual = m_basestream.Read(buffer' offset' chunksize);    				if (actual <= 0)  					break;    				m_current_read_counter += actual;    				remaining -= actual;  			}
Magic Number,Duplicati.Library.Utility,ThrottledStream,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,Write,The following statement contains a magic number: while (count > 0)  			{                  // To avoid excessive waiting' the delay will wait at most 2 seconds'                  // so we split the blocks to limit the number of seconds we can wait                  UpdateLimits();  				var chunksize = (int)Math.Min(count' m_writespeed <= 0 ? count : m_writespeed * 2);  				DelayIfRequired(ref m_writespeed' chunksize' ref m_last_write_sample' ref m_current_write_counter' ref m_current_write_speed);  				m_basestream.Write(buffer' offset' chunksize);    				m_current_write_counter += chunksize;    				count -= chunksize;  			}
Magic Number,Duplicati.Library.Utility,ThrottledStream,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The following statement contains a magic number: if (duration.Ticks > SAMPLE_PERIOD || last_count > limit)  			{  				// After a sample period' measure how far ahead we are  				var target_delay = TimeSpan.FromSeconds(last_count / (double)limit) - duration;    				// If we are actually ahead' delay for a little while  				if (target_delay.Ticks > 1000)  				{  					// With large changes' we avoid sleeping for several minutes  					// This makes the throttling more resposive when increasing the  					// throughput' even with large changes  					var ms = (int)Math.Min(target_delay.TotalMilliseconds' 2 * 1000);  					System.Threading.Thread.Sleep(ms);    					// When we compute how fast this sample was' we include the delay  					now = DateTime.Now;  				}    				current_speed = last_count / (now - last_sample).TotalSeconds;  				last_sample = now;  				last_count = 0;  			}
Magic Number,Duplicati.Library.Utility,ThrottledStream,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The following statement contains a magic number: if (duration.Ticks > SAMPLE_PERIOD || last_count > limit)  			{  				// After a sample period' measure how far ahead we are  				var target_delay = TimeSpan.FromSeconds(last_count / (double)limit) - duration;    				// If we are actually ahead' delay for a little while  				if (target_delay.Ticks > 1000)  				{  					// With large changes' we avoid sleeping for several minutes  					// This makes the throttling more resposive when increasing the  					// throughput' even with large changes  					var ms = (int)Math.Min(target_delay.TotalMilliseconds' 2 * 1000);  					System.Threading.Thread.Sleep(ms);    					// When we compute how fast this sample was' we include the delay  					now = DateTime.Now;  				}    				current_speed = last_count / (now - last_sample).TotalSeconds;  				last_sample = now;  				last_count = 0;  			}
Magic Number,Duplicati.Library.Utility,ThrottledStream,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The following statement contains a magic number: if (duration.Ticks > SAMPLE_PERIOD || last_count > limit)  			{  				// After a sample period' measure how far ahead we are  				var target_delay = TimeSpan.FromSeconds(last_count / (double)limit) - duration;    				// If we are actually ahead' delay for a little while  				if (target_delay.Ticks > 1000)  				{  					// With large changes' we avoid sleeping for several minutes  					// This makes the throttling more resposive when increasing the  					// throughput' even with large changes  					var ms = (int)Math.Min(target_delay.TotalMilliseconds' 2 * 1000);  					System.Threading.Thread.Sleep(ms);    					// When we compute how fast this sample was' we include the delay  					now = DateTime.Now;  				}    				current_speed = last_count / (now - last_sample).TotalSeconds;  				last_sample = now;  				last_count = 0;  			}
Magic Number,Duplicati.Library.Utility,Timeparser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Timeparser.cs,ParseTimeInterval,The following statement contains a magic number: while ((index = datestring.IndexOfAny(separators' previndex)) > 0)              {                  string partial = datestring.Substring(previndex' index - previndex).Trim();                  int factor;                  if (!int.TryParse(partial' System.Globalization.NumberStyles.Integer' null' out factor))                      throw new Exception(Strings.Timeparser.InvalidIntegerError(partial));                    factor *= multiplier;                    switch (datestring[index])                  {                      case 's':                          offset = offset.AddSeconds(factor);                          break;                      case 'm':                          offset = offset.AddMinutes(factor);                          break;                      case 'h':                          offset = offset.AddHours(factor);                          break;                      case 'D':                          offset = offset.AddDays(factor);                          break;                      case 'W':                          offset = offset.AddDays(factor * 7);                          break;                      case 'M':                          offset = offset.AddMonths(factor);                          break;                      case 'Y':                          offset = offset.AddYears(factor);                          break;                      default:                          throw new Exception(Strings.Timeparser.InvalidSpecifierError(datestring[index]));                  }                  previndex = index + 1;                  }
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,CompareStreams,The following statement contains a magic number: byte[] buf1 = new byte[longSize * 512];
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReadFileWithDefaultEncoding,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReadFileWithDefaultEncoding,The following statement contains a magic number: using(System.IO.FileStream file = new System.IO.FileStream(filename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.Read))                  file.Read(buffer' 0' 4096);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)                  return Strings.Utility.FormatStringTB((double)size / (1024 * 1024 * 1024 * 1024L));              else if (size >= 1024 * 1024 * 1024)                  return Strings.Utility.FormatStringGB((double)size / (1024 * 1024 * 1024));              else if (size >= 1024 * 1024)                  return Strings.Utility.FormatStringMB((double)size / (1024 * 1024));              else if (size >= 1024)                  return Strings.Utility.FormatStringKB((double)size / 1024);              else                  return Strings.Utility.FormatStringB(size);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2)                  data[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2)                  data[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2)                  data[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2)                  data[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,Which,The following statement contains a magic number: try              {                  var psi = new System.Diagnostics.ProcessStartInfo("which"' appname);                  psi.RedirectStandardOutput = true;                  psi.UseShellExecute = false;                            var pi = System.Diagnostics.Process.Start(psi);                  pi.WaitForExit(5000);                  if (pi.HasExited)                      return pi.ExitCode == 0;                  else                      return false;              }              catch              {              }
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReplaceFile,The following statement contains a magic number: long i = 5;
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReplaceFile,The following statement contains a magic number: do              {                  try                  {                      System.IO.File.Move(sourcefile' target);                      break;                  }                  catch (Exception ex)                  {                      if (i == 0)                          throw new Exception(string.Format("Failed to replace the file \"{0}\" volume with the \"{1}\"' error: {2}"' target' sourcefile' ex.Message));                      System.Threading.Thread.Sleep(250);                  }              } while (i-- > 0);
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: foreach (var p in item.GetType().GetProperties())              {                  if (filter != null && !filter(p' item))                      continue;                    if (IsPrimitiveTypeForSerialization(p.PropertyType))                  {                      if (first)                          first = false;                      else                          writer.WriteLine();                        writer.Write("{0}{1}: "' indentstring' p.Name);                      PrintSerializeIfPrimitive(p.GetValue(item' null)' writer);                  }                  else if (typeof(System.Collections.IEnumerable).IsAssignableFrom(p.PropertyType))                  {                      var enumerable = (System.Collections.IEnumerable)p.GetValue(item' null);                      var any = false;                      if (enumerable != null)                      {                          var enumerator = enumerable.GetEnumerator();                          if (enumerator != null)                          {                              var remain = collectionlimit;                                if (first)                                  first = false;                              else                                  writer.WriteLine();                                writer.Write("{0}{1}: ["' indentstring' p.Name);                              if (enumerator.MoveNext())                              {                                  any = true;                                  writer.WriteLine();                                  PrintSerializeObject(enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);                                    remain--;                                    while (enumerator.MoveNext())                                  {                                      writer.WriteLine("'");                                        if (remain == 0)                                      {                                          writer.Write("...");                                          break;                                      }                                        PrintSerializeObject(enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);                                        remain--;                                  }                                }                                if (any)                              {                                  writer.WriteLine();                                  writer.Write(indentstring);                              }                              writer.Write("]");                          }                      }                  }                  else if (recurseobjects)                  {                      var value = p.GetValue(item' null);                      if (value == null)                      {                          if (first)                              first = false;                          else                              writer.WriteLine();                          writer.Write("{0}{1}: null"' indentstring' p.Name);                      }                      else if (!visited.ContainsKey(value))                      {                          if (first)                              first = false;                          else                              writer.WriteLine();                          writer.WriteLine("{0}{1}:"' indentstring' p.Name);                          visited[value] = null;                          PrintSerializeObject(value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);                      }                  }              }
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: foreach (var p in item.GetType().GetProperties())              {                  if (filter != null && !filter(p' item))                      continue;                    if (IsPrimitiveTypeForSerialization(p.PropertyType))                  {                      if (first)                          first = false;                      else                          writer.WriteLine();                        writer.Write("{0}{1}: "' indentstring' p.Name);                      PrintSerializeIfPrimitive(p.GetValue(item' null)' writer);                  }                  else if (typeof(System.Collections.IEnumerable).IsAssignableFrom(p.PropertyType))                  {                      var enumerable = (System.Collections.IEnumerable)p.GetValue(item' null);                      var any = false;                      if (enumerable != null)                      {                          var enumerator = enumerable.GetEnumerator();                          if (enumerator != null)                          {                              var remain = collectionlimit;                                if (first)                                  first = false;                              else                                  writer.WriteLine();                                writer.Write("{0}{1}: ["' indentstring' p.Name);                              if (enumerator.MoveNext())                              {                                  any = true;                                  writer.WriteLine();                                  PrintSerializeObject(enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);                                    remain--;                                    while (enumerator.MoveNext())                                  {                                      writer.WriteLine("'");                                        if (remain == 0)                                      {                                          writer.Write("...");                                          break;                                      }                                        PrintSerializeObject(enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);                                        remain--;                                  }                                }                                if (any)                              {                                  writer.WriteLine();                                  writer.Write(indentstring);                              }                              writer.Write("]");                          }                      }                  }                  else if (recurseobjects)                  {                      var value = p.GetValue(item' null);                      if (value == null)                      {                          if (first)                              first = false;                          else                              writer.WriteLine();                          writer.Write("{0}{1}: null"' indentstring' p.Name);                      }                      else if (!visited.ContainsKey(value))                      {                          if (first)                              first = false;                          else                              writer.WriteLine();                          writer.WriteLine("{0}{1}:"' indentstring' p.Name);                          visited[value] = null;                          PrintSerializeObject(value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);                      }                  }              }
Magic Number,Duplicati.Library.Utility,Utility,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: foreach (var p in item.GetType().GetProperties())              {                  if (filter != null && !filter(p' item))                      continue;                    if (IsPrimitiveTypeForSerialization(p.PropertyType))                  {                      if (first)                          first = false;                      else                          writer.WriteLine();                        writer.Write("{0}{1}: "' indentstring' p.Name);                      PrintSerializeIfPrimitive(p.GetValue(item' null)' writer);                  }                  else if (typeof(System.Collections.IEnumerable).IsAssignableFrom(p.PropertyType))                  {                      var enumerable = (System.Collections.IEnumerable)p.GetValue(item' null);                      var any = false;                      if (enumerable != null)                      {                          var enumerator = enumerable.GetEnumerator();                          if (enumerator != null)                          {                              var remain = collectionlimit;                                if (first)                                  first = false;                              else                                  writer.WriteLine();                                writer.Write("{0}{1}: ["' indentstring' p.Name);                              if (enumerator.MoveNext())                              {                                  any = true;                                  writer.WriteLine();                                  PrintSerializeObject(enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);                                    remain--;                                    while (enumerator.MoveNext())                                  {                                      writer.WriteLine("'");                                        if (remain == 0)                                      {                                          writer.Write("...");                                          break;                                      }                                        PrintSerializeObject(enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);                                        remain--;                                  }                                }                                if (any)                              {                                  writer.WriteLine();                                  writer.Write(indentstring);                              }                              writer.Write("]");                          }                      }                  }                  else if (recurseobjects)                  {                      var value = p.GetValue(item' null);                      if (value == null)                      {                          if (first)                              first = false;                          else                              writer.WriteLine();                          writer.Write("{0}{1}: null"' indentstring' p.Name);                      }                      else if (!visited.ContainsKey(value))                      {                          if (first)                              first = false;                          else                              writer.WriteLine();                          writer.WriteLine("{0}{1}:"' indentstring' p.Name);                          visited[value] = null;                          PrintSerializeObject(value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);                      }                  }              }
Magic Number,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,ClearQueue,The following statement contains a magic number: if (abortThread)              {                  try                  {                      m_thread.Abort();                      m_thread.Join(500);                  }                  catch                  {                  }                    m_thread = new Thread(new ThreadStart(Runner));                  m_thread.Start();              }
Magic Number,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: while (!m_terminate)              {                  m_currentTask = null;                    lock(m_lock)                      if (m_state == WorkerThread<Tx>.RunState.Run && m_tasks.Count > 0)                          m_currentTask = m_tasks.Dequeue();                    if (m_currentTask == null && !m_terminate)                  if (m_state == WorkerThread<Tx>.RunState.Run)                      m_event.WaitOne(); //Sleep until signaled                      else                  {                      if (WorkerStateChanged != null)                          WorkerStateChanged(this' m_state);                        //Sleep for brief periods' until signaled                      while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)                          m_event.WaitOne(1000 * 60 * 5' false);                        //If we were not terminated' we are now ready to run                      if (!m_terminate)                      {                          m_state = WorkerThread<Tx>.RunState.Run;                          if (WorkerStateChanged != null)                              WorkerStateChanged(this' m_state);                      }                  }                    if (m_terminate)                      return;                    if (m_currentTask == null && m_state == WorkerThread<Tx>.RunState.Run)                      lock(m_lock)                          if (m_tasks.Count > 0)                              m_currentTask = m_tasks.Dequeue();                    if (m_currentTask == null)                      continue;                    if (StartingWork != null)                      StartingWork(this' m_currentTask);                    try                  {                      m_active = true;                      m_delegate(m_currentTask);                  }                  catch (Exception ex)                  {                      try { System.Threading.Thread.ResetAbort(); }                      catch { }                        if (OnError != null)                          try { OnError(this' m_currentTask' ex); }                          catch { }                  }                  finally                  {                      try { System.Threading.Thread.ResetAbort(); }                      catch { }                        m_active = false;                  }                    var task = m_currentTask;                  m_currentTask = null;                    if (CompletedWork != null)                      try { CompletedWork(this' task); }                      catch (Exception ex)                       {                          try { OnError(this' task' ex); }                          catch { }                      }              }
Magic Number,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: while (!m_terminate)              {                  m_currentTask = null;                    lock(m_lock)                      if (m_state == WorkerThread<Tx>.RunState.Run && m_tasks.Count > 0)                          m_currentTask = m_tasks.Dequeue();                    if (m_currentTask == null && !m_terminate)                  if (m_state == WorkerThread<Tx>.RunState.Run)                      m_event.WaitOne(); //Sleep until signaled                      else                  {                      if (WorkerStateChanged != null)                          WorkerStateChanged(this' m_state);                        //Sleep for brief periods' until signaled                      while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)                          m_event.WaitOne(1000 * 60 * 5' false);                        //If we were not terminated' we are now ready to run                      if (!m_terminate)                      {                          m_state = WorkerThread<Tx>.RunState.Run;                          if (WorkerStateChanged != null)                              WorkerStateChanged(this' m_state);                      }                  }                    if (m_terminate)                      return;                    if (m_currentTask == null && m_state == WorkerThread<Tx>.RunState.Run)                      lock(m_lock)                          if (m_tasks.Count > 0)                              m_currentTask = m_tasks.Dequeue();                    if (m_currentTask == null)                      continue;                    if (StartingWork != null)                      StartingWork(this' m_currentTask);                    try                  {                      m_active = true;                      m_delegate(m_currentTask);                  }                  catch (Exception ex)                  {                      try { System.Threading.Thread.ResetAbort(); }                      catch { }                        if (OnError != null)                          try { OnError(this' m_currentTask' ex); }                          catch { }                  }                  finally                  {                      try { System.Threading.Thread.ResetAbort(); }                      catch { }                        m_active = false;                  }                    var task = m_currentTask;                  m_currentTask = null;                    if (CompletedWork != null)                      try { CompletedWork(this' task); }                      catch (Exception ex)                       {                          try { OnError(this' task' ex); }                          catch { }                      }              }
Magic Number,Duplicati.Library.Utility,WorkerThread<Tx>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: while (!m_terminate)              {                  m_currentTask = null;                    lock(m_lock)                      if (m_state == WorkerThread<Tx>.RunState.Run && m_tasks.Count > 0)                          m_currentTask = m_tasks.Dequeue();                    if (m_currentTask == null && !m_terminate)                  if (m_state == WorkerThread<Tx>.RunState.Run)                      m_event.WaitOne(); //Sleep until signaled                      else                  {                      if (WorkerStateChanged != null)                          WorkerStateChanged(this' m_state);                        //Sleep for brief periods' until signaled                      while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)                          m_event.WaitOne(1000 * 60 * 5' false);                        //If we were not terminated' we are now ready to run                      if (!m_terminate)                      {                          m_state = WorkerThread<Tx>.RunState.Run;                          if (WorkerStateChanged != null)                              WorkerStateChanged(this' m_state);                      }                  }                    if (m_terminate)                      return;                    if (m_currentTask == null && m_state == WorkerThread<Tx>.RunState.Run)                      lock(m_lock)                          if (m_tasks.Count > 0)                              m_currentTask = m_tasks.Dequeue();                    if (m_currentTask == null)                      continue;                    if (StartingWork != null)                      StartingWork(this' m_currentTask);                    try                  {                      m_active = true;                      m_delegate(m_currentTask);                  }                  catch (Exception ex)                  {                      try { System.Threading.Thread.ResetAbort(); }                      catch { }                        if (OnError != null)                          try { OnError(this' m_currentTask' ex); }                          catch { }                  }                  finally                  {                      try { System.Threading.Thread.ResetAbort(); }                      catch { }                        m_active = false;                  }                    var task = m_currentTask;                  m_currentTask = null;                    if (CompletedWork != null)                      try { CompletedWork(this' task); }                      catch (Exception ex)                       {                          try { OnError(this' task' ex); }                          catch { }                      }              }
Magic Number,Duplicati.Library.Utility,CommandLineParser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The following statement contains a magic number: for (int i = 0; i < args.Count; i++)              {                  if (args[i].StartsWith("--"' StringComparison.Ordinal))                  {                      string key = null;                      string value = null;                      if (args[i].IndexOf("="' StringComparison.Ordinal) > 0)                      {                          key = args[i].Substring(0' args[i].IndexOf("="' StringComparison.Ordinal));                          value = args[i].Substring(args[i].IndexOf("="' StringComparison.Ordinal) + 1);                      }                      else                          key = args[i];                        //Skip the leading --                      key = key.Substring(2).ToLower();                      if (!string.IsNullOrEmpty(value) && value.Length > 1 && value.StartsWith("\""' StringComparison.Ordinal) && value.EndsWith("\""' StringComparison.Ordinal))                          value = value.Substring(1' value.Length - 2);                        //Last argument overwrites the current                      if (parserCallback == null || parserCallback(key' value))                          options[key] = value;                        args.RemoveAt(i);                      i--;                  }              }
Magic Number,Duplicati.Library.Utility,CommandLineParser,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The following statement contains a magic number: for (int i = 0; i < args.Count; i++)              {                  if (args[i].StartsWith("--"' StringComparison.Ordinal))                  {                      string key = null;                      string value = null;                      if (args[i].IndexOf("="' StringComparison.Ordinal) > 0)                      {                          key = args[i].Substring(0' args[i].IndexOf("="' StringComparison.Ordinal));                          value = args[i].Substring(args[i].IndexOf("="' StringComparison.Ordinal) + 1);                      }                      else                          key = args[i];                        //Skip the leading --                      key = key.Substring(2).ToLower();                      if (!string.IsNullOrEmpty(value) && value.Length > 1 && value.StartsWith("\""' StringComparison.Ordinal) && value.EndsWith("\""' StringComparison.Ordinal))                          value = value.Substring(1' value.Length - 2);                        //Last argument overwrites the current                      if (parserCallback == null || parserCallback(key' value))                          options[key] = value;                        args.RemoveAt(i);                      i--;                  }              }
Magic Number,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlEncode,The following statement contains a magic number: var outbuf = new byte[4];
Magic Number,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlDecode,The following statement contains a magic number: var inbuf = new byte[8];
Magic Number,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlDecode,The following statement contains a magic number: var outbuf = new char[8];
Magic Number,Duplicati.Library.Utility,Uri,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlDecode,The following statement contains a magic number: return RE_NUMBER.Replace(value' (m) => {                  if (m.Value == "+")                      return " ";                    try                  {                      var hex = m.Groups["number"].Value;                      var bytelen = hex.Length / 2;                      Utility.HexStringAsByteArray(hex' inbuf);                      var c = decoder.GetChars(inbuf' 0' bytelen' outbuf' 0);                       return new string(outbuf' 0' c);                  }                  catch                  {                  }                                    //Fallback                  return m.Value;              });
Magic Number,Duplicati.Library.Utility,FilterExpression,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,Expand,The following statement contains a magic number: if (filter.Length < 2 || (filter.StartsWith("["' StringComparison.Ordinal) && filter.EndsWith("]"' StringComparison.Ordinal)))                  return new string[] { filter };              else                  return filter.Split(new char[] { System.IO.Path.PathSeparator }' StringSplitOptions.RemoveEmptyEntries);
Magic Number,Duplicati.Library.Utility,FilterExpression,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,AnalyzeFilters,The following statement contains a magic number: if (cacheLookup == null)              {                  var q = new Queue<IFilter>();                  q.Enqueue(filter);                    while (q.Count > 0)                  {                      var p = q.Dequeue();                      if (p == null || p.Empty)                          continue;                      else if (p is FilterExpression)                      {                          if (((FilterExpression)p).Result)                              includes = true;                          else                              excludes = true;                      }                      else if (p is JoinedFilterExpression)                      {                          q.Enqueue(((JoinedFilterExpression)p).First);                          q.Enqueue(((JoinedFilterExpression)p).Second);                      }                  }                    // Populate the cache                  lock(_matchLock)                  {                      if (_matchFallbackLookup.Count > 10)                          _matchFallbackLookup.Remove(_matchFallbackLookup.Keys.Skip(new Random().Next(0' _matchFallbackLookup.Count)).First());                      _matchFallbackLookup[filter] = new Tuple<bool' bool>(includes' excludes);                  }              }
Magic Number,Duplicati.Library.Utility,FilterEntry,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,FilterEntry,The following statement contains a magic number: if (string.IsNullOrEmpty(filter))                  {                      this.Type = FilterType.Empty;                      this.Filter = null;                      this.Regexp = null;                  }                  else if (filter.StartsWith("["' StringComparison.Ordinal) && filter.EndsWith("]"' StringComparison.Ordinal))                  {                      this.Type = FilterType.Regexp;                      this.Filter = filter.Substring(1' filter.Length - 2);                      this.Regexp = new System.Text.RegularExpressions.Regex(this.Filter' REGEXP_OPTIONS);                  }                  else                  {                      this.Type = (filter.Contains(MULTIPLE_WILDCARD) || filter.Contains(SINGLE_WILDCARD)) ? FilterType.Wildcard : FilterType.Simple;                      this.Filter = (!Utility.IsFSCaseSensitive && this.Type == FilterType.Wildcard) ? filter.ToUpper() : filter;                      this.Regexp = new System.Text.RegularExpressions.Regex(Library.Utility.Utility.ConvertGlobbingToRegExp(filter)' REGEXP_OPTIONS);                  }
Magic Number,Duplicati.Library.Utility,FileBackedList<T>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,FileBackedList,The following statement contains a magic number: this.SwitchToFileLimit = 2 * 1024 * 1024;
Magic Number,Duplicati.Library.Utility,FileBackedList<T>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,FileBackedList,The following statement contains a magic number: this.SwitchToFileLimit = 2 * 1024 * 1024;
Magic Number,Duplicati.Library.Utility,FileBackedList<T>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,FileBackedList,The following statement contains a magic number: this.SwitchToFileLimit = 2 * 1024 * 1024;
Magic Number,Duplicati.Library.Utility,FileBackedList<T>,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,Add,The following statement contains a magic number: m_stream.Write(BitConverter.GetBytes(size)' 0' 8);
Magic Number,Duplicati.Library.Utility,StreamEnumerator,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,StreamEnumerator,The following statement contains a magic number: m_sizebuffer = new byte[8];
Magic Number,Duplicati.Library.Utility,DataPump,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\DirectStreamLink.cs,doRun,The following statement contains a magic number: byte[] buf = new byte[1 << 14];
Magic Number,Duplicati.Library.Utility,SystemContextSettings,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\CallContextSettings.cs,StartSession,The following statement contains a magic number: if (buffersize < 1024)                  buffersize = 64 * 1024;
Magic Number,Duplicati.Library.Utility,SystemContextSettings,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\CallContextSettings.cs,StartSession,The following statement contains a magic number: if (buffersize < 1024)                  buffersize = 64 * 1024;
Magic Number,Duplicati.Library.Utility,SystemContextSettings,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\CallContextSettings.cs,StartSession,The following statement contains a magic number: if (buffersize < 1024)                  buffersize = 64 * 1024;
Magic Number,Duplicati.Library.Utility.Power,MacOSPowerSupplyState,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Power\MacOSPowerSupplyState.cs,GetSourcePmset,The following statement contains a magic number: try              {                  var psi = new System.Diagnostics.ProcessStartInfo("pmset"' "-g batt");                  psi.RedirectStandardOutput = true;                  psi.UseShellExecute = false;                    var pi = System.Diagnostics.Process.Start(psi);                  pi.WaitForExit(1000);                  if (pi.HasExited)                  {                      var pmout = pi.StandardOutput.ReadToEnd().Trim();                      if (pmout.IndexOf("'AC Power'"' StringComparison.OrdinalIgnoreCase) >= 0)                          return PowerSupply.Source.AC;                      if (pmout.IndexOf("'Battery Power'"' StringComparison.OrdinalIgnoreCase) >= 0)                          return PowerSupply.Source.Battery;                  }                  else                      pi.Kill();                    return PowerSupply.Source.Unknown;              }              catch              {                  return PowerSupply.Source.Unknown;              }
Magic Number,Duplicati.Library.Utility.Power,MacOSPowerSupplyState,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Power\MacOSPowerSupplyState.cs,GetSourceIoreg,The following statement contains a magic number: try              {                  var psi = new System.Diagnostics.ProcessStartInfo("ioreg"' "-n AppleSmartBattery -r");                  psi.RedirectStandardOutput = true;                  psi.UseShellExecute = false;                    var pi = System.Diagnostics.Process.Start(psi);                  pi.WaitForExit(1000);                  if (pi.HasExited)                  {                      // Find:                      // "ExternalConnected" = Yes                      var ioreg = pi.StandardOutput.ReadToEnd()                                    .Split(new string[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries)                                    .Select(x => x.Trim())                                    .Where(x => x.StartsWith("\"ExternalConnected\""' StringComparison.OrdinalIgnoreCase))                                    .Select(x => x.Split(new char[] { '=' }' 2).LastOrDefault())                                    .FirstOrDefault();                        if (string.Equals(ioreg' "No"' StringComparison.OrdinalIgnoreCase))                          return PowerSupply.Source.Battery;                        if (string.Equals(ioreg' "Yes"' StringComparison.OrdinalIgnoreCase))                          return PowerSupply.Source.AC;                  }                  else                      pi.Kill();                    return PowerSupply.Source.Unknown;              }              catch              {                  return PowerSupply.Source.Unknown;              }
Magic Number,Duplicati.Library.Utility.Power,MacOSPowerSupplyState,C:\repos\duplicati_duplicati\Duplicati\Library\Utility\Power\MacOSPowerSupplyState.cs,GetSourceIoreg,The following statement contains a magic number: try              {                  var psi = new System.Diagnostics.ProcessStartInfo("ioreg"' "-n AppleSmartBattery -r");                  psi.RedirectStandardOutput = true;                  psi.UseShellExecute = false;                    var pi = System.Diagnostics.Process.Start(psi);                  pi.WaitForExit(1000);                  if (pi.HasExited)                  {                      // Find:                      // "ExternalConnected" = Yes                      var ioreg = pi.StandardOutput.ReadToEnd()                                    .Split(new string[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries)                                    .Select(x => x.Trim())                                    .Where(x => x.StartsWith("\"ExternalConnected\""' StringComparison.OrdinalIgnoreCase))                                    .Select(x => x.Split(new char[] { '=' }' 2).LastOrDefault())                                    .FirstOrDefault();                        if (string.Equals(ioreg' "No"' StringComparison.OrdinalIgnoreCase))                          return PowerSupply.Source.Battery;                        if (string.Equals(ioreg' "Yes"' StringComparison.OrdinalIgnoreCase))                          return PowerSupply.Source.AC;                  }                  else                      pi.Kill();                    return PowerSupply.Source.Unknown;              }              catch              {                  return PowerSupply.Source.Unknown;              }
