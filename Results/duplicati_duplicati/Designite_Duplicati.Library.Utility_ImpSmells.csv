Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Duplicati.Library.Utility,Timeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Timeparser.cs,ParseTimeInterval,Cyclomatic complexity of the method is 27
Complex Method,Duplicati.Library.Utility,UrlUtillity,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\UrlUtillity.cs,OpenURL,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,Cyclomatic complexity of the method is 25
Complex Method,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,CompareStreams,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ParsePriority,Cyclomatic complexity of the method is 14
Complex Method,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ParseBool,Cyclomatic complexity of the method is 10
Complex Method,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,LocateFileInSystemPath,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,Cyclomatic complexity of the method is 19
Complex Method,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,Cyclomatic complexity of the method is 15
Complex Method,Duplicati.Library.Utility,Uri,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,Uri,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,Compact,Cyclomatic complexity of the method is 10
Complex Method,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,AnalyzeFilters,Cyclomatic complexity of the method is 8
Long Parameter List,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The method has 5 parameters.
Long Parameter List,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,The method has 6 parameters.
Long Parameter List,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The method has 7 parameters.
Long Parameter List,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The method has 6 parameters.
Long Parameter List,Duplicati.Library.Utility,Uri,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,Uri,The method has 7 parameters.
Long Parameter List,Duplicati.Library.Utility,Uri,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,AsString,The method has 7 parameters.
Long Statement,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The length of the statement  "	if (size.EndsWith ("tb") || size.EndsWith ("gb") || size.EndsWith ("mb") || size.EndsWith ("kb") || size.EndsWith ("b")) " is 120.
Long Statement,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The length of the statement  "			var n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.FullName' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8)); " is 209.
Long Statement,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The length of the statement  "				n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.Name' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8)); " is 201.
Long Statement,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,Read,The length of the statement  "		DelayIfRequired (ref m_readspeed' chunksize' ref m_last_read_sample' ref m_current_read_counter' ref m_current_read_speed); " is 123.
Long Statement,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,Write,The length of the statement  "		DelayIfRequired (ref m_writespeed' chunksize' ref m_last_write_sample' ref m_current_write_counter' ref m_current_write_speed); " is 127.
Long Statement,Duplicati.Library.Utility,Timeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Timeparser.cs,ParseTimeInterval,The length of the statement  "	if (DateTime.TryParse (datestring' System.Globalization.CultureInfo.CurrentUICulture' System.Globalization.DateTimeStyles.AssumeLocal' out t)) " is 142.
Long Statement,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,The length of the statement  "	return EnumerateFileSystemEntries (rootpath' callback' new FileSystemInteraction (System.IO.Directory.GetDirectories)' new FileSystemInteraction (System.IO.Directory.GetFiles)); " is 177.
Long Statement,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,The length of the statement  "			System.IO.FileAttributes attr = attributeReader == null ? System.IO.FileAttributes.Directory : attributeReader (rootpath); " is 122.
Long Statement,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,CalculateHash,The length of the statement  "	using (System.IO.FileStream fs = System.IO.File.Open (path' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.Read)) " is 138.
Long Statement,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReadFileWithDefaultEncoding,The length of the statement  "	using (System.IO.FileStream file = new System.IO.FileStream (filename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.Read)) " is 149.
Long Statement,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,LocateFileInSystemPath,The length of the statement  "		string homedir = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location) + System.IO.Path.PathSeparator.ToString (); " is 154.
Long Statement,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ExpandEnvironmentVariablesRegexp,The length of the statement  "	ENVIRONMENT_VARIABLE_MATCHER_WINDOWS.Replace (str.Replace ("~"' Regex.Escape (HOME_PATH))' m => Regex.Escape (lookup (m.Groups ["name"].Value))); " is 145.
Long Statement,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,TryDeserializeDateTime,The length of the statement  "	return DateTime.TryParseExact (str' SERIALIZED_DATE_TIME_FORMAT' System.Globalization.CultureInfo.InvariantCulture' System.Globalization.DateTimeStyles.AssumeUniversal' out dt); " is 177.
Long Statement,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReplaceFile,The length of the statement  "				throw new Exception (string.Format ("Failed to replace the file \"{0}\" volume with the \"{1}\"' error: {2}"' target' sourcefile' ex.Message)); " is 143.
Long Statement,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,RepeatedHashWithSalt,The length of the statement  "	return RepeatedHashWithSalt (System.Text.Encoding.UTF8.GetBytes (data ?? "")' System.Text.Encoding.UTF8.GetBytes (salt ?? "")' repeats); " is 136.
Long Statement,Duplicati.Library.Utility,Uri,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,ParseQueryString,The length of the statement  "		result.Add (UrlDecode (m.Groups ["key"].Value)' UrlDecode (m.Groups ["value"].Success ? m.Groups ["value"].Value : "")); " is 120.
Long Statement,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,AnalyzeFilters,The length of the statement  "				_matchFallbackLookup.Remove (_matchFallbackLookup.Keys.Skip (new Random ().Next (0' _matchFallbackLookup.Count)).First ()); " is 123.
Long Statement,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,Combine,The length of the statement  "	return new FilterExpression (first.m_filters.Union (second.m_filters).Select (x => x.Type == FilterType.Regexp ? ("[" + x.Filter + "]") : x.Filter)' first.Result); " is 163.
Long Statement,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,Combine,The length of the statement  "	if (first is FilterExpression && second is FilterExpression && ((FilterExpression)first).Result == ((FilterExpression)second).Result) " is 133.
Long Statement,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,Serialize,The length of the statement  "	select string.Format ("{0}{1}{2}{3}"' this.Result ? "+" : "-"' n.Type == FilterType.Regexp ? "[" : ""' n.Filter' n.Type == FilterType.Regexp ? "]" : "")).ToArray (); " is 165.
Long Statement,Duplicati.Library.Utility,FileBackedList,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,Add,The length of the statement  "		throw new Exception (string.Format ("Stream serializer wrote a different set of bytes than it was supposed to. Expected {0} bytes' but wrote {1} bytes"' m_stream.Position - pos' size)); " is 185.
Long Statement,Duplicati.Library.Utility,JoinedFilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\JoinedFilterExpression.cs,Join,The length of the statement  "		if (first is FilterExpression && second is FilterExpression && ((FilterExpression)first).Result == ((FilterExpression)second).Result) " is 133.
Long Statement,Duplicati.Library.Utility,FilterCollector,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterCollector.cs,DoExtractOptions,The length of the statement  "			m_filters.Add (new Library.Utility.FilterExpression (Library.Utility.Utility.ExpandEnvironmentVariables (value)' true)); " is 120.
Long Statement,Duplicati.Library.Utility,FilterCollector,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterCollector.cs,DoExtractOptions,The length of the statement  "			m_filters.Add (new Library.Utility.FilterExpression (Library.Utility.Utility.ExpandEnvironmentVariables (value)' false)); " is 121.
Long Statement,Duplicati.Library.Utility.Strings,SslCertificateValidator,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Strings.cs,VerifyCertificateException,The length of the statement  "	return LC.L (@"The server certificate had the error {0} and the hash {1}{2}If you trust this certificate' use the commandline option --accept-specified-ssl-hash={1} to accept the server certificate anyway.{2}You can also attempt to import the server certificate into your operating systems trust pool."' error' hash' Environment.NewLine); " is 338.
Complex Conditional,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The conditional expression  "size.EndsWith ("tb") || size.EndsWith ("gb") || size.EndsWith ("mb") || size.EndsWith ("kb") || size.EndsWith ("b")"  is complex.
Complex Conditional,Duplicati.Library.Utility,CommandLineParser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The conditional expression  "!string.IsNullOrEmpty (value) && value.Length > 1 && value.StartsWith ("\"") && value.EndsWith ("\"")"  is complex.
Empty Catch Block,Duplicati.Library.Utility,AsyncHttpRequest,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\AsyncHttpRequest.cs,TrySetTimeout,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,RemoveAllApplicationTempFiles,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,TempFolder,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFolder.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,CopyStream,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,EnumerateFileSystemEntries,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,CompareStreams,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,Which,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,LocateFileInSystemPath,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,LocateFileInSystemPath,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,LocateFileInSystemPath,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,ClearQueue,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Uri,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,Uri,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Uri,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlEncode,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Utility,Uri,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlDecode,The method has an empty catch block.
Magic Number,Duplicati.Library.Utility,KeyGenerator,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: for (int i = 0; i < tmp.Length; i++) {  	res [i * 2] = HEX_CHARS [tmp [i] & 0xF];  	res [i * 2 + 1] = HEX_CHARS [(tmp [i] >> 4) & 0xF];  }  
Magic Number,Duplicati.Library.Utility,KeyGenerator,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: for (int i = 0; i < tmp.Length; i++) {  	res [i * 2] = HEX_CHARS [tmp [i] & 0xF];  	res [i * 2 + 1] = HEX_CHARS [(tmp [i] >> 4) & 0xF];  }  
Magic Number,Duplicati.Library.Utility,KeyGenerator,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: for (int i = 0; i < tmp.Length; i++) {  	res [i * 2] = HEX_CHARS [tmp [i] & 0xF];  	res [i * 2 + 1] = HEX_CHARS [(tmp [i] >> 4) & 0xF];  }  
Magic Number,Duplicati.Library.Utility,KeyGenerator,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: res [i * 2] = HEX_CHARS [tmp [i] & 0xF];  
Magic Number,Duplicati.Library.Utility,KeyGenerator,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: res [i * 2 + 1] = HEX_CHARS [(tmp [i] >> 4) & 0xF];  
Magic Number,Duplicati.Library.Utility,KeyGenerator,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\KeyGenerator.cs,GenerateSignKey,The following statement contains a magic number: res [i * 2 + 1] = HEX_CHARS [(tmp [i] >> 4) & 0xF];  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("tb")) {  	factor = 1024L * 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: factor = 1024L * 1024 * 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: factor = 1024L * 1024 * 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: factor = 1024L * 1024 * 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: size = size.Substring (0' size.Length - 2).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("gb")) {  	factor = 1024 * 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: factor = 1024 * 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: factor = 1024 * 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: factor = 1024 * 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: size = size.Substring (0' size.Length - 2).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("mb")) {  	factor = 1024 * 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: factor = 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: factor = 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: size = size.Substring (0' size.Length - 2).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: if (size.EndsWith ("kb")) {  	factor = 1024;  	size = size.Substring (0' size.Length - 2).Trim ();  } else if (size.EndsWith ("b"))  	size = size.Substring (0' size.Length - 1).Trim ();  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: factor = 1024;  
Magic Number,Duplicati.Library.Utility,Sizeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Sizeparser.cs,ParseSize,The following statement contains a magic number: size = size.Substring (0' size.Length - 2).Trim ();  
Magic Number,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The following statement contains a magic number: foreach (var f in st.GetFrames ())  	if (f.GetMethod ().DeclaringType.Assembly != typeof(TempFile).Assembly) {  		var n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.FullName' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  		if (n.IndexOfAny (System.IO.Path.GetInvalidFileNameChars ()) >= 0)  			n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.Name' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  		if (n.IndexOfAny (System.IO.Path.GetInvalidFileNameChars ()) < 0) {  			lock (m_lock)  				m_fileTrace.Add (n' st);  			return n;  		}  	}  
Magic Number,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The following statement contains a magic number: foreach (var f in st.GetFrames ())  	if (f.GetMethod ().DeclaringType.Assembly != typeof(TempFile).Assembly) {  		var n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.FullName' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  		if (n.IndexOfAny (System.IO.Path.GetInvalidFileNameChars ()) >= 0)  			n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.Name' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  		if (n.IndexOfAny (System.IO.Path.GetInvalidFileNameChars ()) < 0) {  			lock (m_lock)  				m_fileTrace.Add (n' st);  			return n;  		}  	}  
Magic Number,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The following statement contains a magic number: if (f.GetMethod ().DeclaringType.Assembly != typeof(TempFile).Assembly) {  	var n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.FullName' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  	if (n.IndexOfAny (System.IO.Path.GetInvalidFileNameChars ()) >= 0)  		n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.Name' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  	if (n.IndexOfAny (System.IO.Path.GetInvalidFileNameChars ()) < 0) {  		lock (m_lock)  			m_fileTrace.Add (n' st);  		return n;  	}  }  
Magic Number,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The following statement contains a magic number: if (f.GetMethod ().DeclaringType.Assembly != typeof(TempFile).Assembly) {  	var n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.FullName' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  	if (n.IndexOfAny (System.IO.Path.GetInvalidFileNameChars ()) >= 0)  		n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.Name' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  	if (n.IndexOfAny (System.IO.Path.GetInvalidFileNameChars ()) < 0) {  		lock (m_lock)  			m_fileTrace.Add (n' st);  		return n;  	}  }  
Magic Number,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The following statement contains a magic number: if (n.IndexOfAny (System.IO.Path.GetInvalidFileNameChars ()) >= 0)  	n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.Name' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  
Magic Number,Duplicati.Library.Utility,TempFile,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\TempFile.cs,GenerateUniqueName,The following statement contains a magic number: n = string.Format ("{0}_{1}_{2}_{3}"' f.GetMethod ().DeclaringType.Name' f.GetMethod ().Name' Library.Utility.Utility.SerializeDateTime (DateTime.UtcNow)' Guid.NewGuid ().ToString ().Substring (0' 8));  
Magic Number,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,Read,The following statement contains a magic number: while (remaining > 0) {  	// To avoid excessive waiting' the delay will wait at most 2 seconds'  	// so we split the blocks to limit the number of seconds we can wait  	var chunksize = (int)Math.Min (remaining' m_readspeed <= 0 ? remaining : m_readspeed * 2);  	DelayIfRequired (ref m_readspeed' chunksize' ref m_last_read_sample' ref m_current_read_counter' ref m_current_read_speed);  	var actual = m_basestream.Read (buffer' offset' chunksize);  	if (actual <= 0)  		break;  	m_current_read_counter += actual;  	remaining -= actual;  }  
Magic Number,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,Write,The following statement contains a magic number: while (count > 0) {  	// To avoid excessive waiting' the delay will wait at most 2 seconds'  	// so we split the blocks to limit the number of seconds we can wait  	var chunksize = (int)Math.Min (count' m_writespeed <= 0 ? count : m_writespeed * 2);  	DelayIfRequired (ref m_writespeed' chunksize' ref m_last_write_sample' ref m_current_write_counter' ref m_current_write_speed);  	m_basestream.Write (buffer' offset' chunksize);  	m_current_write_counter += chunksize;  	count -= chunksize;  }  
Magic Number,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The following statement contains a magic number: if (duration.Ticks > SAMPLE_PERIOD || last_count > limit) {  	// After a sample period' measure how far ahead we are  	var target_delay = TimeSpan.FromSeconds (last_count / (double)limit) - duration;  	// If we are actually ahead' delay for a little while  	if (target_delay.Ticks > 1000) {  		// With large changes' we avoid sleeping for several minutes  		// This makes the throttling more resposive when increasing the  		// throughput' even with large changes  		var ms = (int)Math.Min (target_delay.TotalMilliseconds' 2 * 1000);  		System.Threading.Thread.Sleep (ms);  		// When we compute how fast this sample was' we include the delay  		now = DateTime.Now;  	}  	current_speed = last_count / (now - last_sample).TotalSeconds;  	last_sample = now;  	last_count = 0;  }  
Magic Number,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The following statement contains a magic number: if (duration.Ticks > SAMPLE_PERIOD || last_count > limit) {  	// After a sample period' measure how far ahead we are  	var target_delay = TimeSpan.FromSeconds (last_count / (double)limit) - duration;  	// If we are actually ahead' delay for a little while  	if (target_delay.Ticks > 1000) {  		// With large changes' we avoid sleeping for several minutes  		// This makes the throttling more resposive when increasing the  		// throughput' even with large changes  		var ms = (int)Math.Min (target_delay.TotalMilliseconds' 2 * 1000);  		System.Threading.Thread.Sleep (ms);  		// When we compute how fast this sample was' we include the delay  		now = DateTime.Now;  	}  	current_speed = last_count / (now - last_sample).TotalSeconds;  	last_sample = now;  	last_count = 0;  }  
Magic Number,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The following statement contains a magic number: if (duration.Ticks > SAMPLE_PERIOD || last_count > limit) {  	// After a sample period' measure how far ahead we are  	var target_delay = TimeSpan.FromSeconds (last_count / (double)limit) - duration;  	// If we are actually ahead' delay for a little while  	if (target_delay.Ticks > 1000) {  		// With large changes' we avoid sleeping for several minutes  		// This makes the throttling more resposive when increasing the  		// throughput' even with large changes  		var ms = (int)Math.Min (target_delay.TotalMilliseconds' 2 * 1000);  		System.Threading.Thread.Sleep (ms);  		// When we compute how fast this sample was' we include the delay  		now = DateTime.Now;  	}  	current_speed = last_count / (now - last_sample).TotalSeconds;  	last_sample = now;  	last_count = 0;  }  
Magic Number,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The following statement contains a magic number: if (target_delay.Ticks > 1000) {  	// With large changes' we avoid sleeping for several minutes  	// This makes the throttling more resposive when increasing the  	// throughput' even with large changes  	var ms = (int)Math.Min (target_delay.TotalMilliseconds' 2 * 1000);  	System.Threading.Thread.Sleep (ms);  	// When we compute how fast this sample was' we include the delay  	now = DateTime.Now;  }  
Magic Number,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The following statement contains a magic number: if (target_delay.Ticks > 1000) {  	// With large changes' we avoid sleeping for several minutes  	// This makes the throttling more resposive when increasing the  	// throughput' even with large changes  	var ms = (int)Math.Min (target_delay.TotalMilliseconds' 2 * 1000);  	System.Threading.Thread.Sleep (ms);  	// When we compute how fast this sample was' we include the delay  	now = DateTime.Now;  }  
Magic Number,Duplicati.Library.Utility,ThrottledStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\ThrottledStream.cs,DelayIfRequired,The following statement contains a magic number: if (target_delay.Ticks > 1000) {  	// With large changes' we avoid sleeping for several minutes  	// This makes the throttling more resposive when increasing the  	// throughput' even with large changes  	var ms = (int)Math.Min (target_delay.TotalMilliseconds' 2 * 1000);  	System.Threading.Thread.Sleep (ms);  	// When we compute how fast this sample was' we include the delay  	now = DateTime.Now;  }  
Magic Number,Duplicati.Library.Utility,Timeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Timeparser.cs,ParseTimeInterval,The following statement contains a magic number: while ((index = datestring.IndexOfAny (separators' previndex)) > 0) {  	string partial = datestring.Substring (previndex' index - previndex).Trim ();  	int factor;  	if (!int.TryParse (partial' System.Globalization.NumberStyles.Integer' null' out factor))  		throw new Exception (Strings.Timeparser.InvalidIntegerError (partial));  	factor *= multiplier;  	switch (datestring [index]) {  	case 's':  		offset = offset.AddSeconds (factor);  		break;  	case 'm':  		offset = offset.AddMinutes (factor);  		break;  	case 'h':  		offset = offset.AddHours (factor);  		break;  	case 'D':  		offset = offset.AddDays (factor);  		break;  	case 'W':  		offset = offset.AddDays (factor * 7);  		break;  	case 'M':  		offset = offset.AddMonths (factor);  		break;  	case 'Y':  		offset = offset.AddYears (factor);  		break;  	default:  		throw new Exception (Strings.Timeparser.InvalidSpecifierError (datestring [index]));  	}  	previndex = index + 1;  }  
Magic Number,Duplicati.Library.Utility,Timeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Timeparser.cs,ParseTimeInterval,The following statement contains a magic number: switch (datestring [index]) {  case 's':  	offset = offset.AddSeconds (factor);  	break;  case 'm':  	offset = offset.AddMinutes (factor);  	break;  case 'h':  	offset = offset.AddHours (factor);  	break;  case 'D':  	offset = offset.AddDays (factor);  	break;  case 'W':  	offset = offset.AddDays (factor * 7);  	break;  case 'M':  	offset = offset.AddMonths (factor);  	break;  case 'Y':  	offset = offset.AddYears (factor);  	break;  default:  	throw new Exception (Strings.Timeparser.InvalidSpecifierError (datestring [index]));  }  
Magic Number,Duplicati.Library.Utility,Timeparser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Timeparser.cs,ParseTimeInterval,The following statement contains a magic number: offset = offset.AddDays (factor * 7);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReadFileWithDefaultEncoding,The following statement contains a magic number: using (System.IO.FileStream file = new System.IO.FileStream (filename' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.Read))  	file.Read (buffer' 0' 4096);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReadFileWithDefaultEncoding,The following statement contains a magic number: file.Read (buffer' 0' 4096);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024 * 1024L)  	return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  else if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: return Strings.Utility.FormatStringTB ((double)size / (1024 * 1024 * 1024 * 1024L));  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024 * 1024)  	return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  else if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: return Strings.Utility.FormatStringGB ((double)size / (1024 * 1024 * 1024));  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024 * 1024)  	return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  else if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: return Strings.Utility.FormatStringMB ((double)size / (1024 * 1024));  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: if (size >= 1024)  	return Strings.Utility.FormatStringKB ((double)size / 1024);  else  	return Strings.Utility.FormatStringB (size);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,FormatSizeString,The following statement contains a magic number: return Strings.Utility.FormatStringKB ((double)size / 1024);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2)  	data [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2)  	data [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2)  	data [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: for (var i = 0; i < hex.Length; i += 2)  	data [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: i += 2
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: data [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: data [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,HexStringAsByteArray,The following statement contains a magic number: data [i / 2] = Convert.ToByte (hex.Substring (i' 2)' 16);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,Which,The following statement contains a magic number: try {  	var psi = new System.Diagnostics.ProcessStartInfo ("which"' appname);  	psi.RedirectStandardOutput = true;  	psi.UseShellExecute = false;  	var pi = System.Diagnostics.Process.Start (psi);  	pi.WaitForExit (5000);  	if (pi.HasExited)  		return pi.ExitCode == 0;  	else  		return false;  } catch {  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,Which,The following statement contains a magic number: pi.WaitForExit (5000);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReplaceFile,The following statement contains a magic number: do {  	try {  		System.IO.File.Move (sourcefile' target);  		break;  	} catch (Exception ex) {  		if (i == 0)  			throw new Exception (string.Format ("Failed to replace the file \"{0}\" volume with the \"{1}\"' error: {2}"' target' sourcefile' ex.Message));  		System.Threading.Thread.Sleep (250);  	}  } while (i-- > 0);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReplaceFile,The following statement contains a magic number: try {  	System.IO.File.Move (sourcefile' target);  	break;  } catch (Exception ex) {  	if (i == 0)  		throw new Exception (string.Format ("Failed to replace the file \"{0}\" volume with the \"{1}\"' error: {2}"' target' sourcefile' ex.Message));  	System.Threading.Thread.Sleep (250);  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,ReplaceFile,The following statement contains a magic number: System.Threading.Thread.Sleep (250);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: foreach (var p in item.GetType ().GetProperties ()) {  	if (filter != null && !filter (p' item))  		continue;  	if (IsPrimitiveTypeForSerialization (p.PropertyType)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: "' indentstring' p.Name);  		PrintSerializeIfPrimitive (p.GetValue (item' null)' writer);  	} else if (typeof(System.Collections.IEnumerable).IsAssignableFrom (p.PropertyType)) {  		var enumerable = (System.Collections.IEnumerable)p.GetValue (item' null);  		var any = false;  		if (enumerable != null) {  			var enumerator = enumerable.GetEnumerator ();  			if (enumerator != null) {  				var remain = collectionlimit;  				if (first)  					first = false;  				else  					writer.WriteLine ();  				writer.Write ("{0}{1}: ["' indentstring' p.Name);  				if (enumerator.MoveNext ()) {  					any = true;  					writer.WriteLine ();  					PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  					remain--;  					while (enumerator.MoveNext ()) {  						writer.WriteLine ("'");  						if (remain == 0) {  							writer.Write ("...");  							break;  						}  						PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  						remain--;  					}  				}  				if (any) {  					writer.WriteLine ();  					writer.Write (indentstring);  				}  				writer.Write ("]");  			}  		}  	} else if (recurseobjects) {  		var value = p.GetValue (item' null);  		if (value == null) {  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.Write ("{0}{1}: null"' indentstring' p.Name);  		} else if (!visited.ContainsKey (value)) {  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  			visited [value] = null;  			PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  		}  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: foreach (var p in item.GetType ().GetProperties ()) {  	if (filter != null && !filter (p' item))  		continue;  	if (IsPrimitiveTypeForSerialization (p.PropertyType)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: "' indentstring' p.Name);  		PrintSerializeIfPrimitive (p.GetValue (item' null)' writer);  	} else if (typeof(System.Collections.IEnumerable).IsAssignableFrom (p.PropertyType)) {  		var enumerable = (System.Collections.IEnumerable)p.GetValue (item' null);  		var any = false;  		if (enumerable != null) {  			var enumerator = enumerable.GetEnumerator ();  			if (enumerator != null) {  				var remain = collectionlimit;  				if (first)  					first = false;  				else  					writer.WriteLine ();  				writer.Write ("{0}{1}: ["' indentstring' p.Name);  				if (enumerator.MoveNext ()) {  					any = true;  					writer.WriteLine ();  					PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  					remain--;  					while (enumerator.MoveNext ()) {  						writer.WriteLine ("'");  						if (remain == 0) {  							writer.Write ("...");  							break;  						}  						PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  						remain--;  					}  				}  				if (any) {  					writer.WriteLine ();  					writer.Write (indentstring);  				}  				writer.Write ("]");  			}  		}  	} else if (recurseobjects) {  		var value = p.GetValue (item' null);  		if (value == null) {  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.Write ("{0}{1}: null"' indentstring' p.Name);  		} else if (!visited.ContainsKey (value)) {  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  			visited [value] = null;  			PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  		}  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: foreach (var p in item.GetType ().GetProperties ()) {  	if (filter != null && !filter (p' item))  		continue;  	if (IsPrimitiveTypeForSerialization (p.PropertyType)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: "' indentstring' p.Name);  		PrintSerializeIfPrimitive (p.GetValue (item' null)' writer);  	} else if (typeof(System.Collections.IEnumerable).IsAssignableFrom (p.PropertyType)) {  		var enumerable = (System.Collections.IEnumerable)p.GetValue (item' null);  		var any = false;  		if (enumerable != null) {  			var enumerator = enumerable.GetEnumerator ();  			if (enumerator != null) {  				var remain = collectionlimit;  				if (first)  					first = false;  				else  					writer.WriteLine ();  				writer.Write ("{0}{1}: ["' indentstring' p.Name);  				if (enumerator.MoveNext ()) {  					any = true;  					writer.WriteLine ();  					PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  					remain--;  					while (enumerator.MoveNext ()) {  						writer.WriteLine ("'");  						if (remain == 0) {  							writer.Write ("...");  							break;  						}  						PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  						remain--;  					}  				}  				if (any) {  					writer.WriteLine ();  					writer.Write (indentstring);  				}  				writer.Write ("]");  			}  		}  	} else if (recurseobjects) {  		var value = p.GetValue (item' null);  		if (value == null) {  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.Write ("{0}{1}: null"' indentstring' p.Name);  		} else if (!visited.ContainsKey (value)) {  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  			visited [value] = null;  			PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  		}  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (IsPrimitiveTypeForSerialization (p.PropertyType)) {  	if (first)  		first = false;  	else  		writer.WriteLine ();  	writer.Write ("{0}{1}: "' indentstring' p.Name);  	PrintSerializeIfPrimitive (p.GetValue (item' null)' writer);  } else if (typeof(System.Collections.IEnumerable).IsAssignableFrom (p.PropertyType)) {  	var enumerable = (System.Collections.IEnumerable)p.GetValue (item' null);  	var any = false;  	if (enumerable != null) {  		var enumerator = enumerable.GetEnumerator ();  		if (enumerator != null) {  			var remain = collectionlimit;  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.Write ("{0}{1}: ["' indentstring' p.Name);  			if (enumerator.MoveNext ()) {  				any = true;  				writer.WriteLine ();  				PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  				remain--;  				while (enumerator.MoveNext ()) {  					writer.WriteLine ("'");  					if (remain == 0) {  						writer.Write ("...");  						break;  					}  					PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  					remain--;  				}  			}  			if (any) {  				writer.WriteLine ();  				writer.Write (indentstring);  			}  			writer.Write ("]");  		}  	}  } else if (recurseobjects) {  	var value = p.GetValue (item' null);  	if (value == null) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: null"' indentstring' p.Name);  	} else if (!visited.ContainsKey (value)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  		visited [value] = null;  		PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (IsPrimitiveTypeForSerialization (p.PropertyType)) {  	if (first)  		first = false;  	else  		writer.WriteLine ();  	writer.Write ("{0}{1}: "' indentstring' p.Name);  	PrintSerializeIfPrimitive (p.GetValue (item' null)' writer);  } else if (typeof(System.Collections.IEnumerable).IsAssignableFrom (p.PropertyType)) {  	var enumerable = (System.Collections.IEnumerable)p.GetValue (item' null);  	var any = false;  	if (enumerable != null) {  		var enumerator = enumerable.GetEnumerator ();  		if (enumerator != null) {  			var remain = collectionlimit;  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.Write ("{0}{1}: ["' indentstring' p.Name);  			if (enumerator.MoveNext ()) {  				any = true;  				writer.WriteLine ();  				PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  				remain--;  				while (enumerator.MoveNext ()) {  					writer.WriteLine ("'");  					if (remain == 0) {  						writer.Write ("...");  						break;  					}  					PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  					remain--;  				}  			}  			if (any) {  				writer.WriteLine ();  				writer.Write (indentstring);  			}  			writer.Write ("]");  		}  	}  } else if (recurseobjects) {  	var value = p.GetValue (item' null);  	if (value == null) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: null"' indentstring' p.Name);  	} else if (!visited.ContainsKey (value)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  		visited [value] = null;  		PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (IsPrimitiveTypeForSerialization (p.PropertyType)) {  	if (first)  		first = false;  	else  		writer.WriteLine ();  	writer.Write ("{0}{1}: "' indentstring' p.Name);  	PrintSerializeIfPrimitive (p.GetValue (item' null)' writer);  } else if (typeof(System.Collections.IEnumerable).IsAssignableFrom (p.PropertyType)) {  	var enumerable = (System.Collections.IEnumerable)p.GetValue (item' null);  	var any = false;  	if (enumerable != null) {  		var enumerator = enumerable.GetEnumerator ();  		if (enumerator != null) {  			var remain = collectionlimit;  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.Write ("{0}{1}: ["' indentstring' p.Name);  			if (enumerator.MoveNext ()) {  				any = true;  				writer.WriteLine ();  				PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  				remain--;  				while (enumerator.MoveNext ()) {  					writer.WriteLine ("'");  					if (remain == 0) {  						writer.Write ("...");  						break;  					}  					PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  					remain--;  				}  			}  			if (any) {  				writer.WriteLine ();  				writer.Write (indentstring);  			}  			writer.Write ("]");  		}  	}  } else if (recurseobjects) {  	var value = p.GetValue (item' null);  	if (value == null) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: null"' indentstring' p.Name);  	} else if (!visited.ContainsKey (value)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  		visited [value] = null;  		PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (typeof(System.Collections.IEnumerable).IsAssignableFrom (p.PropertyType)) {  	var enumerable = (System.Collections.IEnumerable)p.GetValue (item' null);  	var any = false;  	if (enumerable != null) {  		var enumerator = enumerable.GetEnumerator ();  		if (enumerator != null) {  			var remain = collectionlimit;  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.Write ("{0}{1}: ["' indentstring' p.Name);  			if (enumerator.MoveNext ()) {  				any = true;  				writer.WriteLine ();  				PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  				remain--;  				while (enumerator.MoveNext ()) {  					writer.WriteLine ("'");  					if (remain == 0) {  						writer.Write ("...");  						break;  					}  					PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  					remain--;  				}  			}  			if (any) {  				writer.WriteLine ();  				writer.Write (indentstring);  			}  			writer.Write ("]");  		}  	}  } else if (recurseobjects) {  	var value = p.GetValue (item' null);  	if (value == null) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: null"' indentstring' p.Name);  	} else if (!visited.ContainsKey (value)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  		visited [value] = null;  		PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (typeof(System.Collections.IEnumerable).IsAssignableFrom (p.PropertyType)) {  	var enumerable = (System.Collections.IEnumerable)p.GetValue (item' null);  	var any = false;  	if (enumerable != null) {  		var enumerator = enumerable.GetEnumerator ();  		if (enumerator != null) {  			var remain = collectionlimit;  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.Write ("{0}{1}: ["' indentstring' p.Name);  			if (enumerator.MoveNext ()) {  				any = true;  				writer.WriteLine ();  				PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  				remain--;  				while (enumerator.MoveNext ()) {  					writer.WriteLine ("'");  					if (remain == 0) {  						writer.Write ("...");  						break;  					}  					PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  					remain--;  				}  			}  			if (any) {  				writer.WriteLine ();  				writer.Write (indentstring);  			}  			writer.Write ("]");  		}  	}  } else if (recurseobjects) {  	var value = p.GetValue (item' null);  	if (value == null) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: null"' indentstring' p.Name);  	} else if (!visited.ContainsKey (value)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  		visited [value] = null;  		PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (typeof(System.Collections.IEnumerable).IsAssignableFrom (p.PropertyType)) {  	var enumerable = (System.Collections.IEnumerable)p.GetValue (item' null);  	var any = false;  	if (enumerable != null) {  		var enumerator = enumerable.GetEnumerator ();  		if (enumerator != null) {  			var remain = collectionlimit;  			if (first)  				first = false;  			else  				writer.WriteLine ();  			writer.Write ("{0}{1}: ["' indentstring' p.Name);  			if (enumerator.MoveNext ()) {  				any = true;  				writer.WriteLine ();  				PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  				remain--;  				while (enumerator.MoveNext ()) {  					writer.WriteLine ("'");  					if (remain == 0) {  						writer.Write ("...");  						break;  					}  					PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  					remain--;  				}  			}  			if (any) {  				writer.WriteLine ();  				writer.Write (indentstring);  			}  			writer.Write ("]");  		}  	}  } else if (recurseobjects) {  	var value = p.GetValue (item' null);  	if (value == null) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: null"' indentstring' p.Name);  	} else if (!visited.ContainsKey (value)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  		visited [value] = null;  		PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (enumerable != null) {  	var enumerator = enumerable.GetEnumerator ();  	if (enumerator != null) {  		var remain = collectionlimit;  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: ["' indentstring' p.Name);  		if (enumerator.MoveNext ()) {  			any = true;  			writer.WriteLine ();  			PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  			remain--;  			while (enumerator.MoveNext ()) {  				writer.WriteLine ("'");  				if (remain == 0) {  					writer.Write ("...");  					break;  				}  				PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  				remain--;  			}  		}  		if (any) {  			writer.WriteLine ();  			writer.Write (indentstring);  		}  		writer.Write ("]");  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (enumerable != null) {  	var enumerator = enumerable.GetEnumerator ();  	if (enumerator != null) {  		var remain = collectionlimit;  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: ["' indentstring' p.Name);  		if (enumerator.MoveNext ()) {  			any = true;  			writer.WriteLine ();  			PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  			remain--;  			while (enumerator.MoveNext ()) {  				writer.WriteLine ("'");  				if (remain == 0) {  					writer.Write ("...");  					break;  				}  				PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  				remain--;  			}  		}  		if (any) {  			writer.WriteLine ();  			writer.Write (indentstring);  		}  		writer.Write ("]");  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (enumerator != null) {  	var remain = collectionlimit;  	if (first)  		first = false;  	else  		writer.WriteLine ();  	writer.Write ("{0}{1}: ["' indentstring' p.Name);  	if (enumerator.MoveNext ()) {  		any = true;  		writer.WriteLine ();  		PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  		remain--;  		while (enumerator.MoveNext ()) {  			writer.WriteLine ("'");  			if (remain == 0) {  				writer.Write ("...");  				break;  			}  			PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  			remain--;  		}  	}  	if (any) {  		writer.WriteLine ();  		writer.Write (indentstring);  	}  	writer.Write ("]");  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (enumerator != null) {  	var remain = collectionlimit;  	if (first)  		first = false;  	else  		writer.WriteLine ();  	writer.Write ("{0}{1}: ["' indentstring' p.Name);  	if (enumerator.MoveNext ()) {  		any = true;  		writer.WriteLine ();  		PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  		remain--;  		while (enumerator.MoveNext ()) {  			writer.WriteLine ("'");  			if (remain == 0) {  				writer.Write ("...");  				break;  			}  			PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  			remain--;  		}  	}  	if (any) {  		writer.WriteLine ();  		writer.Write (indentstring);  	}  	writer.Write ("]");  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (enumerator.MoveNext ()) {  	any = true;  	writer.WriteLine ();  	PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	remain--;  	while (enumerator.MoveNext ()) {  		writer.WriteLine ("'");  		if (remain == 0) {  			writer.Write ("...");  			break;  		}  		PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  		remain--;  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (enumerator.MoveNext ()) {  	any = true;  	writer.WriteLine ();  	PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	remain--;  	while (enumerator.MoveNext ()) {  		writer.WriteLine ("'");  		if (remain == 0) {  			writer.Write ("...");  			break;  		}  		PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  		remain--;  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: while (enumerator.MoveNext ()) {  	writer.WriteLine ("'");  	if (remain == 0) {  		writer.Write ("...");  		break;  	}  	PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	remain--;  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: PrintSerializeObject (enumerator.Current' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (recurseobjects) {  	var value = p.GetValue (item' null);  	if (value == null) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.Write ("{0}{1}: null"' indentstring' p.Name);  	} else if (!visited.ContainsKey (value)) {  		if (first)  			first = false;  		else  			writer.WriteLine ();  		writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  		visited [value] = null;  		PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  	}  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (value == null) {  	if (first)  		first = false;  	else  		writer.WriteLine ();  	writer.Write ("{0}{1}: null"' indentstring' p.Name);  } else if (!visited.ContainsKey (value)) {  	if (first)  		first = false;  	else  		writer.WriteLine ();  	writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  	visited [value] = null;  	PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: if (!visited.ContainsKey (value)) {  	if (first)  		first = false;  	else  		writer.WriteLine ();  	writer.WriteLine ("{0}{1}:"' indentstring' p.Name);  	visited [value] = null;  	PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  }  
Magic Number,Duplicati.Library.Utility,Utility,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Utility.cs,PrintSerializeObject,The following statement contains a magic number: PrintSerializeObject (value' writer' filter' recurseobjects' indentation + 4' collectionlimit' visited);  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,ClearQueue,The following statement contains a magic number: if (abortThread) {  	try {  		m_thread.Abort ();  		m_thread.Join (500);  	} catch {  	}  	m_thread = new Thread (new ThreadStart (Runner));  	m_thread.Start ();  }  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,ClearQueue,The following statement contains a magic number: try {  	m_thread.Abort ();  	m_thread.Join (500);  } catch {  }  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,ClearQueue,The following statement contains a magic number: m_thread.Join (500);  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: while (!m_terminate) {  	m_currentTask = null;  	lock (m_lock)  		if (m_state == WorkerThread<Tx>.RunState.Run && m_tasks.Count > 0)  			m_currentTask = m_tasks.Dequeue ();  	if (m_currentTask == null && !m_terminate)  		if (m_state == WorkerThread<Tx>.RunState.Run)  			m_event.WaitOne ();  		//Sleep until signaled  		else {  			if (WorkerStateChanged != null)  				WorkerStateChanged (this' m_state);  			//Sleep for brief periods' until signaled  			while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  				m_event.WaitOne (1000 * 60 * 5' false);  			//If we were not terminated' we are now ready to run  			if (!m_terminate) {  				m_state = WorkerThread<Tx>.RunState.Run;  				if (WorkerStateChanged != null)  					WorkerStateChanged (this' m_state);  			}  		}  	if (m_terminate)  		return;  	if (m_currentTask == null && m_state == WorkerThread<Tx>.RunState.Run)  		lock (m_lock)  			if (m_tasks.Count > 0)  				m_currentTask = m_tasks.Dequeue ();  	if (m_currentTask == null)  		continue;  	if (StartingWork != null)  		StartingWork (this' m_currentTask);  	try {  		m_active = true;  		m_delegate (m_currentTask);  	} catch (Exception ex) {  		try {  			System.Threading.Thread.ResetAbort ();  		} catch {  		}  		if (OnError != null)  			try {  				OnError (this' m_currentTask' ex);  			} catch {  			}  	} finally {  		try {  			System.Threading.Thread.ResetAbort ();  		} catch {  		}  		m_active = false;  	}  	var task = m_currentTask;  	m_currentTask = null;  	if (CompletedWork != null)  		try {  			CompletedWork (this' task);  		} catch (Exception ex) {  			try {  				OnError (this' task' ex);  			} catch {  			}  		}  }  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: while (!m_terminate) {  	m_currentTask = null;  	lock (m_lock)  		if (m_state == WorkerThread<Tx>.RunState.Run && m_tasks.Count > 0)  			m_currentTask = m_tasks.Dequeue ();  	if (m_currentTask == null && !m_terminate)  		if (m_state == WorkerThread<Tx>.RunState.Run)  			m_event.WaitOne ();  		//Sleep until signaled  		else {  			if (WorkerStateChanged != null)  				WorkerStateChanged (this' m_state);  			//Sleep for brief periods' until signaled  			while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  				m_event.WaitOne (1000 * 60 * 5' false);  			//If we were not terminated' we are now ready to run  			if (!m_terminate) {  				m_state = WorkerThread<Tx>.RunState.Run;  				if (WorkerStateChanged != null)  					WorkerStateChanged (this' m_state);  			}  		}  	if (m_terminate)  		return;  	if (m_currentTask == null && m_state == WorkerThread<Tx>.RunState.Run)  		lock (m_lock)  			if (m_tasks.Count > 0)  				m_currentTask = m_tasks.Dequeue ();  	if (m_currentTask == null)  		continue;  	if (StartingWork != null)  		StartingWork (this' m_currentTask);  	try {  		m_active = true;  		m_delegate (m_currentTask);  	} catch (Exception ex) {  		try {  			System.Threading.Thread.ResetAbort ();  		} catch {  		}  		if (OnError != null)  			try {  				OnError (this' m_currentTask' ex);  			} catch {  			}  	} finally {  		try {  			System.Threading.Thread.ResetAbort ();  		} catch {  		}  		m_active = false;  	}  	var task = m_currentTask;  	m_currentTask = null;  	if (CompletedWork != null)  		try {  			CompletedWork (this' task);  		} catch (Exception ex) {  			try {  				OnError (this' task' ex);  			} catch {  			}  		}  }  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: while (!m_terminate) {  	m_currentTask = null;  	lock (m_lock)  		if (m_state == WorkerThread<Tx>.RunState.Run && m_tasks.Count > 0)  			m_currentTask = m_tasks.Dequeue ();  	if (m_currentTask == null && !m_terminate)  		if (m_state == WorkerThread<Tx>.RunState.Run)  			m_event.WaitOne ();  		//Sleep until signaled  		else {  			if (WorkerStateChanged != null)  				WorkerStateChanged (this' m_state);  			//Sleep for brief periods' until signaled  			while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  				m_event.WaitOne (1000 * 60 * 5' false);  			//If we were not terminated' we are now ready to run  			if (!m_terminate) {  				m_state = WorkerThread<Tx>.RunState.Run;  				if (WorkerStateChanged != null)  					WorkerStateChanged (this' m_state);  			}  		}  	if (m_terminate)  		return;  	if (m_currentTask == null && m_state == WorkerThread<Tx>.RunState.Run)  		lock (m_lock)  			if (m_tasks.Count > 0)  				m_currentTask = m_tasks.Dequeue ();  	if (m_currentTask == null)  		continue;  	if (StartingWork != null)  		StartingWork (this' m_currentTask);  	try {  		m_active = true;  		m_delegate (m_currentTask);  	} catch (Exception ex) {  		try {  			System.Threading.Thread.ResetAbort ();  		} catch {  		}  		if (OnError != null)  			try {  				OnError (this' m_currentTask' ex);  			} catch {  			}  	} finally {  		try {  			System.Threading.Thread.ResetAbort ();  		} catch {  		}  		m_active = false;  	}  	var task = m_currentTask;  	m_currentTask = null;  	if (CompletedWork != null)  		try {  			CompletedWork (this' task);  		} catch (Exception ex) {  			try {  				OnError (this' task' ex);  			} catch {  			}  		}  }  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: if (m_currentTask == null && !m_terminate)  	if (m_state == WorkerThread<Tx>.RunState.Run)  		m_event.WaitOne ();  	//Sleep until signaled  	else {  		if (WorkerStateChanged != null)  			WorkerStateChanged (this' m_state);  		//Sleep for brief periods' until signaled  		while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  			m_event.WaitOne (1000 * 60 * 5' false);  		//If we were not terminated' we are now ready to run  		if (!m_terminate) {  			m_state = WorkerThread<Tx>.RunState.Run;  			if (WorkerStateChanged != null)  				WorkerStateChanged (this' m_state);  		}  	}  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: if (m_currentTask == null && !m_terminate)  	if (m_state == WorkerThread<Tx>.RunState.Run)  		m_event.WaitOne ();  	//Sleep until signaled  	else {  		if (WorkerStateChanged != null)  			WorkerStateChanged (this' m_state);  		//Sleep for brief periods' until signaled  		while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  			m_event.WaitOne (1000 * 60 * 5' false);  		//If we were not terminated' we are now ready to run  		if (!m_terminate) {  			m_state = WorkerThread<Tx>.RunState.Run;  			if (WorkerStateChanged != null)  				WorkerStateChanged (this' m_state);  		}  	}  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: if (m_currentTask == null && !m_terminate)  	if (m_state == WorkerThread<Tx>.RunState.Run)  		m_event.WaitOne ();  	//Sleep until signaled  	else {  		if (WorkerStateChanged != null)  			WorkerStateChanged (this' m_state);  		//Sleep for brief periods' until signaled  		while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  			m_event.WaitOne (1000 * 60 * 5' false);  		//If we were not terminated' we are now ready to run  		if (!m_terminate) {  			m_state = WorkerThread<Tx>.RunState.Run;  			if (WorkerStateChanged != null)  				WorkerStateChanged (this' m_state);  		}  	}  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: if (m_state == WorkerThread<Tx>.RunState.Run)  	m_event.WaitOne ();  //Sleep until signaled  else {  	if (WorkerStateChanged != null)  		WorkerStateChanged (this' m_state);  	//Sleep for brief periods' until signaled  	while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  		m_event.WaitOne (1000 * 60 * 5' false);  	//If we were not terminated' we are now ready to run  	if (!m_terminate) {  		m_state = WorkerThread<Tx>.RunState.Run;  		if (WorkerStateChanged != null)  			WorkerStateChanged (this' m_state);  	}  }  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: if (m_state == WorkerThread<Tx>.RunState.Run)  	m_event.WaitOne ();  //Sleep until signaled  else {  	if (WorkerStateChanged != null)  		WorkerStateChanged (this' m_state);  	//Sleep for brief periods' until signaled  	while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  		m_event.WaitOne (1000 * 60 * 5' false);  	//If we were not terminated' we are now ready to run  	if (!m_terminate) {  		m_state = WorkerThread<Tx>.RunState.Run;  		if (WorkerStateChanged != null)  			WorkerStateChanged (this' m_state);  	}  }  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: if (m_state == WorkerThread<Tx>.RunState.Run)  	m_event.WaitOne ();  //Sleep until signaled  else {  	if (WorkerStateChanged != null)  		WorkerStateChanged (this' m_state);  	//Sleep for brief periods' until signaled  	while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  		m_event.WaitOne (1000 * 60 * 5' false);  	//If we were not terminated' we are now ready to run  	if (!m_terminate) {  		m_state = WorkerThread<Tx>.RunState.Run;  		if (WorkerStateChanged != null)  			WorkerStateChanged (this' m_state);  	}  }  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  	m_event.WaitOne (1000 * 60 * 5' false);  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  	m_event.WaitOne (1000 * 60 * 5' false);  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: while (!m_terminate && m_state != WorkerThread<Tx>.RunState.Run)  	m_event.WaitOne (1000 * 60 * 5' false);  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: m_event.WaitOne (1000 * 60 * 5' false);  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: m_event.WaitOne (1000 * 60 * 5' false);  
Magic Number,Duplicati.Library.Utility,WorkerThread,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\WorkerThread.cs,Runner,The following statement contains a magic number: m_event.WaitOne (1000 * 60 * 5' false);  
Magic Number,Duplicati.Library.Utility,CommandLineParser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The following statement contains a magic number: for (int i = 0; i < args.Count; i++) {  	if (args [i].StartsWith ("--")) {  		string key = null;  		string value = null;  		if (args [i].IndexOf ("=") > 0) {  			key = args [i].Substring (0' args [i].IndexOf ("="));  			value = args [i].Substring (args [i].IndexOf ("=") + 1);  		} else  			key = args [i];  		//Skip the leading --  		key = key.Substring (2).ToLower ();  		if (!string.IsNullOrEmpty (value) && value.Length > 1 && value.StartsWith ("\"") && value.EndsWith ("\""))  			value = value.Substring (1' value.Length - 2);  		//Last argument overwrites the current  		if (parserCallback == null || parserCallback (key' value))  			options [key] = value;  		args.RemoveAt (i);  		i--;  	}  }  
Magic Number,Duplicati.Library.Utility,CommandLineParser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The following statement contains a magic number: for (int i = 0; i < args.Count; i++) {  	if (args [i].StartsWith ("--")) {  		string key = null;  		string value = null;  		if (args [i].IndexOf ("=") > 0) {  			key = args [i].Substring (0' args [i].IndexOf ("="));  			value = args [i].Substring (args [i].IndexOf ("=") + 1);  		} else  			key = args [i];  		//Skip the leading --  		key = key.Substring (2).ToLower ();  		if (!string.IsNullOrEmpty (value) && value.Length > 1 && value.StartsWith ("\"") && value.EndsWith ("\""))  			value = value.Substring (1' value.Length - 2);  		//Last argument overwrites the current  		if (parserCallback == null || parserCallback (key' value))  			options [key] = value;  		args.RemoveAt (i);  		i--;  	}  }  
Magic Number,Duplicati.Library.Utility,CommandLineParser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The following statement contains a magic number: if (args [i].StartsWith ("--")) {  	string key = null;  	string value = null;  	if (args [i].IndexOf ("=") > 0) {  		key = args [i].Substring (0' args [i].IndexOf ("="));  		value = args [i].Substring (args [i].IndexOf ("=") + 1);  	} else  		key = args [i];  	//Skip the leading --  	key = key.Substring (2).ToLower ();  	if (!string.IsNullOrEmpty (value) && value.Length > 1 && value.StartsWith ("\"") && value.EndsWith ("\""))  		value = value.Substring (1' value.Length - 2);  	//Last argument overwrites the current  	if (parserCallback == null || parserCallback (key' value))  		options [key] = value;  	args.RemoveAt (i);  	i--;  }  
Magic Number,Duplicati.Library.Utility,CommandLineParser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The following statement contains a magic number: if (args [i].StartsWith ("--")) {  	string key = null;  	string value = null;  	if (args [i].IndexOf ("=") > 0) {  		key = args [i].Substring (0' args [i].IndexOf ("="));  		value = args [i].Substring (args [i].IndexOf ("=") + 1);  	} else  		key = args [i];  	//Skip the leading --  	key = key.Substring (2).ToLower ();  	if (!string.IsNullOrEmpty (value) && value.Length > 1 && value.StartsWith ("\"") && value.EndsWith ("\""))  		value = value.Substring (1' value.Length - 2);  	//Last argument overwrites the current  	if (parserCallback == null || parserCallback (key' value))  		options [key] = value;  	args.RemoveAt (i);  	i--;  }  
Magic Number,Duplicati.Library.Utility,CommandLineParser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The following statement contains a magic number: key = key.Substring (2).ToLower ();  
Magic Number,Duplicati.Library.Utility,CommandLineParser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The following statement contains a magic number: if (!string.IsNullOrEmpty (value) && value.Length > 1 && value.StartsWith ("\"") && value.EndsWith ("\""))  	value = value.Substring (1' value.Length - 2);  
Magic Number,Duplicati.Library.Utility,CommandLineParser,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\CommandLineParser.cs,ExtractOptions,The following statement contains a magic number: value = value.Substring (1' value.Length - 2);  
Magic Number,Duplicati.Library.Utility,Uri,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlDecode,The following statement contains a magic number: return RE_NUMBER.Replace (value' m => {  	if (m.Value == "+")  		return " ";  	try {  		var hex = m.Groups ["number"].Value;  		var bytelen = hex.Length / 2;  		Utility.HexStringAsByteArray (hex' inbuf);  		var c = decoder.GetChars (inbuf' 0' bytelen' outbuf' 0);  		return new string (outbuf' 0' c);  	} catch {  	}  	//Fallback  	return m.Value;  });  
Magic Number,Duplicati.Library.Utility,Uri,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\Uri.cs,UrlDecode,The following statement contains a magic number: try {  	var hex = m.Groups ["number"].Value;  	var bytelen = hex.Length / 2;  	Utility.HexStringAsByteArray (hex' inbuf);  	var c = decoder.GetChars (inbuf' 0' bytelen' outbuf' 0);  	return new string (outbuf' 0' c);  } catch {  }  
Magic Number,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,Expand,The following statement contains a magic number: if (filter.Length < 2 || (filter.StartsWith ("[") && filter.EndsWith ("]")))  	return new string[] {  		filter  	};  else  	return filter.Split (new char[] {  		System.IO.Path.PathSeparator  	}' StringSplitOptions.RemoveEmptyEntries);  
Magic Number,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,AnalyzeFilters,The following statement contains a magic number: if (cacheLookup == null) {  	var q = new Queue<IFilter> ();  	q.Enqueue (filter);  	while (q.Count > 0) {  		var p = q.Dequeue ();  		if (p == null || p.Empty)  			continue;  		else if (p is FilterExpression) {  			if (((FilterExpression)p).Result)  				includes = true;  			else  				excludes = true;  		} else if (p is JoinedFilterExpression) {  			q.Enqueue (((JoinedFilterExpression)p).First);  			q.Enqueue (((JoinedFilterExpression)p).Second);  		}  	}  	// Populate the cache  	lock (_matchLock) {  		if (_matchFallbackLookup.Count > 10)  			_matchFallbackLookup.Remove (_matchFallbackLookup.Keys.Skip (new Random ().Next (0' _matchFallbackLookup.Count)).First ());  		_matchFallbackLookup [filter] = new Tuple<bool' bool> (includes' excludes);  	}  }  
Magic Number,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,AnalyzeFilters,The following statement contains a magic number: lock (_matchLock) {  	if (_matchFallbackLookup.Count > 10)  		_matchFallbackLookup.Remove (_matchFallbackLookup.Keys.Skip (new Random ().Next (0' _matchFallbackLookup.Count)).First ());  	_matchFallbackLookup [filter] = new Tuple<bool' bool> (includes' excludes);  }  
Magic Number,Duplicati.Library.Utility,FilterExpression,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FilterExpression.cs,AnalyzeFilters,The following statement contains a magic number: if (_matchFallbackLookup.Count > 10)  	_matchFallbackLookup.Remove (_matchFallbackLookup.Keys.Skip (new Random ().Next (0' _matchFallbackLookup.Count)).First ());  
Magic Number,Duplicati.Library.Utility,FileBackedList,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,FileBackedList,The following statement contains a magic number: this.SwitchToFileLimit = 2 * 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,FileBackedList,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,FileBackedList,The following statement contains a magic number: this.SwitchToFileLimit = 2 * 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,FileBackedList,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,FileBackedList,The following statement contains a magic number: this.SwitchToFileLimit = 2 * 1024 * 1024;  
Magic Number,Duplicati.Library.Utility,FileBackedList,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Utility\FileBackedList.cs,Add,The following statement contains a magic number: m_stream.Write (BitConverter.GetBytes (size)' 0' 8);  
