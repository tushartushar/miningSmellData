Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,UploadFile,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,handleDropboxException,Cyclomatic complexity of the method is 11
Long Statement,Duplicati.Library.Backend,Dropbox,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\Dropbox.cs,List,The length of the statement  "		if (de.errorJSON ["error"] [".tag"].ToString () == "path" && de.errorJSON ["error"] ["path"] [".tag"].ToString () == "not_found") " is 129.
Long Statement,Duplicati.Library.Backend,Dropbox,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\Dropbox.cs,CreateFolder,The length of the statement  "		if (de.errorJSON ["error"] [".tag"].ToString () == "path" && de.errorJSON ["error"] ["path"] [".tag"].ToString () == "conflict") " is 128.
Empty Catch Block,Duplicati.Library.Backend,Dropbox,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\Dropbox.cs,ParseEntry,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,handleDropboxException,The method has an empty catch block.
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,UploadFile,The following statement contains a magic number: req.Timeout = 200000;  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,UploadFile,The following statement contains a magic number: while (globalBytesRead < (ulong)stream.Length) {  	var remaining = (ulong)stream.Length - globalBytesRead;  	// start an append request  	var usaa = new UploadSessionAppendArg ();  	usaa.cursor.session_id = ussr.session_id;  	usaa.cursor.offset = globalBytesRead;  	usaa.close = remaining < DROPBOX_MAX_CHUNK_UPLOAD;  	url = string.Format ("{0}/files/upload_session/append_v2"' CONTENT_API_URL);  	chunksize = (int)Math.Min (DROPBOX_MAX_CHUNK_UPLOAD' (long)remaining);  	req = CreateRequest (url' "POST");  	req.Headers [API_ARG_HEADER] = JsonConvert.SerializeObject (usaa);  	req.ContentType = "application/octet-stream";  	req.ContentLength = chunksize;  	req.Timeout = 200000;  	areq = new AsyncHttpRequest (req);  	int bytesReadInRequest = 0;  	using (var rs = areq.GetRequestStream ()) {  		int bytesRead = 0;  		do {  			bytesRead = stream.Read (buffer' 0' Math.Min (chunksize' (int)Utility.Utility.DEFAULT_BUFFER_SIZE));  			bytesReadInRequest += bytesRead;  			globalBytesRead += (ulong)bytesRead;  			rs.Write (buffer' 0' bytesRead);  		} while (bytesRead > 0 && bytesReadInRequest < chunksize);  	}  	using (var response = GetResponse (areq))  		using (var sr = new StreamReader (response.GetResponseStream ()))  			sr.ReadToEnd ();  }  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,UploadFile,The following statement contains a magic number: req.Timeout = 200000;  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,UploadFile,The following statement contains a magic number: try {  	var usfa = new UploadSessionFinishArg ();  	usfa.cursor.session_id = ussr.session_id;  	usfa.cursor.offset = (ulong)globalBytesRead;  	usfa.commit.path = path;  	url = string.Format ("{0}/files/upload_session/finish"' CONTENT_API_URL);  	req = CreateRequest (url' "POST");  	req.Headers [API_ARG_HEADER] = JsonConvert.SerializeObject (usfa);  	req.ContentType = "application/octet-stream";  	req.Timeout = 200000;  	return ReadJSONResponse<FileMetaData> (req);  } catch (Exception ex) {  	handleDropboxException (ex' true);  	throw;  }  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,UploadFile,The following statement contains a magic number: req.Timeout = 200000;  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,handleDropboxException,The following statement contains a magic number: if (ex is WebException) {  	string json = string.Empty;  	try {  		using (var sr = new StreamReader (((WebException)ex).Response.GetResponseStream ()))  			json = sr.ReadToEnd ();  	} catch {  	}  	// Special mapping for exceptions:  	//    https://www.dropbox.com/developers-v1/core/docs  	if (((WebException)ex).Response is HttpWebResponse) {  		var httpResp = ((WebException)ex).Response as HttpWebResponse;  		if (httpResp.StatusCode == HttpStatusCode.NotFound) {  			if (filerequest)  				throw new Duplicati.Library.Interface.FileMissingException (json);  			else  				throw new Duplicati.Library.Interface.FolderMissingException (json);  		}  		if (httpResp.StatusCode == HttpStatusCode.Conflict) {  			//TODO: Should actually parse and see if something else happens  			if (filerequest)  				throw new Duplicati.Library.Interface.FileMissingException (json);  			else  				throw new Duplicati.Library.Interface.FolderMissingException (json);  		}  		if (httpResp.StatusCode == HttpStatusCode.Unauthorized)  			ThrowAuthException (json' ex);  		if ((int)httpResp.StatusCode == 429 || (int)httpResp.StatusCode == 507)  			ThrowOverQuotaError ();  	}  	throw new DropboxException () {  		errorJSON = JObject.Parse (json)  	};  }  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,handleDropboxException,The following statement contains a magic number: if (ex is WebException) {  	string json = string.Empty;  	try {  		using (var sr = new StreamReader (((WebException)ex).Response.GetResponseStream ()))  			json = sr.ReadToEnd ();  	} catch {  	}  	// Special mapping for exceptions:  	//    https://www.dropbox.com/developers-v1/core/docs  	if (((WebException)ex).Response is HttpWebResponse) {  		var httpResp = ((WebException)ex).Response as HttpWebResponse;  		if (httpResp.StatusCode == HttpStatusCode.NotFound) {  			if (filerequest)  				throw new Duplicati.Library.Interface.FileMissingException (json);  			else  				throw new Duplicati.Library.Interface.FolderMissingException (json);  		}  		if (httpResp.StatusCode == HttpStatusCode.Conflict) {  			//TODO: Should actually parse and see if something else happens  			if (filerequest)  				throw new Duplicati.Library.Interface.FileMissingException (json);  			else  				throw new Duplicati.Library.Interface.FolderMissingException (json);  		}  		if (httpResp.StatusCode == HttpStatusCode.Unauthorized)  			ThrowAuthException (json' ex);  		if ((int)httpResp.StatusCode == 429 || (int)httpResp.StatusCode == 507)  			ThrowOverQuotaError ();  	}  	throw new DropboxException () {  		errorJSON = JObject.Parse (json)  	};  }  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,handleDropboxException,The following statement contains a magic number: if (((WebException)ex).Response is HttpWebResponse) {  	var httpResp = ((WebException)ex).Response as HttpWebResponse;  	if (httpResp.StatusCode == HttpStatusCode.NotFound) {  		if (filerequest)  			throw new Duplicati.Library.Interface.FileMissingException (json);  		else  			throw new Duplicati.Library.Interface.FolderMissingException (json);  	}  	if (httpResp.StatusCode == HttpStatusCode.Conflict) {  		//TODO: Should actually parse and see if something else happens  		if (filerequest)  			throw new Duplicati.Library.Interface.FileMissingException (json);  		else  			throw new Duplicati.Library.Interface.FolderMissingException (json);  	}  	if (httpResp.StatusCode == HttpStatusCode.Unauthorized)  		ThrowAuthException (json' ex);  	if ((int)httpResp.StatusCode == 429 || (int)httpResp.StatusCode == 507)  		ThrowOverQuotaError ();  }  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,handleDropboxException,The following statement contains a magic number: if (((WebException)ex).Response is HttpWebResponse) {  	var httpResp = ((WebException)ex).Response as HttpWebResponse;  	if (httpResp.StatusCode == HttpStatusCode.NotFound) {  		if (filerequest)  			throw new Duplicati.Library.Interface.FileMissingException (json);  		else  			throw new Duplicati.Library.Interface.FolderMissingException (json);  	}  	if (httpResp.StatusCode == HttpStatusCode.Conflict) {  		//TODO: Should actually parse and see if something else happens  		if (filerequest)  			throw new Duplicati.Library.Interface.FileMissingException (json);  		else  			throw new Duplicati.Library.Interface.FolderMissingException (json);  	}  	if (httpResp.StatusCode == HttpStatusCode.Unauthorized)  		ThrowAuthException (json' ex);  	if ((int)httpResp.StatusCode == 429 || (int)httpResp.StatusCode == 507)  		ThrowOverQuotaError ();  }  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,handleDropboxException,The following statement contains a magic number: if ((int)httpResp.StatusCode == 429 || (int)httpResp.StatusCode == 507)  	ThrowOverQuotaError ();  
Magic Number,Duplicati.Library.Backend,DropboxHelper,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\Backend\Dropbox\DropboxHelper.cs,handleDropboxException,The following statement contains a magic number: if ((int)httpResp.StatusCode == 429 || (int)httpResp.StatusCode == 507)  	ThrowOverQuotaError ();  
