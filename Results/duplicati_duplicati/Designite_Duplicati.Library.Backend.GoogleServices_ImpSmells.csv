Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunckedUploadWithResume,The method has 5 parameters. Parameters: oauth' requestdata' url' stream' method
Long Statement,Duplicati.Library.Backend.GoogleCloudStorage,GoogleCloudStorage,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCloudStorage.cs,Delete,The length of the statement  "            var url = string.Format("{0}/b/{1}/o/{2}"' API_URL' m_bucket' Library.Utility.Uri.UrlPathEncode(m_prefix + remotename)); " is 120.
Long Statement,Duplicati.Library.Backend.GoogleCloudStorage,GoogleCloudStorage,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCloudStorage.cs,Get,The length of the statement  "                var url = string.Format("{0}/b/{1}/o/{2}?alt=media"' API_URL' m_bucket' Library.Utility.Uri.UrlPathEncode(m_prefix + remotename)); " is 130.
Long Statement,Duplicati.Library.Backend.Strings,GoogleCloudStorage,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\Strings.cs,LocationDescriptionLong,The length of the statement  "{ return LC.L(@"This option is only used when creating new buckets. Use this option to change what region the data is stored in. Charges vary with bucket location. Known bucket locations: " is 187.
Long Statement,Duplicati.Library.Backend.Strings,GoogleCloudStorage,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\Strings.cs,StorageclassDescriptionLong,The length of the statement  "{ return LC.L(@"This option is only used when creating new buckets. Use this option to change what storage type the bucket has. Charges and functionality vary with bucket storage class. Known storage classes: " is 208.
Long Statement,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,QueryUploadRange,The length of the statement  "{             response = null;             var req = oauth.CreateRequest(uploaduri);             req.Method = "PUT";             req.ContentLength = 0;             req.Headers["Content-Range"] = string.Format("bytes */{0}"' streamlength);              var areq = new AsyncHttpRequest(req);             using(var resp = oauth.GetResponseWithoutException(areq))             {                 var code = (int)resp.StatusCode;                  // If the upload is completed' we get 201 or 200                 if (code >= 200 && code <= 299)                 {                     response = oauth.ReadJSONResponse<T>(resp);                     if (response == null)                         throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                                          return streamlength;                 }                  if (code == 308)                 {                     // A lack of a Range header is undocumented'                      // but seems to occur when no data has reached the server:                     // https://code.google.com/a/google.com/p/apps-api-issues/issues/detail?id=3884                      if (resp.Headers["Range"] == null)                         return 0;                      else                         return long.Parse(resp.Headers["Range"].Split(new char[] { '-' })[1]) + 1;                 }                 else                     throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);             }         }" is 1597.
Long Statement,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunckedUploadWithResume,The length of the statement  "{             var data = requestdata == null ? null : System.Text.Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(requestdata));              var req = oauth.CreateRequest(url);             req.Method = method;             req.ContentLength = data == null ? 0 : data.Length;              if (data != null)                 req.ContentType = "application/json; charset=UTF-8";                          req.Headers["X-Upload-Content-Type"] = "application/octet-stream";             req.Headers["X-Upload-Content-Length"] = stream.Length.ToString();              var areq = new AsyncHttpRequest(req);             if (data != null)                 using(var rs = areq.GetRequestStream())                     rs.Write(data' 0' data.Length);              string uploaduri;             using(var resp = (HttpWebResponse)areq.GetResponse())             {                 if (resp.StatusCode != HttpStatusCode.OK || string.IsNullOrWhiteSpace(resp.Headers["Location"]))                     throw new WebException("Failed to start upload session"' null' WebExceptionStatus.UnknownError' resp);                  uploaduri = resp.Headers["Location"];             }              return ChunkedUpload<TResponse>(oauth' uploaduri' stream);         }" is 1235.
Long Statement,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunkedUpload,The length of the statement  "{             var queryRange = false;             var retries = 0;             var offset = 0L;             var buffer = new byte[Library.Utility.Utility.DEFAULT_BUFFER_SIZE];              // Repeatedly try uploading until all retries are done             while(true)             {                 try                 {                     if (queryRange)                     {                         T re;                         offset = GoogleCommon.QueryUploadRange(oauth' uploaduri' stream.Length' out re);                         queryRange = false;                          if (re != null)                             return re;                     }                      //Seek into the right place                     if (stream.Position != offset)                         stream.Position = offset;                      var req = oauth.CreateRequest(uploaduri);                     req.Method = "PUT";                     req.ContentType = "application/octet-stream";                      var chunkSize = Math.Min(UPLOAD_CHUNK_SIZE' stream.Length - offset);                      req.ContentLength = chunkSize;                     req.Headers["Content-Range"] = string.Format("bytes {0}-{1}/{2}"' offset' offset + chunkSize - 1' stream.Length);;                      // Upload the remaining data                     var areq = new AsyncHttpRequest(req);                     using(var rs = areq.GetRequestStream())                     {                         var remaining = chunkSize;                         while(remaining > 0)                         {                             var n = stream.Read(buffer' 0' (int)Math.Min(remaining' Library.Utility.Utility.DEFAULT_BUFFER_SIZE));                             rs.Write(buffer' 0' n);                             remaining -= n;                         }                     }                      // Check the response                     using(var resp = oauth.GetResponseWithoutException(areq))                     {                         var code = (int)resp.StatusCode;                          if (code == 308 && resp.Headers["Range"] != null)                         {                             offset = long.Parse(resp.Headers["Range"].Split(new char[] {'-'})[1]) + 1;                             retries = 0;                         }                         else if (code >= 200 && code <= 299)                         {                             offset += chunkSize;                             if (offset != stream.Length)                                 throw new Exception(string.Format("Upload succeeded prematurely. Uploaded: {0}' total size: {1}"' offset' stream.Length));                              //Verify that the response is also valid                             var res = oauth.ReadJSONResponse<T>(resp);                             if (res == null)                                 throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                              return res;                         }                         else                         {                             throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);                         }                     }                 }                 catch (Exception ex)                 {                     var retry = false;                      // If we get a 5xx error' or some network issue' we retry                     if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                     {                         var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                         retry = code >= 500 && code <= 599;                     }                     else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                     {                         retry = true;                     }                      // Retry with exponential backoff                     if (retry && retries < 5)                     {                         System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                         retries++;                          // Ask server where we left off                         queryRange = true;                     }                     else                         throw;                 }             }         }" is 4568.
Long Statement,Duplicati.Library.Backend.GoogleServices,GCSConfig,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GCSConfig.cs,Execute,The length of the statement  "{             string k;             options.TryGetValue(KEY_CONFIGTYPE' out k);             if (string.IsNullOrWhiteSpace(k))                 k = DEFAULT_CONFIG_TYPE_STR;              ConfigType ct;             if (!Enum.TryParse<ConfigType>(k' true' out ct))                 ct = DEFAULT_CONFIG_TYPE;              switch (ct)             {                 case ConfigType.StorageClasses:                     return GoogleCloudStorage.GoogleCloudStorage.KNOWN_GCS_STORAGE_CLASSES.ToDictionary((x) => x.Key' (y) => y.Value);                 default:                     return GoogleCloudStorage.GoogleCloudStorage.KNOWN_GCS_LOCATIONS.ToDictionary((x) => x.Key' (y) => y.Value);             }         }" is 701.
Long Statement,Duplicati.Library.Backend.GoogleDrive,GoogleDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleDrive.cs,Put,The length of the statement  "                var res = GoogleCommon.ChunckedUploadWithResume<GoogleDriveFolderItem' GoogleDriveFolderItem>(m_oauth' item' url' stream' isUpdate ? "PUT" : "POST"); " is 149.
Long Statement,Duplicati.Library.Backend.GoogleDrive,GoogleDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleDrive.cs,List,The length of the statement  "                // This way' other operations which require a fully populated file cache will see an empty one and can populate it themselves. " is 126.
Long Statement,Duplicati.Library.Backend.GoogleDrive,GoogleDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleDrive.cs,ListFolder,The length of the statement  "            var url = string.Format("{0}/files?q={1}"' DRIVE_API_URL' Library.Utility.Uri.UrlEncode(string.Join(" and "' p.Where(x => x != null)))); " is 136.
Long Statement,Duplicati.Library.Backend.GoogleDrive,GoogleDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleDrive.cs,ListFolder,The length of the statement  "                var res = m_oauth.GetJSONData<GoogleDriveListResponse>(url + (string.IsNullOrWhiteSpace(token) ? "" : "&pageToken=" + Library.Utility.Uri.UrlEncode(token))); " is 157.
Complex Conditional,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunkedUpload,The conditional expression  "ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException"  is complex.
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,QueryUploadRange,The following statement contains a magic number: using(var resp = oauth.GetResponseWithoutException(areq))             {                 var code = (int)resp.StatusCode;                  // If the upload is completed' we get 201 or 200                 if (code >= 200 && code <= 299)                 {                     response = oauth.ReadJSONResponse<T>(resp);                     if (response == null)                         throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                                          return streamlength;                 }                  if (code == 308)                 {                     // A lack of a Range header is undocumented'                      // but seems to occur when no data has reached the server:                     // https://code.google.com/a/google.com/p/apps-api-issues/issues/detail?id=3884                      if (resp.Headers["Range"] == null)                         return 0;                      else                         return long.Parse(resp.Headers["Range"].Split(new char[] { '-' })[1]) + 1;                 }                 else                     throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);             }
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,QueryUploadRange,The following statement contains a magic number: using(var resp = oauth.GetResponseWithoutException(areq))             {                 var code = (int)resp.StatusCode;                  // If the upload is completed' we get 201 or 200                 if (code >= 200 && code <= 299)                 {                     response = oauth.ReadJSONResponse<T>(resp);                     if (response == null)                         throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                                          return streamlength;                 }                  if (code == 308)                 {                     // A lack of a Range header is undocumented'                      // but seems to occur when no data has reached the server:                     // https://code.google.com/a/google.com/p/apps-api-issues/issues/detail?id=3884                      if (resp.Headers["Range"] == null)                         return 0;                      else                         return long.Parse(resp.Headers["Range"].Split(new char[] { '-' })[1]) + 1;                 }                 else                     throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);             }
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,QueryUploadRange,The following statement contains a magic number: using(var resp = oauth.GetResponseWithoutException(areq))             {                 var code = (int)resp.StatusCode;                  // If the upload is completed' we get 201 or 200                 if (code >= 200 && code <= 299)                 {                     response = oauth.ReadJSONResponse<T>(resp);                     if (response == null)                         throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                                          return streamlength;                 }                  if (code == 308)                 {                     // A lack of a Range header is undocumented'                      // but seems to occur when no data has reached the server:                     // https://code.google.com/a/google.com/p/apps-api-issues/issues/detail?id=3884                      if (resp.Headers["Range"] == null)                         return 0;                      else                         return long.Parse(resp.Headers["Range"].Split(new char[] { '-' })[1]) + 1;                 }                 else                     throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);             }
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunkedUpload,The following statement contains a magic number: while(true)             {                 try                 {                     if (queryRange)                     {                         T re;                         offset = GoogleCommon.QueryUploadRange(oauth' uploaduri' stream.Length' out re);                         queryRange = false;                          if (re != null)                             return re;                     }                      //Seek into the right place                     if (stream.Position != offset)                         stream.Position = offset;                      var req = oauth.CreateRequest(uploaduri);                     req.Method = "PUT";                     req.ContentType = "application/octet-stream";                      var chunkSize = Math.Min(UPLOAD_CHUNK_SIZE' stream.Length - offset);                      req.ContentLength = chunkSize;                     req.Headers["Content-Range"] = string.Format("bytes {0}-{1}/{2}"' offset' offset + chunkSize - 1' stream.Length);;                      // Upload the remaining data                     var areq = new AsyncHttpRequest(req);                     using(var rs = areq.GetRequestStream())                     {                         var remaining = chunkSize;                         while(remaining > 0)                         {                             var n = stream.Read(buffer' 0' (int)Math.Min(remaining' Library.Utility.Utility.DEFAULT_BUFFER_SIZE));                             rs.Write(buffer' 0' n);                             remaining -= n;                         }                     }                      // Check the response                     using(var resp = oauth.GetResponseWithoutException(areq))                     {                         var code = (int)resp.StatusCode;                          if (code == 308 && resp.Headers["Range"] != null)                         {                             offset = long.Parse(resp.Headers["Range"].Split(new char[] {'-'})[1]) + 1;                             retries = 0;                         }                         else if (code >= 200 && code <= 299)                         {                             offset += chunkSize;                             if (offset != stream.Length)                                 throw new Exception(string.Format("Upload succeeded prematurely. Uploaded: {0}' total size: {1}"' offset' stream.Length));                              //Verify that the response is also valid                             var res = oauth.ReadJSONResponse<T>(resp);                             if (res == null)                                 throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                              return res;                         }                         else                         {                             throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);                         }                     }                 }                 catch (Exception ex)                 {                     var retry = false;                      // If we get a 5xx error' or some network issue' we retry                     if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                     {                         var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                         retry = code >= 500 && code <= 599;                     }                     else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                     {                         retry = true;                     }                      // Retry with exponential backoff                     if (retry && retries < 5)                     {                         System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                         retries++;                          // Ask server where we left off                         queryRange = true;                     }                     else                         throw;                 }             }
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunkedUpload,The following statement contains a magic number: while(true)             {                 try                 {                     if (queryRange)                     {                         T re;                         offset = GoogleCommon.QueryUploadRange(oauth' uploaduri' stream.Length' out re);                         queryRange = false;                          if (re != null)                             return re;                     }                      //Seek into the right place                     if (stream.Position != offset)                         stream.Position = offset;                      var req = oauth.CreateRequest(uploaduri);                     req.Method = "PUT";                     req.ContentType = "application/octet-stream";                      var chunkSize = Math.Min(UPLOAD_CHUNK_SIZE' stream.Length - offset);                      req.ContentLength = chunkSize;                     req.Headers["Content-Range"] = string.Format("bytes {0}-{1}/{2}"' offset' offset + chunkSize - 1' stream.Length);;                      // Upload the remaining data                     var areq = new AsyncHttpRequest(req);                     using(var rs = areq.GetRequestStream())                     {                         var remaining = chunkSize;                         while(remaining > 0)                         {                             var n = stream.Read(buffer' 0' (int)Math.Min(remaining' Library.Utility.Utility.DEFAULT_BUFFER_SIZE));                             rs.Write(buffer' 0' n);                             remaining -= n;                         }                     }                      // Check the response                     using(var resp = oauth.GetResponseWithoutException(areq))                     {                         var code = (int)resp.StatusCode;                          if (code == 308 && resp.Headers["Range"] != null)                         {                             offset = long.Parse(resp.Headers["Range"].Split(new char[] {'-'})[1]) + 1;                             retries = 0;                         }                         else if (code >= 200 && code <= 299)                         {                             offset += chunkSize;                             if (offset != stream.Length)                                 throw new Exception(string.Format("Upload succeeded prematurely. Uploaded: {0}' total size: {1}"' offset' stream.Length));                              //Verify that the response is also valid                             var res = oauth.ReadJSONResponse<T>(resp);                             if (res == null)                                 throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                              return res;                         }                         else                         {                             throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);                         }                     }                 }                 catch (Exception ex)                 {                     var retry = false;                      // If we get a 5xx error' or some network issue' we retry                     if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                     {                         var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                         retry = code >= 500 && code <= 599;                     }                     else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                     {                         retry = true;                     }                      // Retry with exponential backoff                     if (retry && retries < 5)                     {                         System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                         retries++;                          // Ask server where we left off                         queryRange = true;                     }                     else                         throw;                 }             }
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunkedUpload,The following statement contains a magic number: while(true)             {                 try                 {                     if (queryRange)                     {                         T re;                         offset = GoogleCommon.QueryUploadRange(oauth' uploaduri' stream.Length' out re);                         queryRange = false;                          if (re != null)                             return re;                     }                      //Seek into the right place                     if (stream.Position != offset)                         stream.Position = offset;                      var req = oauth.CreateRequest(uploaduri);                     req.Method = "PUT";                     req.ContentType = "application/octet-stream";                      var chunkSize = Math.Min(UPLOAD_CHUNK_SIZE' stream.Length - offset);                      req.ContentLength = chunkSize;                     req.Headers["Content-Range"] = string.Format("bytes {0}-{1}/{2}"' offset' offset + chunkSize - 1' stream.Length);;                      // Upload the remaining data                     var areq = new AsyncHttpRequest(req);                     using(var rs = areq.GetRequestStream())                     {                         var remaining = chunkSize;                         while(remaining > 0)                         {                             var n = stream.Read(buffer' 0' (int)Math.Min(remaining' Library.Utility.Utility.DEFAULT_BUFFER_SIZE));                             rs.Write(buffer' 0' n);                             remaining -= n;                         }                     }                      // Check the response                     using(var resp = oauth.GetResponseWithoutException(areq))                     {                         var code = (int)resp.StatusCode;                          if (code == 308 && resp.Headers["Range"] != null)                         {                             offset = long.Parse(resp.Headers["Range"].Split(new char[] {'-'})[1]) + 1;                             retries = 0;                         }                         else if (code >= 200 && code <= 299)                         {                             offset += chunkSize;                             if (offset != stream.Length)                                 throw new Exception(string.Format("Upload succeeded prematurely. Uploaded: {0}' total size: {1}"' offset' stream.Length));                              //Verify that the response is also valid                             var res = oauth.ReadJSONResponse<T>(resp);                             if (res == null)                                 throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                              return res;                         }                         else                         {                             throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);                         }                     }                 }                 catch (Exception ex)                 {                     var retry = false;                      // If we get a 5xx error' or some network issue' we retry                     if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                     {                         var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                         retry = code >= 500 && code <= 599;                     }                     else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                     {                         retry = true;                     }                      // Retry with exponential backoff                     if (retry && retries < 5)                     {                         System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                         retries++;                          // Ask server where we left off                         queryRange = true;                     }                     else                         throw;                 }             }
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunkedUpload,The following statement contains a magic number: while(true)             {                 try                 {                     if (queryRange)                     {                         T re;                         offset = GoogleCommon.QueryUploadRange(oauth' uploaduri' stream.Length' out re);                         queryRange = false;                          if (re != null)                             return re;                     }                      //Seek into the right place                     if (stream.Position != offset)                         stream.Position = offset;                      var req = oauth.CreateRequest(uploaduri);                     req.Method = "PUT";                     req.ContentType = "application/octet-stream";                      var chunkSize = Math.Min(UPLOAD_CHUNK_SIZE' stream.Length - offset);                      req.ContentLength = chunkSize;                     req.Headers["Content-Range"] = string.Format("bytes {0}-{1}/{2}"' offset' offset + chunkSize - 1' stream.Length);;                      // Upload the remaining data                     var areq = new AsyncHttpRequest(req);                     using(var rs = areq.GetRequestStream())                     {                         var remaining = chunkSize;                         while(remaining > 0)                         {                             var n = stream.Read(buffer' 0' (int)Math.Min(remaining' Library.Utility.Utility.DEFAULT_BUFFER_SIZE));                             rs.Write(buffer' 0' n);                             remaining -= n;                         }                     }                      // Check the response                     using(var resp = oauth.GetResponseWithoutException(areq))                     {                         var code = (int)resp.StatusCode;                          if (code == 308 && resp.Headers["Range"] != null)                         {                             offset = long.Parse(resp.Headers["Range"].Split(new char[] {'-'})[1]) + 1;                             retries = 0;                         }                         else if (code >= 200 && code <= 299)                         {                             offset += chunkSize;                             if (offset != stream.Length)                                 throw new Exception(string.Format("Upload succeeded prematurely. Uploaded: {0}' total size: {1}"' offset' stream.Length));                              //Verify that the response is also valid                             var res = oauth.ReadJSONResponse<T>(resp);                             if (res == null)                                 throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                              return res;                         }                         else                         {                             throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);                         }                     }                 }                 catch (Exception ex)                 {                     var retry = false;                      // If we get a 5xx error' or some network issue' we retry                     if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                     {                         var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                         retry = code >= 500 && code <= 599;                     }                     else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                     {                         retry = true;                     }                      // Retry with exponential backoff                     if (retry && retries < 5)                     {                         System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                         retries++;                          // Ask server where we left off                         queryRange = true;                     }                     else                         throw;                 }             }
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunkedUpload,The following statement contains a magic number: while(true)             {                 try                 {                     if (queryRange)                     {                         T re;                         offset = GoogleCommon.QueryUploadRange(oauth' uploaduri' stream.Length' out re);                         queryRange = false;                          if (re != null)                             return re;                     }                      //Seek into the right place                     if (stream.Position != offset)                         stream.Position = offset;                      var req = oauth.CreateRequest(uploaduri);                     req.Method = "PUT";                     req.ContentType = "application/octet-stream";                      var chunkSize = Math.Min(UPLOAD_CHUNK_SIZE' stream.Length - offset);                      req.ContentLength = chunkSize;                     req.Headers["Content-Range"] = string.Format("bytes {0}-{1}/{2}"' offset' offset + chunkSize - 1' stream.Length);;                      // Upload the remaining data                     var areq = new AsyncHttpRequest(req);                     using(var rs = areq.GetRequestStream())                     {                         var remaining = chunkSize;                         while(remaining > 0)                         {                             var n = stream.Read(buffer' 0' (int)Math.Min(remaining' Library.Utility.Utility.DEFAULT_BUFFER_SIZE));                             rs.Write(buffer' 0' n);                             remaining -= n;                         }                     }                      // Check the response                     using(var resp = oauth.GetResponseWithoutException(areq))                     {                         var code = (int)resp.StatusCode;                          if (code == 308 && resp.Headers["Range"] != null)                         {                             offset = long.Parse(resp.Headers["Range"].Split(new char[] {'-'})[1]) + 1;                             retries = 0;                         }                         else if (code >= 200 && code <= 299)                         {                             offset += chunkSize;                             if (offset != stream.Length)                                 throw new Exception(string.Format("Upload succeeded prematurely. Uploaded: {0}' total size: {1}"' offset' stream.Length));                              //Verify that the response is also valid                             var res = oauth.ReadJSONResponse<T>(resp);                             if (res == null)                                 throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                              return res;                         }                         else                         {                             throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);                         }                     }                 }                 catch (Exception ex)                 {                     var retry = false;                      // If we get a 5xx error' or some network issue' we retry                     if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                     {                         var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                         retry = code >= 500 && code <= 599;                     }                     else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                     {                         retry = true;                     }                      // Retry with exponential backoff                     if (retry && retries < 5)                     {                         System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                         retries++;                          // Ask server where we left off                         queryRange = true;                     }                     else                         throw;                 }             }
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunkedUpload,The following statement contains a magic number: while(true)             {                 try                 {                     if (queryRange)                     {                         T re;                         offset = GoogleCommon.QueryUploadRange(oauth' uploaduri' stream.Length' out re);                         queryRange = false;                          if (re != null)                             return re;                     }                      //Seek into the right place                     if (stream.Position != offset)                         stream.Position = offset;                      var req = oauth.CreateRequest(uploaduri);                     req.Method = "PUT";                     req.ContentType = "application/octet-stream";                      var chunkSize = Math.Min(UPLOAD_CHUNK_SIZE' stream.Length - offset);                      req.ContentLength = chunkSize;                     req.Headers["Content-Range"] = string.Format("bytes {0}-{1}/{2}"' offset' offset + chunkSize - 1' stream.Length);;                      // Upload the remaining data                     var areq = new AsyncHttpRequest(req);                     using(var rs = areq.GetRequestStream())                     {                         var remaining = chunkSize;                         while(remaining > 0)                         {                             var n = stream.Read(buffer' 0' (int)Math.Min(remaining' Library.Utility.Utility.DEFAULT_BUFFER_SIZE));                             rs.Write(buffer' 0' n);                             remaining -= n;                         }                     }                      // Check the response                     using(var resp = oauth.GetResponseWithoutException(areq))                     {                         var code = (int)resp.StatusCode;                          if (code == 308 && resp.Headers["Range"] != null)                         {                             offset = long.Parse(resp.Headers["Range"].Split(new char[] {'-'})[1]) + 1;                             retries = 0;                         }                         else if (code >= 200 && code <= 299)                         {                             offset += chunkSize;                             if (offset != stream.Length)                                 throw new Exception(string.Format("Upload succeeded prematurely. Uploaded: {0}' total size: {1}"' offset' stream.Length));                              //Verify that the response is also valid                             var res = oauth.ReadJSONResponse<T>(resp);                             if (res == null)                                 throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                              return res;                         }                         else                         {                             throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);                         }                     }                 }                 catch (Exception ex)                 {                     var retry = false;                      // If we get a 5xx error' or some network issue' we retry                     if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                     {                         var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                         retry = code >= 500 && code <= 599;                     }                     else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                     {                         retry = true;                     }                      // Retry with exponential backoff                     if (retry && retries < 5)                     {                         System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                         retries++;                          // Ask server where we left off                         queryRange = true;                     }                     else                         throw;                 }             }
Magic Number,Duplicati.Library.Backend.GoogleServices,GoogleCommon,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\GoogleServices\GoogleCommon.cs,ChunkedUpload,The following statement contains a magic number: while(true)             {                 try                 {                     if (queryRange)                     {                         T re;                         offset = GoogleCommon.QueryUploadRange(oauth' uploaduri' stream.Length' out re);                         queryRange = false;                          if (re != null)                             return re;                     }                      //Seek into the right place                     if (stream.Position != offset)                         stream.Position = offset;                      var req = oauth.CreateRequest(uploaduri);                     req.Method = "PUT";                     req.ContentType = "application/octet-stream";                      var chunkSize = Math.Min(UPLOAD_CHUNK_SIZE' stream.Length - offset);                      req.ContentLength = chunkSize;                     req.Headers["Content-Range"] = string.Format("bytes {0}-{1}/{2}"' offset' offset + chunkSize - 1' stream.Length);;                      // Upload the remaining data                     var areq = new AsyncHttpRequest(req);                     using(var rs = areq.GetRequestStream())                     {                         var remaining = chunkSize;                         while(remaining > 0)                         {                             var n = stream.Read(buffer' 0' (int)Math.Min(remaining' Library.Utility.Utility.DEFAULT_BUFFER_SIZE));                             rs.Write(buffer' 0' n);                             remaining -= n;                         }                     }                      // Check the response                     using(var resp = oauth.GetResponseWithoutException(areq))                     {                         var code = (int)resp.StatusCode;                          if (code == 308 && resp.Headers["Range"] != null)                         {                             offset = long.Parse(resp.Headers["Range"].Split(new char[] {'-'})[1]) + 1;                             retries = 0;                         }                         else if (code >= 200 && code <= 299)                         {                             offset += chunkSize;                             if (offset != stream.Length)                                 throw new Exception(string.Format("Upload succeeded prematurely. Uploaded: {0}' total size: {1}"' offset' stream.Length));                              //Verify that the response is also valid                             var res = oauth.ReadJSONResponse<T>(resp);                             if (res == null)                                 throw new Exception(string.Format("Upload succeeded' but no data was returned' status code: {0}"' code));                              return res;                         }                         else                         {                             throw new WebException(string.Format("Unexpected status code: {0}"' code)' null' WebExceptionStatus.ServerProtocolViolation' resp);                         }                     }                 }                 catch (Exception ex)                 {                     var retry = false;                      // If we get a 5xx error' or some network issue' we retry                     if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                     {                         var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                         retry = code >= 500 && code <= 599;                     }                     else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                     {                         retry = true;                     }                      // Retry with exponential backoff                     if (retry && retries < 5)                     {                         System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                         retries++;                          // Ask server where we left off                         queryRange = true;                     }                     else                         throw;                 }             }
