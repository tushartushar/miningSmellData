Implementation smell,Namespace,Class,File,Method,Description
Long Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,The method has 128 lines of code.
Long Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,DownloadAndUnpackUpdate,The method has 124 lines of code.
Long Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CreateUpdatePackage,The method has 113 lines of code.
Long Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,WrapWithUpdater,The method has 123 lines of code.
Long Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecentAppDomain,The method has 104 lines of code.
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,Cyclomatic complexity of the method is 20
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,VerifyUnpackedFolder,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,WrapWithUpdater,Cyclomatic complexity of the method is 14
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecentSpawn,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecentAppDomain,Cyclomatic complexity of the method is 11
Long Identifier,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,,The length of the parameter BASEINSTALLDIR_ENVNAME_TEMPLATE is 31.
Long Identifier,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,,The length of the parameter UPDATEINSTALLDIR_ENVNAME_TEMPLATE is 33.
Long Identifier,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,,The length of the parameter UPDATE_STRATEGY_ENVNAME_TEMPLATE is 32.
Long Identifier,Duplicati.Library.AutoUpdater,AutoUpdateSettings,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\AutoUpdateSettings.cs,,The length of the parameter UPDATECHANNEL_ENVNAME_TEMPLATE is 30.
Long Identifier,Duplicati.Library.AutoUpdater,AutoUpdateSettings,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\AutoUpdateSettings.cs,,The length of the parameter MATCH_UPDATE_URL_CHANNEL_GROUP is 30.
Long Identifier,Duplicati.Library.AutoUpdater,AutoUpdateSettings,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\AutoUpdateSettings.cs,,The length of the parameter MATCH_UPDATE_URL_FILENAME_GROUP is 31.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,TestDirectoryIsWriteable,The length of the statement  "            var p2 = System.IO.Path.Combine(path' "test-" + DateTime.UtcNow.ToString(DATETIME_FORMAT' System.Globalization.CultureInfo.InvariantCulture)); " is 142.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CheckForUpdate,The length of the statement  "                        wc.Headers.Add(System.Net.HttpRequestHeader.UserAgent' string.Format("{0} v{1}{2}"' APPNAME' SelfVersion.Version' string.IsNullOrWhiteSpace(InstallID) ? "" : " -" + InstallID)); " is 177.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CheckForUpdate,The length of the statement  "                            if (string.Equals(SelfVersion.ReleaseType' "Debug"' StringComparison.OrdinalIgnoreCase) && !string.Equals(update.ReleaseType' SelfVersion.ReleaseType' StringComparison.CurrentCultureIgnoreCase)) " is 194.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,DownloadAndUnpackUpdate,The length of the statement  "                                throw new Exception(string.Format("Invalid file size {0}' expected {1} for {2}"' s.Length' version.CompressedSize' url)); " is 121.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,VerifyUnpackedFolder,The length of the statement  "                var paths = update.Files.Where(x => !x.Ignore).ToDictionary(x => x.Path.Replace('/'' System.IO.Path.DirectorySeparatorChar)' Library.Utility.Utility.ClientFilenameStringComparer); " is 179.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,VerifyUnpackedFolder,The length of the statement  "                var ignores = (from x in update.Files where x.Ignore select Library.Utility.Utility.AppendDirSeparator(x.Path.Replace('/'' System.IO.Path.DirectorySeparatorChar))).ToList(); " is 173.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,VerifyUnpackedFolder,The length of the statement  "                    .Where(p => !IgnoreWebrootFolder || !p.Key.StartsWith("webroot"' Library.Utility.Utility.ClientFilenameStringComparision)) " is 122.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,VerifyUnpackedFolder,The length of the statement  "                    throw new Exception(string.Format("Folder {0} is missing {1} and {2} other file(s)"' folder' filteredpaths.First()' filteredpaths.Count - 1)); " is 142.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CreateUpdatePackage,The length of the statement  "            var ignoreMap = ignoreFiles.ToDictionary(k => k.Path' k => ""' Duplicati.Library.Utility.Utility.ClientFilenameStringComparer); " is 127.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,GetBestUpdateVersion,The length of the statement  "            KeyValuePair<string' UpdateInfo> best = new KeyValuePair<string' UpdateInfo>(AppDomain.CurrentDomain.SetupInformation.ApplicationBase' SelfVersion); " is 148.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,GetBestUpdateVersion,The length of the statement  "                        if (currentmanifest != null && TryParseVersion(currentmanifest.Version) > TryParseVersion(best.Value.Version) && VerifyUnpackedFolder(targetfolder' currentmanifest)) " is 165.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecentAppDomain,The length of the statement  "            KeyValuePair<string' UpdateInfo> best = new KeyValuePair<string' UpdateInfo>(AppDomain.CurrentDomain.SetupInformation.ApplicationBase' SelfVersion); " is 148.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecentAppDomain,The length of the statement  "                        if (currentmanifest != null && TryParseVersion(currentmanifest.Version) > TryParseVersion(best.Value.Version) && VerifyUnpackedFolder(targetfolder' currentmanifest)) " is 165.
Long Statement,Duplicati.Library.AutoUpdater,AutoUpdateSettings,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\AutoUpdateSettings.cs,ReadResourceText,The length of the statement  "                using (var rd = new System.IO.StreamReader(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream(typeof(AutoUpdateSettings)' name))) " is 154.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,Main,The length of the statement  "            return Duplicati.Library.AutoUpdater.UpdaterManager.RunFromMostRecent(typeof(Program).GetMethod("RealMain")' args' AutoUpdateStrategy.Never); " is 141.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "                Console.WriteLine("Invalid number of arguments' got {0}:{1}{1}{2}{1}{1}"' args.Count' Environment.NewLine' string.Join(Environment.NewLine' args)); " is 147.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "                        if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir))) " is 148.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "                            versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) }); " is 144.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "                        Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version)))); " is 214.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "                        if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir))) " is 148.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "                            versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) }); " is 144.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "                        Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2}): {3}"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version' UpdaterManager.VerifyUnpackedFolder(x.Key' x.Value) ? "Valid" : "*** Modified ***")))); " is 303.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "                            Console.WriteLine("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly().GetName().Version); " is 176.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "            Console.WriteLine("Usage:{0}\t{1}{2} [LIST|VERIFY|CHECK|INSTALL|HELP]"' Environment.NewLine' Duplicati.Library.Utility.Utility.IsMono ? "mono " : ""' System.IO.Path.GetFileName(System.Reflection.Assembly.GetExecutingAssembly().Location)); " is 238.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "            Console.WriteLine("{0} - Disables updates completely"' string.Format(UpdaterManager.SKIPUPDATE_ENVNAME_TEMPLATE' AutoUpdateSettings.AppName)); " is 142.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "            Console.WriteLine("{0} - Choose how to handle updates' valid settings: {1}"' string.Format(UpdaterManager.UPDATE_STRATEGY_ENVNAME_TEMPLATE' AutoUpdateSettings.AppName)' string.Join("' "' Enum.GetNames(typeof(AutoUpdateStrategy)))); " is 231.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "            Console.WriteLine("{0} - Use alternate updates urls"' string.Format(AutoUpdateSettings.UPDATEURL_ENVNAME_TEMPLATE' AutoUpdateSettings.AppName)); " is 144.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "            Console.WriteLine("{0} - Choose different channel than the default {1}' valid settings: {2}"' string.Format(AutoUpdateSettings.UPDATECHANNEL_ENVNAME_TEMPLATE' AutoUpdateSettings.AppName)' AutoUpdater.AutoUpdateSettings.DefaultUpdateChannel' string.Join("'"' Enum.GetNames(typeof(ReleaseType)).Where( x => x != ReleaseType.Unknown.ToString()))); " is 344.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "            Console.WriteLine("The base version is \"{0}\" ({1}) and is installed in: {2}"' UpdaterManager.BaseVersion.Displayname' UpdaterManager.BaseVersion.Version' UpdaterManager.InstalledBaseDir); " is 189.
Long Statement,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "            Console.WriteLine("This version is \"{0}\" ({1}) and is installed in: {2}"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly().GetName().Version' System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location)); " is 278.
Complex Conditional,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,The conditional expression  "!string.IsNullOrWhiteSpace(p) && System.IO.Directory.Exists(p) && System.IO.Directory.EnumerateFiles(p' "*"' System.IO.SearchOption.TopDirectoryOnly).Count() > 0 && TestDirectoryIsWriteable(p)"  is complex.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,TestDirectoryIsWriteable,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,DownloadAndUnpackUpdate,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunMethod,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunMethod,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,SignatureReadingStream,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\SignatureReadingStream.cs,Flush,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,AutoUpdateSettings,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\AutoUpdateSettings.cs,ReadResourceText,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,AutoUpdateSettings,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\AutoUpdateSettings.cs,ReadResourceText,The method has an empty catch block.
Magic Number,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,WrapWithUpdater,The following statement contains a magic number: if (checkForUpdate)              {                  backgroundChecker = new System.Threading.Thread(() =>                  {                      // Don't run "during" if the task is short                      if (runDuring)                          System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10));                        updateDetected = CheckForUpdate();                      if (updateDetected != null && downloadUpdate)                      {                          if (!runDuring)                              Console.WriteLine("Update to {0} detected' installing..."' updateDetected.Displayname);                          updateInstalled = DownloadAndUnpackUpdate(updateDetected);                      }                  });                    backgroundChecker.IsBackground = true;                  backgroundChecker.Name = "BackgroundUpdateChecker";                    if (!runAfter)                      backgroundChecker.Start();                    if (runBefore)                  {                      Console.WriteLine("Checking for update ...");                      backgroundChecker.Join();                        if (downloadUpdate)                      {                          if (updateInstalled)                              Console.WriteLine("Install succeeded' running updated version");                          else                              Console.WriteLine("Install or download failed' using current version");                      }                      else if (updateDetected != null)                      {                          Console.WriteLine("Update \"{0}\" detected"' updateDetected.Displayname);                      }                        backgroundChecker = null;                  }              }
Magic Number,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecentSpawn,The following statement contains a magic number: while (true)              {                  var best = GetBestUpdateVersion(true);                  var folder = best.Key;                    var pi = new System.Diagnostics.ProcessStartInfo(Path.Combine(folder' executable)' args)                  {                      CreateNoWindow = true'                      UseShellExecute = false'                      RedirectStandardError = true'                      RedirectStandardInput = true'                      RedirectStandardOutput = true'                      ErrorDialog = false'                                      };                  pi.EnvironmentVariables.Clear();                    var cur = Environment.GetEnvironmentVariables();                  foreach (var e in cur.Keys)                      if (e is string)                          pi.EnvironmentVariables[(string)e] = cur[(string)e] as string;                    pi.EnvironmentVariables[string.Format(BASEINSTALLDIR_ENVNAME_TEMPLATE' APPNAME)] = InstalledBaseDir;                  pi.EnvironmentVariables["LOCALIZATION_FOLDER"] = InstalledBaseDir;                    var proc = System.Diagnostics.Process.Start(pi);                  var tasks = Task.WhenAll(                      Console.OpenStandardInput().CopyToAsync(proc.StandardInput.BaseStream)'                      proc.StandardOutput.BaseStream.CopyToAsync(Console.OpenStandardOutput())'                      proc.StandardError.BaseStream.CopyToAsync(Console.OpenStandardError())                  );                    proc.WaitForExit();                  tasks.Wait(1000);                    if (proc.ExitCode != MAGIC_EXIT_CODE)                      return proc.ExitCode;              }
Magic Number,Duplicati.Library.AutoUpdater,UpdaterManager,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecentAppDomain,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(sleepmarker))              {                  System.Environment.SetEnvironmentVariable(string.Format(SLEEP_ENVNAME_TEMPLATE' APPNAME)' null);                  System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10));              }
Magic Number,Duplicati.Library.AutoUpdater,SignatureReadingStream,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\SignatureReadingStream.cs,VerifySignature,The following statement contains a magic number: var buf = new byte[8 * 1024];
Magic Number,Duplicati.Library.AutoUpdater,SignatureReadingStream,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\SignatureReadingStream.cs,VerifySignature,The following statement contains a magic number: var buf = new byte[8 * 1024];
Magic Number,Duplicati.Library.AutoUpdater,SignatureReadingStream,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\SignatureReadingStream.cs,CreateSignedStream,The following statement contains a magic number: var buf = new byte[8 * 1024];
Magic Number,Duplicati.Library.AutoUpdater,SignatureReadingStream,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\SignatureReadingStream.cs,CreateSignedStream,The following statement contains a magic number: var buf = new byte[8 * 1024];
Magic Number,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: if (args.Count == 0)              {                  WriteUsage();                  return 100;              }              else if (args.Count != 1)              {                  Console.WriteLine("Invalid number of arguments' got {0}:{1}{1}{2}{1}{1}"' args.Count' Environment.NewLine' string.Join(Environment.NewLine' args));                  return 100;              }
Magic Number,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: if (args.Count == 0)              {                  WriteUsage();                  return 100;              }              else if (args.Count != 1)              {                  Console.WriteLine("Invalid number of arguments' got {0}:{1}{1}{2}{1}{1}"' args.Count' Environment.NewLine' string.Join(Environment.NewLine' args));                  return 100;              }
Magic Number,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd)              {                  case "help":                      WriteUsage();                      return 0;                  case "list":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                          Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));                          return 0;                      }                    case "verify":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                            Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2}): {3}"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version' UpdaterManager.VerifyUnpackedFolder(x.Key' x.Value) ? "Valid" : "*** Modified ***"))));                          return 0;                      }                  case "check":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null)                              Console.WriteLine("No updates found");                          else if (update.Version == UpdaterManager.SelfVersion.Version)                              Console.WriteLine("You are running the latest version: {0}"' update.Displayname);                          else                              Console.WriteLine("New version is available: {0}"' update.Displayname);                            return 0;                      }                  case "install":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null || update.Version == UpdaterManager.SelfVersion.Version)                          {                              Console.WriteLine("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly().GetName().Version);                              return 0;                          }                          Console.WriteLine("Downloading update \"{0}\" ..."' update.Displayname);                            long lastpg = 0;                          UpdaterManager.DownloadAndUnpackUpdate(update' f => {                              var npg = (long)(f*100);                              if (Math.Abs(npg - lastpg) >= 5 || (npg == 100 && lastpg != 100))                              {                                  lastpg = npg;                                  Console.WriteLine("Downloading {0}% ..."' npg);                              }                          });                            Console.WriteLine("New version \"{0}\" installed!"' update.Displayname);                          return 0;                      }                  default:                      Console.WriteLine("Unknown command: \"{0}\""' args[0]);                      Console.WriteLine();                      Console.WriteLine("Try the command \"{0}\" instead"' "help");                      return 100;              }
Magic Number,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd)              {                  case "help":                      WriteUsage();                      return 0;                  case "list":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                          Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));                          return 0;                      }                    case "verify":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                            Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2}): {3}"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version' UpdaterManager.VerifyUnpackedFolder(x.Key' x.Value) ? "Valid" : "*** Modified ***"))));                          return 0;                      }                  case "check":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null)                              Console.WriteLine("No updates found");                          else if (update.Version == UpdaterManager.SelfVersion.Version)                              Console.WriteLine("You are running the latest version: {0}"' update.Displayname);                          else                              Console.WriteLine("New version is available: {0}"' update.Displayname);                            return 0;                      }                  case "install":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null || update.Version == UpdaterManager.SelfVersion.Version)                          {                              Console.WriteLine("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly().GetName().Version);                              return 0;                          }                          Console.WriteLine("Downloading update \"{0}\" ..."' update.Displayname);                            long lastpg = 0;                          UpdaterManager.DownloadAndUnpackUpdate(update' f => {                              var npg = (long)(f*100);                              if (Math.Abs(npg - lastpg) >= 5 || (npg == 100 && lastpg != 100))                              {                                  lastpg = npg;                                  Console.WriteLine("Downloading {0}% ..."' npg);                              }                          });                            Console.WriteLine("New version \"{0}\" installed!"' update.Displayname);                          return 0;                      }                  default:                      Console.WriteLine("Unknown command: \"{0}\""' args[0]);                      Console.WriteLine();                      Console.WriteLine("Try the command \"{0}\" instead"' "help");                      return 100;              }
Magic Number,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd)              {                  case "help":                      WriteUsage();                      return 0;                  case "list":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                          Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));                          return 0;                      }                    case "verify":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                            Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2}): {3}"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version' UpdaterManager.VerifyUnpackedFolder(x.Key' x.Value) ? "Valid" : "*** Modified ***"))));                          return 0;                      }                  case "check":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null)                              Console.WriteLine("No updates found");                          else if (update.Version == UpdaterManager.SelfVersion.Version)                              Console.WriteLine("You are running the latest version: {0}"' update.Displayname);                          else                              Console.WriteLine("New version is available: {0}"' update.Displayname);                            return 0;                      }                  case "install":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null || update.Version == UpdaterManager.SelfVersion.Version)                          {                              Console.WriteLine("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly().GetName().Version);                              return 0;                          }                          Console.WriteLine("Downloading update \"{0}\" ..."' update.Displayname);                            long lastpg = 0;                          UpdaterManager.DownloadAndUnpackUpdate(update' f => {                              var npg = (long)(f*100);                              if (Math.Abs(npg - lastpg) >= 5 || (npg == 100 && lastpg != 100))                              {                                  lastpg = npg;                                  Console.WriteLine("Downloading {0}% ..."' npg);                              }                          });                            Console.WriteLine("New version \"{0}\" installed!"' update.Displayname);                          return 0;                      }                  default:                      Console.WriteLine("Unknown command: \"{0}\""' args[0]);                      Console.WriteLine();                      Console.WriteLine("Try the command \"{0}\" instead"' "help");                      return 100;              }
Magic Number,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd)              {                  case "help":                      WriteUsage();                      return 0;                  case "list":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                          Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));                          return 0;                      }                    case "verify":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                            Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2}): {3}"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version' UpdaterManager.VerifyUnpackedFolder(x.Key' x.Value) ? "Valid" : "*** Modified ***"))));                          return 0;                      }                  case "check":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null)                              Console.WriteLine("No updates found");                          else if (update.Version == UpdaterManager.SelfVersion.Version)                              Console.WriteLine("You are running the latest version: {0}"' update.Displayname);                          else                              Console.WriteLine("New version is available: {0}"' update.Displayname);                            return 0;                      }                  case "install":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null || update.Version == UpdaterManager.SelfVersion.Version)                          {                              Console.WriteLine("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly().GetName().Version);                              return 0;                          }                          Console.WriteLine("Downloading update \"{0}\" ..."' update.Displayname);                            long lastpg = 0;                          UpdaterManager.DownloadAndUnpackUpdate(update' f => {                              var npg = (long)(f*100);                              if (Math.Abs(npg - lastpg) >= 5 || (npg == 100 && lastpg != 100))                              {                                  lastpg = npg;                                  Console.WriteLine("Downloading {0}% ..."' npg);                              }                          });                            Console.WriteLine("New version \"{0}\" installed!"' update.Displayname);                          return 0;                      }                  default:                      Console.WriteLine("Unknown command: \"{0}\""' args[0]);                      Console.WriteLine();                      Console.WriteLine("Try the command \"{0}\" instead"' "help");                      return 100;              }
Magic Number,Duplicati.Library.AutoUpdater,Program,C:\repos\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd)              {                  case "help":                      WriteUsage();                      return 0;                  case "list":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                          Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));                          return 0;                      }                    case "verify":                      {                          var versions = UpdaterManager.FindInstalledVersions();                          var selfdir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);                          if (string.Equals(Library.Utility.Utility.AppendDirSeparator(selfdir)' Library.Utility.Utility.AppendDirSeparator(UpdaterManager.InstalledBaseDir)))                              versions = versions.Union(new KeyValuePair<string' UpdateInfo>[] { new KeyValuePair<string' UpdateInfo>(selfdir' UpdaterManager.SelfVersion) });                            Console.WriteLine(string.Join(Environment.NewLine' versions.Select(x => string.Format(" {0} {1} ({2}): {3}"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version' UpdaterManager.VerifyUnpackedFolder(x.Key' x.Value) ? "Valid" : "*** Modified ***"))));                          return 0;                      }                  case "check":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null)                              Console.WriteLine("No updates found");                          else if (update.Version == UpdaterManager.SelfVersion.Version)                              Console.WriteLine("You are running the latest version: {0}"' update.Displayname);                          else                              Console.WriteLine("New version is available: {0}"' update.Displayname);                            return 0;                      }                  case "install":                      {                          var update = UpdaterManager.CheckForUpdate();                          if (update == null || update.Version == UpdaterManager.SelfVersion.Version)                          {                              Console.WriteLine("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly().GetName().Version);                              return 0;                          }                          Console.WriteLine("Downloading update \"{0}\" ..."' update.Displayname);                            long lastpg = 0;                          UpdaterManager.DownloadAndUnpackUpdate(update' f => {                              var npg = (long)(f*100);                              if (Math.Abs(npg - lastpg) >= 5 || (npg == 100 && lastpg != 100))                              {                                  lastpg = npg;                                  Console.WriteLine("Downloading {0}% ..."' npg);                              }                          });                            Console.WriteLine("New version \"{0}\" installed!"' update.Displayname);                          return 0;                      }                  default:                      Console.WriteLine("Unknown command: \"{0}\""' args[0]);                      Console.WriteLine();                      Console.WriteLine("Try the command \"{0}\" instead"' "help");                      return 100;              }
