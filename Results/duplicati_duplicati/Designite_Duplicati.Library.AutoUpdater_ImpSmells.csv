Implementation smell,Namespace,Class,File,Method,Description
Long Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,The method has 106 lines of code.
Long Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,DownloadAndUnpackUpdate,The method has 110 lines of code.
Long Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,WrapWithUpdater,The method has 107 lines of code.
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,Cyclomatic complexity of the method is 26
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CheckForUpdate,Cyclomatic complexity of the method is 13
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,DownloadAndUnpackUpdate,Cyclomatic complexity of the method is 35
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,VerifyUnpackedFolder,Cyclomatic complexity of the method is 23
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CreateUpdatePackage,Cyclomatic complexity of the method is 22
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,WrapWithUpdater,Cyclomatic complexity of the method is 50
Complex Method,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecent,Cyclomatic complexity of the method is 15
Complex Method,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,Cyclomatic complexity of the method is 18
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,TestDirectoryIsWriteable,The length of the statement  "	var p2 = System.IO.Path.Combine (path' "test-" + DateTime.UtcNow.ToString (DATETIME_FORMAT' System.Globalization.CultureInfo.InvariantCulture)); " is 144.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CheckForUpdate,The length of the statement  "				wc.Headers.Add (System.Net.HttpRequestHeader.UserAgent' string.Format ("{0} v{1}{2}"' APPNAME' SelfVersion.Version' string.IsNullOrWhiteSpace (InstallID) ? "" : " -" + InstallID)); " is 180.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CheckForUpdate,The length of the statement  "								if (string.Equals (SelfVersion.ReleaseType' "Debug"' StringComparison.InvariantCultureIgnoreCase) && !string.Equals (update.ReleaseType' SelfVersion.ReleaseType' StringComparison.CurrentCultureIgnoreCase)) " is 205.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,DownloadAndUnpackUpdate,The length of the statement  "						throw new Exception (string.Format ("Invalid file size {0}' expected {1} for {2}"' s.Length' version.CompressedSize' url)); " is 123.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,DownloadAndUnpackUpdate,The length of the statement  "							if (System.IO.Path.IsPathRooted (file.Key) || file.Key.Trim ().StartsWith (".."' StringComparison.InvariantCultureIgnoreCase)) " is 126.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,VerifyUnpackedFolder,The length of the statement  "		var paths = update.Files.Where (x => !x.Ignore).ToDictionary (x => x.Path.Replace ('/'' System.IO.Path.DirectorySeparatorChar)' Library.Utility.Utility.ClientFilenameStringComparer); " is 182.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,VerifyUnpackedFolder,The length of the statement  "		select Library.Utility.Utility.AppendDirSeparator (x.Path.Replace ('/'' System.IO.Path.DirectorySeparatorChar))).ToList (); " is 123.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,VerifyUnpackedFolder,The length of the statement  "			throw new Exception (string.Format ("Folder {0} is missing {1} and {2} other file(s)"' folder' filteredpaths.First ()' filteredpaths.Count - 1)); " is 145.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CreateUpdatePackage,The length of the statement  "	var ignoreMap = ignoreFiles.ToDictionary (k => k.Path' k => ""' Duplicati.Library.Utility.Utility.ClientFilenameStringComparer); " is 128.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CreateUpdatePackage,The length of the statement  "		using (var zipfile = new Duplicati.Library.Compression.FileArchiveZip (archive_temp' new Dictionary<string' string> ())) { " is 122.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CreateUpdatePackage,The length of the statement  "					using (var target = zipfile.CreateFile (relpath' Duplicati.Library.Interface.CompressionHint.Compressible' System.IO.File.GetLastAccessTimeUtc (path))) { " is 153.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,CreateUpdatePackage,The length of the statement  "						using (var sigfile = zipfile.CreateFile (UPDATE_MANIFEST_FILENAME' Duplicati.Library.Interface.CompressionHint.Compressible' DateTime.UtcNow)) " is 142.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunMethod,The length of the statement  "			var report_file = System.IO.Path.Combine (string.IsNullOrEmpty (INSTALLDIR) ? Library.Utility.TempFolder.SystemTempPath : INSTALLDIR' string.Format ("{0}-crashlog.txt"' AutoUpdateSettings.AppName)); " is 198.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecent,The length of the statement  "	KeyValuePair<string' UpdateInfo> best = new KeyValuePair<string' UpdateInfo> (AppDomain.CurrentDomain.SetupInformation.ApplicationBase' SelfVersion); " is 149.
Long Statement,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecent,The length of the statement  "				if (currentmanifest != null && TryParseVersion (currentmanifest.Version) > TryParseVersion (best.Value.Version) && VerifyUnpackedFolder (targetfolder' currentmanifest)) " is 168.
Long Statement,Duplicati.Library.AutoUpdater,AutoUpdateSettings,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\AutoUpdateSettings.cs,ReadResourceText,The length of the statement  "		using (var rd = new System.IO.StreamReader (System.Reflection.Assembly.GetExecutingAssembly ().GetManifestResourceStream (typeof(AutoUpdateSettings)' name))) " is 157.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,Main,The length of the statement  "	return Duplicati.Library.AutoUpdater.UpdaterManager.RunFromMostRecent (typeof(Program).GetMethod ("RealMain")' args' AutoUpdateStrategy.Never); " is 143.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "		Console.WriteLine ("Invalid number of arguments' got {0}:{1}{1}{2}{1}{1}"' args.Count' Environment.NewLine' string.Join (Environment.NewLine' args)); " is 149.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "		if (string.Equals (Library.Utility.Utility.AppendDirSeparator (selfdir)' Library.Utility.Utility.AppendDirSeparator (UpdaterManager.InstalledBaseDir))) " is 151.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "		Console.WriteLine (string.Join (Environment.NewLine' versions.Select (x => string.Format (" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version)))); " is 218.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The length of the statement  "			Console.WriteLine ("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version); " is 179.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "	Console.WriteLine ("Usage:{0}\t{1}{2} [LIST|CHECK|INSTALL|HELP]"' Environment.NewLine' Duplicati.Library.Utility.Utility.IsMono ? "mono " : ""' System.IO.Path.GetFileName (System.Reflection.Assembly.GetExecutingAssembly ().Location)); " is 234.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "	Console.WriteLine ("{0} - Disables updates completely"' string.Format (UpdaterManager.SKIPUPDATE_ENVNAME_TEMPLATE' AutoUpdateSettings.AppName)); " is 144.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "	Console.WriteLine ("{0} - Choose how to handle updates' valid settings: {1}"' string.Format (UpdaterManager.UPDATE_STRATEGY_ENVNAME_TEMPLATE' AutoUpdateSettings.AppName)' string.Join ("' "' Enum.GetNames (typeof(AutoUpdateStrategy)))); " is 235.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "	Console.WriteLine ("{0} - Use alternate updates urls"' string.Format (AutoUpdateSettings.UPDATEURL_ENVNAME_TEMPLATE' AutoUpdateSettings.AppName)); " is 146.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "	Console.WriteLine ("{0} - Choose different channel than the default {1}' valid settings: {2}"' string.Format (AutoUpdateSettings.UPDATECHANNEL_ENVNAME_TEMPLATE' AutoUpdateSettings.AppName)' AutoUpdater.AutoUpdateSettings.DefaultUpdateChannel' string.Join ("'"' Enum.GetNames (typeof(ReleaseType)).Where (x => x != ReleaseType.Unknown.ToString ()))); " is 349.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "	Console.WriteLine ("The base version is \"{0}\" ({1}) and is installed in: {2}"' UpdaterManager.BaseVersion.Displayname' UpdaterManager.BaseVersion.Version' UpdaterManager.InstalledBaseDir); " is 190.
Long Statement,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,WriteUsage,The length of the statement  "	Console.WriteLine ("This version is \"{0}\" ({1}) and is installed in: {2}"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version' System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)); " is 283.
Complex Conditional,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,The conditional expression  "!string.IsNullOrWhiteSpace (p) && System.IO.Directory.Exists (p) && System.IO.Directory.EnumerateFiles (p' "*"' System.IO.SearchOption.TopDirectoryOnly).Count () > 0 && TestDirectoryIsWriteable (p)"  is complex.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,UpdaterManager,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,TestDirectoryIsWriteable,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,DownloadAndUnpackUpdate,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunMethod,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunMethod,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,SignatureReadingStream,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\SignatureReadingStream.cs,Flush,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,AutoUpdateSettings,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\AutoUpdateSettings.cs,ReadResourceText,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.AutoUpdater,AutoUpdateSettings,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\AutoUpdateSettings.cs,ReadResourceText,The method has an empty catch block.
Magic Number,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,WrapWithUpdater,The following statement contains a magic number: if (checkForUpdate) {  	backgroundChecker = new System.Threading.Thread (() => {  		// Don't run "during" if the task is short  		if (runDuring)  			System.Threading.Thread.Sleep (TimeSpan.FromSeconds (10));  		updateDetected = CheckForUpdate ();  		if (updateDetected != null && downloadUpdate) {  			if (!runDuring)  				Console.WriteLine ("Update to {0} detected' installing..."' updateDetected.Displayname);  			updateInstalled = DownloadAndUnpackUpdate (updateDetected);  		}  	});  	backgroundChecker.IsBackground = true;  	backgroundChecker.Name = "BackgroundUpdateChecker";  	if (!runAfter)  		backgroundChecker.Start ();  	if (runBefore) {  		Console.WriteLine ("Checking for update ...");  		backgroundChecker.Join ();  		if (downloadUpdate) {  			if (updateInstalled)  				Console.WriteLine ("Install succeeded' running updated version");  			else  				Console.WriteLine ("Install or download failed' using current version");  		} else if (updateDetected != null) {  			Console.WriteLine ("Update \"{0}\" detected"' updateDetected.Displayname);  		}  		backgroundChecker = null;  	}  }  
Magic Number,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,WrapWithUpdater,The following statement contains a magic number: backgroundChecker = new System.Threading.Thread (() => {  	// Don't run "during" if the task is short  	if (runDuring)  		System.Threading.Thread.Sleep (TimeSpan.FromSeconds (10));  	updateDetected = CheckForUpdate ();  	if (updateDetected != null && downloadUpdate) {  		if (!runDuring)  			Console.WriteLine ("Update to {0} detected' installing..."' updateDetected.Displayname);  		updateInstalled = DownloadAndUnpackUpdate (updateDetected);  	}  });  
Magic Number,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,WrapWithUpdater,The following statement contains a magic number: if (runDuring)  	System.Threading.Thread.Sleep (TimeSpan.FromSeconds (10));  
Magic Number,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,WrapWithUpdater,The following statement contains a magic number: System.Threading.Thread.Sleep (TimeSpan.FromSeconds (10));  
Magic Number,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecent,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (sleepmarker)) {  	System.Environment.SetEnvironmentVariable (string.Format (SLEEP_ENVNAME_TEMPLATE' APPNAME)' null);  	System.Threading.Thread.Sleep (TimeSpan.FromSeconds (10));  }  
Magic Number,Duplicati.Library.AutoUpdater,UpdaterManager,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\UpdaterManager.cs,RunFromMostRecent,The following statement contains a magic number: System.Threading.Thread.Sleep (TimeSpan.FromSeconds (10));  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: if (args.Count == 0) {  	WriteUsage ();  	return 100;  } else if (args.Count != 1) {  	Console.WriteLine ("Invalid number of arguments' got {0}:{1}{1}{2}{1}{1}"' args.Count' Environment.NewLine' string.Join (Environment.NewLine' args));  	return 100;  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: if (args.Count == 0) {  	WriteUsage ();  	return 100;  } else if (args.Count != 1) {  	Console.WriteLine ("Invalid number of arguments' got {0}:{1}{1}{2}{1}{1}"' args.Count' Environment.NewLine' string.Join (Environment.NewLine' args));  	return 100;  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: return 100;  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: if (args.Count != 1) {  	Console.WriteLine ("Invalid number of arguments' got {0}:{1}{1}{2}{1}{1}"' args.Count' Environment.NewLine' string.Join (Environment.NewLine' args));  	return 100;  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: return 100;  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd) {  case "help":  	WriteUsage ();  	return 0;  case "list": {  	var versions = UpdaterManager.FindInstalledVersions ();  	var selfdir = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	if (string.Equals (Library.Utility.Utility.AppendDirSeparator (selfdir)' Library.Utility.Utility.AppendDirSeparator (UpdaterManager.InstalledBaseDir)))  		versions = versions.Union (new KeyValuePair<string' UpdateInfo>[] {  			new KeyValuePair<string' UpdateInfo> (selfdir' UpdaterManager.SelfVersion)  		});  	Console.WriteLine (string.Join (Environment.NewLine' versions.Select (x => string.Format (" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));  	return 0;  }  case "check": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null)  		Console.WriteLine ("No updates found");  	else if (update.Version == UpdaterManager.SelfVersion.Version)  		Console.WriteLine ("You are running the latest version: {0}"' update.Displayname);  	else  		Console.WriteLine ("New version is available: {0}"' update.Displayname);  	return 0;  }  case "install": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null || update.Version == UpdaterManager.SelfVersion.Version) {  		Console.WriteLine ("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version);  		return 0;  	}  	Console.WriteLine ("Downloading update \"{0}\" ..."' update.Displayname);  	long lastpg = 0;  	UpdaterManager.DownloadAndUnpackUpdate (update' f => {  		var npg = (long)(f * 100);  		if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  			lastpg = npg;  			Console.WriteLine ("Downloading {0}% ..."' npg);  		}  	});  	Console.WriteLine ("New version \"{0}\" installed!"' update.Displayname);  	return 0;  }  default:  	Console.WriteLine ("Unknown command: \"{0}\""' args [0]);  	Console.WriteLine ();  	Console.WriteLine ("Try the command \"{0}\" instead"' "help");  	return 100;  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd) {  case "help":  	WriteUsage ();  	return 0;  case "list": {  	var versions = UpdaterManager.FindInstalledVersions ();  	var selfdir = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	if (string.Equals (Library.Utility.Utility.AppendDirSeparator (selfdir)' Library.Utility.Utility.AppendDirSeparator (UpdaterManager.InstalledBaseDir)))  		versions = versions.Union (new KeyValuePair<string' UpdateInfo>[] {  			new KeyValuePair<string' UpdateInfo> (selfdir' UpdaterManager.SelfVersion)  		});  	Console.WriteLine (string.Join (Environment.NewLine' versions.Select (x => string.Format (" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));  	return 0;  }  case "check": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null)  		Console.WriteLine ("No updates found");  	else if (update.Version == UpdaterManager.SelfVersion.Version)  		Console.WriteLine ("You are running the latest version: {0}"' update.Displayname);  	else  		Console.WriteLine ("New version is available: {0}"' update.Displayname);  	return 0;  }  case "install": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null || update.Version == UpdaterManager.SelfVersion.Version) {  		Console.WriteLine ("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version);  		return 0;  	}  	Console.WriteLine ("Downloading update \"{0}\" ..."' update.Displayname);  	long lastpg = 0;  	UpdaterManager.DownloadAndUnpackUpdate (update' f => {  		var npg = (long)(f * 100);  		if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  			lastpg = npg;  			Console.WriteLine ("Downloading {0}% ..."' npg);  		}  	});  	Console.WriteLine ("New version \"{0}\" installed!"' update.Displayname);  	return 0;  }  default:  	Console.WriteLine ("Unknown command: \"{0}\""' args [0]);  	Console.WriteLine ();  	Console.WriteLine ("Try the command \"{0}\" instead"' "help");  	return 100;  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd) {  case "help":  	WriteUsage ();  	return 0;  case "list": {  	var versions = UpdaterManager.FindInstalledVersions ();  	var selfdir = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	if (string.Equals (Library.Utility.Utility.AppendDirSeparator (selfdir)' Library.Utility.Utility.AppendDirSeparator (UpdaterManager.InstalledBaseDir)))  		versions = versions.Union (new KeyValuePair<string' UpdateInfo>[] {  			new KeyValuePair<string' UpdateInfo> (selfdir' UpdaterManager.SelfVersion)  		});  	Console.WriteLine (string.Join (Environment.NewLine' versions.Select (x => string.Format (" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));  	return 0;  }  case "check": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null)  		Console.WriteLine ("No updates found");  	else if (update.Version == UpdaterManager.SelfVersion.Version)  		Console.WriteLine ("You are running the latest version: {0}"' update.Displayname);  	else  		Console.WriteLine ("New version is available: {0}"' update.Displayname);  	return 0;  }  case "install": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null || update.Version == UpdaterManager.SelfVersion.Version) {  		Console.WriteLine ("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version);  		return 0;  	}  	Console.WriteLine ("Downloading update \"{0}\" ..."' update.Displayname);  	long lastpg = 0;  	UpdaterManager.DownloadAndUnpackUpdate (update' f => {  		var npg = (long)(f * 100);  		if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  			lastpg = npg;  			Console.WriteLine ("Downloading {0}% ..."' npg);  		}  	});  	Console.WriteLine ("New version \"{0}\" installed!"' update.Displayname);  	return 0;  }  default:  	Console.WriteLine ("Unknown command: \"{0}\""' args [0]);  	Console.WriteLine ();  	Console.WriteLine ("Try the command \"{0}\" instead"' "help");  	return 100;  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd) {  case "help":  	WriteUsage ();  	return 0;  case "list": {  	var versions = UpdaterManager.FindInstalledVersions ();  	var selfdir = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	if (string.Equals (Library.Utility.Utility.AppendDirSeparator (selfdir)' Library.Utility.Utility.AppendDirSeparator (UpdaterManager.InstalledBaseDir)))  		versions = versions.Union (new KeyValuePair<string' UpdateInfo>[] {  			new KeyValuePair<string' UpdateInfo> (selfdir' UpdaterManager.SelfVersion)  		});  	Console.WriteLine (string.Join (Environment.NewLine' versions.Select (x => string.Format (" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));  	return 0;  }  case "check": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null)  		Console.WriteLine ("No updates found");  	else if (update.Version == UpdaterManager.SelfVersion.Version)  		Console.WriteLine ("You are running the latest version: {0}"' update.Displayname);  	else  		Console.WriteLine ("New version is available: {0}"' update.Displayname);  	return 0;  }  case "install": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null || update.Version == UpdaterManager.SelfVersion.Version) {  		Console.WriteLine ("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version);  		return 0;  	}  	Console.WriteLine ("Downloading update \"{0}\" ..."' update.Displayname);  	long lastpg = 0;  	UpdaterManager.DownloadAndUnpackUpdate (update' f => {  		var npg = (long)(f * 100);  		if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  			lastpg = npg;  			Console.WriteLine ("Downloading {0}% ..."' npg);  		}  	});  	Console.WriteLine ("New version \"{0}\" installed!"' update.Displayname);  	return 0;  }  default:  	Console.WriteLine ("Unknown command: \"{0}\""' args [0]);  	Console.WriteLine ();  	Console.WriteLine ("Try the command \"{0}\" instead"' "help");  	return 100;  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: switch (cmd) {  case "help":  	WriteUsage ();  	return 0;  case "list": {  	var versions = UpdaterManager.FindInstalledVersions ();  	var selfdir = System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	if (string.Equals (Library.Utility.Utility.AppendDirSeparator (selfdir)' Library.Utility.Utility.AppendDirSeparator (UpdaterManager.InstalledBaseDir)))  		versions = versions.Union (new KeyValuePair<string' UpdateInfo>[] {  			new KeyValuePair<string' UpdateInfo> (selfdir' UpdaterManager.SelfVersion)  		});  	Console.WriteLine (string.Join (Environment.NewLine' versions.Select (x => string.Format (" {0} {1} ({2})"' (x.Value.Version == UpdaterManager.SelfVersion.Version ? "*" : "-")' x.Value.Displayname' x.Value.Version))));  	return 0;  }  case "check": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null)  		Console.WriteLine ("No updates found");  	else if (update.Version == UpdaterManager.SelfVersion.Version)  		Console.WriteLine ("You are running the latest version: {0}"' update.Displayname);  	else  		Console.WriteLine ("New version is available: {0}"' update.Displayname);  	return 0;  }  case "install": {  	var update = UpdaterManager.CheckForUpdate ();  	if (update == null || update.Version == UpdaterManager.SelfVersion.Version) {  		Console.WriteLine ("You are running the latest version: {0} ({1})"' UpdaterManager.SelfVersion.Displayname' System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version);  		return 0;  	}  	Console.WriteLine ("Downloading update \"{0}\" ..."' update.Displayname);  	long lastpg = 0;  	UpdaterManager.DownloadAndUnpackUpdate (update' f => {  		var npg = (long)(f * 100);  		if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  			lastpg = npg;  			Console.WriteLine ("Downloading {0}% ..."' npg);  		}  	});  	Console.WriteLine ("New version \"{0}\" installed!"' update.Displayname);  	return 0;  }  default:  	Console.WriteLine ("Unknown command: \"{0}\""' args [0]);  	Console.WriteLine ();  	Console.WriteLine ("Try the command \"{0}\" instead"' "help");  	return 100;  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: UpdaterManager.DownloadAndUnpackUpdate (update' f => {  	var npg = (long)(f * 100);  	if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  		lastpg = npg;  		Console.WriteLine ("Downloading {0}% ..."' npg);  	}  });  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: UpdaterManager.DownloadAndUnpackUpdate (update' f => {  	var npg = (long)(f * 100);  	if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  		lastpg = npg;  		Console.WriteLine ("Downloading {0}% ..."' npg);  	}  });  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: UpdaterManager.DownloadAndUnpackUpdate (update' f => {  	var npg = (long)(f * 100);  	if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  		lastpg = npg;  		Console.WriteLine ("Downloading {0}% ..."' npg);  	}  });  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: UpdaterManager.DownloadAndUnpackUpdate (update' f => {  	var npg = (long)(f * 100);  	if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  		lastpg = npg;  		Console.WriteLine ("Downloading {0}% ..."' npg);  	}  });  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  	lastpg = npg;  	Console.WriteLine ("Downloading {0}% ..."' npg);  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  	lastpg = npg;  	Console.WriteLine ("Downloading {0}% ..."' npg);  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  	lastpg = npg;  	Console.WriteLine ("Downloading {0}% ..."' npg);  }  
Magic Number,Duplicati.Library.AutoUpdater,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\Library\AutoUpdater\Program.cs,RealMain,The following statement contains a magic number: return 100;  
