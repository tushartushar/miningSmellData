Implementation smell,Namespace,Class,File,Method,Description
Long Method,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The method has 160 lines of code.
Long Method,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The method has 121 lines of code.
Long Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The method has 113 lines of code.
Long Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The method has 105 lines of code.
Complex Method,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,Cyclomatic complexity of the method is 14
Complex Method,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,Cyclomatic complexity of the method is 65
Complex Method,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,Cyclomatic complexity of the method is 10
Complex Method,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,Cyclomatic complexity of the method is 26
Complex Method,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,Cyclomatic complexity of the method is 13
Complex Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,Cyclomatic complexity of the method is 30
Complex Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Delete,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,Cyclomatic complexity of the method is 16
Complex Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,Cyclomatic complexity of the method is 12
Complex Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,Cyclomatic complexity of the method is 8
Long Parameter List,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Examples,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Help,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Delete,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Repair,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Compact,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,TestFilters,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SystemInfo,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeFiles,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListBrokenFiles,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeBrokenFiles,The method has 5 parameters.
Long Parameter List,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SendMail,The method has 5 parameters.
Long Statement,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The length of the statement  "		tp = tp.Replace ("%APP_PATH%"' System.IO.Path.GetFileName (System.Reflection.Assembly.GetExecutingAssembly ().Location)); " is 121.
Long Statement,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The length of the statement  "		tp = tp.Replace ("%EXAMPLE_SOURCE_FILE%"' Library.Utility.Utility.IsClientLinux ? "/source/myfile.txt" : "D:\\source\\file.txt"); " is 129.
Long Statement,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The length of the statement  "			SortedList<string' Library.Interface.ICommandLineArgument> sorted = new SortedList<string' Library.Interface.ICommandLineArgument> (); " is 134.
Long Statement,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintGenericModule,The length of the statement  "	lines.Add (" " + (mod.LoadAsDefault ? Strings.Program.ModuleIsLoadedAutomatically : Strings.Program.ModuleIsNotLoadedAutomatically)); " is 133.
Long Statement,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RealMain,The length of the statement  "			string wintools = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "win-tools"); " is 150.
Long Statement,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RealMain,The length of the statement  "			Environment.SetEnvironmentVariable ("PATH"' Environment.GetEnvironmentVariable ("PATH") + System.IO.Path.PathSeparator.ToString () + wintools + System.IO.Path.PathSeparator.ToString () + System.IO.Path.Combine (wintools' "gpg")//GPG needs to be in a subfolder for wrapping reasons " is 280.
Long Statement,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The length of the statement  "			var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt"); " is 147.
Long Statement,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The length of the statement  "		bool isHelp = cargs.Count == 0 || (cargs.Count >= 1 && string.Equals (cargs [0]' "help"' StringComparison.InvariantCultureIgnoreCase)); " is 135.
Long Statement,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The length of the statement  "		if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) { " is 280.
Long Statement,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The length of the statement  "		List<string> fargs = new List<string> (Library.Utility.Utility.ReadFileWithDefaultEncoding (Library.Utility.Utility.ExpandEnvironmentVariables (filename)).Replace ("\r\n"' "\n").Replace ("\r"' "\n").Split (new String[] { " is 220.
Long Statement,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The length of the statement  "			filter = Library.Utility.FilterExpression.Combine (Library.Utility.FilterExpression.Deserialize (prependfilter.Split (new string[] { " is 132.
Long Statement,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The length of the statement  "			filter = Library.Utility.FilterExpression.Combine (filter' Library.Utility.FilterExpression.Deserialize (appendfilter.Split (new string[] { " is 139.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The length of the statement  "	var fullresult = Duplicati.Library.Utility.Utility.ParseBoolOption (options' "verbose") || Duplicati.Library.Utility.Utility.ParseBoolOption (options' "full-result"); " is 166.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The length of the statement  "		dbpath = Library.Main.DatabaseLocator.GetDatabasePath (backend' new Duplicati.Library.Main.Options (options)' false' true); " is 123.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The length of the statement  "	if (!string.IsNullOrEmpty (dbpath) && System.IO.File.Exists (dbpath) && !options.ContainsKey ("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption (options' "no-local-db")) { " is 192.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "			dbpath = Library.Main.DatabaseLocator.GetDatabasePath (backend' new Duplicati.Library.Main.Options (options)' false' true); " is 123.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "		if (!string.IsNullOrEmpty (dbpath) && System.IO.File.Exists (dbpath) && !options.ContainsKey ("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption (options' "no-local-db")) { " is 192.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "		var isRequestForFiles = !controlFiles && res.Filesets.Count () != 0 && (res.Files == null || res.Files.Count () == 0) && !compareFilter.Empty; " is 142.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "					outwriter.WriteLine ("{0}\t: {1} ({2} files' {3})"' e.Version' e.Time' e.FileCount' Library.Utility.Utility.FormatSizeString (e.FileSizes)); " is 140.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "					outwriter.WriteLine ("{0} {1}"' e.Path' e.Path.EndsWith (System.IO.Path.DirectorySeparatorChar.ToString ()) ? "" : "(" + Library.Utility.Utility.FormatSizeString (e.Sizes.First ()) + ")"); " is 188.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "						outwriter.WriteLine ("{0}\t: {1} {2}"' nx.Index' nx.Time' nx.Size < 0 ? " - " : Library.Utility.Utility.FormatSizeString (nx.Size)); " is 132.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The length of the statement  "                                output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks) " is 140.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The length of the statement  "					output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size))); " is 134.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The length of the statement  "				output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath)); " is 227.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The length of the statement  "					output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use."); " is 162.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "			output.MessageEvent (string.Format ("  {0} files need to be examined ({1}){2}"' files' Library.Utility.Utility.FormatSizeString (size)' counting ? " (still counting)" : "")); " is 174.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "			output.MessageEvent (string.Format ("  Remote size: {0}"' Library.Utility.Utility.FormatSizeString (parsedStats.KnownFileSize))); " is 129.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "		output.MessageEvent (string.Format ("  Data uploaded: {0}"' Library.Utility.Utility.FormatSizeString (result.BackendStatistics.BytesUploaded))); " is 144.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "		output.MessageEvent (string.Format ("  Data downloaded: {0}"' Library.Utility.Utility.FormatSizeString (result.BackendStatistics.BytesDownloaded))); " is 148.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "		output.MessageEvent ("No files were processed. If this was not intentional you may want to use the \"test-filters\" command"); " is 126.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The length of the statement  "	var verbose = Library.Utility.Utility.ParseBoolOption (options' "verbose") || Duplicati.Library.Utility.Utility.ParseBoolOption (options' "full-result"); " is 153.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PrintWrongNumberOfArguments,The length of the statement  "	outwriter.WriteLine (Strings.Program.WrongNumberOfCommandsError_v2 (args.Count' expected' args.Select (n => "\"" + n + "\"").ToArray ())); " is 138.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The length of the statement  "			dbpath = Library.Main.DatabaseLocator.GetDatabasePath (args [0]' new Duplicati.Library.Main.Options (options)' false' true); " is 124.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The length of the statement  "	outwriter.WriteLine ("Please examine the log table of the database to see that no filenames are accidentially left over."); " is 123.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "	var fullresult = Duplicati.Library.Utility.Utility.ParseBoolOption (options' "verbose") || Duplicati.Library.Utility.Utility.ParseBoolOption (options' "full-result"); " is 166.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "		dbpath = Library.Main.DatabaseLocator.GetDatabasePath (args [0]' new Duplicati.Library.Main.Options (options)' false' true); " is 124.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "	if (!string.IsNullOrEmpty (dbpath) && System.IO.File.Exists (dbpath) && !options.ContainsKey ("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption (options' "no-local-db")) { " is 192.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "	Action<Duplicati.Library.Interface.IListChangesResults' IEnumerable<Tuple<Library.Interface.ListChangesChangeType' Library.Interface.ListChangesElementType' string>>> handler = (result' items) => { " is 197.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "		outwriter.WriteLine ("Size of backup {0}: {1}"' result.BaseVersionIndex' Library.Utility.Utility.FormatSizeString (result.PreviousSize)); " is 137.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "		if (result.AddedFolders + result.AddedSymlinks + result.AddedFolders + result.ModifiedFolders + result.ModifiedSymlinks + result.ModifiedFiles + result.DeletedFolders + result.DeletedSymlinks + result.DeletedFiles == 0) " is 219.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "		outwriter.WriteLine ("Size of backup {0}: {1}"' result.CompareVersionIndex' Library.Utility.Utility.FormatSizeString (result.CurrentSize)); " is 139.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,TestFilters,The length of the statement  "		outwriter.WriteLine ("Matched {0} files ({1})"' result.FileCount' Duplicati.Library.Utility.Utility.FormatSizeString (result.FileSize)); " is 136.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SystemInfo,The length of the statement  "	outwriter.WriteLine ("Translated locales: {0}"' string.Join ("' "' Library.Localization.LocalizationService.SupportedCultures)); " is 128.
Long Statement,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListBrokenFiles,The length of the statement  "	var verbose = Duplicati.Library.Utility.Utility.ParseBoolOption (options' "verbose") || Duplicati.Library.Utility.Utility.ParseBoolOption (options' "full-result"); " is 163.
Long Statement,Duplicati.CommandLine,ConsoleOutput,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\ConsoleOutput.cs,BackendEvent,The length of the statement  "				Output.WriteLine ("  Downloading file ({0}) ..."' size < 0 ? "unknown" : Library.Utility.Utility.FormatSizeString (size)); " is 122.
Long Statement,Duplicati.CommandLine,ConsoleOutput,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\ConsoleOutput.cs,BackendEvent,The length of the statement  "				Output.WriteLine ("  Deleting file {0}{1} ..."' path' size < 0 ? "" : (" (" + Library.Utility.Utility.FormatSizeString (size) + ")")); " is 134.
Long Statement,Duplicati.CommandLine,ConsoleOutput,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\ConsoleOutput.cs,RetryEvent,The length of the statement  "			Output.WriteLine (ex == null ? message : string.Format ("{0} => {1}"' message' VerboseErrors ? ex.ToString () : ex.Message)); " is 125.
Long Statement,Duplicati.CommandLine,ConsoleOutput,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\ConsoleOutput.cs,WarningEvent,The length of the statement  "			Output.WriteLine (ex == null ? message : string.Format ("{0} => {1}"' message' VerboseErrors ? ex.ToString () : ex.Message)); " is 125.
Long Statement,Duplicati.CommandLine,ConsoleOutput,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\ConsoleOutput.cs,ErrorEvent,The length of the statement  "			Output.WriteLine (ex == null ? message : string.Format ("{0} => {1}"' message' VerboseErrors ? ex.ToString () : ex.Message)); " is 125.
Long Statement,Duplicati.CommandLine.Strings,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Strings.cs,DeleteCommandNeedsOptions,The length of the statement  "	return LC.L (@"The command {0} needs at least one of the following options set: {1}"' commandname' string.Join ("' "' options)); " is 128.
Long Statement,Duplicati.CommandLine.Strings,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Strings.cs,InternalOptionUsedError,The length of the statement  "	return LC.L (@"The option --{0} was supplied' but it is reserved for internal use and may not be set on the commandline"' optionname); " is 134.
Complex Conditional,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The conditional expression  "!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))"  is complex.
Complex Conditional,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The conditional expression  "!string.IsNullOrEmpty (dbpath) && System.IO.File.Exists (dbpath) && !options.ContainsKey ("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption (options' "no-local-db")"  is complex.
Complex Conditional,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The conditional expression  "!string.IsNullOrEmpty (dbpath) && System.IO.File.Exists (dbpath) && !options.ContainsKey ("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption (options' "no-local-db")"  is complex.
Complex Conditional,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The conditional expression  "res.Filesets.Count () != 0 && (res.Files == null || res.Files.Count () == 0) && compareFilter.Empty"  is complex.
Complex Conditional,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The conditional expression  "!string.IsNullOrEmpty (dbpath) && System.IO.File.Exists (dbpath) && !options.ContainsKey ("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption (options' "no-local-db")"  is complex.
Empty Catch Block,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The method has an empty catch block.
Empty Catch Block,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The method has an empty catch block.
Empty Catch Block,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The method has an empty catch block.
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: using (System.IO.StreamReader sr = new System.IO.StreamReader (System.Reflection.Assembly.GetExecutingAssembly ().GetManifestResourceStream (RESOURCE_NAME))) {  	List<string> keywords = new List<string> ();  	StringBuilder sb = new StringBuilder ();  	foreach (var line in sr.ReadToEnd ().Split (new string[] {  		"\r\n"'  		"\n"'  		"\r"  	}' StringSplitOptions.None)) {  		if (line.Trim ().StartsWith ("#"))  			continue;  		if (line.Trim ().StartsWith (">")) {  			if (sb.Length > 0) {  				string s = sb.ToString ();  				foreach (var k in keywords)  					_document [k] = s;  				keywords.Clear ();  				sb.Clear ();  			}  			string[] elems = line.Split (new string[] {  				" "'  				"\t"  			}' StringSplitOptions.RemoveEmptyEntries);  			if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  				keywords.Add (elems [elems.Length - 1]);  			else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  				keywords.Add ("help");  		} else {  			sb.AppendLine (line);  		}  	}  	if (sb.Length > 0) {  		string s = sb.ToString ();  		foreach (var k in keywords)  			_document [k] = s;  	}  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: using (System.IO.StreamReader sr = new System.IO.StreamReader (System.Reflection.Assembly.GetExecutingAssembly ().GetManifestResourceStream (RESOURCE_NAME))) {  	List<string> keywords = new List<string> ();  	StringBuilder sb = new StringBuilder ();  	foreach (var line in sr.ReadToEnd ().Split (new string[] {  		"\r\n"'  		"\n"'  		"\r"  	}' StringSplitOptions.None)) {  		if (line.Trim ().StartsWith ("#"))  			continue;  		if (line.Trim ().StartsWith (">")) {  			if (sb.Length > 0) {  				string s = sb.ToString ();  				foreach (var k in keywords)  					_document [k] = s;  				keywords.Clear ();  				sb.Clear ();  			}  			string[] elems = line.Split (new string[] {  				" "'  				"\t"  			}' StringSplitOptions.RemoveEmptyEntries);  			if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  				keywords.Add (elems [elems.Length - 1]);  			else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  				keywords.Add ("help");  		} else {  			sb.AppendLine (line);  		}  	}  	if (sb.Length > 0) {  		string s = sb.ToString ();  		foreach (var k in keywords)  			_document [k] = s;  	}  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: using (System.IO.StreamReader sr = new System.IO.StreamReader (System.Reflection.Assembly.GetExecutingAssembly ().GetManifestResourceStream (RESOURCE_NAME))) {  	List<string> keywords = new List<string> ();  	StringBuilder sb = new StringBuilder ();  	foreach (var line in sr.ReadToEnd ().Split (new string[] {  		"\r\n"'  		"\n"'  		"\r"  	}' StringSplitOptions.None)) {  		if (line.Trim ().StartsWith ("#"))  			continue;  		if (line.Trim ().StartsWith (">")) {  			if (sb.Length > 0) {  				string s = sb.ToString ();  				foreach (var k in keywords)  					_document [k] = s;  				keywords.Clear ();  				sb.Clear ();  			}  			string[] elems = line.Split (new string[] {  				" "'  				"\t"  			}' StringSplitOptions.RemoveEmptyEntries);  			if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  				keywords.Add (elems [elems.Length - 1]);  			else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  				keywords.Add ("help");  		} else {  			sb.AppendLine (line);  		}  	}  	if (sb.Length > 0) {  		string s = sb.ToString ();  		foreach (var k in keywords)  			_document [k] = s;  	}  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: foreach (var line in sr.ReadToEnd ().Split (new string[] {  	"\r\n"'  	"\n"'  	"\r"  }' StringSplitOptions.None)) {  	if (line.Trim ().StartsWith ("#"))  		continue;  	if (line.Trim ().StartsWith (">")) {  		if (sb.Length > 0) {  			string s = sb.ToString ();  			foreach (var k in keywords)  				_document [k] = s;  			keywords.Clear ();  			sb.Clear ();  		}  		string[] elems = line.Split (new string[] {  			" "'  			"\t"  		}' StringSplitOptions.RemoveEmptyEntries);  		if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  			keywords.Add (elems [elems.Length - 1]);  		else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  			keywords.Add ("help");  	} else {  		sb.AppendLine (line);  	}  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: foreach (var line in sr.ReadToEnd ().Split (new string[] {  	"\r\n"'  	"\n"'  	"\r"  }' StringSplitOptions.None)) {  	if (line.Trim ().StartsWith ("#"))  		continue;  	if (line.Trim ().StartsWith (">")) {  		if (sb.Length > 0) {  			string s = sb.ToString ();  			foreach (var k in keywords)  				_document [k] = s;  			keywords.Clear ();  			sb.Clear ();  		}  		string[] elems = line.Split (new string[] {  			" "'  			"\t"  		}' StringSplitOptions.RemoveEmptyEntries);  		if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  			keywords.Add (elems [elems.Length - 1]);  		else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  			keywords.Add ("help");  	} else {  		sb.AppendLine (line);  	}  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: foreach (var line in sr.ReadToEnd ().Split (new string[] {  	"\r\n"'  	"\n"'  	"\r"  }' StringSplitOptions.None)) {  	if (line.Trim ().StartsWith ("#"))  		continue;  	if (line.Trim ().StartsWith (">")) {  		if (sb.Length > 0) {  			string s = sb.ToString ();  			foreach (var k in keywords)  				_document [k] = s;  			keywords.Clear ();  			sb.Clear ();  		}  		string[] elems = line.Split (new string[] {  			" "'  			"\t"  		}' StringSplitOptions.RemoveEmptyEntries);  		if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  			keywords.Add (elems [elems.Length - 1]);  		else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  			keywords.Add ("help");  	} else {  		sb.AppendLine (line);  	}  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: if (line.Trim ().StartsWith (">")) {  	if (sb.Length > 0) {  		string s = sb.ToString ();  		foreach (var k in keywords)  			_document [k] = s;  		keywords.Clear ();  		sb.Clear ();  	}  	string[] elems = line.Split (new string[] {  		" "'  		"\t"  	}' StringSplitOptions.RemoveEmptyEntries);  	if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  		keywords.Add (elems [elems.Length - 1]);  	else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  		keywords.Add ("help");  } else {  	sb.AppendLine (line);  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: if (line.Trim ().StartsWith (">")) {  	if (sb.Length > 0) {  		string s = sb.ToString ();  		foreach (var k in keywords)  			_document [k] = s;  		keywords.Clear ();  		sb.Clear ();  	}  	string[] elems = line.Split (new string[] {  		" "'  		"\t"  	}' StringSplitOptions.RemoveEmptyEntries);  	if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  		keywords.Add (elems [elems.Length - 1]);  	else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  		keywords.Add ("help");  } else {  	sb.AppendLine (line);  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: if (line.Trim ().StartsWith (">")) {  	if (sb.Length > 0) {  		string s = sb.ToString ();  		foreach (var k in keywords)  			_document [k] = s;  		keywords.Clear ();  		sb.Clear ();  	}  	string[] elems = line.Split (new string[] {  		" "'  		"\t"  	}' StringSplitOptions.RemoveEmptyEntries);  	if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  		keywords.Add (elems [elems.Length - 1]);  	else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  		keywords.Add ("help");  } else {  	sb.AppendLine (line);  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  	keywords.Add (elems [elems.Length - 1]);  else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  	keywords.Add ("help");  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  	keywords.Add (elems [elems.Length - 1]);  else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  	keywords.Add ("help");  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: if (elems.Length >= 2 && string.Equals (elems [elems.Length - 2]' "help"' StringComparison.InvariantCultureIgnoreCase))  	keywords.Add (elems [elems.Length - 1]);  else if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  	keywords.Add ("help");  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: if (elems.Length == 3 && string.Equals (elems [elems.Length - 1]' "help"' StringComparison.InvariantCultureIgnoreCase))  	keywords.Add ("help");  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: try {  	// This can go wrong if we have no attached console  	if (outwriter == Console.Out)  		windowWidth = Math.Max (12' Console.WindowWidth == 0 ? 80 : Console.WindowWidth);  } catch {  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: try {  	// This can go wrong if we have no attached console  	if (outwriter == Console.Out)  		windowWidth = Math.Max (12' Console.WindowWidth == 0 ? 80 : Console.WindowWidth);  } catch {  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: if (outwriter == Console.Out)  	windowWidth = Math.Max (12' Console.WindowWidth == 0 ? 80 : Console.WindowWidth);  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: if (outwriter == Console.Out)  	windowWidth = Math.Max (12' Console.WindowWidth == 0 ? 80 : Console.WindowWidth);  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: windowWidth = Math.Max (12' Console.WindowWidth == 0 ? 80 : Console.WindowWidth);  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: windowWidth = Math.Max (12' Console.WindowWidth == 0 ? 80 : Console.WindowWidth);  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: foreach (string s in lines) {  	if (string.IsNullOrEmpty (s) || s.Trim ().Length == 0) {  		outwriter.WriteLine ();  		continue;  	}  	string c = s;  	string leadingSpaces = "";  	while (c.Length > 0 && c.StartsWith (" ")) {  		leadingSpaces += " ";  		c = c.Remove (0' 1);  	}  	bool extraIndent = c.StartsWith ("--");  	while (c.Length > 0) {  		int len = Math.Min (windowWidth - 2' leadingSpaces.Length + c.Length);  		len -= leadingSpaces.Length;  		if (len < c.Length) {  			int ix = c.LastIndexOf (" "' len);  			if (ix > 0)  				len = ix;  		}  		outwriter.WriteLine (leadingSpaces + c.Substring (0' len).Trim ());  		c = c.Remove (0' len);  		if (extraIndent) {  			extraIndent = false;  			leadingSpaces += "  ";  		}  	}  }  
Magic Number,Duplicati.CommandLine,Help,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: while (c.Length > 0) {  	int len = Math.Min (windowWidth - 2' leadingSpaces.Length + c.Length);  	len -= leadingSpaces.Length;  	if (len < c.Length) {  		int ix = c.LastIndexOf (" "' len);  		if (ix > 0)  			len = ix;  	}  	outwriter.WriteLine (leadingSpaces + c.Substring (0' len).Trim ());  	c = c.Remove (0' len);  	if (extraIndent) {  		extraIndent = false;  		leadingSpaces += "  ";  	}  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: try {  	List<string> cargs = new List<string> (args);  	var tmpparsed = Library.Utility.FilterCollector.ExtractOptions (cargs);  	var options = tmpparsed.Item1;  	var filter = tmpparsed.Item2;  	verboseErrors = Library.Utility.Utility.ParseBoolOption (options' "debug-output");  	verbose = Library.Utility.Utility.ParseBoolOption (options' "verbose");  	if (cargs.Count == 1 && string.Equals (cargs [0]' "changelog"' StringComparison.InvariantCultureIgnoreCase)) {  		var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt");  		outwriter.WriteLine (System.IO.File.ReadAllText (path));  		return 0;  	}  	foreach (string internaloption in Library.Main.Options.InternalOptions)  		if (options.ContainsKey (internaloption)) {  			outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  			return 200;  		}  	// Probe for "help" to avoid extra processing  	bool isHelp = cargs.Count == 0 || (cargs.Count >= 1 && string.Equals (cargs [0]' "help"' StringComparison.InvariantCultureIgnoreCase));  	if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) {  		string filename;  		if (options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) {  			filename = options ["parameters-file"];  			options.Remove ("parameters-file");  		} else if (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) {  			filename = options ["parameter-file"];  			options.Remove ("parameter-file");  		} else {  			filename = options ["parameterfile"];  			options.Remove ("parameterfile");  		}  		if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  			return 100;  	}  	string command;  	if (cargs.Count > 0) {  		command = cargs [0];  		cargs.RemoveAt (0);  	} else  		command = "help";  	// Update probe for help  	isHelp = string.Equals (command' "help"' StringComparison.InvariantCultureIgnoreCase);  	// Skip the env read if the command is help' otherwise we may report weirdness  	if (!isHelp) {  		if (!options.ContainsKey ("passphrase"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("PASSPHRASE")))  				options ["passphrase"] = System.Environment.GetEnvironmentVariable ("PASSPHRASE");  		if (!options.ContainsKey ("auth-password"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD")))  				options ["auth-password"] = System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD");  		if (!options.ContainsKey ("auth-username"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_USERNAME")))  				options ["auth-username"] = System.Environment.GetEnvironmentVariable ("AUTH_USERNAME");  	}  	var knownCommands = CommandMap;  	if (!isHelp && verbose) {  		outwriter.WriteLine ("Input command: {0}"' command);  		outwriter.WriteLine ("Input arguments: ");  		foreach (var a in cargs)  			outwriter.WriteLine ("\t{0}"' a);  		outwriter.WriteLine ();  		outwriter.WriteLine ("Input options: ");  		foreach (var n in options)  			outwriter.WriteLine ("{0}: {1}"' n.Key' n.Value);  		outwriter.WriteLine ();  	}  	Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  		if (verbose)  			outwriter.WriteLine (string.Format ("Failed to delete temp file: {0}"' path));  	});  	var autoupdate = Library.Utility.Utility.ParseBoolOption (options' "auto-update");  	options.Remove ("auto-update");  	if (knownCommands.ContainsKey (command)) {  		var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  		if (autoupdate && FROM_COMMANDLINE) {  			var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  			if (update == null)  				update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  			if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  				outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  				long lastpg = 0;  				Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  					var npg = (long)(f * 100);  					if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  						lastpg = npg;  						outwriter.WriteLine ("Downloading {0}% ..."' npg);  					}  				});  				outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  			}  		}  		return res;  	} else {  		Commands.PrintInvalidCommand (outwriter' command' cargs);  		return 200;  	}  } catch (Exception ex) {  	Library.UsageReporter.Reporter.Report (ex);  	while (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  		ex = ex.InnerException;  	if (ex is Duplicati.Library.Interface.UserInformationException && !verboseErrors) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.Message);  	} else if (!(ex is Library.Interface.CancelException)) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.ToString ());  	} else {  		errwriter.WriteLine (Strings.Program.UnhandledException (ex.ToString ()));  		while (ex.InnerException != null) {  			ex = ex.InnerException;  			errwriter.WriteLine ();  			errwriter.WriteLine (Strings.Program.UnhandledInnerException (ex.ToString ()));  		}  	}  	//Error = 100  	return 100;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: try {  	List<string> cargs = new List<string> (args);  	var tmpparsed = Library.Utility.FilterCollector.ExtractOptions (cargs);  	var options = tmpparsed.Item1;  	var filter = tmpparsed.Item2;  	verboseErrors = Library.Utility.Utility.ParseBoolOption (options' "debug-output");  	verbose = Library.Utility.Utility.ParseBoolOption (options' "verbose");  	if (cargs.Count == 1 && string.Equals (cargs [0]' "changelog"' StringComparison.InvariantCultureIgnoreCase)) {  		var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt");  		outwriter.WriteLine (System.IO.File.ReadAllText (path));  		return 0;  	}  	foreach (string internaloption in Library.Main.Options.InternalOptions)  		if (options.ContainsKey (internaloption)) {  			outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  			return 200;  		}  	// Probe for "help" to avoid extra processing  	bool isHelp = cargs.Count == 0 || (cargs.Count >= 1 && string.Equals (cargs [0]' "help"' StringComparison.InvariantCultureIgnoreCase));  	if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) {  		string filename;  		if (options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) {  			filename = options ["parameters-file"];  			options.Remove ("parameters-file");  		} else if (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) {  			filename = options ["parameter-file"];  			options.Remove ("parameter-file");  		} else {  			filename = options ["parameterfile"];  			options.Remove ("parameterfile");  		}  		if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  			return 100;  	}  	string command;  	if (cargs.Count > 0) {  		command = cargs [0];  		cargs.RemoveAt (0);  	} else  		command = "help";  	// Update probe for help  	isHelp = string.Equals (command' "help"' StringComparison.InvariantCultureIgnoreCase);  	// Skip the env read if the command is help' otherwise we may report weirdness  	if (!isHelp) {  		if (!options.ContainsKey ("passphrase"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("PASSPHRASE")))  				options ["passphrase"] = System.Environment.GetEnvironmentVariable ("PASSPHRASE");  		if (!options.ContainsKey ("auth-password"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD")))  				options ["auth-password"] = System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD");  		if (!options.ContainsKey ("auth-username"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_USERNAME")))  				options ["auth-username"] = System.Environment.GetEnvironmentVariable ("AUTH_USERNAME");  	}  	var knownCommands = CommandMap;  	if (!isHelp && verbose) {  		outwriter.WriteLine ("Input command: {0}"' command);  		outwriter.WriteLine ("Input arguments: ");  		foreach (var a in cargs)  			outwriter.WriteLine ("\t{0}"' a);  		outwriter.WriteLine ();  		outwriter.WriteLine ("Input options: ");  		foreach (var n in options)  			outwriter.WriteLine ("{0}: {1}"' n.Key' n.Value);  		outwriter.WriteLine ();  	}  	Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  		if (verbose)  			outwriter.WriteLine (string.Format ("Failed to delete temp file: {0}"' path));  	});  	var autoupdate = Library.Utility.Utility.ParseBoolOption (options' "auto-update");  	options.Remove ("auto-update");  	if (knownCommands.ContainsKey (command)) {  		var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  		if (autoupdate && FROM_COMMANDLINE) {  			var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  			if (update == null)  				update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  			if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  				outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  				long lastpg = 0;  				Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  					var npg = (long)(f * 100);  					if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  						lastpg = npg;  						outwriter.WriteLine ("Downloading {0}% ..."' npg);  					}  				});  				outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  			}  		}  		return res;  	} else {  		Commands.PrintInvalidCommand (outwriter' command' cargs);  		return 200;  	}  } catch (Exception ex) {  	Library.UsageReporter.Reporter.Report (ex);  	while (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  		ex = ex.InnerException;  	if (ex is Duplicati.Library.Interface.UserInformationException && !verboseErrors) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.Message);  	} else if (!(ex is Library.Interface.CancelException)) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.ToString ());  	} else {  		errwriter.WriteLine (Strings.Program.UnhandledException (ex.ToString ()));  		while (ex.InnerException != null) {  			ex = ex.InnerException;  			errwriter.WriteLine ();  			errwriter.WriteLine (Strings.Program.UnhandledInnerException (ex.ToString ()));  		}  	}  	//Error = 100  	return 100;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: try {  	List<string> cargs = new List<string> (args);  	var tmpparsed = Library.Utility.FilterCollector.ExtractOptions (cargs);  	var options = tmpparsed.Item1;  	var filter = tmpparsed.Item2;  	verboseErrors = Library.Utility.Utility.ParseBoolOption (options' "debug-output");  	verbose = Library.Utility.Utility.ParseBoolOption (options' "verbose");  	if (cargs.Count == 1 && string.Equals (cargs [0]' "changelog"' StringComparison.InvariantCultureIgnoreCase)) {  		var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt");  		outwriter.WriteLine (System.IO.File.ReadAllText (path));  		return 0;  	}  	foreach (string internaloption in Library.Main.Options.InternalOptions)  		if (options.ContainsKey (internaloption)) {  			outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  			return 200;  		}  	// Probe for "help" to avoid extra processing  	bool isHelp = cargs.Count == 0 || (cargs.Count >= 1 && string.Equals (cargs [0]' "help"' StringComparison.InvariantCultureIgnoreCase));  	if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) {  		string filename;  		if (options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) {  			filename = options ["parameters-file"];  			options.Remove ("parameters-file");  		} else if (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) {  			filename = options ["parameter-file"];  			options.Remove ("parameter-file");  		} else {  			filename = options ["parameterfile"];  			options.Remove ("parameterfile");  		}  		if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  			return 100;  	}  	string command;  	if (cargs.Count > 0) {  		command = cargs [0];  		cargs.RemoveAt (0);  	} else  		command = "help";  	// Update probe for help  	isHelp = string.Equals (command' "help"' StringComparison.InvariantCultureIgnoreCase);  	// Skip the env read if the command is help' otherwise we may report weirdness  	if (!isHelp) {  		if (!options.ContainsKey ("passphrase"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("PASSPHRASE")))  				options ["passphrase"] = System.Environment.GetEnvironmentVariable ("PASSPHRASE");  		if (!options.ContainsKey ("auth-password"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD")))  				options ["auth-password"] = System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD");  		if (!options.ContainsKey ("auth-username"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_USERNAME")))  				options ["auth-username"] = System.Environment.GetEnvironmentVariable ("AUTH_USERNAME");  	}  	var knownCommands = CommandMap;  	if (!isHelp && verbose) {  		outwriter.WriteLine ("Input command: {0}"' command);  		outwriter.WriteLine ("Input arguments: ");  		foreach (var a in cargs)  			outwriter.WriteLine ("\t{0}"' a);  		outwriter.WriteLine ();  		outwriter.WriteLine ("Input options: ");  		foreach (var n in options)  			outwriter.WriteLine ("{0}: {1}"' n.Key' n.Value);  		outwriter.WriteLine ();  	}  	Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  		if (verbose)  			outwriter.WriteLine (string.Format ("Failed to delete temp file: {0}"' path));  	});  	var autoupdate = Library.Utility.Utility.ParseBoolOption (options' "auto-update");  	options.Remove ("auto-update");  	if (knownCommands.ContainsKey (command)) {  		var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  		if (autoupdate && FROM_COMMANDLINE) {  			var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  			if (update == null)  				update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  			if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  				outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  				long lastpg = 0;  				Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  					var npg = (long)(f * 100);  					if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  						lastpg = npg;  						outwriter.WriteLine ("Downloading {0}% ..."' npg);  					}  				});  				outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  			}  		}  		return res;  	} else {  		Commands.PrintInvalidCommand (outwriter' command' cargs);  		return 200;  	}  } catch (Exception ex) {  	Library.UsageReporter.Reporter.Report (ex);  	while (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  		ex = ex.InnerException;  	if (ex is Duplicati.Library.Interface.UserInformationException && !verboseErrors) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.Message);  	} else if (!(ex is Library.Interface.CancelException)) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.ToString ());  	} else {  		errwriter.WriteLine (Strings.Program.UnhandledException (ex.ToString ()));  		while (ex.InnerException != null) {  			ex = ex.InnerException;  			errwriter.WriteLine ();  			errwriter.WriteLine (Strings.Program.UnhandledInnerException (ex.ToString ()));  		}  	}  	//Error = 100  	return 100;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: try {  	List<string> cargs = new List<string> (args);  	var tmpparsed = Library.Utility.FilterCollector.ExtractOptions (cargs);  	var options = tmpparsed.Item1;  	var filter = tmpparsed.Item2;  	verboseErrors = Library.Utility.Utility.ParseBoolOption (options' "debug-output");  	verbose = Library.Utility.Utility.ParseBoolOption (options' "verbose");  	if (cargs.Count == 1 && string.Equals (cargs [0]' "changelog"' StringComparison.InvariantCultureIgnoreCase)) {  		var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt");  		outwriter.WriteLine (System.IO.File.ReadAllText (path));  		return 0;  	}  	foreach (string internaloption in Library.Main.Options.InternalOptions)  		if (options.ContainsKey (internaloption)) {  			outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  			return 200;  		}  	// Probe for "help" to avoid extra processing  	bool isHelp = cargs.Count == 0 || (cargs.Count >= 1 && string.Equals (cargs [0]' "help"' StringComparison.InvariantCultureIgnoreCase));  	if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) {  		string filename;  		if (options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) {  			filename = options ["parameters-file"];  			options.Remove ("parameters-file");  		} else if (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) {  			filename = options ["parameter-file"];  			options.Remove ("parameter-file");  		} else {  			filename = options ["parameterfile"];  			options.Remove ("parameterfile");  		}  		if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  			return 100;  	}  	string command;  	if (cargs.Count > 0) {  		command = cargs [0];  		cargs.RemoveAt (0);  	} else  		command = "help";  	// Update probe for help  	isHelp = string.Equals (command' "help"' StringComparison.InvariantCultureIgnoreCase);  	// Skip the env read if the command is help' otherwise we may report weirdness  	if (!isHelp) {  		if (!options.ContainsKey ("passphrase"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("PASSPHRASE")))  				options ["passphrase"] = System.Environment.GetEnvironmentVariable ("PASSPHRASE");  		if (!options.ContainsKey ("auth-password"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD")))  				options ["auth-password"] = System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD");  		if (!options.ContainsKey ("auth-username"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_USERNAME")))  				options ["auth-username"] = System.Environment.GetEnvironmentVariable ("AUTH_USERNAME");  	}  	var knownCommands = CommandMap;  	if (!isHelp && verbose) {  		outwriter.WriteLine ("Input command: {0}"' command);  		outwriter.WriteLine ("Input arguments: ");  		foreach (var a in cargs)  			outwriter.WriteLine ("\t{0}"' a);  		outwriter.WriteLine ();  		outwriter.WriteLine ("Input options: ");  		foreach (var n in options)  			outwriter.WriteLine ("{0}: {1}"' n.Key' n.Value);  		outwriter.WriteLine ();  	}  	Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  		if (verbose)  			outwriter.WriteLine (string.Format ("Failed to delete temp file: {0}"' path));  	});  	var autoupdate = Library.Utility.Utility.ParseBoolOption (options' "auto-update");  	options.Remove ("auto-update");  	if (knownCommands.ContainsKey (command)) {  		var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  		if (autoupdate && FROM_COMMANDLINE) {  			var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  			if (update == null)  				update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  			if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  				outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  				long lastpg = 0;  				Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  					var npg = (long)(f * 100);  					if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  						lastpg = npg;  						outwriter.WriteLine ("Downloading {0}% ..."' npg);  					}  				});  				outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  			}  		}  		return res;  	} else {  		Commands.PrintInvalidCommand (outwriter' command' cargs);  		return 200;  	}  } catch (Exception ex) {  	Library.UsageReporter.Reporter.Report (ex);  	while (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  		ex = ex.InnerException;  	if (ex is Duplicati.Library.Interface.UserInformationException && !verboseErrors) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.Message);  	} else if (!(ex is Library.Interface.CancelException)) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.ToString ());  	} else {  		errwriter.WriteLine (Strings.Program.UnhandledException (ex.ToString ()));  		while (ex.InnerException != null) {  			ex = ex.InnerException;  			errwriter.WriteLine ();  			errwriter.WriteLine (Strings.Program.UnhandledInnerException (ex.ToString ()));  		}  	}  	//Error = 100  	return 100;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: try {  	List<string> cargs = new List<string> (args);  	var tmpparsed = Library.Utility.FilterCollector.ExtractOptions (cargs);  	var options = tmpparsed.Item1;  	var filter = tmpparsed.Item2;  	verboseErrors = Library.Utility.Utility.ParseBoolOption (options' "debug-output");  	verbose = Library.Utility.Utility.ParseBoolOption (options' "verbose");  	if (cargs.Count == 1 && string.Equals (cargs [0]' "changelog"' StringComparison.InvariantCultureIgnoreCase)) {  		var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt");  		outwriter.WriteLine (System.IO.File.ReadAllText (path));  		return 0;  	}  	foreach (string internaloption in Library.Main.Options.InternalOptions)  		if (options.ContainsKey (internaloption)) {  			outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  			return 200;  		}  	// Probe for "help" to avoid extra processing  	bool isHelp = cargs.Count == 0 || (cargs.Count >= 1 && string.Equals (cargs [0]' "help"' StringComparison.InvariantCultureIgnoreCase));  	if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) {  		string filename;  		if (options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) {  			filename = options ["parameters-file"];  			options.Remove ("parameters-file");  		} else if (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) {  			filename = options ["parameter-file"];  			options.Remove ("parameter-file");  		} else {  			filename = options ["parameterfile"];  			options.Remove ("parameterfile");  		}  		if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  			return 100;  	}  	string command;  	if (cargs.Count > 0) {  		command = cargs [0];  		cargs.RemoveAt (0);  	} else  		command = "help";  	// Update probe for help  	isHelp = string.Equals (command' "help"' StringComparison.InvariantCultureIgnoreCase);  	// Skip the env read if the command is help' otherwise we may report weirdness  	if (!isHelp) {  		if (!options.ContainsKey ("passphrase"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("PASSPHRASE")))  				options ["passphrase"] = System.Environment.GetEnvironmentVariable ("PASSPHRASE");  		if (!options.ContainsKey ("auth-password"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD")))  				options ["auth-password"] = System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD");  		if (!options.ContainsKey ("auth-username"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_USERNAME")))  				options ["auth-username"] = System.Environment.GetEnvironmentVariable ("AUTH_USERNAME");  	}  	var knownCommands = CommandMap;  	if (!isHelp && verbose) {  		outwriter.WriteLine ("Input command: {0}"' command);  		outwriter.WriteLine ("Input arguments: ");  		foreach (var a in cargs)  			outwriter.WriteLine ("\t{0}"' a);  		outwriter.WriteLine ();  		outwriter.WriteLine ("Input options: ");  		foreach (var n in options)  			outwriter.WriteLine ("{0}: {1}"' n.Key' n.Value);  		outwriter.WriteLine ();  	}  	Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  		if (verbose)  			outwriter.WriteLine (string.Format ("Failed to delete temp file: {0}"' path));  	});  	var autoupdate = Library.Utility.Utility.ParseBoolOption (options' "auto-update");  	options.Remove ("auto-update");  	if (knownCommands.ContainsKey (command)) {  		var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  		if (autoupdate && FROM_COMMANDLINE) {  			var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  			if (update == null)  				update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  			if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  				outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  				long lastpg = 0;  				Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  					var npg = (long)(f * 100);  					if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  						lastpg = npg;  						outwriter.WriteLine ("Downloading {0}% ..."' npg);  					}  				});  				outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  			}  		}  		return res;  	} else {  		Commands.PrintInvalidCommand (outwriter' command' cargs);  		return 200;  	}  } catch (Exception ex) {  	Library.UsageReporter.Reporter.Report (ex);  	while (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  		ex = ex.InnerException;  	if (ex is Duplicati.Library.Interface.UserInformationException && !verboseErrors) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.Message);  	} else if (!(ex is Library.Interface.CancelException)) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.ToString ());  	} else {  		errwriter.WriteLine (Strings.Program.UnhandledException (ex.ToString ()));  		while (ex.InnerException != null) {  			ex = ex.InnerException;  			errwriter.WriteLine ();  			errwriter.WriteLine (Strings.Program.UnhandledInnerException (ex.ToString ()));  		}  	}  	//Error = 100  	return 100;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: try {  	List<string> cargs = new List<string> (args);  	var tmpparsed = Library.Utility.FilterCollector.ExtractOptions (cargs);  	var options = tmpparsed.Item1;  	var filter = tmpparsed.Item2;  	verboseErrors = Library.Utility.Utility.ParseBoolOption (options' "debug-output");  	verbose = Library.Utility.Utility.ParseBoolOption (options' "verbose");  	if (cargs.Count == 1 && string.Equals (cargs [0]' "changelog"' StringComparison.InvariantCultureIgnoreCase)) {  		var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt");  		outwriter.WriteLine (System.IO.File.ReadAllText (path));  		return 0;  	}  	foreach (string internaloption in Library.Main.Options.InternalOptions)  		if (options.ContainsKey (internaloption)) {  			outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  			return 200;  		}  	// Probe for "help" to avoid extra processing  	bool isHelp = cargs.Count == 0 || (cargs.Count >= 1 && string.Equals (cargs [0]' "help"' StringComparison.InvariantCultureIgnoreCase));  	if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) {  		string filename;  		if (options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) {  			filename = options ["parameters-file"];  			options.Remove ("parameters-file");  		} else if (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) {  			filename = options ["parameter-file"];  			options.Remove ("parameter-file");  		} else {  			filename = options ["parameterfile"];  			options.Remove ("parameterfile");  		}  		if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  			return 100;  	}  	string command;  	if (cargs.Count > 0) {  		command = cargs [0];  		cargs.RemoveAt (0);  	} else  		command = "help";  	// Update probe for help  	isHelp = string.Equals (command' "help"' StringComparison.InvariantCultureIgnoreCase);  	// Skip the env read if the command is help' otherwise we may report weirdness  	if (!isHelp) {  		if (!options.ContainsKey ("passphrase"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("PASSPHRASE")))  				options ["passphrase"] = System.Environment.GetEnvironmentVariable ("PASSPHRASE");  		if (!options.ContainsKey ("auth-password"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD")))  				options ["auth-password"] = System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD");  		if (!options.ContainsKey ("auth-username"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_USERNAME")))  				options ["auth-username"] = System.Environment.GetEnvironmentVariable ("AUTH_USERNAME");  	}  	var knownCommands = CommandMap;  	if (!isHelp && verbose) {  		outwriter.WriteLine ("Input command: {0}"' command);  		outwriter.WriteLine ("Input arguments: ");  		foreach (var a in cargs)  			outwriter.WriteLine ("\t{0}"' a);  		outwriter.WriteLine ();  		outwriter.WriteLine ("Input options: ");  		foreach (var n in options)  			outwriter.WriteLine ("{0}: {1}"' n.Key' n.Value);  		outwriter.WriteLine ();  	}  	Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  		if (verbose)  			outwriter.WriteLine (string.Format ("Failed to delete temp file: {0}"' path));  	});  	var autoupdate = Library.Utility.Utility.ParseBoolOption (options' "auto-update");  	options.Remove ("auto-update");  	if (knownCommands.ContainsKey (command)) {  		var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  		if (autoupdate && FROM_COMMANDLINE) {  			var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  			if (update == null)  				update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  			if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  				outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  				long lastpg = 0;  				Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  					var npg = (long)(f * 100);  					if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  						lastpg = npg;  						outwriter.WriteLine ("Downloading {0}% ..."' npg);  					}  				});  				outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  			}  		}  		return res;  	} else {  		Commands.PrintInvalidCommand (outwriter' command' cargs);  		return 200;  	}  } catch (Exception ex) {  	Library.UsageReporter.Reporter.Report (ex);  	while (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  		ex = ex.InnerException;  	if (ex is Duplicati.Library.Interface.UserInformationException && !verboseErrors) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.Message);  	} else if (!(ex is Library.Interface.CancelException)) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.ToString ());  	} else {  		errwriter.WriteLine (Strings.Program.UnhandledException (ex.ToString ()));  		while (ex.InnerException != null) {  			ex = ex.InnerException;  			errwriter.WriteLine ();  			errwriter.WriteLine (Strings.Program.UnhandledInnerException (ex.ToString ()));  		}  	}  	//Error = 100  	return 100;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: try {  	List<string> cargs = new List<string> (args);  	var tmpparsed = Library.Utility.FilterCollector.ExtractOptions (cargs);  	var options = tmpparsed.Item1;  	var filter = tmpparsed.Item2;  	verboseErrors = Library.Utility.Utility.ParseBoolOption (options' "debug-output");  	verbose = Library.Utility.Utility.ParseBoolOption (options' "verbose");  	if (cargs.Count == 1 && string.Equals (cargs [0]' "changelog"' StringComparison.InvariantCultureIgnoreCase)) {  		var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt");  		outwriter.WriteLine (System.IO.File.ReadAllText (path));  		return 0;  	}  	foreach (string internaloption in Library.Main.Options.InternalOptions)  		if (options.ContainsKey (internaloption)) {  			outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  			return 200;  		}  	// Probe for "help" to avoid extra processing  	bool isHelp = cargs.Count == 0 || (cargs.Count >= 1 && string.Equals (cargs [0]' "help"' StringComparison.InvariantCultureIgnoreCase));  	if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) {  		string filename;  		if (options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) {  			filename = options ["parameters-file"];  			options.Remove ("parameters-file");  		} else if (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) {  			filename = options ["parameter-file"];  			options.Remove ("parameter-file");  		} else {  			filename = options ["parameterfile"];  			options.Remove ("parameterfile");  		}  		if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  			return 100;  	}  	string command;  	if (cargs.Count > 0) {  		command = cargs [0];  		cargs.RemoveAt (0);  	} else  		command = "help";  	// Update probe for help  	isHelp = string.Equals (command' "help"' StringComparison.InvariantCultureIgnoreCase);  	// Skip the env read if the command is help' otherwise we may report weirdness  	if (!isHelp) {  		if (!options.ContainsKey ("passphrase"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("PASSPHRASE")))  				options ["passphrase"] = System.Environment.GetEnvironmentVariable ("PASSPHRASE");  		if (!options.ContainsKey ("auth-password"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD")))  				options ["auth-password"] = System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD");  		if (!options.ContainsKey ("auth-username"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_USERNAME")))  				options ["auth-username"] = System.Environment.GetEnvironmentVariable ("AUTH_USERNAME");  	}  	var knownCommands = CommandMap;  	if (!isHelp && verbose) {  		outwriter.WriteLine ("Input command: {0}"' command);  		outwriter.WriteLine ("Input arguments: ");  		foreach (var a in cargs)  			outwriter.WriteLine ("\t{0}"' a);  		outwriter.WriteLine ();  		outwriter.WriteLine ("Input options: ");  		foreach (var n in options)  			outwriter.WriteLine ("{0}: {1}"' n.Key' n.Value);  		outwriter.WriteLine ();  	}  	Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  		if (verbose)  			outwriter.WriteLine (string.Format ("Failed to delete temp file: {0}"' path));  	});  	var autoupdate = Library.Utility.Utility.ParseBoolOption (options' "auto-update");  	options.Remove ("auto-update");  	if (knownCommands.ContainsKey (command)) {  		var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  		if (autoupdate && FROM_COMMANDLINE) {  			var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  			if (update == null)  				update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  			if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  				outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  				long lastpg = 0;  				Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  					var npg = (long)(f * 100);  					if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  						lastpg = npg;  						outwriter.WriteLine ("Downloading {0}% ..."' npg);  					}  				});  				outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  			}  		}  		return res;  	} else {  		Commands.PrintInvalidCommand (outwriter' command' cargs);  		return 200;  	}  } catch (Exception ex) {  	Library.UsageReporter.Reporter.Report (ex);  	while (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  		ex = ex.InnerException;  	if (ex is Duplicati.Library.Interface.UserInformationException && !verboseErrors) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.Message);  	} else if (!(ex is Library.Interface.CancelException)) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.ToString ());  	} else {  		errwriter.WriteLine (Strings.Program.UnhandledException (ex.ToString ()));  		while (ex.InnerException != null) {  			ex = ex.InnerException;  			errwriter.WriteLine ();  			errwriter.WriteLine (Strings.Program.UnhandledInnerException (ex.ToString ()));  		}  	}  	//Error = 100  	return 100;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: try {  	List<string> cargs = new List<string> (args);  	var tmpparsed = Library.Utility.FilterCollector.ExtractOptions (cargs);  	var options = tmpparsed.Item1;  	var filter = tmpparsed.Item2;  	verboseErrors = Library.Utility.Utility.ParseBoolOption (options' "debug-output");  	verbose = Library.Utility.Utility.ParseBoolOption (options' "verbose");  	if (cargs.Count == 1 && string.Equals (cargs [0]' "changelog"' StringComparison.InvariantCultureIgnoreCase)) {  		var path = System.IO.Path.Combine (System.IO.Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location)' "changelog.txt");  		outwriter.WriteLine (System.IO.File.ReadAllText (path));  		return 0;  	}  	foreach (string internaloption in Library.Main.Options.InternalOptions)  		if (options.ContainsKey (internaloption)) {  			outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  			return 200;  		}  	// Probe for "help" to avoid extra processing  	bool isHelp = cargs.Count == 0 || (cargs.Count >= 1 && string.Equals (cargs [0]' "help"' StringComparison.InvariantCultureIgnoreCase));  	if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) {  		string filename;  		if (options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) {  			filename = options ["parameters-file"];  			options.Remove ("parameters-file");  		} else if (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) {  			filename = options ["parameter-file"];  			options.Remove ("parameter-file");  		} else {  			filename = options ["parameterfile"];  			options.Remove ("parameterfile");  		}  		if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  			return 100;  	}  	string command;  	if (cargs.Count > 0) {  		command = cargs [0];  		cargs.RemoveAt (0);  	} else  		command = "help";  	// Update probe for help  	isHelp = string.Equals (command' "help"' StringComparison.InvariantCultureIgnoreCase);  	// Skip the env read if the command is help' otherwise we may report weirdness  	if (!isHelp) {  		if (!options.ContainsKey ("passphrase"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("PASSPHRASE")))  				options ["passphrase"] = System.Environment.GetEnvironmentVariable ("PASSPHRASE");  		if (!options.ContainsKey ("auth-password"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD")))  				options ["auth-password"] = System.Environment.GetEnvironmentVariable ("AUTH_PASSWORD");  		if (!options.ContainsKey ("auth-username"))  			if (!string.IsNullOrEmpty (System.Environment.GetEnvironmentVariable ("AUTH_USERNAME")))  				options ["auth-username"] = System.Environment.GetEnvironmentVariable ("AUTH_USERNAME");  	}  	var knownCommands = CommandMap;  	if (!isHelp && verbose) {  		outwriter.WriteLine ("Input command: {0}"' command);  		outwriter.WriteLine ("Input arguments: ");  		foreach (var a in cargs)  			outwriter.WriteLine ("\t{0}"' a);  		outwriter.WriteLine ();  		outwriter.WriteLine ("Input options: ");  		foreach (var n in options)  			outwriter.WriteLine ("{0}: {1}"' n.Key' n.Value);  		outwriter.WriteLine ();  	}  	Duplicati.Library.Utility.TempFile.RemoveOldApplicationTempFiles ((path' ex) => {  		if (verbose)  			outwriter.WriteLine (string.Format ("Failed to delete temp file: {0}"' path));  	});  	var autoupdate = Library.Utility.Utility.ParseBoolOption (options' "auto-update");  	options.Remove ("auto-update");  	if (knownCommands.ContainsKey (command)) {  		var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  		if (autoupdate && FROM_COMMANDLINE) {  			var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  			if (update == null)  				update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  			if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  				outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  				long lastpg = 0;  				Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  					var npg = (long)(f * 100);  					if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  						lastpg = npg;  						outwriter.WriteLine ("Downloading {0}% ..."' npg);  					}  				});  				outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  			}  		}  		return res;  	} else {  		Commands.PrintInvalidCommand (outwriter' command' cargs);  		return 200;  	}  } catch (Exception ex) {  	Library.UsageReporter.Reporter.Report (ex);  	while (ex is System.Reflection.TargetInvocationException && ex.InnerException != null)  		ex = ex.InnerException;  	if (ex is Duplicati.Library.Interface.UserInformationException && !verboseErrors) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.Message);  	} else if (!(ex is Library.Interface.CancelException)) {  		errwriter.WriteLine ();  		errwriter.WriteLine (ex.ToString ());  	} else {  		errwriter.WriteLine (Strings.Program.UnhandledException (ex.ToString ()));  		while (ex.InnerException != null) {  			ex = ex.InnerException;  			errwriter.WriteLine ();  			errwriter.WriteLine (Strings.Program.UnhandledInnerException (ex.ToString ()));  		}  	}  	//Error = 100  	return 100;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: foreach (string internaloption in Library.Main.Options.InternalOptions)  	if (options.ContainsKey (internaloption)) {  		outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  		return 200;  	}  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (options.ContainsKey (internaloption)) {  	outwriter.WriteLine (Strings.Program.InternalOptionUsedError (internaloption));  	return 200;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (!isHelp && ((options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) || (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) || (options.ContainsKey ("parameterfile") && !string.IsNullOrEmpty ("parameterfile")))) {  	string filename;  	if (options.ContainsKey ("parameters-file") && !string.IsNullOrEmpty ("parameters-file")) {  		filename = options ["parameters-file"];  		options.Remove ("parameters-file");  	} else if (options.ContainsKey ("parameter-file") && !string.IsNullOrEmpty ("parameter-file")) {  		filename = options ["parameter-file"];  		options.Remove ("parameter-file");  	} else {  		filename = options ["parameterfile"];  		options.Remove ("parameterfile");  	}  	if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  		return 100;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (!ReadOptionsFromFile (outwriter' filename' ref filter' cargs' options))  	return 100;  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: return 100;  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (knownCommands.ContainsKey (command)) {  	var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  	if (autoupdate && FROM_COMMANDLINE) {  		var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  		if (update == null)  			update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  		if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  			outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  			long lastpg = 0;  			Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  				var npg = (long)(f * 100);  				if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  					lastpg = npg;  					outwriter.WriteLine ("Downloading {0}% ..."' npg);  				}  			});  			outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  		}  	}  	return res;  } else {  	Commands.PrintInvalidCommand (outwriter' command' cargs);  	return 200;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (knownCommands.ContainsKey (command)) {  	var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  	if (autoupdate && FROM_COMMANDLINE) {  		var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  		if (update == null)  			update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  		if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  			outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  			long lastpg = 0;  			Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  				var npg = (long)(f * 100);  				if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  					lastpg = npg;  					outwriter.WriteLine ("Downloading {0}% ..."' npg);  				}  			});  			outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  		}  	}  	return res;  } else {  	Commands.PrintInvalidCommand (outwriter' command' cargs);  	return 200;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (knownCommands.ContainsKey (command)) {  	var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  	if (autoupdate && FROM_COMMANDLINE) {  		var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  		if (update == null)  			update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  		if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  			outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  			long lastpg = 0;  			Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  				var npg = (long)(f * 100);  				if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  					lastpg = npg;  					outwriter.WriteLine ("Downloading {0}% ..."' npg);  				}  			});  			outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  		}  	}  	return res;  } else {  	Commands.PrintInvalidCommand (outwriter' command' cargs);  	return 200;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (knownCommands.ContainsKey (command)) {  	var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  	if (autoupdate && FROM_COMMANDLINE) {  		var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  		if (update == null)  			update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  		if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  			outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  			long lastpg = 0;  			Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  				var npg = (long)(f * 100);  				if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  					lastpg = npg;  					outwriter.WriteLine ("Downloading {0}% ..."' npg);  				}  			});  			outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  		}  	}  	return res;  } else {  	Commands.PrintInvalidCommand (outwriter' command' cargs);  	return 200;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (knownCommands.ContainsKey (command)) {  	var res = knownCommands [command] (outwriter' setup' cargs' options' filter);  	if (autoupdate && FROM_COMMANDLINE) {  		var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  		if (update == null)  			update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  		if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  			outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  			long lastpg = 0;  			Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  				var npg = (long)(f * 100);  				if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  					lastpg = npg;  					outwriter.WriteLine ("Downloading {0}% ..."' npg);  				}  			});  			outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  		}  	}  	return res;  } else {  	Commands.PrintInvalidCommand (outwriter' command' cargs);  	return 200;  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (autoupdate && FROM_COMMANDLINE) {  	var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  	if (update == null)  		update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  	if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  		outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  		long lastpg = 0;  		Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  			var npg = (long)(f * 100);  			if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  				lastpg = npg;  				outwriter.WriteLine ("Downloading {0}% ..."' npg);  			}  		});  		outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  	}  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (autoupdate && FROM_COMMANDLINE) {  	var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  	if (update == null)  		update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  	if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  		outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  		long lastpg = 0;  		Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  			var npg = (long)(f * 100);  			if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  				lastpg = npg;  				outwriter.WriteLine ("Downloading {0}% ..."' npg);  			}  		});  		outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  	}  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (autoupdate && FROM_COMMANDLINE) {  	var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  	if (update == null)  		update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  	if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  		outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  		long lastpg = 0;  		Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  			var npg = (long)(f * 100);  			if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  				lastpg = npg;  				outwriter.WriteLine ("Downloading {0}% ..."' npg);  			}  		});  		outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  	}  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (autoupdate && FROM_COMMANDLINE) {  	var update = Library.AutoUpdater.UpdaterManager.LastUpdateCheckVersion;  	if (update == null)  		update = Library.AutoUpdater.UpdaterManager.CheckForUpdate ();  	if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  		outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  		long lastpg = 0;  		Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  			var npg = (long)(f * 100);  			if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  				lastpg = npg;  				outwriter.WriteLine ("Downloading {0}% ..."' npg);  			}  		});  		outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  	}  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  	outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  	long lastpg = 0;  	Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  		var npg = (long)(f * 100);  		if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  			lastpg = npg;  			outwriter.WriteLine ("Downloading {0}% ..."' npg);  		}  	});  	outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  	outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  	long lastpg = 0;  	Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  		var npg = (long)(f * 100);  		if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  			lastpg = npg;  			outwriter.WriteLine ("Downloading {0}% ..."' npg);  		}  	});  	outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  	outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  	long lastpg = 0;  	Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  		var npg = (long)(f * 100);  		if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  			lastpg = npg;  			outwriter.WriteLine ("Downloading {0}% ..."' npg);  		}  	});  	outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (update != null && update.Version != Library.AutoUpdater.UpdaterManager.SelfVersion.Version) {  	outwriter.WriteLine ("Found update \"{0}\"' downloading ..."' update.Displayname);  	long lastpg = 0;  	Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  		var npg = (long)(f * 100);  		if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  			lastpg = npg;  			outwriter.WriteLine ("Downloading {0}% ..."' npg);  		}  	});  	outwriter.WriteLine ("Update \"{0}\" ({1}) installed' using on next launch"' update.Displayname' update.Version);  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  	var npg = (long)(f * 100);  	if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  		lastpg = npg;  		outwriter.WriteLine ("Downloading {0}% ..."' npg);  	}  });  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  	var npg = (long)(f * 100);  	if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  		lastpg = npg;  		outwriter.WriteLine ("Downloading {0}% ..."' npg);  	}  });  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  	var npg = (long)(f * 100);  	if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  		lastpg = npg;  		outwriter.WriteLine ("Downloading {0}% ..."' npg);  	}  });  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate (update' f => {  	var npg = (long)(f * 100);  	if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  		lastpg = npg;  		outwriter.WriteLine ("Downloading {0}% ..."' npg);  	}  });  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  	lastpg = npg;  	outwriter.WriteLine ("Downloading {0}% ..."' npg);  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  	lastpg = npg;  	outwriter.WriteLine ("Downloading {0}% ..."' npg);  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: if (Math.Abs (npg - lastpg) >= 5 || (npg == 100 && lastpg != 100)) {  	lastpg = npg;  	outwriter.WriteLine ("Downloading {0}% ..."' npg);  }  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Program,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Program.cs,RunCommandLine,The following statement contains a magic number: return 100;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (args.Count == 0) {  	outwriter.WriteLine ("You must specify at least a remote filename");  	return 200;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: using (var i = new Library.Main.Controller (backend' options' new ConsoleOutput (outwriter' options))) {  	setup (i);  	i.ListAffected (args' res => {  		if (res.Filesets != null && res.Filesets.Count () != 0) {  			outwriter.WriteLine ("The following filesets are affected:");  			foreach (var e in res.Filesets)  				outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  			outwriter.WriteLine ();  		}  		if (res.Files != null) {  			var filecount = res.Files.Count ();  			if (filecount == 0) {  				outwriter.WriteLine ("No files are affected");  			} else {  				var c = 0;  				outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  				foreach (var file in res.Files) {  					c++;  					outwriter.WriteLine (file.Path);  					if (c > 10 && filecount > 10 && !fullresult) {  						outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  						break;  					}  				}  			}  			outwriter.WriteLine ();  		}  		if (res.LogMessages != null) {  			var logcount = res.LogMessages.Count ();  			if (logcount == 0 || (logcount > 10 && !fullresult))  				outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  			else {  				outwriter.WriteLine ("The following related log messages were found:");  				foreach (var log in res.LogMessages)  					if (log.Message.Length > 100 && !fullresult)  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  					else  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  			}  			outwriter.WriteLine ();  		}  	});  	return 0;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: using (var i = new Library.Main.Controller (backend' options' new ConsoleOutput (outwriter' options))) {  	setup (i);  	i.ListAffected (args' res => {  		if (res.Filesets != null && res.Filesets.Count () != 0) {  			outwriter.WriteLine ("The following filesets are affected:");  			foreach (var e in res.Filesets)  				outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  			outwriter.WriteLine ();  		}  		if (res.Files != null) {  			var filecount = res.Files.Count ();  			if (filecount == 0) {  				outwriter.WriteLine ("No files are affected");  			} else {  				var c = 0;  				outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  				foreach (var file in res.Files) {  					c++;  					outwriter.WriteLine (file.Path);  					if (c > 10 && filecount > 10 && !fullresult) {  						outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  						break;  					}  				}  			}  			outwriter.WriteLine ();  		}  		if (res.LogMessages != null) {  			var logcount = res.LogMessages.Count ();  			if (logcount == 0 || (logcount > 10 && !fullresult))  				outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  			else {  				outwriter.WriteLine ("The following related log messages were found:");  				foreach (var log in res.LogMessages)  					if (log.Message.Length > 100 && !fullresult)  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  					else  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  			}  			outwriter.WriteLine ();  		}  	});  	return 0;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: using (var i = new Library.Main.Controller (backend' options' new ConsoleOutput (outwriter' options))) {  	setup (i);  	i.ListAffected (args' res => {  		if (res.Filesets != null && res.Filesets.Count () != 0) {  			outwriter.WriteLine ("The following filesets are affected:");  			foreach (var e in res.Filesets)  				outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  			outwriter.WriteLine ();  		}  		if (res.Files != null) {  			var filecount = res.Files.Count ();  			if (filecount == 0) {  				outwriter.WriteLine ("No files are affected");  			} else {  				var c = 0;  				outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  				foreach (var file in res.Files) {  					c++;  					outwriter.WriteLine (file.Path);  					if (c > 10 && filecount > 10 && !fullresult) {  						outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  						break;  					}  				}  			}  			outwriter.WriteLine ();  		}  		if (res.LogMessages != null) {  			var logcount = res.LogMessages.Count ();  			if (logcount == 0 || (logcount > 10 && !fullresult))  				outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  			else {  				outwriter.WriteLine ("The following related log messages were found:");  				foreach (var log in res.LogMessages)  					if (log.Message.Length > 100 && !fullresult)  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  					else  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  			}  			outwriter.WriteLine ();  		}  	});  	return 0;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: using (var i = new Library.Main.Controller (backend' options' new ConsoleOutput (outwriter' options))) {  	setup (i);  	i.ListAffected (args' res => {  		if (res.Filesets != null && res.Filesets.Count () != 0) {  			outwriter.WriteLine ("The following filesets are affected:");  			foreach (var e in res.Filesets)  				outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  			outwriter.WriteLine ();  		}  		if (res.Files != null) {  			var filecount = res.Files.Count ();  			if (filecount == 0) {  				outwriter.WriteLine ("No files are affected");  			} else {  				var c = 0;  				outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  				foreach (var file in res.Files) {  					c++;  					outwriter.WriteLine (file.Path);  					if (c > 10 && filecount > 10 && !fullresult) {  						outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  						break;  					}  				}  			}  			outwriter.WriteLine ();  		}  		if (res.LogMessages != null) {  			var logcount = res.LogMessages.Count ();  			if (logcount == 0 || (logcount > 10 && !fullresult))  				outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  			else {  				outwriter.WriteLine ("The following related log messages were found:");  				foreach (var log in res.LogMessages)  					if (log.Message.Length > 100 && !fullresult)  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  					else  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  			}  			outwriter.WriteLine ();  		}  	});  	return 0;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: using (var i = new Library.Main.Controller (backend' options' new ConsoleOutput (outwriter' options))) {  	setup (i);  	i.ListAffected (args' res => {  		if (res.Filesets != null && res.Filesets.Count () != 0) {  			outwriter.WriteLine ("The following filesets are affected:");  			foreach (var e in res.Filesets)  				outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  			outwriter.WriteLine ();  		}  		if (res.Files != null) {  			var filecount = res.Files.Count ();  			if (filecount == 0) {  				outwriter.WriteLine ("No files are affected");  			} else {  				var c = 0;  				outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  				foreach (var file in res.Files) {  					c++;  					outwriter.WriteLine (file.Path);  					if (c > 10 && filecount > 10 && !fullresult) {  						outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  						break;  					}  				}  			}  			outwriter.WriteLine ();  		}  		if (res.LogMessages != null) {  			var logcount = res.LogMessages.Count ();  			if (logcount == 0 || (logcount > 10 && !fullresult))  				outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  			else {  				outwriter.WriteLine ("The following related log messages were found:");  				foreach (var log in res.LogMessages)  					if (log.Message.Length > 100 && !fullresult)  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  					else  						outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  			}  			outwriter.WriteLine ();  		}  	});  	return 0;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected (args' res => {  	if (res.Filesets != null && res.Filesets.Count () != 0) {  		outwriter.WriteLine ("The following filesets are affected:");  		foreach (var e in res.Filesets)  			outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  		outwriter.WriteLine ();  	}  	if (res.Files != null) {  		var filecount = res.Files.Count ();  		if (filecount == 0) {  			outwriter.WriteLine ("No files are affected");  		} else {  			var c = 0;  			outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  			foreach (var file in res.Files) {  				c++;  				outwriter.WriteLine (file.Path);  				if (c > 10 && filecount > 10 && !fullresult) {  					outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  					break;  				}  			}  		}  		outwriter.WriteLine ();  	}  	if (res.LogMessages != null) {  		var logcount = res.LogMessages.Count ();  		if (logcount == 0 || (logcount > 10 && !fullresult))  			outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  		else {  			outwriter.WriteLine ("The following related log messages were found:");  			foreach (var log in res.LogMessages)  				if (log.Message.Length > 100 && !fullresult)  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  				else  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  		}  		outwriter.WriteLine ();  	}  });  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected (args' res => {  	if (res.Filesets != null && res.Filesets.Count () != 0) {  		outwriter.WriteLine ("The following filesets are affected:");  		foreach (var e in res.Filesets)  			outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  		outwriter.WriteLine ();  	}  	if (res.Files != null) {  		var filecount = res.Files.Count ();  		if (filecount == 0) {  			outwriter.WriteLine ("No files are affected");  		} else {  			var c = 0;  			outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  			foreach (var file in res.Files) {  				c++;  				outwriter.WriteLine (file.Path);  				if (c > 10 && filecount > 10 && !fullresult) {  					outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  					break;  				}  			}  		}  		outwriter.WriteLine ();  	}  	if (res.LogMessages != null) {  		var logcount = res.LogMessages.Count ();  		if (logcount == 0 || (logcount > 10 && !fullresult))  			outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  		else {  			outwriter.WriteLine ("The following related log messages were found:");  			foreach (var log in res.LogMessages)  				if (log.Message.Length > 100 && !fullresult)  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  				else  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  		}  		outwriter.WriteLine ();  	}  });  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected (args' res => {  	if (res.Filesets != null && res.Filesets.Count () != 0) {  		outwriter.WriteLine ("The following filesets are affected:");  		foreach (var e in res.Filesets)  			outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  		outwriter.WriteLine ();  	}  	if (res.Files != null) {  		var filecount = res.Files.Count ();  		if (filecount == 0) {  			outwriter.WriteLine ("No files are affected");  		} else {  			var c = 0;  			outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  			foreach (var file in res.Files) {  				c++;  				outwriter.WriteLine (file.Path);  				if (c > 10 && filecount > 10 && !fullresult) {  					outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  					break;  				}  			}  		}  		outwriter.WriteLine ();  	}  	if (res.LogMessages != null) {  		var logcount = res.LogMessages.Count ();  		if (logcount == 0 || (logcount > 10 && !fullresult))  			outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  		else {  			outwriter.WriteLine ("The following related log messages were found:");  			foreach (var log in res.LogMessages)  				if (log.Message.Length > 100 && !fullresult)  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  				else  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  		}  		outwriter.WriteLine ();  	}  });  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected (args' res => {  	if (res.Filesets != null && res.Filesets.Count () != 0) {  		outwriter.WriteLine ("The following filesets are affected:");  		foreach (var e in res.Filesets)  			outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  		outwriter.WriteLine ();  	}  	if (res.Files != null) {  		var filecount = res.Files.Count ();  		if (filecount == 0) {  			outwriter.WriteLine ("No files are affected");  		} else {  			var c = 0;  			outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  			foreach (var file in res.Files) {  				c++;  				outwriter.WriteLine (file.Path);  				if (c > 10 && filecount > 10 && !fullresult) {  					outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  					break;  				}  			}  		}  		outwriter.WriteLine ();  	}  	if (res.LogMessages != null) {  		var logcount = res.LogMessages.Count ();  		if (logcount == 0 || (logcount > 10 && !fullresult))  			outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  		else {  			outwriter.WriteLine ("The following related log messages were found:");  			foreach (var log in res.LogMessages)  				if (log.Message.Length > 100 && !fullresult)  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  				else  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  		}  		outwriter.WriteLine ();  	}  });  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected (args' res => {  	if (res.Filesets != null && res.Filesets.Count () != 0) {  		outwriter.WriteLine ("The following filesets are affected:");  		foreach (var e in res.Filesets)  			outwriter.WriteLine ("{0}\t: {1}"' e.Version' e.Time);  		outwriter.WriteLine ();  	}  	if (res.Files != null) {  		var filecount = res.Files.Count ();  		if (filecount == 0) {  			outwriter.WriteLine ("No files are affected");  		} else {  			var c = 0;  			outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  			foreach (var file in res.Files) {  				c++;  				outwriter.WriteLine (file.Path);  				if (c > 10 && filecount > 10 && !fullresult) {  					outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  					break;  				}  			}  		}  		outwriter.WriteLine ();  	}  	if (res.LogMessages != null) {  		var logcount = res.LogMessages.Count ();  		if (logcount == 0 || (logcount > 10 && !fullresult))  			outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  		else {  			outwriter.WriteLine ("The following related log messages were found:");  			foreach (var log in res.LogMessages)  				if (log.Message.Length > 100 && !fullresult)  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  				else  					outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  		}  		outwriter.WriteLine ();  	}  });  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (res.Files != null) {  	var filecount = res.Files.Count ();  	if (filecount == 0) {  		outwriter.WriteLine ("No files are affected");  	} else {  		var c = 0;  		outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  		foreach (var file in res.Files) {  			c++;  			outwriter.WriteLine (file.Path);  			if (c > 10 && filecount > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  				break;  			}  		}  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (res.Files != null) {  	var filecount = res.Files.Count ();  	if (filecount == 0) {  		outwriter.WriteLine ("No files are affected");  	} else {  		var c = 0;  		outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  		foreach (var file in res.Files) {  			c++;  			outwriter.WriteLine (file.Path);  			if (c > 10 && filecount > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  				break;  			}  		}  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (filecount == 0) {  	outwriter.WriteLine ("No files are affected");  } else {  	var c = 0;  	outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  	foreach (var file in res.Files) {  		c++;  		outwriter.WriteLine (file.Path);  		if (c > 10 && filecount > 10 && !fullresult) {  			outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  			break;  		}  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (filecount == 0) {  	outwriter.WriteLine ("No files are affected");  } else {  	var c = 0;  	outwriter.WriteLine ("A total of {0} file(s) are affected:"' filecount);  	foreach (var file in res.Files) {  		c++;  		outwriter.WriteLine (file.Path);  		if (c > 10 && filecount > 10 && !fullresult) {  			outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  			break;  		}  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: foreach (var file in res.Files) {  	c++;  	outwriter.WriteLine (file.Path);  	if (c > 10 && filecount > 10 && !fullresult) {  		outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: foreach (var file in res.Files) {  	c++;  	outwriter.WriteLine (file.Path);  	if (c > 10 && filecount > 10 && !fullresult) {  		outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (c > 10 && filecount > 10 && !fullresult) {  	outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (c > 10 && filecount > 10 && !fullresult) {  	outwriter.WriteLine ("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (res.LogMessages != null) {  	var logcount = res.LogMessages.Count ();  	if (logcount == 0 || (logcount > 10 && !fullresult))  		outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  	else {  		outwriter.WriteLine ("The following related log messages were found:");  		foreach (var log in res.LogMessages)  			if (log.Message.Length > 100 && !fullresult)  				outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  			else  				outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (res.LogMessages != null) {  	var logcount = res.LogMessages.Count ();  	if (logcount == 0 || (logcount > 10 && !fullresult))  		outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  	else {  		outwriter.WriteLine ("The following related log messages were found:");  		foreach (var log in res.LogMessages)  			if (log.Message.Length > 100 && !fullresult)  				outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  			else  				outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (res.LogMessages != null) {  	var logcount = res.LogMessages.Count ();  	if (logcount == 0 || (logcount > 10 && !fullresult))  		outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  	else {  		outwriter.WriteLine ("The following related log messages were found:");  		foreach (var log in res.LogMessages)  			if (log.Message.Length > 100 && !fullresult)  				outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  			else  				outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (logcount == 0 || (logcount > 10 && !fullresult))  	outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  else {  	outwriter.WriteLine ("The following related log messages were found:");  	foreach (var log in res.LogMessages)  		if (log.Message.Length > 100 && !fullresult)  			outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  		else  			outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (logcount == 0 || (logcount > 10 && !fullresult))  	outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  else {  	outwriter.WriteLine ("The following related log messages were found:");  	foreach (var log in res.LogMessages)  		if (log.Message.Length > 100 && !fullresult)  			outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  		else  			outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (logcount == 0 || (logcount > 10 && !fullresult))  	outwriter.WriteLine ("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count ()' "full-result");  else {  	outwriter.WriteLine ("The following related log messages were found:");  	foreach (var log in res.LogMessages)  		if (log.Message.Length > 100 && !fullresult)  			outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  		else  			outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: foreach (var log in res.LogMessages)  	if (log.Message.Length > 100 && !fullresult)  		outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  	else  		outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: foreach (var log in res.LogMessages)  	if (log.Message.Length > 100 && !fullresult)  		outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  	else  		outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (log.Message.Length > 100 && !fullresult)  	outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  else  	outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: if (log.Message.Length > 100 && !fullresult)  	outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  else  	outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: outwriter.WriteLine ("{0}: {1}"' log.Timestamp' log.Message.Substring (0' 96) + " ...");  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Delete,The following statement contains a magic number: if (!options.Keys.Where (x => requiredOptions.Contains (x' StringComparer.InvariantCultureIgnoreCase)).Any ()) {  	outwriter.WriteLine (Strings.Program.DeleteCommandNeedsOptions ("delete"' requiredOptions));  	return 200;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Delete,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: using (var i = new Library.Main.Controller (backend' options' output)) {  	setup (i);  	if (controlFiles) {  		var res = i.RestoreControlFiles (args.ToArray ()' filter);  		output.MessageEvent ("Restore control files completed:");  		foreach (var s in res.Files)  			outwriter.WriteLine (s);  	} else {  		using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  			output.PhaseChanged += (phase' previousPhase) => {  				if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  					output.MessageEvent ("Checking remote backup ...");  				else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  					output.MessageEvent ("Checking existing target files ...");  				/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  					output.MessageEvent ("Updating target files with local data ...");  				else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  					periodicOutput.SetFinished ();  					periodicOutput.Join (TimeSpan.FromMilliseconds (100));  					output.MessageEvent ("Verifying restored files ...");  				} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  					output.MessageEvent ("Scanning local files for needed data ...");  				else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  					periodicOutput.SetReady ();  			};  			periodicOutput.WriteOutput += (progress' files' size' counting) => {  				output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size)));  			};  			var res = i.Restore (args.ToArray ()' filter);  			string restorePath;  			options.TryGetValue ("restore-path"' out restorePath);  			output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath));  			output.MessageEvent (string.Format ("Duration of restore: {0:hh\\:mm\\:ss}"' res.Duration));  			if (res.FilesRestored > 0 && !Library.Main.Utility.SuppressDonationMessages) {  				output.MessageEvent ("***********************************************");  				output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use.");  				output.MessageEvent ("");  				output.MessageEvent ("Paypal: http://goo.gl/P4XJ6S");  				output.MessageEvent ("Bitcoin: 1L74qa1n5SFKwwyHhECTHBJgcf6WT2rJKf");  				output.MessageEvent ("***********************************************");  			}  			if (output.VerboseOutput)  				Library.Utility.Utility.PrintSerializeObject (res' outwriter);  			if (res.Warnings.Count () > 0)  				return 2;  		}  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: using (var i = new Library.Main.Controller (backend' options' output)) {  	setup (i);  	if (controlFiles) {  		var res = i.RestoreControlFiles (args.ToArray ()' filter);  		output.MessageEvent ("Restore control files completed:");  		foreach (var s in res.Files)  			outwriter.WriteLine (s);  	} else {  		using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  			output.PhaseChanged += (phase' previousPhase) => {  				if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  					output.MessageEvent ("Checking remote backup ...");  				else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  					output.MessageEvent ("Checking existing target files ...");  				/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  					output.MessageEvent ("Updating target files with local data ...");  				else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  					periodicOutput.SetFinished ();  					periodicOutput.Join (TimeSpan.FromMilliseconds (100));  					output.MessageEvent ("Verifying restored files ...");  				} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  					output.MessageEvent ("Scanning local files for needed data ...");  				else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  					periodicOutput.SetReady ();  			};  			periodicOutput.WriteOutput += (progress' files' size' counting) => {  				output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size)));  			};  			var res = i.Restore (args.ToArray ()' filter);  			string restorePath;  			options.TryGetValue ("restore-path"' out restorePath);  			output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath));  			output.MessageEvent (string.Format ("Duration of restore: {0:hh\\:mm\\:ss}"' res.Duration));  			if (res.FilesRestored > 0 && !Library.Main.Utility.SuppressDonationMessages) {  				output.MessageEvent ("***********************************************");  				output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use.");  				output.MessageEvent ("");  				output.MessageEvent ("Paypal: http://goo.gl/P4XJ6S");  				output.MessageEvent ("Bitcoin: 1L74qa1n5SFKwwyHhECTHBJgcf6WT2rJKf");  				output.MessageEvent ("***********************************************");  			}  			if (output.VerboseOutput)  				Library.Utility.Utility.PrintSerializeObject (res' outwriter);  			if (res.Warnings.Count () > 0)  				return 2;  		}  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: using (var i = new Library.Main.Controller (backend' options' output)) {  	setup (i);  	if (controlFiles) {  		var res = i.RestoreControlFiles (args.ToArray ()' filter);  		output.MessageEvent ("Restore control files completed:");  		foreach (var s in res.Files)  			outwriter.WriteLine (s);  	} else {  		using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  			output.PhaseChanged += (phase' previousPhase) => {  				if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  					output.MessageEvent ("Checking remote backup ...");  				else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  					output.MessageEvent ("Checking existing target files ...");  				/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  					output.MessageEvent ("Updating target files with local data ...");  				else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  					periodicOutput.SetFinished ();  					periodicOutput.Join (TimeSpan.FromMilliseconds (100));  					output.MessageEvent ("Verifying restored files ...");  				} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  					output.MessageEvent ("Scanning local files for needed data ...");  				else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  					periodicOutput.SetReady ();  			};  			periodicOutput.WriteOutput += (progress' files' size' counting) => {  				output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size)));  			};  			var res = i.Restore (args.ToArray ()' filter);  			string restorePath;  			options.TryGetValue ("restore-path"' out restorePath);  			output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath));  			output.MessageEvent (string.Format ("Duration of restore: {0:hh\\:mm\\:ss}"' res.Duration));  			if (res.FilesRestored > 0 && !Library.Main.Utility.SuppressDonationMessages) {  				output.MessageEvent ("***********************************************");  				output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use.");  				output.MessageEvent ("");  				output.MessageEvent ("Paypal: http://goo.gl/P4XJ6S");  				output.MessageEvent ("Bitcoin: 1L74qa1n5SFKwwyHhECTHBJgcf6WT2rJKf");  				output.MessageEvent ("***********************************************");  			}  			if (output.VerboseOutput)  				Library.Utility.Utility.PrintSerializeObject (res' outwriter);  			if (res.Warnings.Count () > 0)  				return 2;  		}  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: if (controlFiles) {  	var res = i.RestoreControlFiles (args.ToArray ()' filter);  	output.MessageEvent ("Restore control files completed:");  	foreach (var s in res.Files)  		outwriter.WriteLine (s);  } else {  	using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  		output.PhaseChanged += (phase' previousPhase) => {  			if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  				output.MessageEvent ("Checking remote backup ...");  			else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  				output.MessageEvent ("Checking existing target files ...");  			/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  				output.MessageEvent ("Updating target files with local data ...");  			else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  				periodicOutput.SetFinished ();  				periodicOutput.Join (TimeSpan.FromMilliseconds (100));  				output.MessageEvent ("Verifying restored files ...");  			} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  				output.MessageEvent ("Scanning local files for needed data ...");  			else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  				periodicOutput.SetReady ();  		};  		periodicOutput.WriteOutput += (progress' files' size' counting) => {  			output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size)));  		};  		var res = i.Restore (args.ToArray ()' filter);  		string restorePath;  		options.TryGetValue ("restore-path"' out restorePath);  		output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath));  		output.MessageEvent (string.Format ("Duration of restore: {0:hh\\:mm\\:ss}"' res.Duration));  		if (res.FilesRestored > 0 && !Library.Main.Utility.SuppressDonationMessages) {  			output.MessageEvent ("***********************************************");  			output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use.");  			output.MessageEvent ("");  			output.MessageEvent ("Paypal: http://goo.gl/P4XJ6S");  			output.MessageEvent ("Bitcoin: 1L74qa1n5SFKwwyHhECTHBJgcf6WT2rJKf");  			output.MessageEvent ("***********************************************");  		}  		if (output.VerboseOutput)  			Library.Utility.Utility.PrintSerializeObject (res' outwriter);  		if (res.Warnings.Count () > 0)  			return 2;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: if (controlFiles) {  	var res = i.RestoreControlFiles (args.ToArray ()' filter);  	output.MessageEvent ("Restore control files completed:");  	foreach (var s in res.Files)  		outwriter.WriteLine (s);  } else {  	using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  		output.PhaseChanged += (phase' previousPhase) => {  			if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  				output.MessageEvent ("Checking remote backup ...");  			else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  				output.MessageEvent ("Checking existing target files ...");  			/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  				output.MessageEvent ("Updating target files with local data ...");  			else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  				periodicOutput.SetFinished ();  				periodicOutput.Join (TimeSpan.FromMilliseconds (100));  				output.MessageEvent ("Verifying restored files ...");  			} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  				output.MessageEvent ("Scanning local files for needed data ...");  			else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  				periodicOutput.SetReady ();  		};  		periodicOutput.WriteOutput += (progress' files' size' counting) => {  			output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size)));  		};  		var res = i.Restore (args.ToArray ()' filter);  		string restorePath;  		options.TryGetValue ("restore-path"' out restorePath);  		output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath));  		output.MessageEvent (string.Format ("Duration of restore: {0:hh\\:mm\\:ss}"' res.Duration));  		if (res.FilesRestored > 0 && !Library.Main.Utility.SuppressDonationMessages) {  			output.MessageEvent ("***********************************************");  			output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use.");  			output.MessageEvent ("");  			output.MessageEvent ("Paypal: http://goo.gl/P4XJ6S");  			output.MessageEvent ("Bitcoin: 1L74qa1n5SFKwwyHhECTHBJgcf6WT2rJKf");  			output.MessageEvent ("***********************************************");  		}  		if (output.VerboseOutput)  			Library.Utility.Utility.PrintSerializeObject (res' outwriter);  		if (res.Warnings.Count () > 0)  			return 2;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: if (controlFiles) {  	var res = i.RestoreControlFiles (args.ToArray ()' filter);  	output.MessageEvent ("Restore control files completed:");  	foreach (var s in res.Files)  		outwriter.WriteLine (s);  } else {  	using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  		output.PhaseChanged += (phase' previousPhase) => {  			if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  				output.MessageEvent ("Checking remote backup ...");  			else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  				output.MessageEvent ("Checking existing target files ...");  			/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  				output.MessageEvent ("Updating target files with local data ...");  			else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  				periodicOutput.SetFinished ();  				periodicOutput.Join (TimeSpan.FromMilliseconds (100));  				output.MessageEvent ("Verifying restored files ...");  			} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  				output.MessageEvent ("Scanning local files for needed data ...");  			else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  				periodicOutput.SetReady ();  		};  		periodicOutput.WriteOutput += (progress' files' size' counting) => {  			output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size)));  		};  		var res = i.Restore (args.ToArray ()' filter);  		string restorePath;  		options.TryGetValue ("restore-path"' out restorePath);  		output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath));  		output.MessageEvent (string.Format ("Duration of restore: {0:hh\\:mm\\:ss}"' res.Duration));  		if (res.FilesRestored > 0 && !Library.Main.Utility.SuppressDonationMessages) {  			output.MessageEvent ("***********************************************");  			output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use.");  			output.MessageEvent ("");  			output.MessageEvent ("Paypal: http://goo.gl/P4XJ6S");  			output.MessageEvent ("Bitcoin: 1L74qa1n5SFKwwyHhECTHBJgcf6WT2rJKf");  			output.MessageEvent ("***********************************************");  		}  		if (output.VerboseOutput)  			Library.Utility.Utility.PrintSerializeObject (res' outwriter);  		if (res.Warnings.Count () > 0)  			return 2;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  	output.PhaseChanged += (phase' previousPhase) => {  		if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  			output.MessageEvent ("Checking remote backup ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  			output.MessageEvent ("Checking existing target files ...");  		/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  			output.MessageEvent ("Updating target files with local data ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  			periodicOutput.SetFinished ();  			periodicOutput.Join (TimeSpan.FromMilliseconds (100));  			output.MessageEvent ("Verifying restored files ...");  		} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  			output.MessageEvent ("Scanning local files for needed data ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  			periodicOutput.SetReady ();  	};  	periodicOutput.WriteOutput += (progress' files' size' counting) => {  		output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size)));  	};  	var res = i.Restore (args.ToArray ()' filter);  	string restorePath;  	options.TryGetValue ("restore-path"' out restorePath);  	output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath));  	output.MessageEvent (string.Format ("Duration of restore: {0:hh\\:mm\\:ss}"' res.Duration));  	if (res.FilesRestored > 0 && !Library.Main.Utility.SuppressDonationMessages) {  		output.MessageEvent ("***********************************************");  		output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use.");  		output.MessageEvent ("");  		output.MessageEvent ("Paypal: http://goo.gl/P4XJ6S");  		output.MessageEvent ("Bitcoin: 1L74qa1n5SFKwwyHhECTHBJgcf6WT2rJKf");  		output.MessageEvent ("***********************************************");  	}  	if (output.VerboseOutput)  		Library.Utility.Utility.PrintSerializeObject (res' outwriter);  	if (res.Warnings.Count () > 0)  		return 2;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  	output.PhaseChanged += (phase' previousPhase) => {  		if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  			output.MessageEvent ("Checking remote backup ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  			output.MessageEvent ("Checking existing target files ...");  		/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  			output.MessageEvent ("Updating target files with local data ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  			periodicOutput.SetFinished ();  			periodicOutput.Join (TimeSpan.FromMilliseconds (100));  			output.MessageEvent ("Verifying restored files ...");  		} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  			output.MessageEvent ("Scanning local files for needed data ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  			periodicOutput.SetReady ();  	};  	periodicOutput.WriteOutput += (progress' files' size' counting) => {  		output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size)));  	};  	var res = i.Restore (args.ToArray ()' filter);  	string restorePath;  	options.TryGetValue ("restore-path"' out restorePath);  	output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath));  	output.MessageEvent (string.Format ("Duration of restore: {0:hh\\:mm\\:ss}"' res.Duration));  	if (res.FilesRestored > 0 && !Library.Main.Utility.SuppressDonationMessages) {  		output.MessageEvent ("***********************************************");  		output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use.");  		output.MessageEvent ("");  		output.MessageEvent ("Paypal: http://goo.gl/P4XJ6S");  		output.MessageEvent ("Bitcoin: 1L74qa1n5SFKwwyHhECTHBJgcf6WT2rJKf");  		output.MessageEvent ("***********************************************");  	}  	if (output.VerboseOutput)  		Library.Utility.Utility.PrintSerializeObject (res' outwriter);  	if (res.Warnings.Count () > 0)  		return 2;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  	output.PhaseChanged += (phase' previousPhase) => {  		if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  			output.MessageEvent ("Checking remote backup ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  			output.MessageEvent ("Checking existing target files ...");  		/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  			output.MessageEvent ("Updating target files with local data ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  			periodicOutput.SetFinished ();  			periodicOutput.Join (TimeSpan.FromMilliseconds (100));  			output.MessageEvent ("Verifying restored files ...");  		} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  			output.MessageEvent ("Scanning local files for needed data ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  			periodicOutput.SetReady ();  	};  	periodicOutput.WriteOutput += (progress' files' size' counting) => {  		output.MessageEvent (string.Format ("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString (size)));  	};  	var res = i.Restore (args.ToArray ()' filter);  	string restorePath;  	options.TryGetValue ("restore-path"' out restorePath);  	output.MessageEvent (string.Format ("Restored {0} ({1}) files to {2}"' res.FilesRestored' Library.Utility.Utility.FormatSizeString (res.SizeOfRestoredFiles)' string.IsNullOrEmpty (restorePath) ? "original path" : restorePath));  	output.MessageEvent (string.Format ("Duration of restore: {0:hh\\:mm\\:ss}"' res.Duration));  	if (res.FilesRestored > 0 && !Library.Main.Utility.SuppressDonationMessages) {  		output.MessageEvent ("***********************************************");  		output.MessageEvent ("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use.");  		output.MessageEvent ("");  		output.MessageEvent ("Paypal: http://goo.gl/P4XJ6S");  		output.MessageEvent ("Bitcoin: 1L74qa1n5SFKwwyHhECTHBJgcf6WT2rJKf");  		output.MessageEvent ("***********************************************");  	}  	if (output.VerboseOutput)  		Library.Utility.Utility.PrintSerializeObject (res' outwriter);  	if (res.Warnings.Count () > 0)  		return 2;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: output.PhaseChanged += (phase' previousPhase) => {  	if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  		output.MessageEvent ("Checking remote backup ...");  	else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  		output.MessageEvent ("Checking existing target files ...");  	/*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  		output.MessageEvent ("Updating target files with local data ...");  	else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  		periodicOutput.SetFinished ();  		periodicOutput.Join (TimeSpan.FromMilliseconds (100));  		output.MessageEvent ("Verifying restored files ...");  	} else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  		output.MessageEvent ("Scanning local files for needed data ...");  	else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  		periodicOutput.SetReady ();  };  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: if (phase == Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify)  	output.MessageEvent ("Checking remote backup ...");  else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  	output.MessageEvent ("Checking existing target files ...");  /*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  	output.MessageEvent ("Updating target files with local data ...");  else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  	periodicOutput.SetFinished ();  	periodicOutput.Join (TimeSpan.FromMilliseconds (100));  	output.MessageEvent ("Verifying restored files ...");  } else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  	output.MessageEvent ("Scanning local files for needed data ...");  else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  	periodicOutput.SetReady ();  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles)  	output.MessageEvent ("Checking existing target files ...");  /*else if (phase == Duplicati.Library.Main.OperationPhase.Restore_DownloadingRemoteFiles)                                 output.MessageEvent("Downloading remote files ..."); */else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  	output.MessageEvent ("Updating target files with local data ...");  else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  	periodicOutput.SetFinished ();  	periodicOutput.Join (TimeSpan.FromMilliseconds (100));  	output.MessageEvent ("Verifying restored files ...");  } else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  	output.MessageEvent ("Scanning local files for needed data ...");  else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  	periodicOutput.SetReady ();  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: if (phase == Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks)  	output.MessageEvent ("Updating target files with local data ...");  else if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  	periodicOutput.SetFinished ();  	periodicOutput.Join (TimeSpan.FromMilliseconds (100));  	output.MessageEvent ("Verifying restored files ...");  } else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  	output.MessageEvent ("Scanning local files for needed data ...");  else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  	periodicOutput.SetReady ();  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: if (phase == Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify) {  	periodicOutput.SetFinished ();  	periodicOutput.Join (TimeSpan.FromMilliseconds (100));  	output.MessageEvent ("Verifying restored files ...");  } else if (phase == Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks)  	output.MessageEvent ("Scanning local files for needed data ...");  else if (phase == Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders)  	periodicOutput.SetReady ();  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: periodicOutput.Join (TimeSpan.FromMilliseconds (100));  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: if (res.Warnings.Count () > 0)  	return 2;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following statement contains a magic number: return 2;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: if (args.Count < 2)  	return PrintWrongNumberOfArguments (outwriter' args' 2);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: if (args.Count < 2)  	return PrintWrongNumberOfArguments (outwriter' args' 2);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: return PrintWrongNumberOfArguments (outwriter' args' 2);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: using (var periodicOutput = new PeriodicOutput (output' TimeSpan.FromSeconds (5))) {  	output.MessageEvent (string.Format ("Backup started at {0}"' DateTime.Now));  	output.PhaseChanged += (phase' previousPhase) => {  		if (previousPhase == Duplicati.Library.Main.OperationPhase.Backup_PostBackupTest)  			output.MessageEvent ("Remote backup verification completed");  		if (phase == Duplicati.Library.Main.OperationPhase.Backup_ProcessingFiles) {  			output.MessageEvent ("Scanning local files ...");  			periodicOutput.SetReady ();  		} else if (phase == Duplicati.Library.Main.OperationPhase.Backup_Finalize)  			periodicOutput.SetFinished ();  		else if (phase == Duplicati.Library.Main.OperationPhase.Backup_PreBackupVerify)  			output.MessageEvent ("Checking remote backup ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Backup_PostBackupVerify)  			output.MessageEvent ("Checking remote backup ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Backup_PostBackupTest)  			output.MessageEvent ("Verifying remote backup ...");  		else if (phase == Duplicati.Library.Main.OperationPhase.Backup_Compact)  			output.MessageEvent ("Compacting remote backup ...");  	};  	periodicOutput.WriteOutput += (progress' files' size' counting) => {  		output.MessageEvent (string.Format ("  {0} files need to be examined ({1}){2}"' files' Library.Utility.Utility.FormatSizeString (size)' counting ? " (still counting)" : ""));  	};  	using (var i = new Library.Main.Controller (backend' options' output)) {  		setup (i);  		result = i.Backup (dirs' filter);  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: if (result.PartialBackup)  	return 50;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: return 50;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: if (result.ParsedResult == Library.Interface.ParsedResultType.Error)  	return 3;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: return 3;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: if (result.ParsedResult == Library.Interface.ParsedResultType.Warning)  	return 2;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: return 2;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (args.Count != 1 && args.Count != 2)  	return PrintWrongNumberOfArguments (outwriter' args' 1);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (args.Count == 2) {  	if (new string[] {  		"all"'  		"everything"  	}.Contains (args [1]' StringComparer.InvariantCultureIgnoreCase))  		tests = long.MaxValue;  	else  		tests = Convert.ToInt64 (args [1]);  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (totalFiles == 0) {  	outwriter.WriteLine ("No files examined' is the remote destination is empty?");  	return 100;  } else {  	var filtered = from n in result.Verifications  	where n.Value.Count () != 0  	select n;  	if (filtered.Count () == 0) {  		outwriter.WriteLine ("Examined {0} files and found no errors"' totalFiles);  		return 0;  	} else {  		foreach (var n in result.Verifications) {  			var changecount = n.Value.Count ();  			if (changecount == 0) {  				if (verbose)  					Console.WriteLine ("{0}: No errors"' n.Key);  			} else {  				Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  				var count = 0;  				foreach (var c in n.Value) {  					count++;  					Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  					if (!verbose && count == 10 && changecount > 10) {  						Console.WriteLine ("\t... and {0} more"' changecount - count);  						break;  					}  				}  				Console.WriteLine ();  			}  		}  		return 3;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (totalFiles == 0) {  	outwriter.WriteLine ("No files examined' is the remote destination is empty?");  	return 100;  } else {  	var filtered = from n in result.Verifications  	where n.Value.Count () != 0  	select n;  	if (filtered.Count () == 0) {  		outwriter.WriteLine ("Examined {0} files and found no errors"' totalFiles);  		return 0;  	} else {  		foreach (var n in result.Verifications) {  			var changecount = n.Value.Count ();  			if (changecount == 0) {  				if (verbose)  					Console.WriteLine ("{0}: No errors"' n.Key);  			} else {  				Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  				var count = 0;  				foreach (var c in n.Value) {  					count++;  					Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  					if (!verbose && count == 10 && changecount > 10) {  						Console.WriteLine ("\t... and {0} more"' changecount - count);  						break;  					}  				}  				Console.WriteLine ();  			}  		}  		return 3;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (totalFiles == 0) {  	outwriter.WriteLine ("No files examined' is the remote destination is empty?");  	return 100;  } else {  	var filtered = from n in result.Verifications  	where n.Value.Count () != 0  	select n;  	if (filtered.Count () == 0) {  		outwriter.WriteLine ("Examined {0} files and found no errors"' totalFiles);  		return 0;  	} else {  		foreach (var n in result.Verifications) {  			var changecount = n.Value.Count ();  			if (changecount == 0) {  				if (verbose)  					Console.WriteLine ("{0}: No errors"' n.Key);  			} else {  				Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  				var count = 0;  				foreach (var c in n.Value) {  					count++;  					Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  					if (!verbose && count == 10 && changecount > 10) {  						Console.WriteLine ("\t... and {0} more"' changecount - count);  						break;  					}  				}  				Console.WriteLine ();  			}  		}  		return 3;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (totalFiles == 0) {  	outwriter.WriteLine ("No files examined' is the remote destination is empty?");  	return 100;  } else {  	var filtered = from n in result.Verifications  	where n.Value.Count () != 0  	select n;  	if (filtered.Count () == 0) {  		outwriter.WriteLine ("Examined {0} files and found no errors"' totalFiles);  		return 0;  	} else {  		foreach (var n in result.Verifications) {  			var changecount = n.Value.Count ();  			if (changecount == 0) {  				if (verbose)  					Console.WriteLine ("{0}: No errors"' n.Key);  			} else {  				Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  				var count = 0;  				foreach (var c in n.Value) {  					count++;  					Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  					if (!verbose && count == 10 && changecount > 10) {  						Console.WriteLine ("\t... and {0} more"' changecount - count);  						break;  					}  				}  				Console.WriteLine ();  			}  		}  		return 3;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: return 100;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (filtered.Count () == 0) {  	outwriter.WriteLine ("Examined {0} files and found no errors"' totalFiles);  	return 0;  } else {  	foreach (var n in result.Verifications) {  		var changecount = n.Value.Count ();  		if (changecount == 0) {  			if (verbose)  				Console.WriteLine ("{0}: No errors"' n.Key);  		} else {  			Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  			var count = 0;  			foreach (var c in n.Value) {  				count++;  				Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  				if (!verbose && count == 10 && changecount > 10) {  					Console.WriteLine ("\t... and {0} more"' changecount - count);  					break;  				}  			}  			Console.WriteLine ();  		}  	}  	return 3;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (filtered.Count () == 0) {  	outwriter.WriteLine ("Examined {0} files and found no errors"' totalFiles);  	return 0;  } else {  	foreach (var n in result.Verifications) {  		var changecount = n.Value.Count ();  		if (changecount == 0) {  			if (verbose)  				Console.WriteLine ("{0}: No errors"' n.Key);  		} else {  			Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  			var count = 0;  			foreach (var c in n.Value) {  				count++;  				Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  				if (!verbose && count == 10 && changecount > 10) {  					Console.WriteLine ("\t... and {0} more"' changecount - count);  					break;  				}  			}  			Console.WriteLine ();  		}  	}  	return 3;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (filtered.Count () == 0) {  	outwriter.WriteLine ("Examined {0} files and found no errors"' totalFiles);  	return 0;  } else {  	foreach (var n in result.Verifications) {  		var changecount = n.Value.Count ();  		if (changecount == 0) {  			if (verbose)  				Console.WriteLine ("{0}: No errors"' n.Key);  		} else {  			Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  			var count = 0;  			foreach (var c in n.Value) {  				count++;  				Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  				if (!verbose && count == 10 && changecount > 10) {  					Console.WriteLine ("\t... and {0} more"' changecount - count);  					break;  				}  			}  			Console.WriteLine ();  		}  	}  	return 3;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: foreach (var n in result.Verifications) {  	var changecount = n.Value.Count ();  	if (changecount == 0) {  		if (verbose)  			Console.WriteLine ("{0}: No errors"' n.Key);  	} else {  		Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  		var count = 0;  		foreach (var c in n.Value) {  			count++;  			Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  			if (!verbose && count == 10 && changecount > 10) {  				Console.WriteLine ("\t... and {0} more"' changecount - count);  				break;  			}  		}  		Console.WriteLine ();  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: foreach (var n in result.Verifications) {  	var changecount = n.Value.Count ();  	if (changecount == 0) {  		if (verbose)  			Console.WriteLine ("{0}: No errors"' n.Key);  	} else {  		Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  		var count = 0;  		foreach (var c in n.Value) {  			count++;  			Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  			if (!verbose && count == 10 && changecount > 10) {  				Console.WriteLine ("\t... and {0} more"' changecount - count);  				break;  			}  		}  		Console.WriteLine ();  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (changecount == 0) {  	if (verbose)  		Console.WriteLine ("{0}: No errors"' n.Key);  } else {  	Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  	var count = 0;  	foreach (var c in n.Value) {  		count++;  		Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  		if (!verbose && count == 10 && changecount > 10) {  			Console.WriteLine ("\t... and {0} more"' changecount - count);  			break;  		}  	}  	Console.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (changecount == 0) {  	if (verbose)  		Console.WriteLine ("{0}: No errors"' n.Key);  } else {  	Console.WriteLine ("{0}: {1} errors"' n.Key' changecount);  	var count = 0;  	foreach (var c in n.Value) {  		count++;  		Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  		if (!verbose && count == 10 && changecount > 10) {  			Console.WriteLine ("\t... and {0} more"' changecount - count);  			break;  		}  	}  	Console.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: foreach (var c in n.Value) {  	count++;  	Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  	if (!verbose && count == 10 && changecount > 10) {  		Console.WriteLine ("\t... and {0} more"' changecount - count);  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: foreach (var c in n.Value) {  	count++;  	Console.WriteLine ("\t{0}: {1}"' c.Key' c.Value);  	if (!verbose && count == 10 && changecount > 10) {  		Console.WriteLine ("\t... and {0} more"' changecount - count);  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (!verbose && count == 10 && changecount > 10) {  	Console.WriteLine ("\t... and {0} more"' changecount - count);  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: if (!verbose && count == 10 && changecount > 10) {  	Console.WriteLine ("\t... and {0} more"' changecount - count);  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: return 3;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PrintWrongNumberOfArguments,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PrintInvalidCommand,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The following statement contains a magic number: if (string.IsNullOrEmpty (dbpath)) {  	if (args.Count > 0)  		dbpath = Library.Main.DatabaseLocator.GetDatabasePath (args [0]' new Duplicati.Library.Main.Options (options)' false' true);  	if (dbpath == null) {  		outwriter.WriteLine ("No local database found' please add --{0}"' "dbpath");  		return 100;  	} else  		options ["dbpath"] = dbpath;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The following statement contains a magic number: if (dbpath == null) {  	outwriter.WriteLine ("No local database found' please add --{0}"' "dbpath");  	return 100;  } else  	options ["dbpath"] = dbpath;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The following statement contains a magic number: return 100;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (items != null) {  	outwriter.WriteLine ();  	var added = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Added);  	var deleted = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);  	var modified = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);  	var count = added.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} added entries:"' count);  		foreach (var n in added) {  			c++;  			outwriter.WriteLine ("  + {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = modified.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} modified entries:"' count);  		foreach (var n in modified) {  			c++;  			outwriter.WriteLine ("  ~ {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = deleted.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("{0} deleted entries:"' count);  		foreach (var n in deleted) {  			c++;  			outwriter.WriteLine ("  - {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (items != null) {  	outwriter.WriteLine ();  	var added = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Added);  	var deleted = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);  	var modified = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);  	var count = added.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} added entries:"' count);  		foreach (var n in added) {  			c++;  			outwriter.WriteLine ("  + {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = modified.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} modified entries:"' count);  		foreach (var n in modified) {  			c++;  			outwriter.WriteLine ("  ~ {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = deleted.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("{0} deleted entries:"' count);  		foreach (var n in deleted) {  			c++;  			outwriter.WriteLine ("  - {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (items != null) {  	outwriter.WriteLine ();  	var added = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Added);  	var deleted = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);  	var modified = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);  	var count = added.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} added entries:"' count);  		foreach (var n in added) {  			c++;  			outwriter.WriteLine ("  + {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = modified.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} modified entries:"' count);  		foreach (var n in modified) {  			c++;  			outwriter.WriteLine ("  ~ {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = deleted.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("{0} deleted entries:"' count);  		foreach (var n in deleted) {  			c++;  			outwriter.WriteLine ("  - {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (items != null) {  	outwriter.WriteLine ();  	var added = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Added);  	var deleted = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);  	var modified = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);  	var count = added.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} added entries:"' count);  		foreach (var n in added) {  			c++;  			outwriter.WriteLine ("  + {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = modified.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} modified entries:"' count);  		foreach (var n in modified) {  			c++;  			outwriter.WriteLine ("  ~ {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = deleted.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("{0} deleted entries:"' count);  		foreach (var n in deleted) {  			c++;  			outwriter.WriteLine ("  - {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (items != null) {  	outwriter.WriteLine ();  	var added = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Added);  	var deleted = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);  	var modified = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);  	var count = added.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} added entries:"' count);  		foreach (var n in added) {  			c++;  			outwriter.WriteLine ("  + {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = modified.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} modified entries:"' count);  		foreach (var n in modified) {  			c++;  			outwriter.WriteLine ("  ~ {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = deleted.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("{0} deleted entries:"' count);  		foreach (var n in deleted) {  			c++;  			outwriter.WriteLine ("  - {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (items != null) {  	outwriter.WriteLine ();  	var added = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Added);  	var deleted = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);  	var modified = result.ChangeDetails.Where (x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);  	var count = added.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} added entries:"' count);  		foreach (var n in added) {  			c++;  			outwriter.WriteLine ("  + {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = modified.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("  {0} modified entries:"' count);  		foreach (var n in modified) {  			c++;  			outwriter.WriteLine ("  ~ {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	count = deleted.Count ();  	if (count > 0) {  		var c = 0;  		outwriter.WriteLine ("{0} deleted entries:"' count);  		foreach (var n in deleted) {  			c++;  			outwriter.WriteLine ("  - {0}"' n.Item3);  			if (c > 10 && count > 10 && !fullresult) {  				outwriter.WriteLine ("  ... and {0} more"' count - c);  				break;  			}  		}  		outwriter.WriteLine ();  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (count > 0) {  	var c = 0;  	outwriter.WriteLine ("  {0} added entries:"' count);  	foreach (var n in added) {  		c++;  		outwriter.WriteLine ("  + {0}"' n.Item3);  		if (c > 10 && count > 10 && !fullresult) {  			outwriter.WriteLine ("  ... and {0} more"' count - c);  			break;  		}  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (count > 0) {  	var c = 0;  	outwriter.WriteLine ("  {0} added entries:"' count);  	foreach (var n in added) {  		c++;  		outwriter.WriteLine ("  + {0}"' n.Item3);  		if (c > 10 && count > 10 && !fullresult) {  			outwriter.WriteLine ("  ... and {0} more"' count - c);  			break;  		}  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: foreach (var n in added) {  	c++;  	outwriter.WriteLine ("  + {0}"' n.Item3);  	if (c > 10 && count > 10 && !fullresult) {  		outwriter.WriteLine ("  ... and {0} more"' count - c);  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: foreach (var n in added) {  	c++;  	outwriter.WriteLine ("  + {0}"' n.Item3);  	if (c > 10 && count > 10 && !fullresult) {  		outwriter.WriteLine ("  ... and {0} more"' count - c);  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (c > 10 && count > 10 && !fullresult) {  	outwriter.WriteLine ("  ... and {0} more"' count - c);  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (c > 10 && count > 10 && !fullresult) {  	outwriter.WriteLine ("  ... and {0} more"' count - c);  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (count > 0) {  	var c = 0;  	outwriter.WriteLine ("  {0} modified entries:"' count);  	foreach (var n in modified) {  		c++;  		outwriter.WriteLine ("  ~ {0}"' n.Item3);  		if (c > 10 && count > 10 && !fullresult) {  			outwriter.WriteLine ("  ... and {0} more"' count - c);  			break;  		}  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (count > 0) {  	var c = 0;  	outwriter.WriteLine ("  {0} modified entries:"' count);  	foreach (var n in modified) {  		c++;  		outwriter.WriteLine ("  ~ {0}"' n.Item3);  		if (c > 10 && count > 10 && !fullresult) {  			outwriter.WriteLine ("  ... and {0} more"' count - c);  			break;  		}  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: foreach (var n in modified) {  	c++;  	outwriter.WriteLine ("  ~ {0}"' n.Item3);  	if (c > 10 && count > 10 && !fullresult) {  		outwriter.WriteLine ("  ... and {0} more"' count - c);  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: foreach (var n in modified) {  	c++;  	outwriter.WriteLine ("  ~ {0}"' n.Item3);  	if (c > 10 && count > 10 && !fullresult) {  		outwriter.WriteLine ("  ... and {0} more"' count - c);  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (c > 10 && count > 10 && !fullresult) {  	outwriter.WriteLine ("  ... and {0} more"' count - c);  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (c > 10 && count > 10 && !fullresult) {  	outwriter.WriteLine ("  ... and {0} more"' count - c);  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (count > 0) {  	var c = 0;  	outwriter.WriteLine ("{0} deleted entries:"' count);  	foreach (var n in deleted) {  		c++;  		outwriter.WriteLine ("  - {0}"' n.Item3);  		if (c > 10 && count > 10 && !fullresult) {  			outwriter.WriteLine ("  ... and {0} more"' count - c);  			break;  		}  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (count > 0) {  	var c = 0;  	outwriter.WriteLine ("{0} deleted entries:"' count);  	foreach (var n in deleted) {  		c++;  		outwriter.WriteLine ("  - {0}"' n.Item3);  		if (c > 10 && count > 10 && !fullresult) {  			outwriter.WriteLine ("  ... and {0} more"' count - c);  			break;  		}  	}  	outwriter.WriteLine ();  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: foreach (var n in deleted) {  	c++;  	outwriter.WriteLine ("  - {0}"' n.Item3);  	if (c > 10 && count > 10 && !fullresult) {  		outwriter.WriteLine ("  ... and {0} more"' count - c);  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: foreach (var n in deleted) {  	c++;  	outwriter.WriteLine ("  - {0}"' n.Item3);  	if (c > 10 && count > 10 && !fullresult) {  		outwriter.WriteLine ("  ... and {0} more"' count - c);  		break;  	}  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (c > 10 && count > 10 && !fullresult) {  	outwriter.WriteLine ("  ... and {0} more"' count - c);  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (c > 10 && count > 10 && !fullresult) {  	outwriter.WriteLine ("  ... and {0} more"' count - c);  	break;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: using (var i = new Library.Main.Controller (args [0]' options' new ConsoleOutput (outwriter' options))) {  	setup (i);  	if (args.Count == 2)  		i.ListChanges (null' args [1]' null' filter' handler);  	else  		i.ListChanges (args.Count > 1 ? args [1] : null' args.Count > 2 ? args [2] : null' null' filter' handler);  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: using (var i = new Library.Main.Controller (args [0]' options' new ConsoleOutput (outwriter' options))) {  	setup (i);  	if (args.Count == 2)  		i.ListChanges (null' args [1]' null' filter' handler);  	else  		i.ListChanges (args.Count > 1 ? args [1] : null' args.Count > 2 ? args [2] : null' null' filter' handler);  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: using (var i = new Library.Main.Controller (args [0]' options' new ConsoleOutput (outwriter' options))) {  	setup (i);  	if (args.Count == 2)  		i.ListChanges (null' args [1]' null' filter' handler);  	else  		i.ListChanges (args.Count > 1 ? args [1] : null' args.Count > 2 ? args [2] : null' null' filter' handler);  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (args.Count == 2)  	i.ListChanges (null' args [1]' null' filter' handler);  else  	i.ListChanges (args.Count > 1 ? args [1] : null' args.Count > 2 ? args [2] : null' null' filter' handler);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (args.Count == 2)  	i.ListChanges (null' args [1]' null' filter' handler);  else  	i.ListChanges (args.Count > 1 ? args [1] : null' args.Count > 2 ? args [2] : null' null' filter' handler);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: if (args.Count == 2)  	i.ListChanges (null' args [1]' null' filter' handler);  else  	i.ListChanges (args.Count > 1 ? args [1] : null' args.Count > 2 ? args [2] : null' null' filter' handler);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: i.ListChanges (args.Count > 1 ? args [1] : null' args.Count > 2 ? args [2] : null' null' filter' handler);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: i.ListChanges (args.Count > 1 ? args [1] : null' args.Count > 2 ? args [2] : null' null' filter' handler);  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,TestFilters,The following statement contains a magic number: if (args == null || args.Count < 1) {  	outwriter.WriteLine ("No source paths given");  	return 200;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,TestFilters,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SystemInfo,The following statement contains a magic number: if (args != null && args.Count != 0) {  	outwriter.WriteLine ("Command takes no arguments");  	return 200;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SystemInfo,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeFiles,The following statement contains a magic number: if (paths.Length > 0) {  	if (filter == null || filter.Empty)  		filter = new Library.Utility.FilterExpression (paths);  	else {  		outwriter.WriteLine ("You cannot combine filters and paths on the commandline");  		return 200;  	}  } else if (filter == null || filter.Empty) {  	outwriter.WriteLine ("You must provide either filename filters' or a list of paths to remove");  	return 200;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeFiles,The following statement contains a magic number: if (paths.Length > 0) {  	if (filter == null || filter.Empty)  		filter = new Library.Utility.FilterExpression (paths);  	else {  		outwriter.WriteLine ("You cannot combine filters and paths on the commandline");  		return 200;  	}  } else if (filter == null || filter.Empty) {  	outwriter.WriteLine ("You must provide either filename filters' or a list of paths to remove");  	return 200;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeFiles,The following statement contains a magic number: if (filter == null || filter.Empty)  	filter = new Library.Utility.FilterExpression (paths);  else {  	outwriter.WriteLine ("You cannot combine filters and paths on the commandline");  	return 200;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeFiles,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeFiles,The following statement contains a magic number: if (filter == null || filter.Empty) {  	outwriter.WriteLine ("You must provide either filename filters' or a list of paths to remove");  	return 200;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeFiles,The following statement contains a magic number: return 200;  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListBrokenFiles,The following statement contains a magic number: using (var i = new Library.Main.Controller (args [0]' options' con)) {  	setup (i);  	i.ListBrokenFiles (filter' (id' time' count' path' size) => {  		if (previd != id) {  			previd = id;  			outputcount = 0;  			con.MessageEvent (string.Format ("{0}\t: {1}\t({2} match(es))"' id' time.ToLocalTime ()' count));  		}  		con.MessageEvent (string.Format ("\t{0} ({1})"' path' Library.Utility.Utility.FormatSizeString (size)));  		outputcount++;  		if (outputcount >= 5 && !verbose && count != outputcount) {  			con.MessageEvent (string.Format ("\t ... and {0} more' (use --{1} to list all)"' count - outputcount' "full-result"));  			return false;  		}  		return true;  	});  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListBrokenFiles,The following statement contains a magic number: i.ListBrokenFiles (filter' (id' time' count' path' size) => {  	if (previd != id) {  		previd = id;  		outputcount = 0;  		con.MessageEvent (string.Format ("{0}\t: {1}\t({2} match(es))"' id' time.ToLocalTime ()' count));  	}  	con.MessageEvent (string.Format ("\t{0} ({1})"' path' Library.Utility.Utility.FormatSizeString (size)));  	outputcount++;  	if (outputcount >= 5 && !verbose && count != outputcount) {  		con.MessageEvent (string.Format ("\t ... and {0} more' (use --{1} to list all)"' count - outputcount' "full-result"));  		return false;  	}  	return true;  });  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListBrokenFiles,The following statement contains a magic number: if (outputcount >= 5 && !verbose && count != outputcount) {  	con.MessageEvent (string.Format ("\t ... and {0} more' (use --{1} to list all)"' count - outputcount' "full-result"));  	return false;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SendMail,The following statement contains a magic number: if (args != null && args.Count != 0) {  	outwriter.WriteLine ("Command takes no arguments");  	return 200;  }  
Magic Number,Duplicati.CommandLine,Commands,F:\newReposMay17\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SendMail,The following statement contains a magic number: return 200;  
