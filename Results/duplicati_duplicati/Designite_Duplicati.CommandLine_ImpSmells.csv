Implementation smell,Namespace,Class,File,Method,Description
Long Method,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The method has 203 lines of code.
Long Method,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The method has 127 lines of code.
Long Method,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The method has 124 lines of code.
Complex Method,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,Cyclomatic complexity of the method is 10
Complex Method,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,Cyclomatic complexity of the method is 48
Complex Method,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.CommandLine,Matcher,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Matcher,Cyclomatic complexity of the method is 16
Complex Method,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ParseCommandLine,Cyclomatic complexity of the method is 20
Complex Method,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,Cyclomatic complexity of the method is 22
Complex Method,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,Cyclomatic complexity of the method is 9
Complex Method,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,Cyclomatic complexity of the method is 13
Complex Method,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,Cyclomatic complexity of the method is 11
Complex Method,Duplicati.CommandLine,PeriodicOutput,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ThreadMain,Cyclomatic complexity of the method is 9
Long Parameter List,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The method has 5 parameters. Parameters: outwriter' filename' filter' cargs' options
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Examples,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Help,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Delete,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Repair,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Compact,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,TestFilters,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SystemInfo,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeFiles,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListBrokenFiles,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PurgeBrokenFiles,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SendMail,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Parameter List,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Vacuum,The method has 5 parameters. Parameters: outwriter' setup' args' options' filter
Long Statement,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The length of the statement  "                var metaGroupNames = new[] { nameof(FilterGroup.None)' nameof(FilterGroup.DefaultExcludes)' nameof(FilterGroup.DefaultIncludes)' }; " is 131.
Long Statement,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The length of the statement  "                tp = tp.Replace("%FILTER_GROUPS_SHORT%"' string.Join(Environment.NewLine + "  "' metaGroupNames.Concat(Enum.GetNames(typeof(FilterGroup)).Except(metaGroupNames' StringComparer.OrdinalIgnoreCase).OrderBy(x => x' StringComparer.OrdinalIgnoreCase)).Select(group => "{" + group + "}"))); " is 283.
Long Statement,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The length of the statement  "                    tp = tp.Replace("%KNOWN_DRIVES_AND_VOLUMES%"' string.Join(Environment.NewLine + "    "' Library.Utility.Utility.GetVolumeGuidsAndDriveLetters().Select(pair => string.Format("{0}  {1}"' pair.Key' pair.Value)))); " is 210.
Long Statement,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The length of the statement  "                    tp = System.Text.RegularExpressions.Regex.Replace(tp' @"\%IF_WINDOWS\%.*\%END_IF_WINDOWS\%"' string.Empty' System.Text.RegularExpressions.RegexOptions.Singleline); " is 163.
Long Statement,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The length of the statement  "                    SortedList<string' Library.Interface.ICommandLineArgument> sorted = new SortedList<string' Library.Interface.ICommandLineArgument>(); " is 133.
Long Statement,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintGenericModule,The length of the statement  "            lines.Add(" " + (mod.LoadAsDefault ? Strings.Program.ModuleIsLoadedAutomatically : Strings.Program.ModuleIsNotLoadedAutomatically)); " is 132.
Long Statement,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ShowChangeLog,The length of the statement  "            var path = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location)' "changelog.txt"); " is 144.
Long Statement,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The length of the statement  "                List<string> fargs = new List<string>(Library.Utility.Utility.ReadFileWithDefaultEncoding(Environment.ExpandEnvironmentVariables(filename)).Replace("\r\n"' "\n").Replace("\r"' "\n").Split(new String[] { "\n" }' StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim())); " is 273.
Long Statement,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The length of the statement  "                    throw new Duplicati.Library.Interface.UserInformationException(Strings.Program.FiltersCannotBeUsedWithFileError2' "FiltersCannotBeUsedOnCommandLineAndInParameterFile"); " is 168.
Long Statement,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The length of the statement  "                    filter = Library.Utility.FilterExpression.Combine(Library.Utility.FilterExpression.Deserialize(prependfilter.Split(new string[] { System.IO.Path.PathSeparator.ToString() }' StringSplitOptions.RemoveEmptyEntries))' filter); " is 222.
Long Statement,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The length of the statement  "                    filter = Library.Utility.FilterExpression.Combine(filter' Library.Utility.FilterExpression.Deserialize(appendfilter.Split(new string[] { System.IO.Path.PathSeparator.ToString() }' StringSplitOptions.RemoveEmptyEntries))); " is 221.
Long Statement,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The length of the statement  "                    filter = Library.Utility.FilterExpression.Deserialize(replacefilter.Split(new string[] { System.IO.Path.PathSeparator.ToString() }' StringSplitOptions.RemoveEmptyEntries)); " is 172.
Long Statement,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ReadOptionsFromFile,The length of the statement  "                    Library.Logging.Log.WriteVerboseMessage(LOGTAG' "NotUsingBackupSources"' Strings.Program.SkippingSourceArgumentsOnNonBackupOperation); " is 134.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The length of the statement  "                dbpath = Library.Main.DatabaseLocator.GetDatabasePath(backend' new Duplicati.Library.Main.Options(options)' false' true); " is 121.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The length of the statement  "            if (!string.IsNullOrEmpty(dbpath) && System.IO.File.Exists(dbpath) && !options.ContainsKey("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption(options' "no-local-db")) " is 186.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "                    dbpath = Library.Main.DatabaseLocator.GetDatabasePath(backend' new Duplicati.Library.Main.Options(options)' false' true); " is 121.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "                if (!string.IsNullOrEmpty(dbpath) && System.IO.File.Exists(dbpath) && !options.ContainsKey("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption(options' "no-local-db")) " is 186.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "                            outwriter.WriteLine("{0}\t: {1} ({2} files' {3})"' e.Version' e.Time' e.FileCount' Library.Utility.Utility.FormatSizeString(e.FileSizes)); " is 138.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "                            outwriter.WriteLine("{0} {1}"' e.Path' e.Path.EndsWith(Util.DirectorySeparatorString' StringComparison.Ordinal) ? "" : "(" + Library.Utility.Utility.FormatSizeString(e.Sizes.First()) + ")"); " is 190.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The length of the statement  "                                outwriter.WriteLine("{0}\t: {1} {2}"' nx.Index' nx.Time' nx.Size < 0 ? " - " : Library.Utility.Utility.FormatSizeString(nx.Size)); " is 130.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The length of the statement  "                if (args[ix].IndexOfAny(new char[] { '*'' '?' }) < 0 && !args[ix].StartsWith("["' StringComparison.Ordinal) && args[ix].EndsWith(Util.DirectorySeparatorString' StringComparison.Ordinal)) " is 186.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The length of the statement  "                            output.MessageEvent(string.Format("  {0} files need to be restored ({1})"' files' Library.Utility.Utility.FormatSizeString(size))); " is 131.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The length of the statement  "                        output.MessageEvent(string.Format("Restored {0} ({1}) files to {2}"' res.RestoredFiles' Library.Utility.Utility.FormatSizeString(res.SizeOfRestoredFiles)' string.IsNullOrEmpty(restorePath) ? "original path" : restorePath)); " is 223.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The length of the statement  "                            output.MessageEvent("Did we help save your files? If so' please support Duplicati with a donation. We suggest 10€ for private use and 100€ for commercial use."); " is 161.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "                    if ((new Duplicati.Library.Main.Options(options)).DisableOnBattery && (Duplicati.Library.Utility.Power.PowerSupply.GetSource() == Duplicati.Library.Utility.Power.PowerSupply.Source.Battery)) " is 190.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "                        output.MessageEvent("The \"disable-on-battery\" option only affects scheduled backups and is ignored by backups run manually or from the command line."); " is 153.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "                        output.MessageEvent(string.Format("  {0} files need to be examined ({1}){2}"' files' Library.Utility.Utility.FormatSizeString(size)' counting ? " (still counting)" : "")); " is 171.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "                        output.MessageEvent(string.Format("  Remote size: {0}"' Library.Utility.Utility.FormatSizeString(parsedStats.KnownFileSize))); " is 126.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "                        output.MessageEvent(string.Format("  Total remote quota: {0}"' Library.Utility.Utility.FormatSizeString(parsedStats.TotalQuotaSpace))); " is 135.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "                        output.MessageEvent(string.Format("  Available remote quota: {0}"' Library.Utility.Utility.FormatSizeString(parsedStats.FreeQuotaSpace))); " is 138.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "                output.MessageEvent(string.Format("  Data uploaded: {0}"' Library.Utility.Utility.FormatSizeString(result.BackendStatistics.BytesUploaded))); " is 141.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "                output.MessageEvent(string.Format("  Data downloaded: {0}"' Library.Utility.Utility.FormatSizeString(result.BackendStatistics.BytesDownloaded))); " is 145.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The length of the statement  "                    output.MessageEvent("No files were processed. If this was not intentional you may want to use the \"test-filters\" command"); " is 125.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PrintWrongNumberOfArguments,The length of the statement  "            outwriter.WriteLine(Strings.Program.WrongNumberOfCommandsError_v2(args.Count' expected' args.Select(n => "\"" + n + "\"").ToArray())); " is 134.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The length of the statement  "                    dbpath = Library.Main.DatabaseLocator.GetDatabasePath(args[0]' new Duplicati.Library.Main.Options(options)' false' true); " is 121.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The length of the statement  "            outwriter.WriteLine("Please examine the log table of the database to see that no filenames are accidentially left over."); " is 122.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "                dbpath = Library.Main.DatabaseLocator.GetDatabasePath(args[0]' new Duplicati.Library.Main.Options(options)' false' true); " is 121.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "            if (!string.IsNullOrEmpty(dbpath) && System.IO.File.Exists(dbpath) && !options.ContainsKey("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption(options' "no-local-db")) " is 186.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "            Action<Duplicati.Library.Interface.IListChangesResults' IEnumerable<Tuple<Library.Interface.ListChangesChangeType' Library.Interface.ListChangesElementType' string>>> handler = " is 176.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "                    outwriter.WriteLine("Size of backup {0}: {1}"' result.BaseVersionIndex' Library.Utility.Utility.FormatSizeString(result.PreviousSize)); " is 135.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The length of the statement  "                    outwriter.WriteLine("Size of backup {0}: {1}"' result.CompareVersionIndex' Library.Utility.Utility.FormatSizeString(result.CurrentSize)); " is 137.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,TestFilters,The length of the statement  "                outwriter.WriteLine("Matched {0} files ({1})"' result.FileCount' Duplicati.Library.Utility.Utility.FormatSizeString(result.FileSize)); " is 134.
Long Statement,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SystemInfo,The length of the statement  "            outwriter.WriteLine("Translated locales: {0}"' string.Join("' "' Library.Localization.LocalizationService.SupportedCultures)); " is 126.
Long Statement,Duplicati.CommandLine,PeriodicOutput,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ThreadMain,The length of the statement  "                    m_output.OperationProgress.UpdateOverall(out _' out progress' out filesprocessed' out filesizeprocessed' out filecount' out filesize' out counting); " is 148.
Long Statement,Duplicati.CommandLine,ConsoleOutput,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\ConsoleOutput.cs,BackendEvent,The length of the statement  "                            Output.WriteLine("  Downloading file ({0}) ..."' size < 0 ? "unknown" : Library.Utility.Utility.FormatSizeString(size)); " is 120.
Long Statement,Duplicati.CommandLine,ConsoleOutput,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\ConsoleOutput.cs,BackendEvent,The length of the statement  "                            Output.WriteLine("  Deleting file {0}{1} ..."' path' size < 0 ? "" : (" (" + Library.Utility.Utility.FormatSizeString(size) + ")")); " is 132.
Long Statement,Duplicati.CommandLine,ConsoleOutput,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\ConsoleOutput.cs,WriteMessage,The length of the statement  "                    Output.WriteLine("{0} => {1}"' entry.FormattedMessage' VerboseErrors ? entry.Exception.ToString() : entry.Exception.Message); " is 125.
Long Statement,Duplicati.CommandLine.Strings,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Strings.cs,DeleteCommandNeedsOptions,The length of the statement  "{ return LC.L(@"The command {0} needs at least one of the following options set: {1}"' commandname' string.Join("' "' options)); }" is 130.
Long Statement,Duplicati.CommandLine.Strings,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Strings.cs,InternalOptionUsedError,The length of the statement  "{ return LC.L(@"The option --{0} was supplied' but it is reserved for internal use and may not be set on the commandline"' optionname); }" is 137.
Complex Conditional,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The conditional expression  "!string.IsNullOrEmpty(dbpath) && System.IO.File.Exists(dbpath) && !options.ContainsKey("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption(options' "no-local-db")"  is complex.
Complex Conditional,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The conditional expression  "!string.IsNullOrEmpty(dbpath) && System.IO.File.Exists(dbpath) && !options.ContainsKey("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption(options' "no-local-db")"  is complex.
Complex Conditional,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The conditional expression  "res.Filesets.Any() && (res.Files == null || !res.Files.Any()) && compareFilter.Empty"  is complex.
Complex Conditional,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The conditional expression  "!string.IsNullOrEmpty(dbpath) && System.IO.File.Exists(dbpath) && !options.ContainsKey("no-encryption") && !Duplicati.Library.Utility.Utility.ParseBoolOption(options' "no-local-db")"  is complex.
Empty Catch Block,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The method has an empty catch block.
Empty Catch Block,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The method has an empty catch block.
Empty Catch Block,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,List,The method has an empty catch block.
Magic Number,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: elems.Length >= 2 && string.Equals(elems[elems.Length - 2]' "help"' StringComparison.OrdinalIgnoreCase)
Magic Number,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,Help,The following statement contains a magic number: elems.Length >= 2 && string.Equals(elems[elems.Length - 2]' "help"' StringComparison.OrdinalIgnoreCase)
Magic Number,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintUsage,The following statement contains a magic number: tp = tp.Replace("%FILTER_GROUPS_LONG%"' Library.Utility.FilterGroups.GetOptionDescriptions(4' true));
Magic Number,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: int windowWidth = 80;
Magic Number,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: windowWidth = Math.Max(12' Console.WindowWidth == 0 ? 80 : Console.WindowWidth);
Magic Number,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: windowWidth = Math.Max(12' Console.WindowWidth == 0 ? 80 : Console.WindowWidth);
Magic Number,Duplicati.CommandLine,Help,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Help.cs,PrintFormatted,The following statement contains a magic number: int len = Math.Min(windowWidth - 2' leadingSpaces.Length + c.Length);
Magic Number,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,CheckForUpdates,The following statement contains a magic number: Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate(update' f =>                  {                      var npg = (long)(f * 100);                      if (Math.Abs(npg - lastpg) >= 5 || (npg == 100 && lastpg != 100))                      {                          lastpg = npg;                          outwriter.WriteLine("Downloading {0}% ..."' npg);                      }                  });
Magic Number,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,CheckForUpdates,The following statement contains a magic number: Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate(update' f =>                  {                      var npg = (long)(f * 100);                      if (Math.Abs(npg - lastpg) >= 5 || (npg == 100 && lastpg != 100))                      {                          lastpg = npg;                          outwriter.WriteLine("Downloading {0}% ..."' npg);                      }                  });
Magic Number,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,CheckForUpdates,The following statement contains a magic number: Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate(update' f =>                  {                      var npg = (long)(f * 100);                      if (Math.Abs(npg - lastpg) >= 5 || (npg == 100 && lastpg != 100))                      {                          lastpg = npg;                          outwriter.WriteLine("Downloading {0}% ..."' npg);                      }                  });
Magic Number,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,CheckForUpdates,The following statement contains a magic number: Library.AutoUpdater.UpdaterManager.DownloadAndUnpackUpdate(update' f =>                  {                      var npg = (long)(f * 100);                      if (Math.Abs(npg - lastpg) >= 5 || (npg == 100 && lastpg != 100))                      {                          lastpg = npg;                          outwriter.WriteLine("Downloading {0}% ..."' npg);                      }                  });
Magic Number,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ParseCommandLine,The following statement contains a magic number: return 200;
Magic Number,Duplicati.CommandLine,Program,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Program.cs,ParseCommandLine,The following statement contains a magic number: return 100;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: return 200;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected(args' res =>                  {                      if (res.Filesets != null && res.Filesets.Any())                      {                          outwriter.WriteLine("The following filesets are affected:");                          foreach (var e in res.Filesets)                              outwriter.WriteLine("{0}\t: {1}"' e.Version' e.Time);                          outwriter.WriteLine();                      }                        if (res.Files != null)                      {                          var filecount = res.Files.Count();                          if (filecount == 0)                          {                              outwriter.WriteLine("No files are affected");                          }                          else                          {                              var c = 0;                              outwriter.WriteLine("A total of {0} file(s) are affected:"' filecount);                              foreach (var file in res.Files)                              {                                  c++;                                  outwriter.WriteLine(file.Path);                                  if (c > 10 && filecount > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");                                      break;                                  }                              }                            }                            outwriter.WriteLine();                      }                        if (res.LogMessages != null)                      {                          var logcount = res.LogMessages.Count();                          if (logcount == 0 || (logcount > 10 && !fullresult))                              outwriter.WriteLine("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count()' "full-result");                          else                          {                              outwriter.WriteLine("The following related log messages were found:");                              foreach (var log in res.LogMessages)                                  if (log.Message.Length > 100 && !fullresult)                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message.Substring(0' 96) + " ...");                                  else                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message);                          }                            outwriter.WriteLine();                      }                  });
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected(args' res =>                  {                      if (res.Filesets != null && res.Filesets.Any())                      {                          outwriter.WriteLine("The following filesets are affected:");                          foreach (var e in res.Filesets)                              outwriter.WriteLine("{0}\t: {1}"' e.Version' e.Time);                          outwriter.WriteLine();                      }                        if (res.Files != null)                      {                          var filecount = res.Files.Count();                          if (filecount == 0)                          {                              outwriter.WriteLine("No files are affected");                          }                          else                          {                              var c = 0;                              outwriter.WriteLine("A total of {0} file(s) are affected:"' filecount);                              foreach (var file in res.Files)                              {                                  c++;                                  outwriter.WriteLine(file.Path);                                  if (c > 10 && filecount > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");                                      break;                                  }                              }                            }                            outwriter.WriteLine();                      }                        if (res.LogMessages != null)                      {                          var logcount = res.LogMessages.Count();                          if (logcount == 0 || (logcount > 10 && !fullresult))                              outwriter.WriteLine("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count()' "full-result");                          else                          {                              outwriter.WriteLine("The following related log messages were found:");                              foreach (var log in res.LogMessages)                                  if (log.Message.Length > 100 && !fullresult)                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message.Substring(0' 96) + " ...");                                  else                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message);                          }                            outwriter.WriteLine();                      }                  });
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected(args' res =>                  {                      if (res.Filesets != null && res.Filesets.Any())                      {                          outwriter.WriteLine("The following filesets are affected:");                          foreach (var e in res.Filesets)                              outwriter.WriteLine("{0}\t: {1}"' e.Version' e.Time);                          outwriter.WriteLine();                      }                        if (res.Files != null)                      {                          var filecount = res.Files.Count();                          if (filecount == 0)                          {                              outwriter.WriteLine("No files are affected");                          }                          else                          {                              var c = 0;                              outwriter.WriteLine("A total of {0} file(s) are affected:"' filecount);                              foreach (var file in res.Files)                              {                                  c++;                                  outwriter.WriteLine(file.Path);                                  if (c > 10 && filecount > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");                                      break;                                  }                              }                            }                            outwriter.WriteLine();                      }                        if (res.LogMessages != null)                      {                          var logcount = res.LogMessages.Count();                          if (logcount == 0 || (logcount > 10 && !fullresult))                              outwriter.WriteLine("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count()' "full-result");                          else                          {                              outwriter.WriteLine("The following related log messages were found:");                              foreach (var log in res.LogMessages)                                  if (log.Message.Length > 100 && !fullresult)                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message.Substring(0' 96) + " ...");                                  else                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message);                          }                            outwriter.WriteLine();                      }                  });
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected(args' res =>                  {                      if (res.Filesets != null && res.Filesets.Any())                      {                          outwriter.WriteLine("The following filesets are affected:");                          foreach (var e in res.Filesets)                              outwriter.WriteLine("{0}\t: {1}"' e.Version' e.Time);                          outwriter.WriteLine();                      }                        if (res.Files != null)                      {                          var filecount = res.Files.Count();                          if (filecount == 0)                          {                              outwriter.WriteLine("No files are affected");                          }                          else                          {                              var c = 0;                              outwriter.WriteLine("A total of {0} file(s) are affected:"' filecount);                              foreach (var file in res.Files)                              {                                  c++;                                  outwriter.WriteLine(file.Path);                                  if (c > 10 && filecount > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");                                      break;                                  }                              }                            }                            outwriter.WriteLine();                      }                        if (res.LogMessages != null)                      {                          var logcount = res.LogMessages.Count();                          if (logcount == 0 || (logcount > 10 && !fullresult))                              outwriter.WriteLine("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count()' "full-result");                          else                          {                              outwriter.WriteLine("The following related log messages were found:");                              foreach (var log in res.LogMessages)                                  if (log.Message.Length > 100 && !fullresult)                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message.Substring(0' 96) + " ...");                                  else                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message);                          }                            outwriter.WriteLine();                      }                  });
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Affected,The following statement contains a magic number: i.ListAffected(args' res =>                  {                      if (res.Filesets != null && res.Filesets.Any())                      {                          outwriter.WriteLine("The following filesets are affected:");                          foreach (var e in res.Filesets)                              outwriter.WriteLine("{0}\t: {1}"' e.Version' e.Time);                          outwriter.WriteLine();                      }                        if (res.Files != null)                      {                          var filecount = res.Files.Count();                          if (filecount == 0)                          {                              outwriter.WriteLine("No files are affected");                          }                          else                          {                              var c = 0;                              outwriter.WriteLine("A total of {0} file(s) are affected:"' filecount);                              foreach (var file in res.Files)                              {                                  c++;                                  outwriter.WriteLine(file.Path);                                  if (c > 10 && filecount > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more (use --{1} to see all filenames)"' filecount - c' "full-result");                                      break;                                  }                              }                            }                            outwriter.WriteLine();                      }                        if (res.LogMessages != null)                      {                          var logcount = res.LogMessages.Count();                          if (logcount == 0 || (logcount > 10 && !fullresult))                              outwriter.WriteLine("Found {0} related log messages (use --{1} to see the data)"' res.Files.Count()' "full-result");                          else                          {                              outwriter.WriteLine("The following related log messages were found:");                              foreach (var log in res.LogMessages)                                  if (log.Message.Length > 100 && !fullresult)                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message.Substring(0' 96) + " ...");                                  else                                      outwriter.WriteLine("{0}: {1}"' log.Timestamp' log.Message);                          }                            outwriter.WriteLine();                      }                  });
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Delete,The following statement contains a magic number: return 200;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: return PrintWrongNumberOfArguments(outwriter' args' 2);
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: args.Count < 2
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: return 50;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: return 3;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following statement contains a magic number: return 2;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: args.Count != 1 && args.Count != 2
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: args.Count == 2
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Test,The following statement contains a magic number: return 100;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PrintWrongNumberOfArguments,The following statement contains a magic number: return 200;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,PrintInvalidCommand,The following statement contains a magic number: return 200;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,CreateBugReport,The following statement contains a magic number: return 100;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: Action<Duplicati.Library.Interface.IListChangesResults' IEnumerable<Tuple<Library.Interface.ListChangesChangeType' Library.Interface.ListChangesElementType' string>>> handler =                  (result' items) =>                  {                      outwriter.WriteLine("Listing changes");                      outwriter.WriteLine("  {0}: {1}"' result.BaseVersionIndex' result.BaseVersionTimestamp);                      outwriter.WriteLine("  {0}: {1}"' result.CompareVersionIndex' result.CompareVersionTimestamp);                      outwriter.WriteLine();                        outwriter.WriteLine("Size of backup {0}: {1}"' result.BaseVersionIndex' Library.Utility.Utility.FormatSizeString(result.PreviousSize));                        if (items != null)                      {                          outwriter.WriteLine();                            var added = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Added);                          var deleted = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);                          var modified = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);                            var count = added.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} added entries:"' count);                              foreach (var n in added)                              {                                  c++;                                  outwriter.WriteLine("  + {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = modified.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} modified entries:"' count);                              foreach (var n in modified)                              {                                  c++;                                  outwriter.WriteLine("  ~ {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = deleted.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("{0} deleted entries:"' count);                              foreach (var n in deleted)                              {                                  c++;                                  outwriter.WriteLine("  - {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                            outwriter.WriteLine();                      }                          if (result.AddedFolders > 0)                          outwriter.WriteLine("  Added folders:     {0}"' result.AddedFolders);                      if (result.AddedSymlinks > 0)                          outwriter.WriteLine("  Added symlinks:    {0}"' result.AddedSymlinks);                      if (result.AddedFiles > 0)                          outwriter.WriteLine("  Added files:       {0}"' result.AddedFiles);                      if (result.DeletedFolders > 0)                          outwriter.WriteLine("  Deleted folders:   {0}"' result.DeletedFolders);                      if (result.DeletedSymlinks > 0)                          outwriter.WriteLine("  Deleted symlinks:  {0}"' result.DeletedSymlinks);                      if (result.DeletedFiles > 0)                          outwriter.WriteLine("  Deleted files:     {0}"' result.DeletedFiles);                      if (result.ModifiedFolders > 0)                          outwriter.WriteLine("  Modified folders:  {0}"' result.ModifiedFolders);                      if (result.ModifiedSymlinks > 0)                          outwriter.WriteLine("  Modified symlinka: {0}"' result.ModifiedSymlinks);                      if (result.ModifiedFiles > 0)                          outwriter.WriteLine("  Modified files:    {0}"' result.ModifiedFiles);                        if (result.AddedFolders + result.AddedSymlinks + result.AddedFolders +                          result.ModifiedFolders + result.ModifiedSymlinks + result.ModifiedFiles +                          result.DeletedFolders + result.DeletedSymlinks + result.DeletedFiles == 0)                          outwriter.WriteLine("  No changes found");                        outwriter.WriteLine("Size of backup {0}: {1}"' result.CompareVersionIndex' Library.Utility.Utility.FormatSizeString(result.CurrentSize));                  };
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: Action<Duplicati.Library.Interface.IListChangesResults' IEnumerable<Tuple<Library.Interface.ListChangesChangeType' Library.Interface.ListChangesElementType' string>>> handler =                  (result' items) =>                  {                      outwriter.WriteLine("Listing changes");                      outwriter.WriteLine("  {0}: {1}"' result.BaseVersionIndex' result.BaseVersionTimestamp);                      outwriter.WriteLine("  {0}: {1}"' result.CompareVersionIndex' result.CompareVersionTimestamp);                      outwriter.WriteLine();                        outwriter.WriteLine("Size of backup {0}: {1}"' result.BaseVersionIndex' Library.Utility.Utility.FormatSizeString(result.PreviousSize));                        if (items != null)                      {                          outwriter.WriteLine();                            var added = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Added);                          var deleted = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);                          var modified = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);                            var count = added.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} added entries:"' count);                              foreach (var n in added)                              {                                  c++;                                  outwriter.WriteLine("  + {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = modified.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} modified entries:"' count);                              foreach (var n in modified)                              {                                  c++;                                  outwriter.WriteLine("  ~ {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = deleted.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("{0} deleted entries:"' count);                              foreach (var n in deleted)                              {                                  c++;                                  outwriter.WriteLine("  - {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                            outwriter.WriteLine();                      }                          if (result.AddedFolders > 0)                          outwriter.WriteLine("  Added folders:     {0}"' result.AddedFolders);                      if (result.AddedSymlinks > 0)                          outwriter.WriteLine("  Added symlinks:    {0}"' result.AddedSymlinks);                      if (result.AddedFiles > 0)                          outwriter.WriteLine("  Added files:       {0}"' result.AddedFiles);                      if (result.DeletedFolders > 0)                          outwriter.WriteLine("  Deleted folders:   {0}"' result.DeletedFolders);                      if (result.DeletedSymlinks > 0)                          outwriter.WriteLine("  Deleted symlinks:  {0}"' result.DeletedSymlinks);                      if (result.DeletedFiles > 0)                          outwriter.WriteLine("  Deleted files:     {0}"' result.DeletedFiles);                      if (result.ModifiedFolders > 0)                          outwriter.WriteLine("  Modified folders:  {0}"' result.ModifiedFolders);                      if (result.ModifiedSymlinks > 0)                          outwriter.WriteLine("  Modified symlinka: {0}"' result.ModifiedSymlinks);                      if (result.ModifiedFiles > 0)                          outwriter.WriteLine("  Modified files:    {0}"' result.ModifiedFiles);                        if (result.AddedFolders + result.AddedSymlinks + result.AddedFolders +                          result.ModifiedFolders + result.ModifiedSymlinks + result.ModifiedFiles +                          result.DeletedFolders + result.DeletedSymlinks + result.DeletedFiles == 0)                          outwriter.WriteLine("  No changes found");                        outwriter.WriteLine("Size of backup {0}: {1}"' result.CompareVersionIndex' Library.Utility.Utility.FormatSizeString(result.CurrentSize));                  };
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: Action<Duplicati.Library.Interface.IListChangesResults' IEnumerable<Tuple<Library.Interface.ListChangesChangeType' Library.Interface.ListChangesElementType' string>>> handler =                  (result' items) =>                  {                      outwriter.WriteLine("Listing changes");                      outwriter.WriteLine("  {0}: {1}"' result.BaseVersionIndex' result.BaseVersionTimestamp);                      outwriter.WriteLine("  {0}: {1}"' result.CompareVersionIndex' result.CompareVersionTimestamp);                      outwriter.WriteLine();                        outwriter.WriteLine("Size of backup {0}: {1}"' result.BaseVersionIndex' Library.Utility.Utility.FormatSizeString(result.PreviousSize));                        if (items != null)                      {                          outwriter.WriteLine();                            var added = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Added);                          var deleted = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);                          var modified = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);                            var count = added.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} added entries:"' count);                              foreach (var n in added)                              {                                  c++;                                  outwriter.WriteLine("  + {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = modified.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} modified entries:"' count);                              foreach (var n in modified)                              {                                  c++;                                  outwriter.WriteLine("  ~ {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = deleted.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("{0} deleted entries:"' count);                              foreach (var n in deleted)                              {                                  c++;                                  outwriter.WriteLine("  - {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                            outwriter.WriteLine();                      }                          if (result.AddedFolders > 0)                          outwriter.WriteLine("  Added folders:     {0}"' result.AddedFolders);                      if (result.AddedSymlinks > 0)                          outwriter.WriteLine("  Added symlinks:    {0}"' result.AddedSymlinks);                      if (result.AddedFiles > 0)                          outwriter.WriteLine("  Added files:       {0}"' result.AddedFiles);                      if (result.DeletedFolders > 0)                          outwriter.WriteLine("  Deleted folders:   {0}"' result.DeletedFolders);                      if (result.DeletedSymlinks > 0)                          outwriter.WriteLine("  Deleted symlinks:  {0}"' result.DeletedSymlinks);                      if (result.DeletedFiles > 0)                          outwriter.WriteLine("  Deleted files:     {0}"' result.DeletedFiles);                      if (result.ModifiedFolders > 0)                          outwriter.WriteLine("  Modified folders:  {0}"' result.ModifiedFolders);                      if (result.ModifiedSymlinks > 0)                          outwriter.WriteLine("  Modified symlinka: {0}"' result.ModifiedSymlinks);                      if (result.ModifiedFiles > 0)                          outwriter.WriteLine("  Modified files:    {0}"' result.ModifiedFiles);                        if (result.AddedFolders + result.AddedSymlinks + result.AddedFolders +                          result.ModifiedFolders + result.ModifiedSymlinks + result.ModifiedFiles +                          result.DeletedFolders + result.DeletedSymlinks + result.DeletedFiles == 0)                          outwriter.WriteLine("  No changes found");                        outwriter.WriteLine("Size of backup {0}: {1}"' result.CompareVersionIndex' Library.Utility.Utility.FormatSizeString(result.CurrentSize));                  };
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: Action<Duplicati.Library.Interface.IListChangesResults' IEnumerable<Tuple<Library.Interface.ListChangesChangeType' Library.Interface.ListChangesElementType' string>>> handler =                  (result' items) =>                  {                      outwriter.WriteLine("Listing changes");                      outwriter.WriteLine("  {0}: {1}"' result.BaseVersionIndex' result.BaseVersionTimestamp);                      outwriter.WriteLine("  {0}: {1}"' result.CompareVersionIndex' result.CompareVersionTimestamp);                      outwriter.WriteLine();                        outwriter.WriteLine("Size of backup {0}: {1}"' result.BaseVersionIndex' Library.Utility.Utility.FormatSizeString(result.PreviousSize));                        if (items != null)                      {                          outwriter.WriteLine();                            var added = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Added);                          var deleted = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);                          var modified = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);                            var count = added.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} added entries:"' count);                              foreach (var n in added)                              {                                  c++;                                  outwriter.WriteLine("  + {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = modified.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} modified entries:"' count);                              foreach (var n in modified)                              {                                  c++;                                  outwriter.WriteLine("  ~ {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = deleted.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("{0} deleted entries:"' count);                              foreach (var n in deleted)                              {                                  c++;                                  outwriter.WriteLine("  - {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                            outwriter.WriteLine();                      }                          if (result.AddedFolders > 0)                          outwriter.WriteLine("  Added folders:     {0}"' result.AddedFolders);                      if (result.AddedSymlinks > 0)                          outwriter.WriteLine("  Added symlinks:    {0}"' result.AddedSymlinks);                      if (result.AddedFiles > 0)                          outwriter.WriteLine("  Added files:       {0}"' result.AddedFiles);                      if (result.DeletedFolders > 0)                          outwriter.WriteLine("  Deleted folders:   {0}"' result.DeletedFolders);                      if (result.DeletedSymlinks > 0)                          outwriter.WriteLine("  Deleted symlinks:  {0}"' result.DeletedSymlinks);                      if (result.DeletedFiles > 0)                          outwriter.WriteLine("  Deleted files:     {0}"' result.DeletedFiles);                      if (result.ModifiedFolders > 0)                          outwriter.WriteLine("  Modified folders:  {0}"' result.ModifiedFolders);                      if (result.ModifiedSymlinks > 0)                          outwriter.WriteLine("  Modified symlinka: {0}"' result.ModifiedSymlinks);                      if (result.ModifiedFiles > 0)                          outwriter.WriteLine("  Modified files:    {0}"' result.ModifiedFiles);                        if (result.AddedFolders + result.AddedSymlinks + result.AddedFolders +                          result.ModifiedFolders + result.ModifiedSymlinks + result.ModifiedFiles +                          result.DeletedFolders + result.DeletedSymlinks + result.DeletedFiles == 0)                          outwriter.WriteLine("  No changes found");                        outwriter.WriteLine("Size of backup {0}: {1}"' result.CompareVersionIndex' Library.Utility.Utility.FormatSizeString(result.CurrentSize));                  };
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: Action<Duplicati.Library.Interface.IListChangesResults' IEnumerable<Tuple<Library.Interface.ListChangesChangeType' Library.Interface.ListChangesElementType' string>>> handler =                  (result' items) =>                  {                      outwriter.WriteLine("Listing changes");                      outwriter.WriteLine("  {0}: {1}"' result.BaseVersionIndex' result.BaseVersionTimestamp);                      outwriter.WriteLine("  {0}: {1}"' result.CompareVersionIndex' result.CompareVersionTimestamp);                      outwriter.WriteLine();                        outwriter.WriteLine("Size of backup {0}: {1}"' result.BaseVersionIndex' Library.Utility.Utility.FormatSizeString(result.PreviousSize));                        if (items != null)                      {                          outwriter.WriteLine();                            var added = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Added);                          var deleted = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);                          var modified = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);                            var count = added.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} added entries:"' count);                              foreach (var n in added)                              {                                  c++;                                  outwriter.WriteLine("  + {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = modified.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} modified entries:"' count);                              foreach (var n in modified)                              {                                  c++;                                  outwriter.WriteLine("  ~ {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = deleted.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("{0} deleted entries:"' count);                              foreach (var n in deleted)                              {                                  c++;                                  outwriter.WriteLine("  - {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                            outwriter.WriteLine();                      }                          if (result.AddedFolders > 0)                          outwriter.WriteLine("  Added folders:     {0}"' result.AddedFolders);                      if (result.AddedSymlinks > 0)                          outwriter.WriteLine("  Added symlinks:    {0}"' result.AddedSymlinks);                      if (result.AddedFiles > 0)                          outwriter.WriteLine("  Added files:       {0}"' result.AddedFiles);                      if (result.DeletedFolders > 0)                          outwriter.WriteLine("  Deleted folders:   {0}"' result.DeletedFolders);                      if (result.DeletedSymlinks > 0)                          outwriter.WriteLine("  Deleted symlinks:  {0}"' result.DeletedSymlinks);                      if (result.DeletedFiles > 0)                          outwriter.WriteLine("  Deleted files:     {0}"' result.DeletedFiles);                      if (result.ModifiedFolders > 0)                          outwriter.WriteLine("  Modified folders:  {0}"' result.ModifiedFolders);                      if (result.ModifiedSymlinks > 0)                          outwriter.WriteLine("  Modified symlinka: {0}"' result.ModifiedSymlinks);                      if (result.ModifiedFiles > 0)                          outwriter.WriteLine("  Modified files:    {0}"' result.ModifiedFiles);                        if (result.AddedFolders + result.AddedSymlinks + result.AddedFolders +                          result.ModifiedFolders + result.ModifiedSymlinks + result.ModifiedFiles +                          result.DeletedFolders + result.DeletedSymlinks + result.DeletedFiles == 0)                          outwriter.WriteLine("  No changes found");                        outwriter.WriteLine("Size of backup {0}: {1}"' result.CompareVersionIndex' Library.Utility.Utility.FormatSizeString(result.CurrentSize));                  };
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListChanges,The following statement contains a magic number: Action<Duplicati.Library.Interface.IListChangesResults' IEnumerable<Tuple<Library.Interface.ListChangesChangeType' Library.Interface.ListChangesElementType' string>>> handler =                  (result' items) =>                  {                      outwriter.WriteLine("Listing changes");                      outwriter.WriteLine("  {0}: {1}"' result.BaseVersionIndex' result.BaseVersionTimestamp);                      outwriter.WriteLine("  {0}: {1}"' result.CompareVersionIndex' result.CompareVersionTimestamp);                      outwriter.WriteLine();                        outwriter.WriteLine("Size of backup {0}: {1}"' result.BaseVersionIndex' Library.Utility.Utility.FormatSizeString(result.PreviousSize));                        if (items != null)                      {                          outwriter.WriteLine();                            var added = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Added);                          var deleted = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Deleted);                          var modified = result.ChangeDetails.Where(x => x.Item1 == Library.Interface.ListChangesChangeType.Modified);                            var count = added.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} added entries:"' count);                              foreach (var n in added)                              {                                  c++;                                  outwriter.WriteLine("  + {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = modified.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("  {0} modified entries:"' count);                              foreach (var n in modified)                              {                                  c++;                                  outwriter.WriteLine("  ~ {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                          count = deleted.Count();                          if (count > 0)                          {                              var c = 0;                              outwriter.WriteLine("{0} deleted entries:"' count);                              foreach (var n in deleted)                              {                                  c++;                                  outwriter.WriteLine("  - {0}"' n.Item3);                                  if (c > 10 && count > 10 && !fullresult)                                  {                                      outwriter.WriteLine("  ... and {0} more"' count - c);                                      break;                                  }                              }                              outwriter.WriteLine();                          }                            outwriter.WriteLine();                      }                          if (result.AddedFolders > 0)                          outwriter.WriteLine("  Added folders:     {0}"' result.AddedFolders);                      if (result.AddedSymlinks > 0)                          outwriter.WriteLine("  Added symlinks:    {0}"' result.AddedSymlinks);                      if (result.AddedFiles > 0)                          outwriter.WriteLine("  Added files:       {0}"' result.AddedFiles);                      if (result.DeletedFolders > 0)                          outwriter.WriteLine("  Deleted folders:   {0}"' result.DeletedFolders);                      if (result.DeletedSymlinks > 0)                          outwriter.WriteLine("  Deleted symlinks:  {0}"' result.DeletedSymlinks);                      if (result.DeletedFiles > 0)                          outwriter.WriteLine("  Deleted files:     {0}"' result.DeletedFiles);                      if (result.ModifiedFolders > 0)                          outwriter.WriteLine("  Modified folders:  {0}"' result.ModifiedFolders);                      if (result.ModifiedSymlinks > 0)                          outwriter.WriteLine("  Modified symlinka: {0}"' result.ModifiedSymlinks);                      if (result.ModifiedFiles > 0)                          outwriter.WriteLine("  Modified files:    {0}"' result.ModifiedFiles);                        if (result.AddedFolders + result.AddedSymlinks + result.AddedFolders +                          result.ModifiedFolders + result.ModifiedSymlinks + result.ModifiedFiles +                          result.DeletedFolders + result.DeletedSymlinks + result.DeletedFiles == 0)                          outwriter.WriteLine("  No changes found");                        outwriter.WriteLine("Size of backup {0}: {1}"' result.CompareVersionIndex' Library.Utility.Utility.FormatSizeString(result.CurrentSize));                  };
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,TestFilters,The following statement contains a magic number: return 200;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SystemInfo,The following statement contains a magic number: return 200;
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ListBrokenFiles,The following statement contains a magic number: i.ListBrokenFiles(filter' (id' time' count' path' size) =>                  {                      if (previd != id)                      {                          previd = id;                          outputcount = 0;                          con.MessageEvent(string.Format("{0}\t: {1}\t({2} match(es))"' id' time.ToLocalTime()' count));                      }                        con.MessageEvent(string.Format("\t{0} ({1})"' path' Library.Utility.Utility.FormatSizeString(size)));                      outputcount++;                      if (outputcount >= 5 && !fullresult && count != outputcount)                      {                          con.MessageEvent(string.Format("\t ... and {0} more' (use --{1} to list all)"' count - outputcount' "full-result"));                          return false;                      }                        return true;                    });
Magic Number,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,SendMail,The following statement contains a magic number: return 200;
Magic Number,Duplicati.CommandLine,PeriodicOutput,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,ThreadMain,The following statement contains a magic number: m_finishEvent.WaitOne(TimeSpan.FromMilliseconds(10)' true)
Magic Number,Duplicati.CommandLine,PeriodicOutput,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Dispose,The following statement contains a magic number: m_thread.Join(500);
Missing Default,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Restore,The following switch statement is missing a default case: switch (phase)                              {                                  case Duplicati.Library.Main.OperationPhase.Restore_PreRestoreVerify:                                      output.MessageEvent("Checking remote backup ...");                                      break;                                  case Duplicati.Library.Main.OperationPhase.Restore_ScanForExistingFiles:                                      output.MessageEvent("Checking existing target files ...");                                      break;                                  case Duplicati.Library.Main.OperationPhase.Restore_PatchWithLocalBlocks:                                      output.MessageEvent("Updating target files with local data ...");                                      break;                                  case Duplicati.Library.Main.OperationPhase.Restore_PostRestoreVerify:                                      periodicOutput.SetFinished();                                      periodicOutput.Join(TimeSpan.FromMilliseconds(100));                                      output.MessageEvent("Verifying restored files ...");                                      break;                                  case Duplicati.Library.Main.OperationPhase.Restore_ScanForLocalBlocks:                                      output.MessageEvent("Scanning local files for needed data ...");                                      break;                                  case Duplicati.Library.Main.OperationPhase.Restore_CreateTargetFolders:                                      periodicOutput.SetReady();                                      break;                              }
Missing Default,Duplicati.CommandLine,Commands,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\Commands.cs,Backup,The following switch statement is missing a default case: switch (phase)                          {                              case Duplicati.Library.Main.OperationPhase.Backup_ProcessingFiles:                                  output.MessageEvent("Scanning local files ...");                                  periodicOutput.SetReady();                                  break;                              case Duplicati.Library.Main.OperationPhase.Backup_Finalize:                                  periodicOutput.SetFinished();                                  break;                              case Duplicati.Library.Main.OperationPhase.Backup_PreBackupVerify:                                  output.MessageEvent("Checking remote backup ...");                                  break;                              case Duplicati.Library.Main.OperationPhase.Backup_PostBackupVerify:                                  output.MessageEvent("Checking remote backup ...");                                  break;                              case Duplicati.Library.Main.OperationPhase.Backup_PostBackupTest:                                  output.MessageEvent("Verifying remote backup ...");                                  break;                              case Duplicati.Library.Main.OperationPhase.Backup_Compact:                                  output.MessageEvent("Compacting remote backup ...");                                  break;                          }
Missing Default,Duplicati.CommandLine,ConsoleOutput,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\CommandLine\ConsoleOutput.cs,BackendEvent,The following switch statement is missing a default case: switch (action)                      {                          case BackendActionType.Put:                              Output.WriteLine("  Uploading file ({0}) ..."' Library.Utility.Utility.FormatSizeString(size));                              break;                          case BackendActionType.Get:                              Output.WriteLine("  Downloading file ({0}) ..."' size < 0 ? "unknown" : Library.Utility.Utility.FormatSizeString(size));                              break;                          case BackendActionType.List:                              Output.WriteLine("  Listing remote folder ...");                              break;                          case BackendActionType.CreateFolder:                              Output.WriteLine("  Creating remote folder ...");                              break;                          case BackendActionType.Delete:                              Output.WriteLine("  Deleting file {0}{1} ..."' path' size < 0 ? "" : (" (" + Library.Utility.Utility.FormatSizeString(size) + ")"));                              break;                      }
