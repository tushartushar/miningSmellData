Implementation smell,Namespace,Class,File,Method,Description
Long Method,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,The method has 173 lines of code.
Complex Method,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,Cyclomatic complexity of the method is 17
Long Parameter List,Duplicati.GUI.TrayIcon,HttpServerConnection,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HttpServerConnection.cs,HttpServerConnection,The method has 5 parameters. Parameters: server' password' saltedpassword' dbPasswordSourceDatabase' options
Long Parameter List,Duplicati.GUI.TrayIcon,MenuItemWrapper,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\CocoaRunner.cs,MenuItemWrapper,The method has 5 parameters. Parameters: parent' text' icon' callback' subitems
Long Statement,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,Main,The length of the statement  "            return Duplicati.Library.AutoUpdater.UpdaterManager.RunFromMostRecent(typeof(Program).GetMethod("RealMain")' args' Duplicati.Library.AutoUpdater.AutoUpdateStrategy.Never); " is 171.
Long Statement,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,The length of the statement  "            if (Duplicati.Library.Utility.Utility.IsClientWindows && (Duplicati.Library.AutoUpdater.UpdaterManager.IsRunningInUpdateEnvironment || !Duplicati.Library.Utility.Utility.ParseBoolOption(options' DETACHED_PROCESS))) " is 214.
Long Statement,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,The length of the statement  "            if (Library.Utility.Utility.ParseBoolOption(options' NOHOSTEDSERVER_OPTION) && Library.Utility.Utility.ParseBoolOption(options' READCONFIGFROMDB_OPTION)) " is 153.
Long Statement,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,The length of the statement  "                        Port = databaseConnection.ApplicationSettings.LastWebserverPort == -1 ? serverURL.Port : databaseConnection.ApplicationSettings.LastWebserverPort' " is 146.
Long Statement,Duplicati.GUI.TrayIcon,HttpServerConnection,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HttpServerConnection.cs,EncodeQueryString,The length of the statement  "            return string.Join("&"' Array.ConvertAll(dict.Keys.ToArray()' key => string.Format("{0}={1}"' Uri.EscapeUriString(key)' Uri.EscapeUriString(dict[key])))); " is 154.
Long Statement,Duplicati.GUI.TrayIcon.Windows,WinFormsRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\WinFormsRunner.cs,m_trayIcon_Click,The length of the statement  "                    typeof(NotifyIcon).GetMethod("ShowContextMenu"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic).Invoke(m_trayIcon' null); " is 157.
Complex Conditional,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,The conditional expression  "s.Equals("help"' StringComparison.OrdinalIgnoreCase) ||                      s.Equals("/help"' StringComparison.OrdinalIgnoreCase) ||                      s.Equals("usage"' StringComparison.OrdinalIgnoreCase) ||                      s.Equals("/usage"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Duplicati.GUI.TrayIcon,HttpServerConnection,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HttpServerConnection.cs,PerformRequest,The conditional expression  "!hasTriedXSRF &&                          wex.Status == System.Net.WebExceptionStatus.ProtocolError &&                          httpex.StatusCode == System.Net.HttpStatusCode.BadRequest &&                          httpex.StatusDescription.IndexOf("XSRF"' StringComparison.OrdinalIgnoreCase) >= 0"  is complex.
Empty Catch Block,Duplicati.GUI.TrayIcon,HostedInstanceKeeper,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HostedInstanceKeeper.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,The method has an empty catch block.
Empty Catch Block,Duplicati.GUI.TrayIcon,RumpsRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\RumpsRunner.cs,CanRun,The method has an empty catch block.
Empty Catch Block,Duplicati.GUI.TrayIcon.Windows,WinFormsRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\WinFormsRunner.cs,m_trayIcon_Click,The method has an empty catch block.
Magic Number,Duplicati.GUI.TrayIcon,HostedInstanceKeeper,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HostedInstanceKeeper.cs,HostedInstanceKeeper,The following statement contains a magic number: if (!Duplicati.Server.Program.ServerStartedEvent.WaitOne(TimeSpan.FromSeconds(100)' true))              {                  if (m_runnerException != null)                      throw m_runnerException;                  else                      throw new Duplicati.Library.Interface.UserInformationException("Hosted server startup timed out");              }
Magic Number,Duplicati.GUI.TrayIcon,HostedInstanceKeeper,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HostedInstanceKeeper.cs,Dispose,The following statement contains a magic number: try              {                  Duplicati.Server.Program.ApplicationExitEvent.Set();                  if (!m_runner.Join(TimeSpan.FromSeconds(10)))                  {                      m_runner.Abort();                      m_runner.Join(TimeSpan.FromSeconds(10));                  }              }              catch              {              }
Magic Number,Duplicati.GUI.TrayIcon,HostedInstanceKeeper,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HostedInstanceKeeper.cs,Dispose,The following statement contains a magic number: try              {                  Duplicati.Server.Program.ApplicationExitEvent.Set();                  if (!m_runner.Join(TimeSpan.FromSeconds(10)))                  {                      m_runner.Abort();                      m_runner.Join(TimeSpan.FromSeconds(10));                  }              }              catch              {              }
Magic Number,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,The following statement contains a magic number: using (hosted)              {                  var reSpawn = 0;                    do                  {                      try                      {                          System.Net.ServicePointManager.SecurityProtocol |= SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;                            using (Connection = new HttpServerConnection(serverURL' password' saltedpassword' databaseConnection != null' options))                          {                              using (var tk = RunTrayIcon(toolkit))                              {                                  if (hosted != null && Server.Program.Instance != null)                                      Server.Program.Instance.SecondInstanceDetected +=                                          new Server.SingleInstance.SecondInstanceDelegate(                                              x => { tk.ShowUrlInWindow(serverURL.ToString()); });                                    // TODO: If we change to hosted browser this should be a callback                                  if (openui)                                  {                                      try                                      {                                          tk.ShowUrlInWindow(Connection.StatusWindowURL);                                            Duplicati.Server.Program.IsFirstRun = false;                                          Duplicati.Server.Program.ServerPortChanged = false;                                      }                                      catch                                      {                                      }                                  }                                    // If the server shuts down' shut down the tray-icon as well                                  Action shutdownEvent = () =>                                  {                                      // Make sure we do not start again after                                       // a controlled exit                                      reSpawn = 100;                                      tk.InvokeExit();                                  };                                    if (hosted != null)                                      hosted.InstanceShutdown += shutdownEvent;                                    tk.Init(_args);                                    // If the tray-icon quits' stop the server                                  reSpawn = 100;                                    // Make sure that the server shutdown does not access the tray-icon'                                  // as it would be disposed by now                                  if (hosted != null)                                      hosted.InstanceShutdown -= shutdownEvent;                              }                          }                      }                      catch (WebException ex)                      {                          System.Diagnostics.Trace.WriteLine("Request error: " + ex);                          Console.WriteLine("Request error: " + ex);                            reSpawn++;                      }                      catch (Exception ex)                      {                          System.Diagnostics.Trace.WriteLine("Unexpected error: " + ex);                          Console.WriteLine("Unexpected error: " + ex);                          return;                      }                  } while (reSpawn < 3);              }
Magic Number,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,The following statement contains a magic number: using (hosted)              {                  var reSpawn = 0;                    do                  {                      try                      {                          System.Net.ServicePointManager.SecurityProtocol |= SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;                            using (Connection = new HttpServerConnection(serverURL' password' saltedpassword' databaseConnection != null' options))                          {                              using (var tk = RunTrayIcon(toolkit))                              {                                  if (hosted != null && Server.Program.Instance != null)                                      Server.Program.Instance.SecondInstanceDetected +=                                          new Server.SingleInstance.SecondInstanceDelegate(                                              x => { tk.ShowUrlInWindow(serverURL.ToString()); });                                    // TODO: If we change to hosted browser this should be a callback                                  if (openui)                                  {                                      try                                      {                                          tk.ShowUrlInWindow(Connection.StatusWindowURL);                                            Duplicati.Server.Program.IsFirstRun = false;                                          Duplicati.Server.Program.ServerPortChanged = false;                                      }                                      catch                                      {                                      }                                  }                                    // If the server shuts down' shut down the tray-icon as well                                  Action shutdownEvent = () =>                                  {                                      // Make sure we do not start again after                                       // a controlled exit                                      reSpawn = 100;                                      tk.InvokeExit();                                  };                                    if (hosted != null)                                      hosted.InstanceShutdown += shutdownEvent;                                    tk.Init(_args);                                    // If the tray-icon quits' stop the server                                  reSpawn = 100;                                    // Make sure that the server shutdown does not access the tray-icon'                                  // as it would be disposed by now                                  if (hosted != null)                                      hosted.InstanceShutdown -= shutdownEvent;                              }                          }                      }                      catch (WebException ex)                      {                          System.Diagnostics.Trace.WriteLine("Request error: " + ex);                          Console.WriteLine("Request error: " + ex);                            reSpawn++;                      }                      catch (Exception ex)                      {                          System.Diagnostics.Trace.WriteLine("Unexpected error: " + ex);                          Console.WriteLine("Unexpected error: " + ex);                          return;                      }                  } while (reSpawn < 3);              }
Magic Number,Duplicati.GUI.TrayIcon,Program,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\Program.cs,RealMain,The following statement contains a magic number: using (hosted)              {                  var reSpawn = 0;                    do                  {                      try                      {                          System.Net.ServicePointManager.SecurityProtocol |= SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;                            using (Connection = new HttpServerConnection(serverURL' password' saltedpassword' databaseConnection != null' options))                          {                              using (var tk = RunTrayIcon(toolkit))                              {                                  if (hosted != null && Server.Program.Instance != null)                                      Server.Program.Instance.SecondInstanceDetected +=                                          new Server.SingleInstance.SecondInstanceDelegate(                                              x => { tk.ShowUrlInWindow(serverURL.ToString()); });                                    // TODO: If we change to hosted browser this should be a callback                                  if (openui)                                  {                                      try                                      {                                          tk.ShowUrlInWindow(Connection.StatusWindowURL);                                            Duplicati.Server.Program.IsFirstRun = false;                                          Duplicati.Server.Program.ServerPortChanged = false;                                      }                                      catch                                      {                                      }                                  }                                    // If the server shuts down' shut down the tray-icon as well                                  Action shutdownEvent = () =>                                  {                                      // Make sure we do not start again after                                       // a controlled exit                                      reSpawn = 100;                                      tk.InvokeExit();                                  };                                    if (hosted != null)                                      hosted.InstanceShutdown += shutdownEvent;                                    tk.Init(_args);                                    // If the tray-icon quits' stop the server                                  reSpawn = 100;                                    // Make sure that the server shutdown does not access the tray-icon'                                  // as it would be disposed by now                                  if (hosted != null)                                      hosted.InstanceShutdown -= shutdownEvent;                              }                          }                      }                      catch (WebException ex)                      {                          System.Diagnostics.Trace.WriteLine("Request error: " + ex);                          Console.WriteLine("Request error: " + ex);                            reSpawn++;                      }                      catch (Exception ex)                      {                          System.Diagnostics.Trace.WriteLine("Unexpected error: " + ex);                          Console.WriteLine("Unexpected error: " + ex);                          return;                      }                  } while (reSpawn < 3);              }
Magic Number,Duplicati.GUI.TrayIcon,HttpServerConnection,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HttpServerConnection.cs,Close,The following statement contains a magic number: m_pollThread.Join(TimeSpan.FromSeconds(10));
Magic Number,Duplicati.GUI.TrayIcon,HttpServerConnection,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HttpServerConnection.cs,Close,The following statement contains a magic number: if (!m_requestThread.Join(TimeSpan.FromSeconds(10)))              {                  m_requestThread.Abort();                  m_requestThread.Join(TimeSpan.FromSeconds(10));              }
Magic Number,Duplicati.GUI.TrayIcon,HttpServerConnection,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HttpServerConnection.cs,Close,The following statement contains a magic number: if (!m_requestThread.Join(TimeSpan.FromSeconds(10)))              {                  m_requestThread.Abort();                  m_requestThread.Join(TimeSpan.FromSeconds(10));              }
Magic Number,Duplicati.GUI.TrayIcon,HttpServerConnection,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\HttpServerConnection.cs,PerformRequestInternal,The following statement contains a magic number: using (var httpOptions = new Duplicati.Library.Modules.Builtin.HttpOptions())              {                  httpOptions.Configure(m_options);                    var req =                      (System.Net.HttpWebRequest) System.Net.WebRequest.Create(                          new Uri(m_apiUri + endpoint + '?' + query));                  req.Method = method;                  req.Headers.Add("Accept-Charset"' ENCODING.BodyName);                  if (m_xsrftoken != null)                      req.Headers.Add(XSRF_HEADER' m_xsrftoken);                  req.UserAgent = "Duplicati TrayIcon Monitor' v" +                                  System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;                  req.Headers.Add(TRAYICONPASSWORDSOURCE_HEADER' m_TrayIconHeaderValue);                  if (req.CookieContainer == null)                      req.CookieContainer = new System.Net.CookieContainer();                    if (m_authtoken != null)                      req.CookieContainer.Add(new System.Net.Cookie(AUTH_COOKIE' m_authtoken' "/"' req.RequestUri.Host));                  if (m_xsrftoken != null)                      req.CookieContainer.Add(new System.Net.Cookie(XSRF_COOKIE' m_xsrftoken' "/"' req.RequestUri.Host));                    //Wrap it all in async stuff                  var areq = new Library.Utility.AsyncHttpRequest(req);                  req.AllowWriteStreamBuffering = true;                    //Assign the timeout' and add a little processing time as well                  if (endpoint.Equals("/serverstate"' StringComparison.OrdinalIgnoreCase) &&                      queryparams.ContainsKey("duration"))                      areq.Timeout = (int) (Duplicati.Library.Utility.Timeparser.ParseTimeSpan(queryparams["duration"]) +                                            TimeSpan.FromSeconds(5)).TotalMilliseconds;                    using (var r = (System.Net.HttpWebResponse) areq.GetResponse())                  using (var s = areq.GetResponseStream())                      if (typeof(T) == typeof(string))                      {                          using (System.IO.MemoryStream ms = new System.IO.MemoryStream())                          {                              s.CopyTo(ms);                              return (T) (object) ENCODING.GetString(ms.ToArray());                          }                      }                      else                      {                          using (var sr = new System.IO.StreamReader(s' ENCODING' true))                              return Serializer.Deserialize<T>(sr);                      }              }
Magic Number,Duplicati.GUI.TrayIcon,ImageLoader,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\ImageLoader.cs,LoadIcon,The following statement contains a magic number: return LoadIcon(filename' new Size(32' 32));
Magic Number,Duplicati.GUI.TrayIcon,ImageLoader,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\ImageLoader.cs,LoadIcon,The following statement contains a magic number: return LoadIcon(filename' new Size(32' 32));
Magic Number,Duplicati.GUI.TrayIcon,CocoaRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\CocoaRunner.cs,Init,The following statement contains a magic number: m_statusItem = NSStatusBar.SystemStatusBar.CreateStatusItem(32);
Magic Number,Duplicati.GUI.TrayIcon,CocoaRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\CocoaRunner.cs,LoadStream,The following statement contains a magic number: using(var ms = new MemoryStream())              {                  s.CopyTo(ms);                  ms.Flush();                  ms.Close();                    var b = ms.ToArray();                    var dp = new CGDataProvider(b' 0' b.Length);                  var img2 = CGImage.FromPNG(dp' null' false' CGColorRenderingIntent.Default);                    return new NSImage(img2' new System.Drawing.SizeF(18' 18));              }
Magic Number,Duplicati.GUI.TrayIcon,CocoaRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\CocoaRunner.cs,LoadStream,The following statement contains a magic number: using(var ms = new MemoryStream())              {                  s.CopyTo(ms);                  ms.Flush();                  ms.Close();                    var b = ms.ToArray();                    var dp = new CGDataProvider(b' 0' b.Length);                  var img2 = CGImage.FromPNG(dp' null' false' CGColorRenderingIntent.Default);                    return new NSImage(img2' new System.Drawing.SizeF(18' 18));              }
Magic Number,Duplicati.GUI.TrayIcon,RumpsRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\RumpsRunner.cs,CanRun,The following statement contains a magic number: try              {                  var si = System.Diagnostics.Process.Start(RUMPS_PYTHON' string.Format("\"{0}\" TEST"' SCRIPT_PATH));                  si.WaitForExit((int)TimeSpan.FromSeconds(5).TotalMilliseconds);                  if (!si.HasExited)                  {                      si.Kill();                      return false;                  }                    return si.ExitCode == 0;              }              catch              {              }
Magic Number,Duplicati.GUI.TrayIcon,RumpsRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\RumpsRunner.cs,Exit,The following statement contains a magic number: if (m_rumpsProcess != null && !m_rumpsProcess.HasExited)              {                  m_toRumps.WriteNoWait(JsonConvert.SerializeObject(new {Action = "shutdown"}));                  if (m_toRumps != null)                  {                      m_toRumps.Dispose();                      m_toRumps = null;                  }                    m_rumpsProcess.WaitForExit((int)TimeSpan.FromSeconds(5).TotalMilliseconds);                  m_rumpsProcess.Kill();                  m_rumpsProcess = null;              }
Magic Number,Duplicati.GUI.TrayIcon.Windows,WinFormsRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\WinFormsRunner.cs,Init,The following statement contains a magic number: m_handleProvider = new Form()              {                  FormBorderStyle = FormBorderStyle.None'                  Width = 10'                  Height = 10'                  Top = 0'                  Left = 0              };
Magic Number,Duplicati.GUI.TrayIcon.Windows,WinFormsRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\WinFormsRunner.cs,Init,The following statement contains a magic number: m_handleProvider = new Form()              {                  FormBorderStyle = FormBorderStyle.None'                  Width = 10'                  Height = 10'                  Top = 0'                  Left = 0              };
Magic Number,Duplicati.GUI.TrayIcon.Windows,WinFormsRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\WinFormsRunner.cs,NotifyUser,The following statement contains a magic number: m_trayIcon.ShowBalloonTip((int)TimeSpan.FromSeconds(60).TotalMilliseconds' title' message' icon);
Missing Default,Duplicati.GUI.TrayIcon,TrayIconBase,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\TrayIconBase.cs,OnNotification,The following switch statement is missing a default case: switch (notification.Type)              {                  case Server.Serialization.NotificationType.Information:                      type = NotificationType.Information;                      break;                  case Server.Serialization.NotificationType.Warning:                      type = NotificationType.Warning;                      break;                  case Server.Serialization.NotificationType.Error:                      type = NotificationType.Error;                      break;              }
Missing Default,Duplicati.GUI.TrayIcon.Windows,WinFormsRunner,C:\repos\duplicati_duplicati\Duplicati\GUI\Duplicati.GUI.TrayIcon\WinFormsRunner.cs,NotifyUser,The following switch statement is missing a default case: switch (type)              {                  case NotificationType.Information:                      icon = ToolTipIcon.Info;                      break;                  case NotificationType.Warning:                      icon = ToolTipIcon.Warning;                      break;                  case NotificationType.Error:                      icon = ToolTipIcon.Error;                      break;              }
