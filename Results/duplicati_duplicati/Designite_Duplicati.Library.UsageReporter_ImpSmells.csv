Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Duplicati.Library.UsageReporter,Reporter,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\Reporter.cs,ShutDown,The length of the statement  "                    Logging.Log.WriteWarningMessage(LOGTAG' "ReporterShutdownFailuer"' null' "Failed to shut down usage reporter after 30 seconds' leaving hanging ..."); " is 149.
Long Statement,Duplicati.Library.UsageReporter,ReportSet,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\ReportSet.cs,DoInitCLR,The length of the statement  "                Cached_CLRVersion = string.Format("Mono {0} ({1})' CLR: {2}"' Utility.Utility.MonoDisplayVersion' Utility.Utility.MonoVersion' Environment.Version); " is 148.
Long Statement,Duplicati.Library.UsageReporter,EventProcessor,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\EventProcessor.cs,GetAbandonedMatches,The length of the statement  "            foreach(var f in Directory.EnumerateFiles(Duplicati.Library.Utility.TempFolder.SystemTempPath' FILENAME_PREFIX + "*"' SearchOption.TopDirectoryOnly)) " is 149.
Long Statement,Duplicati.Library.UsageReporter,EventProcessor,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\EventProcessor.cs,GetTempFilename,The length of the statement  "            return Path.Combine(Duplicati.Library.Utility.TempFolder.SystemTempPath' string.Format(FILENAME_TEMPLATE' instanceid' DateTime.UtcNow.ToString("yyyyMMddHHmmss"))); " is 163.
Empty Catch Block,Duplicati.Library.UsageReporter,Reporter,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\Reporter.cs,Report,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,Reporter,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\Reporter.cs,Report,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,Reporter,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\Reporter.cs,Report,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,ReportSet,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\ReportSet.cs,ReportSet,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,ReportSet,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\ReportSet.cs,ReportSet,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,ReportSet,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\ReportSet.cs,ReportSet,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,ReportSet,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\ReportSet.cs,ReportSet,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,ReportSet,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\ReportSet.cs,ReportSet,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,OSInfoHelper,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\OSInfoHelper.cs,RunProgramAndReadOutput,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,OSInfoHelper,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\OSInfoHelper.cs,RunProgramAndReadOutput,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,EventProcessor,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\EventProcessor.cs,ProcessAbandonedFiles,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.UsageReporter,EventProcessor,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\EventProcessor.cs,GetAbandonedMatches,The method has an empty catch block.
Magic Number,Duplicati.Library.UsageReporter,Reporter,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\Reporter.cs,ShutDown,The following statement contains a magic number: ShutdownTask.Wait(TimeSpan.FromSeconds(30));
Magic Number,Duplicati.Library.UsageReporter,OSInfoHelper,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\OSInfoHelper.cs,RunProgramAndReadOutput,The following statement contains a magic number: pi.WaitForExit(5000);
Magic Number,Duplicati.Library.UsageReporter,EventProcessor,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\EventProcessor.cs,Run,The following statement contains a magic number: var task = AutomationExtensions.RunTask(                  new                  {                      Input = channel.AsRead()'                      Output = forward                  }'                  async (self) =>                  {                      // Wait 20 seconds before we start transmitting                      for(var i = 0; i < 20; i++)                      {                          await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(false);                          if (await self.Input.IsRetiredAsync)                              return;                      }                        await ProcessAbandonedFiles(self.Output' self.Input' null).ConfigureAwait(false);                        var rs = new ReportSet();                      var tf = GetTempFilename(instanceid);                      var nextTransmitTarget = new DateTime(0);                        while (true)                      {                          var forceSend = false;                          try                          {                              // We wait until we get an item' or WAIT_TIME from the last event                              var waittime =                                      rs.Items.Count == 0                                        ? Timeout.Infinite                                        : new TimeSpan(Math.Max(0' (nextTransmitTarget - DateTime.UtcNow).Ticks));                                                        var item = await self.Input.ReadAsync(waittime);                              if (item != null)                              {                                  if (rs.Items.Count == 0)                                      nextTransmitTarget = DateTime.UtcNow + WAIT_TIME;                                                                forceSend = item.Type == ReportType.Crash;                                  rs.Items.Add(item);                                  File.WriteAllText(tf' JsonConvert.SerializeObject(rs));                              }                          }                          catch (TimeoutException)                          {                              forceSend = true;                          }                            if ((forceSend && rs.Items.Count > 0) || (rs.Items.Count > MAX_ITEMS_IN_SET))                          {                              var nextFilename = GetTempFilename(instanceid);                              self.Output.WriteNoWait(tf);                              rs = new ReportSet();                                await ProcessAbandonedFiles(self.Output' self.Input' null).ConfigureAwait(false);                                tf = nextFilename;                          }                      }                  }              );
Magic Number,Duplicati.Library.UsageReporter,ReportSetUploader,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\ReportSetUploader.cs,Run,The following statement contains a magic number: var task = AutomationExtensions.RunTask(                  channel.AsRead()'                    async (chan) =>                  {                      while (true)                      {                          var f = await chan.ReadAsync();                            try                          {                              if (File.Exists(f))                              {                                  var req = (HttpWebRequest)WebRequest.Create(UPLOAD_URL);                                  req.Method = "POST";                                  req.ContentType = "application/json; charset=utf-8";                                    int rc;                                  using (var fs = File.OpenRead(f))                                  {                                      if (fs.Length > 0)                                      {                                          req.ContentLength = fs.Length;                                          var areq = new Library.Utility.AsyncHttpRequest(req);                                            using (var rs = areq.GetRequestStream())                                              Library.Utility.Utility.CopyStream(fs' rs);                                            using (var resp = (HttpWebResponse)areq.GetResponse())                                              rc = (int)resp.StatusCode;                                      }                                      else                                          rc = 200;                                  }                                    if (rc >= 200 && rc <= 299)                                      File.Delete(f);                              }                          }                          catch (Exception ex)                          {                              Logging.Log.WriteErrorMessage(LOGTAG' "UploadFailed"' ex' "UsageReporter failed");                          }                      }                  }              );
Magic Number,Duplicati.Library.UsageReporter,ReportSetUploader,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\ReportSetUploader.cs,Run,The following statement contains a magic number: var task = AutomationExtensions.RunTask(                  channel.AsRead()'                    async (chan) =>                  {                      while (true)                      {                          var f = await chan.ReadAsync();                            try                          {                              if (File.Exists(f))                              {                                  var req = (HttpWebRequest)WebRequest.Create(UPLOAD_URL);                                  req.Method = "POST";                                  req.ContentType = "application/json; charset=utf-8";                                    int rc;                                  using (var fs = File.OpenRead(f))                                  {                                      if (fs.Length > 0)                                      {                                          req.ContentLength = fs.Length;                                          var areq = new Library.Utility.AsyncHttpRequest(req);                                            using (var rs = areq.GetRequestStream())                                              Library.Utility.Utility.CopyStream(fs' rs);                                            using (var resp = (HttpWebResponse)areq.GetResponse())                                              rc = (int)resp.StatusCode;                                      }                                      else                                          rc = 200;                                  }                                    if (rc >= 200 && rc <= 299)                                      File.Delete(f);                              }                          }                          catch (Exception ex)                          {                              Logging.Log.WriteErrorMessage(LOGTAG' "UploadFailed"' ex' "UsageReporter failed");                          }                      }                  }              );
Magic Number,Duplicati.Library.UsageReporter,ReportSetUploader,D:\research\architectureSmells\repos\duplicati_duplicati\Duplicati\Library\UsageReporter\ReportSetUploader.cs,Run,The following statement contains a magic number: var task = AutomationExtensions.RunTask(                  channel.AsRead()'                    async (chan) =>                  {                      while (true)                      {                          var f = await chan.ReadAsync();                            try                          {                              if (File.Exists(f))                              {                                  var req = (HttpWebRequest)WebRequest.Create(UPLOAD_URL);                                  req.Method = "POST";                                  req.ContentType = "application/json; charset=utf-8";                                    int rc;                                  using (var fs = File.OpenRead(f))                                  {                                      if (fs.Length > 0)                                      {                                          req.ContentLength = fs.Length;                                          var areq = new Library.Utility.AsyncHttpRequest(req);                                            using (var rs = areq.GetRequestStream())                                              Library.Utility.Utility.CopyStream(fs' rs);                                            using (var resp = (HttpWebResponse)areq.GetResponse())                                              rc = (int)resp.StatusCode;                                      }                                      else                                          rc = 200;                                  }                                    if (rc >= 200 && rc <= 299)                                      File.Delete(f);                              }                          }                          catch (Exception ex)                          {                              Logging.Log.WriteErrorMessage(LOGTAG' "UploadFailed"' ex' "UsageReporter failed");                          }                      }                  }              );
