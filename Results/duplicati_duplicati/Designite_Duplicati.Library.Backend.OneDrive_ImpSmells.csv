Implementation smell,Namespace,Class,File,Method,Description
Long Method,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The method has 134 lines of code.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,FindFolder,The length of the statement  "            var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' string.Format(FOLDER_TEMPLATE' parentfolder)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)); " is 163.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,FindFolders,The length of the statement  "                var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' ROOT_FOLDER_ID' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)); " is 133.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,FindFolders,The length of the statement  "                        var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' cur == null ? ROOT_FOLDER_ID : cur.id' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)); " is 156.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,GetQuotaInfo,The length of the statement  "            var url = string.Format("{0}/me/skydrive/quota?access_token={1}"' WLID_SERVER' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)); " is 131.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,List,The length of the statement  "                var url = string.Format("{0}/{1}?access_token={2}&limit={3}&offset={4}"' WLID_SERVER' string.Format(FOLDER_TEMPLATE' FolderID)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)' FILE_LIST_PAGE_SIZE' offset); " is 209.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Delete,The length of the statement  "                var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' id'  Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)); " is 122.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Delete,The length of the statement  "                if (wex.Response is System.Net.HttpWebResponse && ((System.Net.HttpWebResponse)wex.Response).StatusCode == System.Net.HttpStatusCode.NotFound) " is 142.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Rename,The length of the statement  "                    var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' id' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)); " is 121.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Rename,The length of the statement  "                if (wex.Response is System.Net.HttpWebResponse && ((System.Net.HttpWebResponse)wex.Response).StatusCode == System.Net.HttpStatusCode.NotFound) " is 142.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The length of the statement  "                var url = string.Format("https://cid-{0}.users.storage.live.com/items/{1}/{2}?access_token={3}"' uid' fid' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)); " is 198.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The length of the statement  "                        else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException) " is 186.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The length of the statement  "                var url = string.Format("{0}/{1}/files/{2}?access_token={3}"' WLID_SERVER' FolderID' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)); " is 176.
Long Statement,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Get,The length of the statement  "            var url = string.Format("{0}/{1}/content?access_token={2}"' WLID_SERVER' id'  Library.Utility.Uri.UrlEncode(m_oauth.AccessToken)); " is 130.
Long Statement,Duplicati.Library.Backend.Strings,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\Strings.cs,AuthorizationFailure,The length of the statement  "{ return LC.L(@"Failed to authorize using the WLID service: {0}. If the problem persists' try generating a new authid token from: {1}"' message' url); }" is 152.
Long Statement,Duplicati.Library.Backend.Strings,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\Strings.cs,Description,The length of the statement  "{ return LC.L(@"Stores files on Microsoft OneDrive. Usage of this backend requires that you agree to the terms in {0} ({1}) and {2} ({3})"' mssadescription' mssalink' msopdescription' msoplink); }" is 196.
Complex Conditional,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The conditional expression  "ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException"  is complex.
Empty Catch Block,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The method has an empty catch block.
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,FindFolders,The following statement contains a magic number: foreach (var f in folders)              {                  var n = FindFolder(f' cur == null ? null : cur.id);                  if (n == null)                  {                      if (autocreate)                      {                          var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' cur == null ? ROOT_FOLDER_ID : cur.id' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                          var req = (HttpWebRequest)WebRequest.Create(url);                          req.UserAgent = USER_AGENT;                          req.Method = "POST";                            var areq = new Utility.AsyncHttpRequest(req);                            using (var ms = new System.IO.MemoryStream())                          using (var sw = new System.IO.StreamWriter(ms))                          {                              new Newtonsoft.Json.JsonSerializer().Serialize(sw' new WLID_CreateFolderData() {                                  name = f'                                  description = Strings.OneDrive.AutoCreatedFolderLabel                              });                                sw.Flush();                              ms.Position = 0;                                req.ContentLength = ms.Length;                              req.ContentType = "application/json";                                using (var reqs = areq.GetRequestStream())                                  Utility.Utility.CopyStream(ms' reqs' true' m_copybuffer);                          }                            using (var resp = (HttpWebResponse)areq.GetResponse())                          using (var rs = areq.GetResponseStream())                          using (var tr = new System.IO.StreamReader(rs))                          using (var jr = new Newtonsoft.Json.JsonTextReader(tr))                          {                              if ((int)resp.StatusCode < 200 || (int)resp.StatusCode > 299)                                  throw new ProtocolViolationException(Strings.OneDrive.UnexpectedError(resp.StatusCode' resp.StatusDescription));                              cur = new Newtonsoft.Json.JsonSerializer().Deserialize<WLID_FolderItem>(jr);                          }                      }                      else                          throw new FolderMissingException(Strings.OneDrive.MissingFolderError(f));                  }                  else                      cur = n;              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,FindFolders,The following statement contains a magic number: foreach (var f in folders)              {                  var n = FindFolder(f' cur == null ? null : cur.id);                  if (n == null)                  {                      if (autocreate)                      {                          var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' cur == null ? ROOT_FOLDER_ID : cur.id' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                          var req = (HttpWebRequest)WebRequest.Create(url);                          req.UserAgent = USER_AGENT;                          req.Method = "POST";                            var areq = new Utility.AsyncHttpRequest(req);                            using (var ms = new System.IO.MemoryStream())                          using (var sw = new System.IO.StreamWriter(ms))                          {                              new Newtonsoft.Json.JsonSerializer().Serialize(sw' new WLID_CreateFolderData() {                                  name = f'                                  description = Strings.OneDrive.AutoCreatedFolderLabel                              });                                sw.Flush();                              ms.Position = 0;                                req.ContentLength = ms.Length;                              req.ContentType = "application/json";                                using (var reqs = areq.GetRequestStream())                                  Utility.Utility.CopyStream(ms' reqs' true' m_copybuffer);                          }                            using (var resp = (HttpWebResponse)areq.GetResponse())                          using (var rs = areq.GetResponseStream())                          using (var tr = new System.IO.StreamReader(rs))                          using (var jr = new Newtonsoft.Json.JsonTextReader(tr))                          {                              if ((int)resp.StatusCode < 200 || (int)resp.StatusCode > 299)                                  throw new ProtocolViolationException(Strings.OneDrive.UnexpectedError(resp.StatusCode' resp.StatusDescription));                              cur = new Newtonsoft.Json.JsonSerializer().Deserialize<WLID_FolderItem>(jr);                          }                      }                      else                          throw new FolderMissingException(Strings.OneDrive.MissingFolderError(f));                  }                  else                      cur = n;              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Delete,The following statement contains a magic number: try              {                  var id = GetFileID(remotename);                  var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' id'  Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                  var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "DELETE";                    var areq = new Utility.AsyncHttpRequest(req);                  using (var resp = (HttpWebResponse)areq.GetResponse())                  {                      if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)                          throw new FileMissingException();                        if ((int)resp.StatusCode < 200 || (int)resp.StatusCode > 299)                          throw new ProtocolViolationException(Strings.OneDrive.UnexpectedError(resp.StatusCode' resp.StatusDescription));                      m_fileidCache.Remove(remotename);                  }              }              catch (System.Net.WebException wex)              {                  if (wex.Response is System.Net.HttpWebResponse && ((System.Net.HttpWebResponse)wex.Response).StatusCode == System.Net.HttpStatusCode.NotFound)                      throw new FileMissingException(wex);                  else                      throw;              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Delete,The following statement contains a magic number: try              {                  var id = GetFileID(remotename);                  var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' id'  Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                  var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "DELETE";                    var areq = new Utility.AsyncHttpRequest(req);                  using (var resp = (HttpWebResponse)areq.GetResponse())                  {                      if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)                          throw new FileMissingException();                        if ((int)resp.StatusCode < 200 || (int)resp.StatusCode > 299)                          throw new ProtocolViolationException(Strings.OneDrive.UnexpectedError(resp.StatusCode' resp.StatusDescription));                      m_fileidCache.Remove(remotename);                  }              }              catch (System.Net.WebException wex)              {                  if (wex.Response is System.Net.HttpWebResponse && ((System.Net.HttpWebResponse)wex.Response).StatusCode == System.Net.HttpStatusCode.NotFound)                      throw new FileMissingException(wex);                  else                      throw;              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Rename,The following statement contains a magic number: try              {                  try                  {                      var id = GetFileID(oldname);                      var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' id' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                      var req = (HttpWebRequest)WebRequest.Create(url);                      req.UserAgent = USER_AGENT;                      req.Method = "PUT";                        var updateData = new WLID_FolderItem() { name = newname };                      var data = System.Text.Encoding.UTF8.GetBytes(Newtonsoft.Json.JsonConvert.SerializeObject(updateData));                      req.ContentLength = data.Length;                      req.ContentType = "application/json; charset=UTF-8";                      using (var requestStream = req.GetRequestStream())                          requestStream.Write(data' 0' data.Length);                        var areq = new Utility.AsyncHttpRequest(req);                      using (var resp = (HttpWebResponse)areq.GetResponse())                      {                          if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)                              throw new FileMissingException();                            if ((int)resp.StatusCode < 200 || (int)resp.StatusCode > 299)                              throw new ProtocolViolationException(Strings.OneDrive.UnexpectedError(resp.StatusCode' resp.StatusDescription));                            m_fileidCache[newname] = id;                          m_fileidCache.Remove(oldname);                      }                  }                  catch                  {                      // Since we don't know the state of file IDs' clear the cache                      m_fileidCache.Clear();                        throw;                  }              }              catch (System.Net.WebException wex)              {                  if (wex.Response is System.Net.HttpWebResponse && ((System.Net.HttpWebResponse)wex.Response).StatusCode == System.Net.HttpStatusCode.NotFound)                      throw new FileMissingException(wex);                  else                      throw;              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Rename,The following statement contains a magic number: try              {                  try                  {                      var id = GetFileID(oldname);                      var url = string.Format("{0}/{1}?access_token={2}"' WLID_SERVER' id' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                      var req = (HttpWebRequest)WebRequest.Create(url);                      req.UserAgent = USER_AGENT;                      req.Method = "PUT";                        var updateData = new WLID_FolderItem() { name = newname };                      var data = System.Text.Encoding.UTF8.GetBytes(Newtonsoft.Json.JsonConvert.SerializeObject(updateData));                      req.ContentLength = data.Length;                      req.ContentType = "application/json; charset=UTF-8";                      using (var requestStream = req.GetRequestStream())                          requestStream.Write(data' 0' data.Length);                        var areq = new Utility.AsyncHttpRequest(req);                      using (var resp = (HttpWebResponse)areq.GetResponse())                      {                          if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)                              throw new FileMissingException();                            if ((int)resp.StatusCode < 200 || (int)resp.StatusCode > 299)                              throw new ProtocolViolationException(Strings.OneDrive.UnexpectedError(resp.StatusCode' resp.StatusDescription));                            m_fileidCache[newname] = id;                          m_fileidCache.Remove(oldname);                      }                  }                  catch                  {                      // Since we don't know the state of file IDs' clear the cache                      m_fileidCache.Clear();                        throw;                  }              }              catch (System.Net.WebException wex)              {                  if (wex.Response is System.Net.HttpWebResponse && ((System.Net.HttpWebResponse)wex.Response).StatusCode == System.Net.HttpStatusCode.NotFound)                      throw new FileMissingException(wex);                  else                      throw;              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The following statement contains a magic number: if (stream.Length > BITS_FILE_SIZE_LIMIT)              {                  // Get extra info for BITS                  var uid = UserID;                  var fid = FolderID.Split('.')[2];                    // Create a session                  var url = string.Format("https://cid-{0}.users.storage.live.com/items/{1}/{2}?access_token={3}"' uid' fid' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                    var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.ContentType = "application/json";                    req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Create-Session");                  req.Headers.Add("BITS-Supported-Protocols"' "{7df0354d-249b-430f-820d-3d2a9bef4931}");                  req.ContentLength = 0;                    var areq = new Utility.AsyncHttpRequest(req);                    string sessionid;                    using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      var packtype = resp.Headers["BITS-Packet-Type"];                      if (!packtype.Equals("Ack"' StringComparison.OrdinalIgnoreCase))                          throw new Exception(string.Format("Unable to create BITS transfer' got status: {0}"' packtype));                                            sessionid = resp.Headers["BITS-Session-Id"];                  }                    if (string.IsNullOrEmpty(sessionid))                      throw new Exception("BITS session-id was missing");                                    // Session is now created' start uploading chunks                    var offset = 0L;                  var retries = 0;                    while (offset < stream.Length)                  {                      try                      {                          var bytesInChunk = Math.Min(BITS_CHUNK_SIZE' stream.Length - offset);                            req = (HttpWebRequest)WebRequest.Create(url);                          req.UserAgent = USER_AGENT;                          req.Method = "POST";                          req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                          req.Headers.Add("BITS-Packet-Type"' "Fragment");                          req.Headers.Add("BITS-Session-Id"' sessionid);                          req.Headers.Add("Content-Range"' string.Format("bytes {0}-{1}/{2}"' offset' offset + bytesInChunk - 1' stream.Length));                            req.ContentLength = bytesInChunk;                            if (stream.Position != offset)                              stream.Position = offset;                                                    areq = new Utility.AsyncHttpRequest(req);                          var remaining = (int)bytesInChunk;                          using(var reqs = areq.GetRequestStream())                          {                              int read;                              while ((read = stream.Read(m_copybuffer' 0' Math.Min(m_copybuffer.Length' remaining))) != 0)                              {                                  reqs.Write(m_copybuffer' 0' read);                                  remaining -= read;                              }                          }                            using(var resp = (HttpWebResponse)areq.GetResponse())                          {                              if (resp.StatusCode != HttpStatusCode.OK)                                  throw new WebException("Invalid partial upload response"' null' WebExceptionStatus.UnknownError' resp);                          }                            offset += bytesInChunk;                          retries = 0;                      }                      catch (Exception ex)                      {                          var retry = false;                            // If we get a 5xx error' or some network issue' we retry                          if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                          {                              var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                              retry = code >= 500 && code <= 599;                          }                          else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                          {                              retry = true;                          }                              // Retry with exponential backoff                          if (retry && retries < 5)                          {                              System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                              retries++;                          }                          else                              throw;                      }                  }                    // Transfer completed' now commit the upload and close the session                    req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Close-Session");                  req.Headers.Add("BITS-Session-Id"' sessionid);                  req.ContentLength = 0;                    areq = new Utility.AsyncHttpRequest(req);                  using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      if (resp.StatusCode != HttpStatusCode.OK)                          throw new Exception("Invalid partial upload commit response");                  }              }              else              {                  var url = string.Format("{0}/{1}/files/{2}?access_token={3}"' WLID_SERVER' FolderID' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                  var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "PUT";                    try                  {                      req.ContentLength = stream.Length;                  }                  catch                  {                  }                    // Docs says not to set this ?                  //req.ContentType = "application/octet-stream";                    var areq = new Utility.AsyncHttpRequest(req);                  using(var reqs = areq.GetRequestStream())                      Utility.Utility.CopyStream(stream' reqs' true' m_copybuffer);                    using(var resp = (HttpWebResponse)areq.GetResponse())                  using(var rs = areq.GetResponseStream())                  using(var tr = new System.IO.StreamReader(rs))                  using(var jr = new Newtonsoft.Json.JsonTextReader(tr))                  {                      var nf = new Newtonsoft.Json.JsonSerializer().Deserialize<WLID_FolderItem>(jr);                      m_fileidCache[remotename] = nf.id;                  }              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The following statement contains a magic number: if (stream.Length > BITS_FILE_SIZE_LIMIT)              {                  // Get extra info for BITS                  var uid = UserID;                  var fid = FolderID.Split('.')[2];                    // Create a session                  var url = string.Format("https://cid-{0}.users.storage.live.com/items/{1}/{2}?access_token={3}"' uid' fid' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                    var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.ContentType = "application/json";                    req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Create-Session");                  req.Headers.Add("BITS-Supported-Protocols"' "{7df0354d-249b-430f-820d-3d2a9bef4931}");                  req.ContentLength = 0;                    var areq = new Utility.AsyncHttpRequest(req);                    string sessionid;                    using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      var packtype = resp.Headers["BITS-Packet-Type"];                      if (!packtype.Equals("Ack"' StringComparison.OrdinalIgnoreCase))                          throw new Exception(string.Format("Unable to create BITS transfer' got status: {0}"' packtype));                                            sessionid = resp.Headers["BITS-Session-Id"];                  }                    if (string.IsNullOrEmpty(sessionid))                      throw new Exception("BITS session-id was missing");                                    // Session is now created' start uploading chunks                    var offset = 0L;                  var retries = 0;                    while (offset < stream.Length)                  {                      try                      {                          var bytesInChunk = Math.Min(BITS_CHUNK_SIZE' stream.Length - offset);                            req = (HttpWebRequest)WebRequest.Create(url);                          req.UserAgent = USER_AGENT;                          req.Method = "POST";                          req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                          req.Headers.Add("BITS-Packet-Type"' "Fragment");                          req.Headers.Add("BITS-Session-Id"' sessionid);                          req.Headers.Add("Content-Range"' string.Format("bytes {0}-{1}/{2}"' offset' offset + bytesInChunk - 1' stream.Length));                            req.ContentLength = bytesInChunk;                            if (stream.Position != offset)                              stream.Position = offset;                                                    areq = new Utility.AsyncHttpRequest(req);                          var remaining = (int)bytesInChunk;                          using(var reqs = areq.GetRequestStream())                          {                              int read;                              while ((read = stream.Read(m_copybuffer' 0' Math.Min(m_copybuffer.Length' remaining))) != 0)                              {                                  reqs.Write(m_copybuffer' 0' read);                                  remaining -= read;                              }                          }                            using(var resp = (HttpWebResponse)areq.GetResponse())                          {                              if (resp.StatusCode != HttpStatusCode.OK)                                  throw new WebException("Invalid partial upload response"' null' WebExceptionStatus.UnknownError' resp);                          }                            offset += bytesInChunk;                          retries = 0;                      }                      catch (Exception ex)                      {                          var retry = false;                            // If we get a 5xx error' or some network issue' we retry                          if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                          {                              var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                              retry = code >= 500 && code <= 599;                          }                          else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                          {                              retry = true;                          }                              // Retry with exponential backoff                          if (retry && retries < 5)                          {                              System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                              retries++;                          }                          else                              throw;                      }                  }                    // Transfer completed' now commit the upload and close the session                    req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Close-Session");                  req.Headers.Add("BITS-Session-Id"' sessionid);                  req.ContentLength = 0;                    areq = new Utility.AsyncHttpRequest(req);                  using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      if (resp.StatusCode != HttpStatusCode.OK)                          throw new Exception("Invalid partial upload commit response");                  }              }              else              {                  var url = string.Format("{0}/{1}/files/{2}?access_token={3}"' WLID_SERVER' FolderID' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                  var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "PUT";                    try                  {                      req.ContentLength = stream.Length;                  }                  catch                  {                  }                    // Docs says not to set this ?                  //req.ContentType = "application/octet-stream";                    var areq = new Utility.AsyncHttpRequest(req);                  using(var reqs = areq.GetRequestStream())                      Utility.Utility.CopyStream(stream' reqs' true' m_copybuffer);                    using(var resp = (HttpWebResponse)areq.GetResponse())                  using(var rs = areq.GetResponseStream())                  using(var tr = new System.IO.StreamReader(rs))                  using(var jr = new Newtonsoft.Json.JsonTextReader(tr))                  {                      var nf = new Newtonsoft.Json.JsonSerializer().Deserialize<WLID_FolderItem>(jr);                      m_fileidCache[remotename] = nf.id;                  }              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The following statement contains a magic number: if (stream.Length > BITS_FILE_SIZE_LIMIT)              {                  // Get extra info for BITS                  var uid = UserID;                  var fid = FolderID.Split('.')[2];                    // Create a session                  var url = string.Format("https://cid-{0}.users.storage.live.com/items/{1}/{2}?access_token={3}"' uid' fid' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                    var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.ContentType = "application/json";                    req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Create-Session");                  req.Headers.Add("BITS-Supported-Protocols"' "{7df0354d-249b-430f-820d-3d2a9bef4931}");                  req.ContentLength = 0;                    var areq = new Utility.AsyncHttpRequest(req);                    string sessionid;                    using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      var packtype = resp.Headers["BITS-Packet-Type"];                      if (!packtype.Equals("Ack"' StringComparison.OrdinalIgnoreCase))                          throw new Exception(string.Format("Unable to create BITS transfer' got status: {0}"' packtype));                                            sessionid = resp.Headers["BITS-Session-Id"];                  }                    if (string.IsNullOrEmpty(sessionid))                      throw new Exception("BITS session-id was missing");                                    // Session is now created' start uploading chunks                    var offset = 0L;                  var retries = 0;                    while (offset < stream.Length)                  {                      try                      {                          var bytesInChunk = Math.Min(BITS_CHUNK_SIZE' stream.Length - offset);                            req = (HttpWebRequest)WebRequest.Create(url);                          req.UserAgent = USER_AGENT;                          req.Method = "POST";                          req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                          req.Headers.Add("BITS-Packet-Type"' "Fragment");                          req.Headers.Add("BITS-Session-Id"' sessionid);                          req.Headers.Add("Content-Range"' string.Format("bytes {0}-{1}/{2}"' offset' offset + bytesInChunk - 1' stream.Length));                            req.ContentLength = bytesInChunk;                            if (stream.Position != offset)                              stream.Position = offset;                                                    areq = new Utility.AsyncHttpRequest(req);                          var remaining = (int)bytesInChunk;                          using(var reqs = areq.GetRequestStream())                          {                              int read;                              while ((read = stream.Read(m_copybuffer' 0' Math.Min(m_copybuffer.Length' remaining))) != 0)                              {                                  reqs.Write(m_copybuffer' 0' read);                                  remaining -= read;                              }                          }                            using(var resp = (HttpWebResponse)areq.GetResponse())                          {                              if (resp.StatusCode != HttpStatusCode.OK)                                  throw new WebException("Invalid partial upload response"' null' WebExceptionStatus.UnknownError' resp);                          }                            offset += bytesInChunk;                          retries = 0;                      }                      catch (Exception ex)                      {                          var retry = false;                            // If we get a 5xx error' or some network issue' we retry                          if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                          {                              var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                              retry = code >= 500 && code <= 599;                          }                          else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                          {                              retry = true;                          }                              // Retry with exponential backoff                          if (retry && retries < 5)                          {                              System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                              retries++;                          }                          else                              throw;                      }                  }                    // Transfer completed' now commit the upload and close the session                    req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Close-Session");                  req.Headers.Add("BITS-Session-Id"' sessionid);                  req.ContentLength = 0;                    areq = new Utility.AsyncHttpRequest(req);                  using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      if (resp.StatusCode != HttpStatusCode.OK)                          throw new Exception("Invalid partial upload commit response");                  }              }              else              {                  var url = string.Format("{0}/{1}/files/{2}?access_token={3}"' WLID_SERVER' FolderID' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                  var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "PUT";                    try                  {                      req.ContentLength = stream.Length;                  }                  catch                  {                  }                    // Docs says not to set this ?                  //req.ContentType = "application/octet-stream";                    var areq = new Utility.AsyncHttpRequest(req);                  using(var reqs = areq.GetRequestStream())                      Utility.Utility.CopyStream(stream' reqs' true' m_copybuffer);                    using(var resp = (HttpWebResponse)areq.GetResponse())                  using(var rs = areq.GetResponseStream())                  using(var tr = new System.IO.StreamReader(rs))                  using(var jr = new Newtonsoft.Json.JsonTextReader(tr))                  {                      var nf = new Newtonsoft.Json.JsonSerializer().Deserialize<WLID_FolderItem>(jr);                      m_fileidCache[remotename] = nf.id;                  }              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The following statement contains a magic number: if (stream.Length > BITS_FILE_SIZE_LIMIT)              {                  // Get extra info for BITS                  var uid = UserID;                  var fid = FolderID.Split('.')[2];                    // Create a session                  var url = string.Format("https://cid-{0}.users.storage.live.com/items/{1}/{2}?access_token={3}"' uid' fid' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                    var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.ContentType = "application/json";                    req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Create-Session");                  req.Headers.Add("BITS-Supported-Protocols"' "{7df0354d-249b-430f-820d-3d2a9bef4931}");                  req.ContentLength = 0;                    var areq = new Utility.AsyncHttpRequest(req);                    string sessionid;                    using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      var packtype = resp.Headers["BITS-Packet-Type"];                      if (!packtype.Equals("Ack"' StringComparison.OrdinalIgnoreCase))                          throw new Exception(string.Format("Unable to create BITS transfer' got status: {0}"' packtype));                                            sessionid = resp.Headers["BITS-Session-Id"];                  }                    if (string.IsNullOrEmpty(sessionid))                      throw new Exception("BITS session-id was missing");                                    // Session is now created' start uploading chunks                    var offset = 0L;                  var retries = 0;                    while (offset < stream.Length)                  {                      try                      {                          var bytesInChunk = Math.Min(BITS_CHUNK_SIZE' stream.Length - offset);                            req = (HttpWebRequest)WebRequest.Create(url);                          req.UserAgent = USER_AGENT;                          req.Method = "POST";                          req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                          req.Headers.Add("BITS-Packet-Type"' "Fragment");                          req.Headers.Add("BITS-Session-Id"' sessionid);                          req.Headers.Add("Content-Range"' string.Format("bytes {0}-{1}/{2}"' offset' offset + bytesInChunk - 1' stream.Length));                            req.ContentLength = bytesInChunk;                            if (stream.Position != offset)                              stream.Position = offset;                                                    areq = new Utility.AsyncHttpRequest(req);                          var remaining = (int)bytesInChunk;                          using(var reqs = areq.GetRequestStream())                          {                              int read;                              while ((read = stream.Read(m_copybuffer' 0' Math.Min(m_copybuffer.Length' remaining))) != 0)                              {                                  reqs.Write(m_copybuffer' 0' read);                                  remaining -= read;                              }                          }                            using(var resp = (HttpWebResponse)areq.GetResponse())                          {                              if (resp.StatusCode != HttpStatusCode.OK)                                  throw new WebException("Invalid partial upload response"' null' WebExceptionStatus.UnknownError' resp);                          }                            offset += bytesInChunk;                          retries = 0;                      }                      catch (Exception ex)                      {                          var retry = false;                            // If we get a 5xx error' or some network issue' we retry                          if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                          {                              var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                              retry = code >= 500 && code <= 599;                          }                          else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                          {                              retry = true;                          }                              // Retry with exponential backoff                          if (retry && retries < 5)                          {                              System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                              retries++;                          }                          else                              throw;                      }                  }                    // Transfer completed' now commit the upload and close the session                    req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Close-Session");                  req.Headers.Add("BITS-Session-Id"' sessionid);                  req.ContentLength = 0;                    areq = new Utility.AsyncHttpRequest(req);                  using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      if (resp.StatusCode != HttpStatusCode.OK)                          throw new Exception("Invalid partial upload commit response");                  }              }              else              {                  var url = string.Format("{0}/{1}/files/{2}?access_token={3}"' WLID_SERVER' FolderID' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                  var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "PUT";                    try                  {                      req.ContentLength = stream.Length;                  }                  catch                  {                  }                    // Docs says not to set this ?                  //req.ContentType = "application/octet-stream";                    var areq = new Utility.AsyncHttpRequest(req);                  using(var reqs = areq.GetRequestStream())                      Utility.Utility.CopyStream(stream' reqs' true' m_copybuffer);                    using(var resp = (HttpWebResponse)areq.GetResponse())                  using(var rs = areq.GetResponseStream())                  using(var tr = new System.IO.StreamReader(rs))                  using(var jr = new Newtonsoft.Json.JsonTextReader(tr))                  {                      var nf = new Newtonsoft.Json.JsonSerializer().Deserialize<WLID_FolderItem>(jr);                      m_fileidCache[remotename] = nf.id;                  }              }
Magic Number,Duplicati.Library.Backend,OneDrive,C:\repos\duplicati_duplicati\Duplicati\Library\Backend\OneDrive\OneDrive.cs,Put,The following statement contains a magic number: if (stream.Length > BITS_FILE_SIZE_LIMIT)              {                  // Get extra info for BITS                  var uid = UserID;                  var fid = FolderID.Split('.')[2];                    // Create a session                  var url = string.Format("https://cid-{0}.users.storage.live.com/items/{1}/{2}?access_token={3}"' uid' fid' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                    var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.ContentType = "application/json";                    req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Create-Session");                  req.Headers.Add("BITS-Supported-Protocols"' "{7df0354d-249b-430f-820d-3d2a9bef4931}");                  req.ContentLength = 0;                    var areq = new Utility.AsyncHttpRequest(req);                    string sessionid;                    using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      var packtype = resp.Headers["BITS-Packet-Type"];                      if (!packtype.Equals("Ack"' StringComparison.OrdinalIgnoreCase))                          throw new Exception(string.Format("Unable to create BITS transfer' got status: {0}"' packtype));                                            sessionid = resp.Headers["BITS-Session-Id"];                  }                    if (string.IsNullOrEmpty(sessionid))                      throw new Exception("BITS session-id was missing");                                    // Session is now created' start uploading chunks                    var offset = 0L;                  var retries = 0;                    while (offset < stream.Length)                  {                      try                      {                          var bytesInChunk = Math.Min(BITS_CHUNK_SIZE' stream.Length - offset);                            req = (HttpWebRequest)WebRequest.Create(url);                          req.UserAgent = USER_AGENT;                          req.Method = "POST";                          req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                          req.Headers.Add("BITS-Packet-Type"' "Fragment");                          req.Headers.Add("BITS-Session-Id"' sessionid);                          req.Headers.Add("Content-Range"' string.Format("bytes {0}-{1}/{2}"' offset' offset + bytesInChunk - 1' stream.Length));                            req.ContentLength = bytesInChunk;                            if (stream.Position != offset)                              stream.Position = offset;                                                    areq = new Utility.AsyncHttpRequest(req);                          var remaining = (int)bytesInChunk;                          using(var reqs = areq.GetRequestStream())                          {                              int read;                              while ((read = stream.Read(m_copybuffer' 0' Math.Min(m_copybuffer.Length' remaining))) != 0)                              {                                  reqs.Write(m_copybuffer' 0' read);                                  remaining -= read;                              }                          }                            using(var resp = (HttpWebResponse)areq.GetResponse())                          {                              if (resp.StatusCode != HttpStatusCode.OK)                                  throw new WebException("Invalid partial upload response"' null' WebExceptionStatus.UnknownError' resp);                          }                            offset += bytesInChunk;                          retries = 0;                      }                      catch (Exception ex)                      {                          var retry = false;                            // If we get a 5xx error' or some network issue' we retry                          if (ex is WebException && ((WebException)ex).Response is HttpWebResponse)                          {                              var code = (int)((HttpWebResponse)((WebException)ex).Response).StatusCode;                              retry = code >= 500 && code <= 599;                          }                          else if (ex is System.Net.Sockets.SocketException || ex is System.IO.IOException || ex.InnerException is System.Net.Sockets.SocketException || ex.InnerException is System.IO.IOException)                          {                              retry = true;                          }                              // Retry with exponential backoff                          if (retry && retries < 5)                          {                              System.Threading.Thread.Sleep(TimeSpan.FromSeconds(Math.Pow(2' retries)));                              retries++;                          }                          else                              throw;                      }                  }                    // Transfer completed' now commit the upload and close the session                    req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "POST";                  req.Headers.Add("X-Http-Method-Override"' "BITS_POST");                  req.Headers.Add("BITS-Packet-Type"' "Close-Session");                  req.Headers.Add("BITS-Session-Id"' sessionid);                  req.ContentLength = 0;                    areq = new Utility.AsyncHttpRequest(req);                  using(var resp = (HttpWebResponse)areq.GetResponse())                  {                      if (resp.StatusCode != HttpStatusCode.OK)                          throw new Exception("Invalid partial upload commit response");                  }              }              else              {                  var url = string.Format("{0}/{1}/files/{2}?access_token={3}"' WLID_SERVER' FolderID' Utility.Uri.UrlPathEncode(remotename)' Library.Utility.Uri.UrlEncode(m_oauth.AccessToken));                  var req = (HttpWebRequest)WebRequest.Create(url);                  req.UserAgent = USER_AGENT;                  req.Method = "PUT";                    try                  {                      req.ContentLength = stream.Length;                  }                  catch                  {                  }                    // Docs says not to set this ?                  //req.ContentType = "application/octet-stream";                    var areq = new Utility.AsyncHttpRequest(req);                  using(var reqs = areq.GetRequestStream())                      Utility.Utility.CopyStream(stream' reqs' true' m_copybuffer);                    using(var resp = (HttpWebResponse)areq.GetResponse())                  using(var rs = areq.GetResponseStream())                  using(var tr = new System.IO.StreamReader(rs))                  using(var jr = new Newtonsoft.Json.JsonTextReader(tr))                  {                      var nf = new Newtonsoft.Json.JsonSerializer().Deserialize<WLID_FolderItem>(jr);                      m_fileidCache[remotename] = nf.id;                  }              }
