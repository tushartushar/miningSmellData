Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Duplicati.Service,Runner,C:\repos\duplicati_duplicati\Duplicati\Service\Runner.cs,Run,Cyclomatic complexity of the method is 10
Long Statement,Duplicati.WindowsService,Program,C:\repos\duplicati_duplicati\Duplicati\WindowsService\Program.cs,Main,The length of the statement  "            return Duplicati.Library.AutoUpdater.UpdaterManager.RunFromMostRecent(typeof(Program).GetMethod("RealMain")' args' Duplicati.Library.AutoUpdater.AutoUpdateStrategy.Never); " is 171.
Long Statement,Duplicati.WindowsService,Program,C:\repos\duplicati_duplicati\Duplicati\WindowsService\Program.cs,RealMain,The length of the statement  "            var uninstall = args != null && args.Where(x => string.Equals("uninstall"' x' StringComparison.OrdinalIgnoreCase)).Any(); " is 121.
Long Statement,Duplicati.WindowsService,Program,C:\repos\duplicati_duplicati\Duplicati\WindowsService\Program.cs,RealMain,The length of the statement  "                Console.WriteLine("This is a Windows Service wrapper tool that hosts the Duplicati.Server.exe process' letting it run as a windows service."); " is 142.
Long Statement,Duplicati.WindowsService,Program,C:\repos\duplicati_duplicati\Duplicati\WindowsService\Program.cs,RealMain,The length of the statement  "                var commandline = string.Join(" "' args.Where(x => !(string.Equals("install"' x' StringComparison.OrdinalIgnoreCase) || string.Equals("uninstall"' x' StringComparison.OrdinalIgnoreCase)))); " is 189.
Magic Number,Duplicati.Service,Runner,C:\repos\duplicati_duplicati\Duplicati\Service\Runner.cs,Run,The following statement contains a magic number: try              {                  while (!m_terminate && !m_softstop)                  {                      if (!System.IO.File.Exists(exec))                      {                          m_reportMessage(string.Format("File not found {0}"' exec)' true);                          return;                      }                        try                      {                          if (!firstRun)                              m_reportMessage(string.Format("Attempting to restart server process: {0}"' exec)' true);                            m_reportMessage(string.Format("Starting process {0} with cmd args {1}"' exec' cmdargs)' false);                            var pr = new System.Diagnostics.ProcessStartInfo(exec' cmdargs);                          pr.UseShellExecute = false;                          pr.RedirectStandardInput = true;                          pr.RedirectStandardOutput = true;                          pr.WorkingDirectory = path;                            if (!m_terminate)                              m_process = System.Diagnostics.Process.Start(pr);                            if (firstRun && m_onStartedAction != null)                          {                              PingProcess();                              m_onStartedAction();                              firstRun = false;                          }                            while (!m_process.HasExited)                          {                              m_process.WaitForExit(WAIT_POLL_TIME);                              if (!m_process.HasExited)                              {                                  if (m_terminate)                                      m_process.Kill();                                  else                                      PingProcess();                              }                          }                      }                      catch (Exception ex)                      {                          m_reportMessage(string.Format("Process has failed with error message: {0}"' ex)' true);                            if (firstRun)                          {                              startAttempts++;                              if (startAttempts > 5)                              {                                  m_reportMessage("Too many startup attempts' giving up"' true);                                  m_terminate = true;                              }                          }                            // Throttle restarts                          if (!m_terminate)                              System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10));                      }                  }              }              finally              {                  if (m_onStoppedAction != null)                      m_onStoppedAction();              }
Magic Number,Duplicati.Service,Runner,C:\repos\duplicati_duplicati\Duplicati\Service\Runner.cs,Run,The following statement contains a magic number: try              {                  while (!m_terminate && !m_softstop)                  {                      if (!System.IO.File.Exists(exec))                      {                          m_reportMessage(string.Format("File not found {0}"' exec)' true);                          return;                      }                        try                      {                          if (!firstRun)                              m_reportMessage(string.Format("Attempting to restart server process: {0}"' exec)' true);                            m_reportMessage(string.Format("Starting process {0} with cmd args {1}"' exec' cmdargs)' false);                            var pr = new System.Diagnostics.ProcessStartInfo(exec' cmdargs);                          pr.UseShellExecute = false;                          pr.RedirectStandardInput = true;                          pr.RedirectStandardOutput = true;                          pr.WorkingDirectory = path;                            if (!m_terminate)                              m_process = System.Diagnostics.Process.Start(pr);                            if (firstRun && m_onStartedAction != null)                          {                              PingProcess();                              m_onStartedAction();                              firstRun = false;                          }                            while (!m_process.HasExited)                          {                              m_process.WaitForExit(WAIT_POLL_TIME);                              if (!m_process.HasExited)                              {                                  if (m_terminate)                                      m_process.Kill();                                  else                                      PingProcess();                              }                          }                      }                      catch (Exception ex)                      {                          m_reportMessage(string.Format("Process has failed with error message: {0}"' ex)' true);                            if (firstRun)                          {                              startAttempts++;                              if (startAttempts > 5)                              {                                  m_reportMessage("Too many startup attempts' giving up"' true);                                  m_terminate = true;                              }                          }                            // Throttle restarts                          if (!m_terminate)                              System.Threading.Thread.Sleep(TimeSpan.FromSeconds(10));                      }                  }              }              finally              {                  if (m_onStoppedAction != null)                      m_onStoppedAction();              }
Magic Number,Duplicati.Service,Runner,C:\repos\duplicati_duplicati\Duplicati\Service\Runner.cs,PingProcess,The following statement contains a magic number: for(var n = 0; n < 5; n++)              {                  lock(m_writelock)                  {                      m_process.StandardInput.WriteLine("ping");                      m_process.StandardInput.Flush();                  }                    using (var t = m_process.StandardOutput.ReadLineAsync())                  {                      t.Wait(TimeSpan.FromMinutes(1));                        if (t.IsCompleted && !t.IsFaulted && !t.IsCanceled)                          return;                  }              }
Magic Number,Duplicati.WindowsService,ServiceControl,C:\repos\duplicati_duplicati\Duplicati\WindowsService\ServiceControl.cs,DoStart,The following statement contains a magic number: lock(m_lock)                  if (m_runner == null)                  {                      if (m_verbose_messages)                          m_eventLog.WriteEntry("Set start time to 30 seconds...");                      var sv = new ServiceStatus()                      {                          dwCurrentState = ServiceState.SERVICE_START_PENDING'                          dwWaitHint = (uint)TimeSpan.FromSeconds(30).TotalMilliseconds                      };                      SetServiceStatus(this.ServiceHandle' ref sv);                        if (m_verbose_messages)                          m_eventLog.WriteEntry("Starting runner...");                        m_runner = new Runner(                          startargs'                          () =>                          {                              if (m_verbose_messages)                                  m_eventLog.WriteEntry("Started!");                                var sv2 = new ServiceStatus()                              {                                  dwCurrentState = ServiceState.SERVICE_RUNNING                              };                              SetServiceStatus(this.ServiceHandle' ref sv2);                          }'                          () =>                          {                              if (m_verbose_messages)                                  m_eventLog.WriteEntry("Stopped!");                              var sv2 = new ServiceStatus()                              {                                  dwCurrentState = ServiceState.SERVICE_STOPPED                              };                              SetServiceStatus(this.ServiceHandle' ref sv2);                                base.Stop();                          }'                          (msg' important) =>                          {                              if (important || m_verbose_messages)                                  m_eventLog.WriteEntry(msg);                          }                      );                  }
Magic Number,Duplicati.WindowsService,ServiceControl,C:\repos\duplicati_duplicati\Duplicati\WindowsService\ServiceControl.cs,DoStop,The following statement contains a magic number: lock (m_lock)                  if (m_runner != null)                  {                      if (m_verbose_messages)                          m_eventLog.WriteEntry("Calling stop...");                      var sv = new ServiceStatus()                      {                          dwCurrentState = ServiceState.SERVICE_STOP_PENDING'                          dwWaitHint = (uint)TimeSpan.FromSeconds(5).TotalMilliseconds                      };                      SetServiceStatus(this.ServiceHandle' ref sv);                        if (m_verbose_messages)                          m_eventLog.WriteEntry("Soft stop invoked...");                      m_runner.Stop(false);                  }
