Implementation smell,Namespace,Class,File,Method,Description
Long Method,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,OnFinish,The method has 163 lines of code.
Long Method,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The method has 108 lines of code.
Complex Method,Duplicati.Library.Modules.Builtin,ConsolePasswordInput,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\ConsolePasswordInput.cs,ReadPassphraseFromConsole,Cyclomatic complexity of the method is 13
Complex Method,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,Cyclomatic complexity of the method is 17
Complex Method,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,Cyclomatic complexity of the method is 18
Complex Method,Duplicati.Library.Modules.Builtin,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendHttpMessage.cs,OnFinish,Cyclomatic complexity of the method is 8
Complex Method,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,OnFinish,Cyclomatic complexity of the method is 24
Complex Method,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,Cyclomatic complexity of the method is 13
Complex Method,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,OnFinish,Cyclomatic complexity of the method is 8
Long Parameter List,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The method has 10 parameters. Parameters: scriptpath' eventname' operationname' remoteurl' localpath' timeout' requiredScript' options' datafile' level
Long Parameter List,Duplicati.Library.Modules.Builtin.Strings,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\Strings.cs,OptionSendlevelLong,The method has 5 parameters. Parameters: success' warning' error' fatal' all
Long Parameter List,Duplicati.Library.Modules.Builtin.Strings,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\Strings.cs,SendxmpplevelLong,The method has 5 parameters. Parameters: success' warning' error' fatal' all
Long Parameter List,Duplicati.Library.Modules.Builtin.Strings,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\Strings.cs,SendhttplevelLong,The method has 5 parameters. Parameters: success' warning' error' fatal' all
Long Identifier,Duplicati.Library.Modules.Builtin,HttpOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HttpOptions.cs,,The length of the parameter OPTION_ACCEPT_SPECIFIED_CERTIFICATE is 35.
Long Identifier,Duplicati.Library.Modules.Builtin,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendHttpMessage.cs,,The length of the parameter DEFAULT_MESSAGE_PARAMETER_NAME is 30.
Long Statement,Duplicati.Library.Modules.Builtin,ConsolePasswordInput,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\ConsolePasswordInput.cs,Configure,The length of the statement  "            if (!commandlineOptions.ContainsKey("passphrase") && !Duplicati.Library.Utility.Utility.ParseBoolOption(commandlineOptions' "no-encryption")) " is 141.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,ParseSourcePaths,The length of the statement  "                Logging.Log.WriteMessage("Microsoft SQL Server databases backup works only on Windows OS"' Logging.LogMessageType.Warning); " is 123.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,ParseSourcePaths,The length of the statement  "                    paths = paths.Where(x => !x.Equals(m_MSSQLPathAllRegExp' StringComparison.OrdinalIgnoreCase) && !Regex.IsMatch(x' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)).ToArray(); " is 203.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,ParseSourcePaths,The length of the statement  "                    var filters = filter.Split(new string[] { System.IO.Path.PathSeparator.ToString() }' StringSplitOptions.RemoveEmptyEntries); " is 124.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,ParseSourcePaths,The length of the statement  "                    var remainingfilters = filters.Where(x => !Regex.IsMatch(x' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)).ToArray(); " is 149.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                var filters = filter.Split(new string[] { System.IO.Path.PathSeparator.ToString() }' StringSplitOptions.RemoveEmptyEntries); " is 124.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                filtersInclude = filters.Where(x => x.StartsWith("+"' StringComparison.Ordinal) && Regex.IsMatch(x' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 178.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                    .Select(x => Regex.Match(x.Substring(1)' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Groups[1].Value).ToList(); " is 145.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                filtersExclude = filters.Where(x => x.StartsWith("-"' StringComparison.Ordinal) && Regex.IsMatch(x' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 178.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                    .Select(x => Regex.Match(x.Substring(1)' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Groups[1].Value).ToList(); " is 145.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                var remainingfilters = filters.Where(x => !Regex.IsMatch(x' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)).ToArray(); " is 149.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                var excludedWriters = commandlineOptions["vss-exclude-writers"].Split(';').Where(x => !string.IsNullOrWhiteSpace(x) && x.Trim().Length > 0).Select(x => new Guid(x)).ToArray(); " is 175.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                    Logging.Log.WriteMessage(string.Format("Excluded writers for VSS cannot contain MS SQL writer when backuping Microsoft SQL Server databases. Removing \"{0}\" to continue"' MSSQLUtility.MSSQLWriterGuid.ToString())' Logging.LogMessageType.Warning); " is 246.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                    changedOptions["vss-exclude-writers"] = string.Join(";"' excludedWriters.Where(x => x != MSSQLUtility.MSSQLWriterGuid)); " is 120.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "            if (!commandlineOptions.Keys.Contains("snapshot-policy") || !commandlineOptions["snapshot-policy"].Equals("required"' StringComparison.OrdinalIgnoreCase)) " is 154.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                Logging.Log.WriteMessage("Snapshot strategy have to be set to \"required\" when backuping Microsoft SQL Server databases. Changing to \"required\" to continue"' Logging.LogMessageType.Warning); " is 193.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "            Logging.Log.WriteMessage(string.Format("Found {0} databases on Microsoft SQL Server"' mssqlUtility.DBs.Count)' Logging.LogMessageType.Information); " is 147.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                Logging.Log.WriteMessage(string.Format("Found DB name {0}' ID {1}' files {2}"' db.Name' db.ID' string.Join(";"' db.DataPaths))' Logging.LogMessageType.Profiling); " is 162.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                foreach (var dbID in paths.Where(x => Regex.IsMatch(x' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 133.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                    .Select(x => Regex.Match(x' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Groups[1].Value).ToArray()) " is 133.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                        throw new Duplicati.Library.Interface.UserInformationException(string.Format("DB name specified in source with ID {0} cannot be found"' dbID)); " is 143.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                        throw new Duplicati.Library.Interface.UserInformationException(string.Format("DB name specified in include filter with ID {0} cannot be found"' dbID)); " is 151.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                    Logging.Log.WriteMessage(string.Format("Including {0} based on including filters"' dbID)' Logging.LogMessageType.Information); " is 126.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                        throw new Duplicati.Library.Interface.UserInformationException(string.Format("DB name specified in exclude filter with ID {0} cannot be found"' dbID)); " is 151.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                    Logging.Log.WriteMessage(string.Format("Excluding {0} based on excluding filters"' dbID)' Logging.LogMessageType.Information); " is 126.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                filter.Split(new string[] { System.IO.Path.PathSeparator.ToString() }' StringSplitOptions.RemoveEmptyEntries).Where(x => x.StartsWith("-"' StringComparison.Ordinal)).Select(x => x.Substring(1)).ToList()); " is 204.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                        Logging.Log.WriteMessage(string.Format("For DB {0} - adding {1}"' dbForBackup.Name' pathForBackup)' Logging.LogMessageType.Information); " is 136.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "                        Logging.Log.WriteMessage(string.Format("Excluding {0} based on excluding filters"' pathForBackup)' Logging.LogMessageType.Information); " is 135.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,RealParseSourcePaths,The length of the statement  "            paths = pathsForBackup.Where(x => !x.Equals(m_MSSQLPathAllRegExp' StringComparison.OrdinalIgnoreCase) && !Regex.IsMatch(x' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 201.
Long Statement,Duplicati.Library.Modules.Builtin,MSSQLOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\MSSQLOptions.cs,ContainFilesForBackup,The length of the statement  "            return paths.Where(x => !string.IsNullOrWhiteSpace(x)).Where(x => x.Equals(m_MSSQLPathAllRegExp' StringComparison.OrdinalIgnoreCase) || Regex.IsMatch(x' m_MSSQLPathDBRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)).Any(); " is 238.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,ParseSourcePaths,The length of the statement  "                    paths = paths.Where(x => !x.Equals(m_HyperVPathAllRegExp' StringComparison.OrdinalIgnoreCase) && !Regex.IsMatch(x' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)).ToArray(); " is 207.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,ParseSourcePaths,The length of the statement  "                    var filters = filter.Split(new string[] { System.IO.Path.PathSeparator.ToString() }' StringSplitOptions.RemoveEmptyEntries); " is 124.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,ParseSourcePaths,The length of the statement  "                    var remainingfilters = filters.Where(x => !Regex.IsMatch(x' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)).ToArray(); " is 152.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                var filters = filter.Split(new string[] { System.IO.Path.PathSeparator.ToString() }' StringSplitOptions.RemoveEmptyEntries); " is 124.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                filtersInclude = filters.Where(x => x.StartsWith("+"' StringComparison.Ordinal) && Regex.IsMatch(x' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 181.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                    .Select(x => Regex.Match(x.Substring(1)' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Groups[1].Value).ToList(); " is 148.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                filtersExclude = filters.Where(x => x.StartsWith("-"' StringComparison.Ordinal) && Regex.IsMatch(x' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 181.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                    .Select(x => Regex.Match(x.Substring(1)' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Groups[1].Value).ToList(); " is 148.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                var remainingfilters = filters.Where(x => !Regex.IsMatch(x' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)).ToArray(); " is 152.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                var excludedWriters = commandlineOptions["vss-exclude-writers"].Split(';').Where(x => !string.IsNullOrWhiteSpace(x) && x.Trim().Length > 0).Select(x => new Guid(x)).ToArray(); " is 175.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                    Logging.Log.WriteMessage(string.Format("Excluded writers for VSS cannot contain Hyper-V writer when backuping Hyper-V virtual machines. Removing \"{0}\" to continue"' HyperVUtility.HyperVWriterGuid.ToString())' Logging.LogMessageType.Warning); " is 243.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                    changedOptions["vss-exclude-writers"] = string.Join(";"' excludedWriters.Where(x => x != HyperVUtility.HyperVWriterGuid)); " is 122.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "            if (!commandlineOptions.Keys.Contains("snapshot-policy") || !commandlineOptions["snapshot-policy"].Equals("required"' StringComparison.OrdinalIgnoreCase)) " is 154.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                Logging.Log.WriteMessage("Snapshot strategy have to be set to \"required\" when backuping Hyper-V virtual machines. Changing to \"required\" to continue"' Logging.LogMessageType.Warning); " is 187.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                Logging.Log.WriteMessage("This is client version of Windows. Hyper-V VSS writer is present only on Server version. Backup will continue' but will be crash consistent only in opposite to application consistent in Server version"' Logging.LogMessageType.Warning); " is 261.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "            Logging.Log.WriteMessage(string.Format("Found {0} virtual machines on Hyper-V"' hypervUtility.Guests.Count)' Logging.LogMessageType.Information); " is 145.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                Logging.Log.WriteMessage(string.Format("Found VM name {0}' ID {1}' files {2}"' guest.Name' guest.ID' string.Join(";"' guest.DataPaths))' Logging.LogMessageType.Profiling); " is 171.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                foreach (var guestID in paths.Where(x => Regex.IsMatch(x' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 139.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                    .Select(x => Regex.Match(x' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant).Groups[1].Value).ToArray()) " is 136.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                        throw new Duplicati.Library.Interface.UserInformationException(string.Format("Hyper-V guest specified in source with ID {0} cannot be found"' guestID)); " is 152.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                        throw new Duplicati.Library.Interface.UserInformationException(string.Format("Hyper-V guest specified in include filter with ID {0} cannot be found"' guestID)); " is 160.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                    Logging.Log.WriteMessage(string.Format("Including {0} based on including filters"' guestID)' Logging.LogMessageType.Information); " is 129.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                        throw new Duplicati.Library.Interface.UserInformationException(string.Format("Hyper-V guest specified in exclude filter with ID {0} cannot be found"' guestID)); " is 160.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                    Logging.Log.WriteMessage(string.Format("Excluding {0} based on excluding filters"' guestID)' Logging.LogMessageType.Information); " is 129.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                filter.Split(new string[] { System.IO.Path.PathSeparator.ToString() }' StringSplitOptions.RemoveEmptyEntries).Where(x => x.StartsWith("-"' StringComparison.Ordinal)).Select(x => x.Substring(1)).ToList()); " is 204.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                        Logging.Log.WriteMessage(string.Format("For VM {0} - adding {1}"' guestForBackup.Name' pathForBackup)' Logging.LogMessageType.Information); " is 139.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "                        Logging.Log.WriteMessage(string.Format("Excluding {0} based on excluding filters"' pathForBackup)' Logging.LogMessageType.Information); " is 135.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,RealParseSourcePaths,The length of the statement  "            paths = pathsForBackup.Where(x => !x.Equals(m_HyperVPathAllRegExp' StringComparison.OrdinalIgnoreCase) && !Regex.IsMatch(x' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 205.
Long Statement,Duplicati.Library.Modules.Builtin,HyperVOptions,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\HyperVOptions.cs,ContainFilesForBackup,The length of the statement  "            return paths.Where(x => !string.IsNullOrWhiteSpace(x)).Where(x => x.Equals(m_HyperVPathAllRegExp' StringComparison.OrdinalIgnoreCase) || Regex.IsMatch(x' m_HyperVPathGuidRegExp' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)).Any(); " is 242.
Long Statement,Duplicati.Library.Modules.Builtin,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendHttpMessage.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%OPERATIONNAME\\%"' m_operationname ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 132.
Long Statement,Duplicati.Library.Modules.Builtin,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendHttpMessage.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%REMOTEURL\\%"' m_remoteurl ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 124.
Long Statement,Duplicati.Library.Modules.Builtin,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendHttpMessage.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%LOCALPATH\\%"' m_localpath == null ? "" : string.Join(System.IO.Path.PathSeparator.ToString()' m_localpath)' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 199.
Long Statement,Duplicati.Library.Modules.Builtin,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendHttpMessage.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%PARSEDRESULT\\%"' m_parsedresultlevel ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 135.
Long Statement,Duplicati.Library.Modules.Builtin,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendHttpMessage.cs,ReplaceTemplate,The length of the statement  "                    input = Regex.Replace(input' "\\%RESULT\\%"' System.IO.File.ReadAllText(tf)' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 134.
Long Statement,Duplicati.Library.Modules.Builtin,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendHttpMessage.cs,ReplaceTemplate,The length of the statement  "                input = Regex.Replace(input' "\\%" + kv.Key + "\\%"' kv.Value ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 126.
Long Statement,Duplicati.Library.Modules.Builtin,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendHttpMessage.cs,ReplaceTemplate,The length of the statement  "                input = Regex.Replace(input' "\\%backup-name\\%"' System.IO.Path.GetFileNameWithoutExtension(Duplicati.Library.Utility.Utility.getEntryAssembly().Location) ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 220.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,OnFinish,The length of the statement  "                string toMailDomain = mailboxToFirst.Address.Substring(mailboxToFirst.Address.LastIndexOf("@"' StringComparison.Ordinal) + 1); " is 126.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,OnFinish,The length of the statement  "                        Logging.Log.WriteMessage(Strings.SendMail.SendMailFailedRetryError(lastServer' lastEx.Message' server)' LogMessageType.Warning' lastEx); " is 136.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%OPERATIONNAME\\%"' m_operationname ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 132.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%REMOTEURL\\%"' m_remoteurl ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 124.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%LOCALPATH\\%"' m_localpath == null ? "" : string.Join(System.IO.Path.PathSeparator.ToString()' m_localpath)' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 199.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%PARSEDRESULT\\%"' m_parsedresultlevel ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 135.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,ReplaceTemplate,The length of the statement  "                input = Regex.Replace(input' "\\%RESULT\\%"' m_parsedresultlevel ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 129.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,ReplaceTemplate,The length of the statement  "                        input = Regex.Replace(input' "\\%RESULT\\%"' System.IO.File.ReadAllText(tf)' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 134.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,ReplaceTemplate,The length of the statement  "                input = Regex.Replace(input' "\\%" + kv.Key + "\\%"' kv.Value ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 126.
Long Statement,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,ReplaceTemplate,The length of the statement  "                input = Regex.Replace(input' "\\%backup-name\\%"' System.IO.Path.GetFileNameWithoutExtension(Duplicati.Library.Utility.Utility.getEntryAssembly().Location) ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 220.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,OnStart,The length of the statement  "                Execute(m_requiredScript' "BEFORE"' m_operationName' ref m_remoteurl' ref m_localpath' m_timeout' true' m_options' null' null); " is 127.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,OnStart,The length of the statement  "                Execute(m_startScript' "BEFORE"' m_operationName' ref m_remoteurl' ref m_localpath' m_timeout' false' m_options' null' null); " is 125.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,OnFinish,The length of the statement  "                Execute(m_finishScript' "AFTER"' m_operationName' ref m_remoteurl' ref m_localpath' m_timeout' false' m_options' tmpfile' level); " is 129.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,SerializeResult,The length of the statement  "                        if (c.GetType().IsGenericType && !c.GetType().IsGenericTypeDefinition && c.GetType().GetGenericTypeDefinition() == typeof(KeyValuePair<'>)) " is 139.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,SerializeResult,The length of the statement  "                        if (c.GetType().IsGenericType && !c.GetType().IsGenericTypeDefinition && c.GetType().GetGenericTypeDefinition() == typeof(KeyValuePair<'>)) " is 139.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The length of the statement  "                    psi.EnvironmentVariables["DUPLICATI__backup_name"] = System.IO.Path.GetFileNameWithoutExtension(Duplicati.Library.Utility.Utility.getEntryAssembly().Location); " is 159.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The length of the statement  "                            throw new Duplicati.Library.Interface.UserInformationException(Strings.RunScript.InvalidExitCodeError(scriptpath' p.ExitCode)); " is 127.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The length of the statement  "                            Logging.Log.WriteMessage(Strings.RunScript.InvalidExitCodeError(scriptpath' p.ExitCode)' Duplicati.Library.Logging.LogMessageType.Warning); " is 139.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The length of the statement  "                        Logging.Log.WriteMessage(Strings.RunScript.ScriptTimeoutError(scriptpath)' Duplicati.Library.Logging.LogMessageType.Warning); " is 125.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The length of the statement  "                    Logging.Log.WriteMessage(Strings.RunScript.StdErrorReport(scriptpath' stderr)' Duplicati.Library.Logging.LogMessageType.Warning); " is 129.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The length of the statement  "                            if (value.Length >= 2 && value.StartsWith("\""' StringComparison.Ordinal) && value.EndsWith("\""' StringComparison.Ordinal)) " is 124.
Long Statement,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The length of the statement  "                Logging.Log.WriteMessage(Strings.RunScript.ScriptExecuteError(scriptpath' ex.Message)' Duplicati.Library.Logging.LogMessageType.Warning' ex); " is 141.
Long Statement,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%OPERATIONNAME\\%"' m_operationname ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 132.
Long Statement,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%REMOTEURL\\%"' m_remoteurl ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 124.
Long Statement,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%LOCALPATH\\%"' m_localpath == null ? "" : string.Join(System.IO.Path.PathSeparator.ToString()' m_localpath)' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 199.
Long Statement,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,ReplaceTemplate,The length of the statement  "            input = Regex.Replace(input' "\\%PARSEDRESULT\\%"' m_parsedresultlevel ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 135.
Long Statement,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,ReplaceTemplate,The length of the statement  "                    input = Regex.Replace(input' "\\%RESULT\\%"' System.IO.File.ReadAllText(tf)' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 134.
Long Statement,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,ReplaceTemplate,The length of the statement  "                input = Regex.Replace(input' "\\%" + kv.Key + "\\%"' kv.Value ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 126.
Long Statement,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,ReplaceTemplate,The length of the statement  "                input = Regex.Replace(input' "\\%backup-name\\%"' System.IO.Path.GetFileNameWithoutExtension(Duplicati.Library.Utility.Utility.getEntryAssembly().Location) ?? ""' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 220.
Long Statement,Duplicati.Library.Modules.Builtin,CheckMonoSSL,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\CheckMonoSSL.cs,Execute,The length of the statement  "                        var path = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location)' "mozroots.exe"); " is 143.
Long Statement,Duplicati.Library.Modules.Builtin.Strings,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\Strings.cs,FailedToLookupMXServer,The length of the statement  "{ return LC.L(@"Unable to find the destination mail server through MX lookup' please use the option {0} to specify what smtp server to use."' optionname); }" is 156.
Long Statement,Duplicati.Library.Modules.Builtin.Strings,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\Strings.cs,OptionSendlevelLong,The length of the statement  "{ return LC.L(@"You can specify one of ""{0}""' ""{1}""' ""{2}""' ""{3}"". You can supply multiple options with a comma separator' e.g. ""{0}'{1}"". The special value ""{4}"" is a shorthand for ""{0}'{1}'{2}'{3}"" and will cause all backup operations to send an email."' success' warning' error' fatal' all); }" is 310.
Long Statement,Duplicati.Library.Modules.Builtin.Strings,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\Strings.cs,OptionSubjectLong,The length of the statement  "{ return LC.L(@"This setting supplies the email subject. Values are replaced as described in the description for --{0}."' optionname); }" is 136.
Long Statement,Duplicati.Library.Modules.Builtin.Strings,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\Strings.cs,SendMailFailedRetryError,The length of the statement  "{ return LC.L(@"Failed to send email with server: {0}' message: {1}' retrying with {2}"' failedserver' message' retryserver); }" is 127.
Long Statement,Duplicati.Library.Modules.Builtin.Strings,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\Strings.cs,SendxmpplevelLong,The length of the statement  "You can supply multiple options with a comma separator' e.g. ""{0}'{1}"". The special value ""{4}"" is a shorthand for ""{0}'{1}'{2}'{3}"" and will cause all backup operations to send a message."' success' warning' error' fatal' all); }" is 236.
Long Statement,Duplicati.Library.Modules.Builtin.Strings,SendHttpMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\Strings.cs,SendhttplevelLong,The length of the statement  "You can supply multiple options with a comma separator' e.g. ""{0}'{1}"". The special value ""{4}"" is a shorthand for ""{0}'{1}'{2}'{3}"" and will cause all backup operations to send a message."' success' warning' error' fatal' all); }" is 236.
Complex Conditional,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The conditional expression  "string.Equals(key' "eventname"' StringComparison.OrdinalIgnoreCase) ||                               string.Equals(key' "operationname"' StringComparison.OrdinalIgnoreCase) ||                              string.Equals(key' "main-action"' StringComparison.OrdinalIgnoreCase) ||                              key == """  is complex.
Empty Catch Block,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,OnFinish,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,SendMessages,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Modules.Builtin,CheckMonoSSL,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\CheckMonoSSL.cs,CheckStore,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Modules.Builtin,CheckMonoSSL,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\CheckMonoSSL.cs,CheckStore,The method has an empty catch block.
Empty Catch Block,Duplicati.Library.Modules.Builtin,CheckMonoSSL,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\CheckMonoSSL.cs,CheckForInstalledCerts,The method has an empty catch block.
Magic Number,Duplicati.Library.Modules.Builtin,SendMail,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendMail.cs,OnFinish,The following statement contains a magic number: try              {                  string body = m_body;                  string subject = m_subject;                  if (body != DEFAULT_BODY && System.IO.Path.IsPathRooted(body) && System.IO.File.Exists(body))                      body = System.IO.File.ReadAllText(body);                    body = ReplaceTemplate(body' result' false);                  subject = ReplaceTemplate(subject' result' true);                    var message = new MimeMessage();                  MailboxAddress mailbox;                  foreach (string s in m_to.Split(new[] { "'" }' StringSplitOptions.RemoveEmptyEntries))                      if(MailboxAddress.TryParse(s.Replace("\""' "")' out mailbox))                          message.To.Add(mailbox);                    var mailboxToFirst = (MailboxAddress) message.To.First();                  string toMailDomain = mailboxToFirst.Address.Substring(mailboxToFirst.Address.LastIndexOf("@"' StringComparison.Ordinal) + 1);                                                    string from = m_from.Trim().Replace("\""' "");                  if (from.IndexOf('@') < 0)                  {                      if (from.EndsWith(">"' StringComparison.Ordinal))                          from = from.Insert(from.Length - 1' "@" + toMailDomain);                      else                          from = string.Format("No Reply - Backup report <{0}@{1}>"' from' toMailDomain);                  }                    if (MailboxAddress.TryParse(from' out mailbox))                      message.From.Add(mailbox);                                    message.Subject = subject;                  message.Body = new TextPart("plain") { Text = body' ContentTransferEncoding = ContentEncoding.EightBit };                    List<string> servers = null;                  if (string.IsNullOrEmpty(m_server))                  {                      var dnslite = new DnsLib.DnsLite();                      var dnslist = new List<string>();                        //Grab all IPv4 addresses                      foreach (NetworkInterface networkInterface in NetworkInterface.GetAllNetworkInterfaces())                          try                           {                              foreach (IPAddress dnsAddress in networkInterface.GetIPProperties().DnsAddresses)                                  if (dnsAddress.AddressFamily == AddressFamily.InterNetwork)                                      dnslist.Add(dnsAddress.ToString());                          }                          catch { }                                            dnslist = dnslist.Distinct().ToList();                                            // If we have no DNS servers' try Google and OpenDNS                      if (dnslist.Count == 0)                       {                          // https://developers.google.com/speed/public-dns/                          dnslist.Add("8.8.8.8");                          dnslist.Add("8.8.4.4");                                                    //http://www.opendns.com/opendns-ip-addresses/                          dnslist.Add("208.67.222.222");                          dnslist.Add("208.67.220.220");                      }                        var records = new List<MXRecord>();                      foreach (var s in dnslist)                      {                          var res = dnslite.getMXRecords(toMailDomain' s);                          if (res != null)                              records.AddRange(res.OfType<MXRecord>());                      }                        servers = records.OrderBy(record => record.preference).Select(x => "smtp://" + x.exchange).Distinct().ToList();                      if (servers.Count == 0)                          throw new IOException(Strings.SendMail.FailedToLookupMXServer(OPTION_SERVER));                  }                  else                   {                      servers = (from n in m_server.Split(new string[] { ";" }' StringSplitOptions.RemoveEmptyEntries)                                 let srv = (n == null || n.IndexOf("://"' StringComparison.OrdinalIgnoreCase) > 0) ? n : "smtp://" + n                                 where !string.IsNullOrEmpty(srv)                                 select srv).Distinct().ToList();                  }                                    Exception lastEx = null;                  string lastServer = null;                    foreach(var server in servers)                  {                      if (lastEx != null)                          Logging.Log.WriteMessage(Strings.SendMail.SendMailFailedRetryError(lastServer' lastEx.Message' server)' LogMessageType.Warning' lastEx);                                        lastServer = server;                      try                      {                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  using (var client = new SmtpClient(new MailKit.ProtocolLogger(ms)))                                  {                                      client.Timeout = (int)TimeSpan.FromMinutes(1).TotalMilliseconds;                                        // Backward compatibility fix for setup prior to using MailKit                                      var uri = new System.Uri(server);                                      if (uri.Scheme.ToLowerInvariant() == "tls")                                          uri = new System.Uri("smtp://" + uri.Host + ":" + (uri.Port <= 0 ? 587 : uri.Port) + "/?starttls=always");                                        client.Connect(uri);                                        if (!string.IsNullOrEmpty(m_username) && !string.IsNullOrEmpty(m_password))                                          client.Authenticate(m_username' m_password);                                        client.Send(message);                                      client.Disconnect(true);                                  }                              }                              finally                              {                                  var log = Encoding.UTF8.GetString(ms.GetBuffer());                                  if (!string.IsNullOrWhiteSpace(log))                                      Logging.Log.WriteMessage(Strings.SendMail.SendMailLog(log)' LogMessageType.Profiling);                              }                          }                                                    lastEx = null;                          Logging.Log.WriteMessage(Strings.SendMail.SendMailSuccess(server)' LogMessageType.Information);                          break;                      }                      catch (Exception ex)                      {                          lastEx = ex;                                              }                  }                                    if (lastEx != null)                      throw lastEx;              }              catch (Exception ex)              {                  Exception top = ex;                  var sb = new StringBuilder();                  while (top != null)                  {                      if (sb.Length != 0)                          sb.Append("--> ");                      sb.AppendFormat("{0}: {1}{2}"' top.GetType().FullName' top.Message' Environment.NewLine);                      top = top.InnerException;                  }                    Logging.Log.WriteMessage(Strings.SendMail.SendMailFailedError(sb.ToString())' LogMessageType.Warning' ex);              }
Magic Number,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The following statement contains a magic number: try              {                  System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo(scriptpath);                  psi.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;                  psi.CreateNoWindow = true;                  psi.UseShellExecute = false;                  psi.RedirectStandardOutput = true;                  psi.RedirectStandardError = true;                    foreach(KeyValuePair<string' string> kv in options)                      psi.EnvironmentVariables["DUPLICATI__" + kv.Key.Replace('-'' '_')] = kv.Value;                    if (!options.ContainsKey("backup-name"))                      psi.EnvironmentVariables["DUPLICATI__backup_name"] = System.IO.Path.GetFileNameWithoutExtension(Duplicati.Library.Utility.Utility.getEntryAssembly().Location);                    psi.EnvironmentVariables["DUPLICATI__EVENTNAME"] = eventname;                  psi.EnvironmentVariables["DUPLICATI__OPERATIONNAME"] = operationname;                  psi.EnvironmentVariables["DUPLICATI__REMOTEURL"] = remoteurl;                  if (level != null)                      psi.EnvironmentVariables["DUPLICATI__PARSED_RESULT"] = level.Value.ToString();                                    if (localpath != null)                      psi.EnvironmentVariables["DUPLICATI__LOCALPATH"] = string.Join(System.IO.Path.PathSeparator.ToString()' localpath);                    string stderr = null;                  string stdout = null;                    if (!string.IsNullOrEmpty(datafile))                      psi.EnvironmentVariables["DUPLICATI__RESULTFILE"] = datafile;                    using(System.Diagnostics.Process p = System.Diagnostics.Process.Start(psi))                  {                      ConsoleDataHandler cs = new ConsoleDataHandler(p);                        if (timeout <= 0)                          p.WaitForExit();                      else                          p.WaitForExit(timeout);                        if (requiredScript)                      {                          if (!p.HasExited)                              throw new Duplicati.Library.Interface.UserInformationException(Strings.RunScript.ScriptTimeoutError(scriptpath));                          else if (p.ExitCode != 0)                              throw new Duplicati.Library.Interface.UserInformationException(Strings.RunScript.InvalidExitCodeError(scriptpath' p.ExitCode));                      }                        if (p.HasExited)                      {                          stderr = cs.StandardError;                          stdout = cs.StandardOutput;                          if (p.ExitCode != 0)                              Logging.Log.WriteMessage(Strings.RunScript.InvalidExitCodeError(scriptpath' p.ExitCode)' Duplicati.Library.Logging.LogMessageType.Warning);                      }                      else                      {                          Logging.Log.WriteMessage(Strings.RunScript.ScriptTimeoutError(scriptpath)' Duplicati.Library.Logging.LogMessageType.Warning);                      }                  }                    if (!string.IsNullOrEmpty(stderr))                      Logging.Log.WriteMessage(Strings.RunScript.StdErrorReport(scriptpath' stderr)' Duplicati.Library.Logging.LogMessageType.Warning);                    //We only allow setting parameters on startup                  if (eventname == "BEFORE" && stdout != null)                  {                      foreach(string rawline in stdout.Split(new string[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries))                      {                          string line = rawline.Trim();                          if (!line.StartsWith("--"' StringComparison.Ordinal))                              continue; //Ingore anything that does not start with --                            line = line.Substring(2);                          int lix = line.IndexOf('=');                          if (lix == 0) //Skip --= as that makes no sense                              continue;                            string key;                          string value;                            if (lix < 0)                          {                              key = line.Trim();                              value = "";                          }                          else                          {                              key = line.Substring(0' lix).Trim();                              value = line.Substring(lix + 1).Trim();                                if (value.Length >= 2 && value.StartsWith("\""' StringComparison.Ordinal) && value.EndsWith("\""' StringComparison.Ordinal))                                  value = value.Substring(1' value.Length - 2);                          }                            if (string.Equals(key' "remoteurl"' StringComparison.OrdinalIgnoreCase))                          {                              remoteurl = value;                          }                          else if (string.Equals(key' "localpath"' StringComparison.OrdinalIgnoreCase))                          {                              localpath = value.Split(System.IO.Path.PathSeparator);                          }                          else if (                              string.Equals(key' "eventname"' StringComparison.OrdinalIgnoreCase) ||                               string.Equals(key' "operationname"' StringComparison.OrdinalIgnoreCase) ||                              string.Equals(key' "main-action"' StringComparison.OrdinalIgnoreCase) ||                              key == ""                          )                          {                              //Ignore                          }                          else                              options[key] = value;                        }                  }              }              catch (Exception ex)              {                  Logging.Log.WriteMessage(Strings.RunScript.ScriptExecuteError(scriptpath' ex.Message)' Duplicati.Library.Logging.LogMessageType.Warning' ex);                  if (requiredScript)                      throw;              }
Magic Number,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The following statement contains a magic number: try              {                  System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo(scriptpath);                  psi.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;                  psi.CreateNoWindow = true;                  psi.UseShellExecute = false;                  psi.RedirectStandardOutput = true;                  psi.RedirectStandardError = true;                    foreach(KeyValuePair<string' string> kv in options)                      psi.EnvironmentVariables["DUPLICATI__" + kv.Key.Replace('-'' '_')] = kv.Value;                    if (!options.ContainsKey("backup-name"))                      psi.EnvironmentVariables["DUPLICATI__backup_name"] = System.IO.Path.GetFileNameWithoutExtension(Duplicati.Library.Utility.Utility.getEntryAssembly().Location);                    psi.EnvironmentVariables["DUPLICATI__EVENTNAME"] = eventname;                  psi.EnvironmentVariables["DUPLICATI__OPERATIONNAME"] = operationname;                  psi.EnvironmentVariables["DUPLICATI__REMOTEURL"] = remoteurl;                  if (level != null)                      psi.EnvironmentVariables["DUPLICATI__PARSED_RESULT"] = level.Value.ToString();                                    if (localpath != null)                      psi.EnvironmentVariables["DUPLICATI__LOCALPATH"] = string.Join(System.IO.Path.PathSeparator.ToString()' localpath);                    string stderr = null;                  string stdout = null;                    if (!string.IsNullOrEmpty(datafile))                      psi.EnvironmentVariables["DUPLICATI__RESULTFILE"] = datafile;                    using(System.Diagnostics.Process p = System.Diagnostics.Process.Start(psi))                  {                      ConsoleDataHandler cs = new ConsoleDataHandler(p);                        if (timeout <= 0)                          p.WaitForExit();                      else                          p.WaitForExit(timeout);                        if (requiredScript)                      {                          if (!p.HasExited)                              throw new Duplicati.Library.Interface.UserInformationException(Strings.RunScript.ScriptTimeoutError(scriptpath));                          else if (p.ExitCode != 0)                              throw new Duplicati.Library.Interface.UserInformationException(Strings.RunScript.InvalidExitCodeError(scriptpath' p.ExitCode));                      }                        if (p.HasExited)                      {                          stderr = cs.StandardError;                          stdout = cs.StandardOutput;                          if (p.ExitCode != 0)                              Logging.Log.WriteMessage(Strings.RunScript.InvalidExitCodeError(scriptpath' p.ExitCode)' Duplicati.Library.Logging.LogMessageType.Warning);                      }                      else                      {                          Logging.Log.WriteMessage(Strings.RunScript.ScriptTimeoutError(scriptpath)' Duplicati.Library.Logging.LogMessageType.Warning);                      }                  }                    if (!string.IsNullOrEmpty(stderr))                      Logging.Log.WriteMessage(Strings.RunScript.StdErrorReport(scriptpath' stderr)' Duplicati.Library.Logging.LogMessageType.Warning);                    //We only allow setting parameters on startup                  if (eventname == "BEFORE" && stdout != null)                  {                      foreach(string rawline in stdout.Split(new string[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries))                      {                          string line = rawline.Trim();                          if (!line.StartsWith("--"' StringComparison.Ordinal))                              continue; //Ingore anything that does not start with --                            line = line.Substring(2);                          int lix = line.IndexOf('=');                          if (lix == 0) //Skip --= as that makes no sense                              continue;                            string key;                          string value;                            if (lix < 0)                          {                              key = line.Trim();                              value = "";                          }                          else                          {                              key = line.Substring(0' lix).Trim();                              value = line.Substring(lix + 1).Trim();                                if (value.Length >= 2 && value.StartsWith("\""' StringComparison.Ordinal) && value.EndsWith("\""' StringComparison.Ordinal))                                  value = value.Substring(1' value.Length - 2);                          }                            if (string.Equals(key' "remoteurl"' StringComparison.OrdinalIgnoreCase))                          {                              remoteurl = value;                          }                          else if (string.Equals(key' "localpath"' StringComparison.OrdinalIgnoreCase))                          {                              localpath = value.Split(System.IO.Path.PathSeparator);                          }                          else if (                              string.Equals(key' "eventname"' StringComparison.OrdinalIgnoreCase) ||                               string.Equals(key' "operationname"' StringComparison.OrdinalIgnoreCase) ||                              string.Equals(key' "main-action"' StringComparison.OrdinalIgnoreCase) ||                              key == ""                          )                          {                              //Ignore                          }                          else                              options[key] = value;                        }                  }              }              catch (Exception ex)              {                  Logging.Log.WriteMessage(Strings.RunScript.ScriptExecuteError(scriptpath' ex.Message)' Duplicati.Library.Logging.LogMessageType.Warning' ex);                  if (requiredScript)                      throw;              }
Magic Number,Duplicati.Library.Modules.Builtin,RunScript,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\RunScript.cs,Execute,The following statement contains a magic number: try              {                  System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo(scriptpath);                  psi.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;                  psi.CreateNoWindow = true;                  psi.UseShellExecute = false;                  psi.RedirectStandardOutput = true;                  psi.RedirectStandardError = true;                    foreach(KeyValuePair<string' string> kv in options)                      psi.EnvironmentVariables["DUPLICATI__" + kv.Key.Replace('-'' '_')] = kv.Value;                    if (!options.ContainsKey("backup-name"))                      psi.EnvironmentVariables["DUPLICATI__backup_name"] = System.IO.Path.GetFileNameWithoutExtension(Duplicati.Library.Utility.Utility.getEntryAssembly().Location);                    psi.EnvironmentVariables["DUPLICATI__EVENTNAME"] = eventname;                  psi.EnvironmentVariables["DUPLICATI__OPERATIONNAME"] = operationname;                  psi.EnvironmentVariables["DUPLICATI__REMOTEURL"] = remoteurl;                  if (level != null)                      psi.EnvironmentVariables["DUPLICATI__PARSED_RESULT"] = level.Value.ToString();                                    if (localpath != null)                      psi.EnvironmentVariables["DUPLICATI__LOCALPATH"] = string.Join(System.IO.Path.PathSeparator.ToString()' localpath);                    string stderr = null;                  string stdout = null;                    if (!string.IsNullOrEmpty(datafile))                      psi.EnvironmentVariables["DUPLICATI__RESULTFILE"] = datafile;                    using(System.Diagnostics.Process p = System.Diagnostics.Process.Start(psi))                  {                      ConsoleDataHandler cs = new ConsoleDataHandler(p);                        if (timeout <= 0)                          p.WaitForExit();                      else                          p.WaitForExit(timeout);                        if (requiredScript)                      {                          if (!p.HasExited)                              throw new Duplicati.Library.Interface.UserInformationException(Strings.RunScript.ScriptTimeoutError(scriptpath));                          else if (p.ExitCode != 0)                              throw new Duplicati.Library.Interface.UserInformationException(Strings.RunScript.InvalidExitCodeError(scriptpath' p.ExitCode));                      }                        if (p.HasExited)                      {                          stderr = cs.StandardError;                          stdout = cs.StandardOutput;                          if (p.ExitCode != 0)                              Logging.Log.WriteMessage(Strings.RunScript.InvalidExitCodeError(scriptpath' p.ExitCode)' Duplicati.Library.Logging.LogMessageType.Warning);                      }                      else                      {                          Logging.Log.WriteMessage(Strings.RunScript.ScriptTimeoutError(scriptpath)' Duplicati.Library.Logging.LogMessageType.Warning);                      }                  }                    if (!string.IsNullOrEmpty(stderr))                      Logging.Log.WriteMessage(Strings.RunScript.StdErrorReport(scriptpath' stderr)' Duplicati.Library.Logging.LogMessageType.Warning);                    //We only allow setting parameters on startup                  if (eventname == "BEFORE" && stdout != null)                  {                      foreach(string rawline in stdout.Split(new string[] { Environment.NewLine }' StringSplitOptions.RemoveEmptyEntries))                      {                          string line = rawline.Trim();                          if (!line.StartsWith("--"' StringComparison.Ordinal))                              continue; //Ingore anything that does not start with --                            line = line.Substring(2);                          int lix = line.IndexOf('=');                          if (lix == 0) //Skip --= as that makes no sense                              continue;                            string key;                          string value;                            if (lix < 0)                          {                              key = line.Trim();                              value = "";                          }                          else                          {                              key = line.Substring(0' lix).Trim();                              value = line.Substring(lix + 1).Trim();                                if (value.Length >= 2 && value.StartsWith("\""' StringComparison.Ordinal) && value.EndsWith("\""' StringComparison.Ordinal))                                  value = value.Substring(1' value.Length - 2);                          }                            if (string.Equals(key' "remoteurl"' StringComparison.OrdinalIgnoreCase))                          {                              remoteurl = value;                          }                          else if (string.Equals(key' "localpath"' StringComparison.OrdinalIgnoreCase))                          {                              localpath = value.Split(System.IO.Path.PathSeparator);                          }                          else if (                              string.Equals(key' "eventname"' StringComparison.OrdinalIgnoreCase) ||                               string.Equals(key' "operationname"' StringComparison.OrdinalIgnoreCase) ||                              string.Equals(key' "main-action"' StringComparison.OrdinalIgnoreCase) ||                              key == ""                          )                          {                              //Ignore                          }                          else                              options[key] = value;                        }                  }              }              catch (Exception ex)              {                  Logging.Log.WriteMessage(Strings.RunScript.ScriptExecuteError(scriptpath' ex.Message)' Duplicati.Library.Logging.LogMessageType.Warning' ex);                  if (requiredScript)                      throw;              }
Magic Number,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,SendMessages,The following statement contains a magic number: var con = new agsXMPP.XmppClientConnection(uri.Host' uri.Port == -1 ? (uri.Scheme == "https" ? 5223 :5222) : uri.Port);
Magic Number,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,SendMessages,The following statement contains a magic number: var con = new agsXMPP.XmppClientConnection(uri.Host' uri.Port == -1 ? (uri.Scheme == "https" ? 5223 :5222) : uri.Port);
Magic Number,Duplicati.Library.Modules.Builtin,SendJabberMessage,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\SendJabberMessage.cs,SendMessages,The following statement contains a magic number: var timeout = !waitEvent.WaitOne(TimeSpan.FromSeconds(30)' true);
Magic Number,Duplicati.Library.Modules.Builtin,CheckMonoSSL,C:\repos\duplicati_duplicati\Duplicati\Library\Modules\Builtin\CheckMonoSSL.cs,Execute,The following statement contains a magic number: switch (ct)              {                  case ConfigType.Install:                        try                      {                          var path = System.IO.Path.Combine(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location)' "mozroots.exe");                          var pi = new System.Diagnostics.ProcessStartInfo(path' "--import --sync --quiet");                          pi.UseShellExecute = false;                          var p = System.Diagnostics.Process.Start(pi);                          p.WaitForExit((int)TimeSpan.FromMinutes(5).TotalMilliseconds);                      }                      catch(Exception ex)                      {                          d["error"] = ex.ToString();                      }                        d["count"] = CheckForInstalledCerts().ToString();                      break;                    case ConfigType.Test:                      try                      {                          var req = System.Net.WebRequest.CreateHttp("https://updates.duplicati.com");                          req.Method = "HEAD";                          req.AllowAutoRedirect = false;                            using (var resp = (System.Net.HttpWebResponse)req.GetResponse())                          {                              d["status"] = resp.StatusDescription;                              d["status_code"] = ((int)resp.StatusCode).ToString();                          }                      }                      catch(Exception ex)                      {                          d["error"] = ex.ToString();                      }                      break;                    case ConfigType.List:                  default:                      d["count"] = CheckForInstalledCerts().ToString();                      d["mono"] = Library.Utility.Utility.IsMono.ToString();                      d["message"] = Strings.CheckMonoSSL.ErrorMessage;                      break;              }
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,DnsLite,The following statement contains a magic number: id = DateTime.Now.Millisecond * 60;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data = new byte[512];
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: for (int i = 0; i < 512; ++i)              {                  data[i] = 0;              }
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[0] = (byte)(id >> 8);
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[2] = (byte)1;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[3] = (byte)0;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[4] = (byte)0;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[5] = (byte)1;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[6] = (byte)0;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[7] = (byte)0;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[8] = (byte)0;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[9] = (byte)0;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[10] = (byte)0;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[11] = (byte)0;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: position = 12;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeQuery,The following statement contains a magic number: data[position++] = (byte)15;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: int qCount = ((data[4] & 0xFF) << 8) | (data[5] & 0xFF);
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: int qCount = ((data[4] & 0xFF) << 8) | (data[5] & 0xFF);
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: int qCount = ((data[4] & 0xFF) << 8) | (data[5] & 0xFF);
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: int aCount = ((data[6] & 0xFF) << 8) | (data[7] & 0xFF);
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: int aCount = ((data[6] & 0xFF) << 8) | (data[7] & 0xFF);
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: int aCount = ((data[6] & 0xFF) << 8) | (data[7] & 0xFF);
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: position = 12;
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: for (int i = 0; i < qCount; ++i)              {                  name = "";                  position = proc(position);                  position += 4;              }
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: for (int i = 0; i < aCount; ++i)              {                  name = "";                  position = proc(position);                  position += 10;                  int pref = (data[position++] << 8) | (data[position++] & 0xFF);                  name = "";                  position = proc(position);                  mxRecord = new MXRecord();                  mxRecord.preference = pref;                  mxRecord.exchange = name;                  mxRecords.Add(mxRecord);              }
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,makeResponse,The following statement contains a magic number: for (int i = 0; i < aCount; ++i)              {                  name = "";                  position = proc(position);                  position += 10;                  int pref = (data[position++] << 8) | (data[position++] & 0xFF);                  name = "";                  position = proc(position);                  mxRecord = new MXRecord();                  mxRecord.preference = pref;                  mxRecord.exchange = name;                  mxRecords.Add(mxRecord);              }
Magic Number,DnsLib,DnsLite,C:\repos\duplicati_duplicati\thirdparty\DnsLite\DnsLite.cs,proc,The following statement contains a magic number: do              {                  if ((len & 0xC0) == 0xC0)                  {                      if (position >= length)                      {                          return -1;                      }                      offset = ((len & 0x3F) << 8) | (data[position++] & 0xFF);                      proc(offset);                      return position;                  }                  else {                      if ((position + len) > length)                      {                          return -1;                      }                      name += ASCII.GetString(data' position' len);                      position += len;                  }                  if (position > length)                  {                      return -1;                  }                  len = data[position++] & 0xFF;                   if (len != 0) {                       name += ".";                   }               }while (len != 0);
