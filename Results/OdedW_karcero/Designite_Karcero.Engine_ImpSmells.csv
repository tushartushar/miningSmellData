Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Karcero.Engine.Processors,RoomGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,ProcessMap,Cyclomatic complexity of the method is 10
Long Parameter List,Karcero.Engine.Processors,MazeGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\MazeGenerator.cs,GetRandomValidDirection,The method has 6 parameters. Parameters: map' cell' visitedCells' randomness' previousDirection' randomizer
Long Identifier,Karcero.Engine.Helpers,DungeonConfigurationGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Helpers\DungeonConfigurationGenerator.cs,,The length of the parameter SMALL_CHANCE_TO_REMOVE_DEAD_ENDS is 32.
Long Identifier,Karcero.Engine.Helpers,DungeonConfigurationGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Helpers\DungeonConfigurationGenerator.cs,,The length of the parameter MEDIUM_CHANCE_TO_REMOVE_DEAD_ENDS is 33.
Long Identifier,Karcero.Engine.Helpers,DungeonConfigurationGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Helpers\DungeonConfigurationGenerator.cs,,The length of the parameter BIG_CHANCE_TO_REMOVE_DEAD_ENDS is 30.
Long Statement,Karcero.Engine.Models,Map<T>,C:\repos\OdedW_karcero\Karcero.Engine\Models\Map.cs,GetCellsAdjacentToRoom,The length of the statement  "                if (room.Bottom <= Height - distance) cells.Add(GetAdjacentCell(GetCell(room.Bottom - 1' j)' Direction.South' distance)); " is 121.
Long Statement,Karcero.Engine.Processors,DoorGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\DoorGenerator.cs,ProcessMap,The length of the statement  "            var isolatedRooms = map.Rooms.Where(room => map.GetCellsAdjacentToRoom(room).All(cell => cell.Terrain == TerrainType.Rock)).ToList(); " is 133.
Long Statement,Karcero.Engine.Processors,MazeGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\MazeGenerator.cs,ProcessMap,The length of the statement  "                var direction = GetRandomValidDirection(map' currentCell' visitedCells' configuration.Randomness' previousDirection' randomizer); " is 129.
Long Statement,Karcero.Engine.Processors,RoomGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,ProcessMap,The length of the statement  "                    if (room.Column <= 0 || room.Right >= map.Width || room.Row <= 0 || room.Bottom >= map.Height) continue; //out of bounds " is 120.
Complex Conditional,Karcero.Engine.Processors,DeadendsRemover<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\DeadendsRemover.cs,GetRandomValidDirection,The conditional expression  "nextCell.IsOpen &&                          ((nextCell.Sides[direction.Rotate()] &&                            currentCell.Sides[direction.Rotate()]) ||                           (nextCell.Sides[direction.Rotate(false)] &&                            currentCell.Sides[direction.Rotate(false)]))"  is complex.
Complex Conditional,Karcero.Engine.Processors,MazeGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\MazeGenerator.cs,GetRandomValidDirection,The conditional expression  "previousDirection.HasValue &&                  randomness < 1 &&                  randomizer.GetRandomDouble() > randomness &&                  IsDirectionValid(map' cell' previousDirection.Value' visitedCells)"  is complex.
Complex Conditional,Karcero.Engine.Processors,RoomGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,ProcessMap,The conditional expression  "room.Column <= 0 || room.Right >= map.Width || room.Row <= 0 || room.Bottom >= map.Height"  is complex.
Complex Conditional,Karcero.Engine.Processors,RoomGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,CanAllCorridorsLeadingToRoomBeDoors,The conditional expression  "(map.TryGetAdjacentCell(map.GetCell(room.Row' j)' Direction.North' out northCell) &&                       northCell.Terrain == TerrainType.Floor &&                       !IsCellIsolatedOnSides(northCell' new[] { Direction.East' Direction.West }' map)) ||                      (map.TryGetAdjacentCell(map.GetCell(room.Bottom - 1' j)' Direction.South' out southCell)                       && southCell.Terrain == TerrainType.Floor &&                       !IsCellIsolatedOnSides(southCell' new[] { Direction.East' Direction.West }' map))"  is complex.
Complex Conditional,Karcero.Engine.Processors,RoomGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,CanAllCorridorsLeadingToRoomBeDoors,The conditional expression  "(map.TryGetAdjacentCell(map.GetCell(r' room.Right - 1)' Direction.East' out eastCell) &&                      eastCell.Terrain == TerrainType.Floor &&                      !IsCellIsolatedOnSides(eastCell' new[] { Direction.North' Direction.South }' map)) ||                      (map.TryGetAdjacentCell(map.GetCell(r' room.Column)' Direction.West' out westCell)                      && westCell.Terrain == TerrainType.Floor &&                      !IsCellIsolatedOnSides(westCell' new[] { Direction.North' Direction.South }' map))"  is complex.
Magic Number,Karcero.Engine,DungeonGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\DungeonGenerator.cs,Generate,The following statement contains a magic number: var halfHeight = config.Height / 2;
Magic Number,Karcero.Engine,DungeonGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\DungeonGenerator.cs,Generate,The following statement contains a magic number: var halfWidth = config.Width / 2;
Magic Number,Karcero.Engine,DungeonGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\DungeonGenerator.cs,GenerateAndMeasure,The following statement contains a magic number: var halfHeight = config.Height / 2;
Magic Number,Karcero.Engine,DungeonGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\DungeonGenerator.cs,GenerateAndMeasure,The following statement contains a magic number: var halfWidth = config.Width / 2;
Magic Number,Karcero.Engine.Processors,DoorGenerator<T>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\DoorGenerator.cs,ConnectRoom,The following statement contains a magic number: var distance = 2;
Magic Number,Karcero.Engine.Processors,MapDoubler<TPost;TPre>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\MapDoubler.cs,ConvertMap,The following statement contains a magic number: var newMap = new Map<TPost>(map.Width * 2 + 1' map.Height * 2 + 1);
Magic Number,Karcero.Engine.Processors,MapDoubler<TPost;TPre>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\MapDoubler.cs,ConvertMap,The following statement contains a magic number: var newMap = new Map<TPost>(map.Width * 2 + 1' map.Height * 2 + 1);
Magic Number,Karcero.Engine.Processors,MapDoubler<TPost;TPre>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\MapDoubler.cs,ConvertMap,The following statement contains a magic number: foreach (var oldCell in oldCells.Where(cell => cell.IsOpen))              {                  var newCell = newMap.GetCell(oldCell.Row * 2 + 1' oldCell.Column * 2 + 1);                  newCell.Terrain = TerrainType.Floor;                  foreach (var kvp in oldCell.Sides.Where(pair => pair.Value))                  {                      var adjacentCell = newMap.GetAdjacentCell(newCell' kvp.Key);                      adjacentCell.Terrain = TerrainType.Floor;                  }              }
Magic Number,Karcero.Engine.Processors,MapDoubler<TPost;TPre>,C:\repos\OdedW_karcero\Karcero.Engine\Processors\MapDoubler.cs,ConvertMap,The following statement contains a magic number: foreach (var oldCell in oldCells.Where(cell => cell.IsOpen))              {                  var newCell = newMap.GetCell(oldCell.Row * 2 + 1' oldCell.Column * 2 + 1);                  newCell.Terrain = TerrainType.Floor;                  foreach (var kvp in oldCell.Sides.Where(pair => pair.Value))                  {                      var adjacentCell = newMap.GetAdjacentCell(newCell' kvp.Key);                      adjacentCell.Terrain = TerrainType.Floor;                  }              }
Missing Default,Karcero.Engine.Models,Extensions,C:\repos\OdedW_karcero\Karcero.Engine\Models\Cell.cs,Opposite,The following switch statement is missing a default case: switch (direction)              {                      case Direction.East: return Direction.West;                      case Direction.North: return Direction.South;                      case Direction.South: return Direction.North;                      case Direction.West: return Direction.East;              }
Missing Default,Karcero.Engine.Models,Extensions,C:\repos\OdedW_karcero\Karcero.Engine\Models\Cell.cs,Rotate,The following switch statement is missing a default case: switch (direction)              {                  case Direction.East: return clockwise ? Direction.South : Direction.North;                  case Direction.North: return clockwise ? Direction.East : Direction.West;                  case Direction.South: return clockwise ? Direction.West : Direction.East;                  case Direction.West: return clockwise ? Direction.North : Direction.South;              }
Missing Default,Karcero.Engine.Models,Map<T>,C:\repos\OdedW_karcero\Karcero.Engine\Models\Map.cs,GetAdjacentCell,The following switch statement is missing a default case: switch (direction)              {                  case Direction.South:                      return cell.Row + distance >= Height ? null : GetCell(cell.Row + distance' cell.Column);                  case Direction.East:                      return cell.Column + distance >= Width ? null : GetCell(cell.Row' cell.Column + distance);                  case Direction.North:                      return cell.Row - distance < 0 ? null : GetCell(cell.Row - distance' cell.Column);                  case Direction.West:                      return cell.Column - distance < 0 ? null : GetCell(cell.Row' cell.Column-distance);              }
