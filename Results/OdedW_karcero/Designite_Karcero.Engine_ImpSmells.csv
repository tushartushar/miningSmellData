Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Karcero.Engine.Models,Map,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Models\Map.cs,GetCellsAdjacentToRoom,Cyclomatic complexity of the method is 7
Complex Method,Karcero.Engine.Processors,DoorGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\DoorGenerator.cs,ConnectRoom,Cyclomatic complexity of the method is 7
Complex Method,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,ProcessMap,Cyclomatic complexity of the method is 10
Long Parameter List,Karcero.Engine.Contracts,IRandomizer,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Contracts\IRandomizer.cs,GetRandomRoomSize,The method has 4 parameters.
Long Parameter List,Karcero.Engine.Helpers,DungeonConfigurationGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Helpers\DungeonConfigurationGenerator.cs,WithRoomSize,The method has 4 parameters.
Long Parameter List,Karcero.Engine.Helpers,Randomizer,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Helpers\Randomizer.cs,GetRandomRoomSize,The method has 4 parameters.
Long Parameter List,Karcero.Engine.Processors,DeadendsRemover,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\DeadendsRemover.cs,GetRandomValidDirection,The method has 4 parameters.
Long Parameter List,Karcero.Engine.Processors,DeadendsRemover,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\DeadendsRemover.cs,IsDirectionValid,The method has 4 parameters.
Long Parameter List,Karcero.Engine.Processors,DoorGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\DoorGenerator.cs,ConnectRoom,The method has 4 parameters.
Long Parameter List,Karcero.Engine.Processors,MazeGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\MazeGenerator.cs,GetRandomValidDirection,The method has 6 parameters.
Long Parameter List,Karcero.Engine.Processors,MazeGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\MazeGenerator.cs,IsDirectionValid,The method has 4 parameters.
Long Statement,Karcero.Engine.Helpers,DungeonConfigurationGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Helpers\DungeonConfigurationGenerator.cs,WrapUp,The length of the statement  "	var maxPotentialRooms = (int)(mConfiguration.Width / medianRoomWidth) * (int)(mConfiguration.Height / medianRoomHeight) * ROOM_COUNT_PERCENTAGE_FACTOR; " is 151.
Long Statement,Karcero.Engine.Helpers,Randomizer,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Helpers\Randomizer.cs,GetRandomRoomSize,The length of the statement  "	return new Size (mRandom.Next (1 + maxWidth - minWidth) + minWidth' mRandom.Next (1 + maxHeight - minHeight) + minHeight); " is 122.
Long Statement,Karcero.Engine.Models,Map,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Models\Map.cs,GetAllAdjacentCells,The length of the statement  "	var cells = GetAll.ValuesOf<Direction> ().Where (direction => GetAdjacentCell (cell' direction) != null).Select (direction => GetAdjacentCell (cell' direction)).ToList (); " is 171.
Long Statement,Karcero.Engine.Models,Map,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Models\Map.cs,GetAllAdjacentCellsByDirection,The length of the statement  "	return GetAll.ValuesOf<Direction> ().ToDictionary (direction => direction' direction => GetAdjacentCell (cell' direction)); " is 123.
Long Statement,Karcero.Engine.Processors,DeadendsRemover,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\DeadendsRemover.cs,GetRandomValidDirection,The length of the statement  "			if (nextCell.IsOpen && ((nextCell.Sides [direction.Rotate ()] && currentCell.Sides [direction.Rotate ()]) || (nextCell.Sides [direction.Rotate (false)] && currentCell.Sides [direction.Rotate (false)]))) { " is 204.
Long Statement,Karcero.Engine.Processors,DoorGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\DoorGenerator.cs,ProcessMap,The length of the statement  "	var isolatedRooms = map.Rooms.Where (room => map.GetCellsAdjacentToRoom (room).All (cell => cell.Terrain == TerrainType.Rock)).ToList (); " is 137.
Long Statement,Karcero.Engine.Processors,DoorGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\DoorGenerator.cs,ProcessMap,The length of the statement  "		foreach (var cell in map.GetCellsAdjacentToRoom (room).Where (cell => cell.Terrain == TerrainType.Floor && map.GetAllAdjacentCells (cell).All (c => c.Terrain != TerrainType.Door))) { " is 182.
Long Statement,Karcero.Engine.Processors,DoorGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\DoorGenerator.cs,ConnectRoom,The length of the statement  "		var validAdjacentCells = adjacentCells.Where (cell => cell.Terrain != TerrainType.Rock && !isolatedRooms.Any (r => r.IsLocationInRoom (cell.Row' cell.Column))).ToList (); " is 170.
Long Statement,Karcero.Engine.Processors,MazeGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\MazeGenerator.cs,ProcessMap,The length of the statement  "		var direction = GetRandomValidDirection (map' currentCell' visitedCells' configuration.Randomness' previousDirection' randomizer); " is 130.
Long Statement,Karcero.Engine.Processors,MazeGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\MazeGenerator.cs,GetRandomValidDirection,The length of the statement  "	if (previousDirection.HasValue && randomness < 1 && randomizer.GetRandomDouble () > randomness && IsDirectionValid (map' cell' previousDirection.Value' visitedCells)) { " is 168.
Long Statement,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,CanAllCorridorsLeadingToRoomBeDoors,The length of the statement  "		if ((map.TryGetAdjacentCell (map.GetCell (room.Row' j)' Direction.North' out northCell) && northCell.Terrain == TerrainType.Floor && !IsCellIsolatedOnSides (northCell' new[] { " is 175.
Long Statement,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,CanAllCorridorsLeadingToRoomBeDoors,The length of the statement  "		}' map)) || (map.TryGetAdjacentCell (map.GetCell (room.Bottom - 1' j)' Direction.South' out southCell) && southCell.Terrain == TerrainType.Floor && !IsCellIsolatedOnSides (southCell' new[] { " is 190.
Long Statement,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,CanAllCorridorsLeadingToRoomBeDoors,The length of the statement  "		if ((map.TryGetAdjacentCell (map.GetCell (r' room.Right - 1)' Direction.East' out eastCell) && eastCell.Terrain == TerrainType.Floor && !IsCellIsolatedOnSides (eastCell' new[] { " is 177.
Long Statement,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,CanAllCorridorsLeadingToRoomBeDoors,The length of the statement  "		}' map)) || (map.TryGetAdjacentCell (map.GetCell (r' room.Column)' Direction.West' out westCell) && westCell.Terrain == TerrainType.Floor && !IsCellIsolatedOnSides (westCell' new[] { " is 182.
Long Statement,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,AreAllCornerCellsRocks,The length of the statement  "	if (map.GetCell (room.Row - 1' room.Column - 1) != null && map.GetCell (room.Row - 1' room.Column - 1).Terrain != TerrainType.Rock) " is 131.
Long Statement,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,AreAllCornerCellsRocks,The length of the statement  "	if (map.GetCell (room.Row - 1' room.Right) != null && map.GetCell (room.Row - 1' room.Right).Terrain != TerrainType.Rock) " is 121.
Long Statement,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,AreAllCornerCellsRocks,The length of the statement  "	if (map.GetCell (room.Bottom' room.Column - 1) != null && map.GetCell (room.Bottom' room.Column - 1).Terrain != TerrainType.Rock) " is 129.
Long Statement,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,IsCellIsolatedOnSides,The length of the statement  "	return directions.All (direction => !map.TryGetAdjacentCell (cell' direction' out adjacent) || adjacent.Terrain == TerrainType.Rock); " is 133.
Complex Conditional,Karcero.Engine.Processors,DeadendsRemover,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\DeadendsRemover.cs,GetRandomValidDirection,The conditional expression  "nextCell.IsOpen && ((nextCell.Sides [direction.Rotate ()] && currentCell.Sides [direction.Rotate ()]) || (nextCell.Sides [direction.Rotate (false)] && currentCell.Sides [direction.Rotate (false)]))"  is complex.
Complex Conditional,Karcero.Engine.Processors,MazeGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\MazeGenerator.cs,GetRandomValidDirection,The conditional expression  "previousDirection.HasValue && randomness < 1 && randomizer.GetRandomDouble () > randomness && IsDirectionValid (map' cell' previousDirection.Value' visitedCells)"  is complex.
Complex Conditional,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,ProcessMap,The conditional expression  "room.Column <= 0 || room.Right >= map.Width || room.Row <= 0 || room.Bottom >= map.Height"  is complex.
Complex Conditional,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,CanAllCorridorsLeadingToRoomBeDoors,The conditional expression  "(map.TryGetAdjacentCell (map.GetCell (room.Row' j)' Direction.North' out northCell) && northCell.Terrain == TerrainType.Floor && !IsCellIsolatedOnSides (northCell' new[] {  	Direction.East'  	Direction.West  }' map)) || (map.TryGetAdjacentCell (map.GetCell (room.Bottom - 1' j)' Direction.South' out southCell) && southCell.Terrain == TerrainType.Floor && !IsCellIsolatedOnSides (southCell' new[] {  	Direction.East'  	Direction.West  }' map))"  is complex.
Complex Conditional,Karcero.Engine.Processors,RoomGenerator,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\RoomGenerator.cs,CanAllCorridorsLeadingToRoomBeDoors,The conditional expression  "(map.TryGetAdjacentCell (map.GetCell (r' room.Right - 1)' Direction.East' out eastCell) && eastCell.Terrain == TerrainType.Floor && !IsCellIsolatedOnSides (eastCell' new[] {  	Direction.North'  	Direction.South  }' map)) || (map.TryGetAdjacentCell (map.GetCell (r' room.Column)' Direction.West' out westCell) && westCell.Terrain == TerrainType.Floor && !IsCellIsolatedOnSides (westCell' new[] {  	Direction.North'  	Direction.South  }' map))"  is complex.
Magic Number,Karcero.Engine.Processors,MapDoubler,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\MapDoubler.cs,ConvertMap,The following statement contains a magic number: foreach (var oldCell in oldCells.Where (cell => cell.IsOpen)) {  	var newCell = newMap.GetCell (oldCell.Row * 2 + 1' oldCell.Column * 2 + 1);  	newCell.Terrain = TerrainType.Floor;  	foreach (var kvp in oldCell.Sides.Where (pair => pair.Value)) {  		var adjacentCell = newMap.GetAdjacentCell (newCell' kvp.Key);  		adjacentCell.Terrain = TerrainType.Floor;  	}  }  
Magic Number,Karcero.Engine.Processors,MapDoubler,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Processors\MapDoubler.cs,ConvertMap,The following statement contains a magic number: foreach (var oldCell in oldCells.Where (cell => cell.IsOpen)) {  	var newCell = newMap.GetCell (oldCell.Row * 2 + 1' oldCell.Column * 2 + 1);  	newCell.Terrain = TerrainType.Floor;  	foreach (var kvp in oldCell.Sides.Where (pair => pair.Value)) {  		var adjacentCell = newMap.GetAdjacentCell (newCell' kvp.Key);  		adjacentCell.Terrain = TerrainType.Floor;  	}  }  
Missing Default,Karcero.Engine.Models,Extensions,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Models\Cell.cs,Opposite,The following switch statement is missing a default case: switch (direction) {  case Direction.East:  	return Direction.West;  case Direction.North:  	return Direction.South;  case Direction.South:  	return Direction.North;  case Direction.West:  	return Direction.East;  }  
Missing Default,Karcero.Engine.Models,Extensions,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Models\Cell.cs,Rotate,The following switch statement is missing a default case: switch (direction) {  case Direction.East:  	return clockwise ? Direction.South : Direction.North;  case Direction.North:  	return clockwise ? Direction.East : Direction.West;  case Direction.South:  	return clockwise ? Direction.West : Direction.East;  case Direction.West:  	return clockwise ? Direction.North : Direction.South;  }  
Missing Default,Karcero.Engine.Models,Map,D:\newReposJune17\OdedW_karcero\Karcero.Engine\Models\Map.cs,GetAdjacentCell,The following switch statement is missing a default case: switch (direction) {  case Direction.South:  	return cell.Row + distance >= Height ? null : GetCell (cell.Row + distance' cell.Column);  case Direction.East:  	return cell.Column + distance >= Width ? null : GetCell (cell.Row' cell.Column + distance);  case Direction.North:  	return cell.Row - distance < 0 ? null : GetCell (cell.Row - distance' cell.Column);  case Direction.West:  	return cell.Column - distance < 0 ? null : GetCell (cell.Row' cell.Column - distance);  }  
