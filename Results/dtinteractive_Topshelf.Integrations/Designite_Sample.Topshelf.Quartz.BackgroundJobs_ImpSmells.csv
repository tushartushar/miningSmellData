Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Sample.Topshelf.Quartz.BackgroundJobs,Program,F:\newReposMay17\dtinteractive_Topshelf.Integrations\Samples\Sample.Topshelf.Quartz.BackgroundJobs\Program.cs,Main,The length of the statement  "			s.ScheduleQuartzJob (q => q.WithJob (() => JobBuilder.Create<SampleJob> ().Build ()).AddTrigger (() => TriggerBuilder.Create ().WithSimpleSchedule (builder => builder.WithIntervalInSeconds (5).RepeatForever ()).Build ()).WithJobListener (() => { " is 245.
Long Statement,Sample.Topshelf.Quartz.BackgroundJobs,Program,F:\newReposMay17\dtinteractive_Topshelf.Integrations\Samples\Sample.Topshelf.Quartz.BackgroundJobs\Program.cs,Main,The length of the statement  "				return new QuartzTriggerListenerConfig (new SimpleTriggerListener ()' KeyMatcher<TriggerKey>.KeyEquals (new TriggerKey ("sample"))); " is 132.
Long Statement,Sample.Topshelf.Quartz.BackgroundJobs,SimpleTriggerListener,F:\newReposMay17\dtinteractive_Topshelf.Integrations\Samples\Sample.Topshelf.Quartz.BackgroundJobs\Program.cs,TriggerComplete,The length of the statement  "	Console.WriteLine ("SAMPLE: Trigger {0} completed for job {1} with code {2}"' trigger.Key.Name' context.JobDetail.Key.Name' triggerInstructionCode); " is 148.
Magic Number,Sample.Topshelf.Quartz.BackgroundJobs,Program,F:\newReposMay17\dtinteractive_Topshelf.Integrations\Samples\Sample.Topshelf.Quartz.BackgroundJobs\Program.cs,Main,The following statement contains a magic number: HostFactory.Run (c => {  	c.UseNinject (new SampleModule ());  	c.Service<SampleService> (s => {  		// Topshelf.Quartz (Optional) - Construct service using Ninject  		s.ConstructUsingNinject ();  		s.WhenStarted ((service' control) => service.Start ());  		s.WhenStopped ((service' control) => service.Stop ());  		// Topshelf.Quartz.Ninject (Optional) - Construct IJob instance with Ninject  		s.UseQuartzNinject ();  		// Schedule a job to run in the background every 5 seconds.  		// The full Quartz Builder framework is available here.  		s.ScheduleQuartzJob (q => q.WithJob (() => JobBuilder.Create<SampleJob> ().Build ()).AddTrigger (() => TriggerBuilder.Create ().WithSimpleSchedule (builder => builder.WithIntervalInSeconds (5).RepeatForever ()).Build ()).WithJobListener (() => {  			return new QuartzJobListenerConfig (new SimpleJobListener ()' KeyMatcher<JobKey>.KeyEquals (new JobKey ("sample")));  		}).WithTriggerListener (() => {  			return new QuartzTriggerListenerConfig (new SimpleTriggerListener ()' KeyMatcher<TriggerKey>.KeyEquals (new TriggerKey ("sample")));  		}).WithScheduleListener (() => new SimpleScheduleListener ()));  	});  });  
Magic Number,Sample.Topshelf.Quartz.BackgroundJobs,Program,F:\newReposMay17\dtinteractive_Topshelf.Integrations\Samples\Sample.Topshelf.Quartz.BackgroundJobs\Program.cs,Main,The following statement contains a magic number: c.Service<SampleService> (s => {  	// Topshelf.Quartz (Optional) - Construct service using Ninject  	s.ConstructUsingNinject ();  	s.WhenStarted ((service' control) => service.Start ());  	s.WhenStopped ((service' control) => service.Stop ());  	// Topshelf.Quartz.Ninject (Optional) - Construct IJob instance with Ninject  	s.UseQuartzNinject ();  	// Schedule a job to run in the background every 5 seconds.  	// The full Quartz Builder framework is available here.  	s.ScheduleQuartzJob (q => q.WithJob (() => JobBuilder.Create<SampleJob> ().Build ()).AddTrigger (() => TriggerBuilder.Create ().WithSimpleSchedule (builder => builder.WithIntervalInSeconds (5).RepeatForever ()).Build ()).WithJobListener (() => {  		return new QuartzJobListenerConfig (new SimpleJobListener ()' KeyMatcher<JobKey>.KeyEquals (new JobKey ("sample")));  	}).WithTriggerListener (() => {  		return new QuartzTriggerListenerConfig (new SimpleTriggerListener ()' KeyMatcher<TriggerKey>.KeyEquals (new TriggerKey ("sample")));  	}).WithScheduleListener (() => new SimpleScheduleListener ()));  });  
Magic Number,Sample.Topshelf.Quartz.BackgroundJobs,Program,F:\newReposMay17\dtinteractive_Topshelf.Integrations\Samples\Sample.Topshelf.Quartz.BackgroundJobs\Program.cs,Main,The following statement contains a magic number: s.ScheduleQuartzJob (q => q.WithJob (() => JobBuilder.Create<SampleJob> ().Build ()).AddTrigger (() => TriggerBuilder.Create ().WithSimpleSchedule (builder => builder.WithIntervalInSeconds (5).RepeatForever ()).Build ()).WithJobListener (() => {  	return new QuartzJobListenerConfig (new SimpleJobListener ()' KeyMatcher<JobKey>.KeyEquals (new JobKey ("sample")));  }).WithTriggerListener (() => {  	return new QuartzTriggerListenerConfig (new SimpleTriggerListener ()' KeyMatcher<TriggerKey>.KeyEquals (new TriggerKey ("sample")));  }).WithScheduleListener (() => new SimpleScheduleListener ()));  
