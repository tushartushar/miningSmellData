Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,BuildCmdlet,The method has 6 parameters. Parameters: isSolutionOpen' recentPackageRepository' productUpdateService' repositoryFactory' packageManagerFactory' activeSourceName
Long Parameter List,NuGet.PowerShell.Commands.Test,MockVsPackageManager,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackage,The method has 6 parameters. Parameters: projectManager' packageId' version' ignoreDependencies' allowPreReleaseVersions' logger
Long Parameter List,NuGet.PowerShell.Commands.Test,MockVsPackageManager,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,UninstallPackage,The method has 6 parameters. Parameters: projectManager' packageId' version' forceRemove' removeDependencies' logger
Long Parameter List,NuGet.PowerShell.Commands.Test,MockVsPackageManager,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,UpdatePackage,The method has 6 parameters. Parameters: projectManager' packageId' version' updateDependencies' allowPreReleaseVersions' logger
Long Parameter List,NuGet.PowerShell.Commands.Test,PSPathUtilityProxy,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\PSPathTranslationTests.cs,TryTranslatePSPath,The method has 5 parameters. Parameters: session' psPath' path' exists' errorMessage
Long Identifier,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetRepositoryWithMultiplePackageVersions,The length of the parameter repositoryWithMultiplePackageVersions is 37.
Long Statement,NuGet.VisualStudio.Test,TestUtils,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\VisualStudio.Test\TestUtils.cs,GetSolutionManagerWithProjects,The length of the statement  "            return GetSolutionManager(isSolutionOpen: true' defaultProjectName: null' projects: projects.Select(p => GetProject(p)));" is 121.
Long Statement,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,GetPackageManager,The length of the statement  "            return new VsPackageManager(TestUtils.GetSolutionManager()' remoteRepo.Object' fileSystem.Object' localRepo.Object' new Mock<IRecentPackageRepository>().Object' new Mock<VsPackageInstallerEvents>().Object);" is 206.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletThrowsWhenSolutionIsClosed,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager(isSolutionOpen: false)' packageManagerFactory.Object' null' null' null' null' new Mock<IVsCommonOperations>().Object);" is 186.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletUsesPackageManangerWithSourceIfSpecified,The length of the statement  "            packageManagerFactory.Setup(m => m.CreatePackageManager(It.IsAny<IPackageRepository>()' true)).Returns(sourceVsPackageManager);" is 127.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletUsesPackageManangerWithSourceIfSpecified,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' repositoryFactory.Object' sourceProvider' null' null' new Mock<IVsCommonOperations>().Object);" is 195.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletInvokeProductUpdateCheckWhenSourceIsHttpAddress,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' packageRepositoryFactory.Object' sourceProvider' null' productUpdateService.Object' new Mock<IVsCommonOperations>().Object);" is 225.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletInvokeProductUpdateCheckWhenSourceIsHttpAddressAndSourceNameIsSpecified,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' packageRepositoryFactory.Object' sourceProvider' null' productUpdateService.Object' new Mock<IVsCommonOperations>().Object);" is 225.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletDoNotInvokeProductUpdateCheckWhenSourceIsNotHttpAddress,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' packageRepositoryFactory.Object' sourceProvider' null' productUpdateService.Object' new Mock<IVsCommonOperations>().Object);" is 225.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletDoNotInvokeProductUpdateCheckWhenSourceIsNotHttpAddressAndSourceNameIsSpecified,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' packageRepositoryFactory.Object' sourceProvider' null' productUpdateService.Object' new Mock<IVsCommonOperations>().Object);" is 225.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletCreatesFallbackRepository,The length of the statement  "            var packageManagerFactory = new VsPackageManagerFactory(solutionManager.Object' repositoryFactory.Object' sourceProvider' fileSystemProvider.Object' repositorySettings.Object' null' new Mock<VsPackageInstallerEvents>().Object' new MockPackageRepository());" is 256.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletCreatesFallbackRepository,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManagerWithProjects("foo")' packageManagerFactory' repositoryFactory.Object' sourceProvider' null' productUpdateService.Object' new Mock<IVsCommonOperations>().Object);" is 228.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletCreatesPackageManagerWithFallbackFlagSet,The length of the statement  "            packageManagerFactory.Setup(c => c.CreatePackageManager(It.IsAny<IPackageRepository>()' false)).Throws(new Exception());" is 120.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletCreatesPackageManagerWithFallbackFlagSet,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManagerWithProjects("foo")' packageManagerFactory.Object' repositoryFactory.Object' GetPackageSourceProvider(new PackageSource("A"))' null' productUpdateService.Object' new Mock<IVsCommonOperations>().Object);" is 269.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletDoesNotInstallPrereleasePackageIfFlagIsNotPresent,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object'" is 156.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletDoesNotInstallPrereleasePackageIfFlagIsNotPresent,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' null' null' null' new Mock<IVsCommonOperations>().Object);" is 165.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletInstallPrereleasePackageIfFlagIsPresent,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageWithoutSettingVersionDoNotInstallUnlistedPackage,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageWithoutSettingVersionDoNotInstallUnlistedPackage,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageWithoutSettingVersionDoNotInstallUnlistedPackageWithPrerelease,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageWithoutSettingVersionDoNotInstallUnlistedPackageWithPrerelease,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageInstallUnlistedPackageIfVersionIsSet,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageInstallUnlistedPackageIfVersionIsSet,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageInstallUnlistedPrereleasePackageIfVersionIsSet,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageInstallUnlistedPrereleasePackageIfVersionIsSet,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageInstallUnlistedPackageAsADependency,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageInstallUnlistedPackageAsADependency,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageInstallUnlistedPrereleasePackageAsADependency,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageInstallUnlistedPrereleasePackageAsADependency,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickListedPackagesOverUnlistedOnesAsDependency,The length of the statement  "            var packageA = PackageUtility.CreatePackage("A"' "1.0"' dependencies: new[] { new PackageDependency("B"' new VersionSpec { MinVersion = new SemanticVersion("0.5")})});" is 167.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickListedPackagesOverUnlistedOnesAsDependency,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickListedPackagesOverUnlistedOnesAsDependency,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickListedPackagesOverUnlistedOnesAsDependency2,The length of the statement  "            var packageA = PackageUtility.CreatePackage("A"' "1.0"' dependencies: new[] { new PackageDependency("B"' new VersionSpec { MinVersion = new SemanticVersion("0.5") }) });" is 169.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickListedPackagesOverUnlistedOnesAsDependency2,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickListedPackagesOverUnlistedOnesAsDependency2,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickUnListedPackagesIfItSatisfiesContrainsAndOthersAreNot,The length of the statement  "            var packageA = PackageUtility.CreatePackage("A"' "1.0"' dependencies: new[] { new PackageDependency("B"' new VersionSpec { MinVersion = new SemanticVersion("1.0")' IsMinInclusive = true }) });" is 192.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickUnListedPackagesIfItSatisfiesContrainsAndOthersAreNot,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickUnListedPackagesIfItSatisfiesContrainsAndOthersAreNot,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickUnListedPrereleasePackagesIfItSatisfiesContrainsAndOthersAreNot,The length of the statement  "            var packageA = PackageUtility.CreatePackage("A"' "1.0"' dependencies: new[] { new PackageDependency("B"' new VersionSpec { MinVersion = new SemanticVersion("1.0")' IsMinInclusive = true }) });" is 192.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickUnListedPrereleasePackagesIfItSatisfiesContrainsAndOthersAreNot,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageShouldPickUnListedPrereleasePackagesIfItSatisfiesContrainsAndOthersAreNot,The length of the statement  "            var cmdlet = new InstallPackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 236.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletOpenReadmeFileFromPackageIfItIsPresent,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object'" is 156.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletOpenReadmeFileFromPackageIfItIsPresent,The length of the statement  "            fileOperations.Verify(io => io.OpenFile(It.Is<string>(s => s.EndsWith("A.1.0\\readme.txt"' StringComparison.OrdinalIgnoreCase)))' Times.Once());" is 144.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletOnlyOpenReadmeFileFromTheRootPackage,The length of the statement  "            fileOperations.Verify(io => io.OpenFile(It.Is<string>(s => s.EndsWith("A.1.0\\readme.txt"' StringComparison.OrdinalIgnoreCase)))' Times.Once());" is 144.
Long Statement,NuGet.PowerShell.Commands.Test,InstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\InstallPackageCommandTest.cs,InstallPackageCmdletOnlyOpenReadmeFileFromTheRootPackage,The length of the statement  "            fileOperations.Verify(io => io.OpenFile(It.Is<string>(s => s.EndsWith("B.1.0\\readme.txt"' StringComparison.OrdinalIgnoreCase)))' Times.Never());" is 145.
Long Statement,NuGet.PowerShell.Commands.Test,NewPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\NewPackageCommandTest.cs,NewPackageCmdletThrowsIfNoSolutionIsClosed,The length of the statement  "            var cmdlet = new NewPackageCommand(TestUtils.GetSolutionManager(isSolutionOpen: false' defaultProjectName: null)' packageManagerFactory.Object' null);" is 150.
Long Statement,NuGet.PowerShell.Commands.Test,NewPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\NewPackageCommandTest.cs,NewPackageCmdletThrowsIfNoSolutionIsClosed,The length of the statement  "            ExceptionAssert.Throws<InvalidOperationException>(() => cmdlet.GetResults()' "The current environment doesn't have a solution open.");" is 134.
Long Statement,NuGet.PowerShell.Commands.Test,NewPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\NewPackageCommandTest.cs,NewPackageCmdletThrowsIfProjectSpecifiedDoesNotExist,The length of the statement  "            var solutionManager = TestUtils.GetSolutionManager(defaultProjectName: "test"' projects: new[] { TestUtils.GetProject("test") });" is 129.
Long Statement,NuGet.PowerShell.Commands.Test,UninstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UninstallPackageCommandTest.cs,UninstallPackageCmdletThrowsWhenSolutionIsClosed,The length of the statement  "            var uninstallCmdlet = new UninstallPackageCommand(TestUtils.GetSolutionManager(isSolutionOpen: false)' packageManagerFactory.Object' null' new Mock<IVsCommonOperations>().Object);" is 179.
Long Statement,NuGet.PowerShell.Commands.Test,UninstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UninstallPackageCommandTest.cs,UninstallPackageCmdletPassesParametersCorrectlyWhenIdAndVersionAreSpecified,The length of the statement  "            var uninstallCmdlet = new Mock<UninstallPackageCommand>(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsCommonOperations>().Object) { CallBase = true };" is 184.
Long Statement,NuGet.PowerShell.Commands.Test,UninstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UninstallPackageCommandTest.cs,UninstallPackageCmdletPassesForceSwitchCorrectly,The length of the statement  "            var uninstallCmdlet = new Mock<UninstallPackageCommand>(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsCommonOperations>().Object) { CallBase = true };" is 184.
Long Statement,NuGet.PowerShell.Commands.Test,UninstallPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UninstallPackageCommandTest.cs,UninstallPackageCmdletPassesRemoveDependencyCorrectly,The length of the statement  "            var uninstallCmdlet = new Mock<UninstallPackageCommand>(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsCommonOperations>().Object) { CallBase = true };" is 184.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageCmdletThrowsWhenSolutionIsClosed,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManager(isSolutionOpen: false)' packageManagerFactory.Object' null' null' null' null' new Mock<IVsCommonOperations>().Object);" is 185.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageCmdletUsesPackageManangerWithSourceIfSpecified,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManagerWithProjects("foo")' packageManagerFactory.Object' repositoryFactory.Object' sourceProvider' null' null' new Mock<IVsCommonOperations>().Object);" is 211.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageCmdletPassesParametersCorrectlyWhenIdAndVersionAreSpecified,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManagerWithProjects("foo")' packageManagerFactory.Object' repositoryFactory.Object' sourceProvider' null' null' new Mock<IVsCommonOperations>().Object);" is 211.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageCmdletPassesIgnoreDependencySwitchCorrectly,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManagerWithProjects("foo")' packageManagerFactory.Object' repositoryFactory.Object' sourceProvider' null' null' new Mock<IVsCommonOperations>().Object);" is 211.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageCmdletPassesIgnoreDependencySwitchCorrectlyWhenPresent,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManagerWithProjects("foo")' packageManagerFactory.Object' repositoryFactory.Object' sourceProvider' null' null' new Mock<IVsCommonOperations>().Object);" is 211.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageCmdletInvokeProductUpdateCheckWhenSourceIsHttpAddress,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManagerWithProjects("foo")' packageManagerFactory.Object' repositoryFactory.Object' sourceProvider' null' productUpdateService.Object' new Mock<IVsCommonOperations>().Object);" is 234.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageCmdletInvokeProductUpdateCheckWhenSourceIsHttpAddressAndSourceIsSpecified,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManagerWithProjects("foo")' packageManagerFactory.Object' repositoryFactory.Object' sourceProvider' null' productUpdateService.Object' new Mock<IVsCommonOperations>().Object);" is 234.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageCmdletDoNotInvokeProductUpdateCheckWhenSourceIsNotHttpAddress,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManagerWithProjects("foo")' packageManagerFactory.Object' repositoryFactory.Object' sourceProvider' null' productUpdateService.Object' new Mock<IVsCommonOperations>().Object);" is 234.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageDoNotUpdateToUnlistedPackageWithPrerelease,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageDoNotUpdateToUnlistedPackageWithPrerelease,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 235.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,SafeUpdatePackageDoNotUpdateToUnlistedPackageWithPrerelease,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,SafeUpdatePackageDoNotUpdateToUnlistedPackageWithPrerelease,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 235.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageDoNotUpdateToUnlistedPackage,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageDoNotUpdateToUnlistedPackage,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 235.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,SafeUpdatePackageDoNotUpdateToUnlistedPackage,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,SafeUpdatePackageDoNotUpdateToUnlistedPackage,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 235.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageUpdateToUnlistedPackageIfVersionIsSet,The length of the statement  "            var packageManager = new VsPackageManager(TestUtils.GetSolutionManagerWithProjects("foo")' packageRepository' new MockFileSystem()' sharedRepository.Object' recentPackageRepository.Object' new VsPackageInstallerEvents());" is 221.
Long Statement,NuGet.PowerShell.Commands.Test,UpdatePackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\UpdatePackageCommandTest.cs,UpdatePackageUpdateToUnlistedPackageIfVersionIsSet,The length of the statement  "            var cmdlet = new UpdatePackageCommand(TestUtils.GetSolutionManager()' packageManagerFactory.Object' null' new Mock<IVsPackageSourceProvider>().Object' new Mock<IHttpClientEvents>().Object' null' new Mock<IVsCommonOperations>().Object);" is 235.
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsMaximumResultsWithFirstAndSkipParametersSet,The following statement contains a magic number: cmdlet.First = 2;
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsMaximumResultsWithFirstAndSkipParametersSet,The following statement contains a magic number: Assert.Equal(3' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsMaximumResultsWithFirstAndSkipParametersSet,The following statement contains a magic number: AssertPackageResultsEqual(result.ElementAt(2)' new { Id = "Pack2"' Version = new SemanticVersion("1.2") });
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsMaximumResultsWithFirstParameterSet,The following statement contains a magic number: cmdlet.First = 20;
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsMaximumResultsWithFirstParameterSet,The following statement contains a magic number: Assert.Equal(4' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsMaximumResultsWithFirstParameterSet,The following statement contains a magic number: AssertPackageResultsEqual(result.ElementAt(2)' new { Id = "P3"' Version = new SemanticVersion("1.0") });
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsMaximumResultsWithFirstParameterSet,The following statement contains a magic number: AssertPackageResultsEqual(result.ElementAt(3)' new { Id = "Pack2"' Version = new SemanticVersion("1.2") });
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsAllVersionsForSpecificPackage,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsAllVersionsForSpecificPackageWhenSourceNameisUsed,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsPerformsPartialSearchesByDefault,The following statement contains a magic number: Assert.Equal(3' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsPerformsPartialSearchesByDefault,The following statement contains a magic number: AssertPackageResultsEqual(result.ElementAt(2)' new { Id = "AwesomeToo"' Version = new SemanticVersion("0.4") });
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsPerformsPartialSearchesByDefaultAndSourceNameIsUsed,The following statement contains a magic number: Assert.Equal(3' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackageReturnsPerformsPartialSearchesByDefaultAndSourceNameIsUsed,The following statement contains a magic number: AssertPackageResultsEqual(result.ElementAt(2)' new { Id = "AwesomeToo"' Version = new SemanticVersion("0.4") });
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackagePerformsExactMatchesIfExactMatchIsSpecified,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,FindPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\FindPackageCommandTest.cs,FindPackagePerformsExactMatchesIfExactMatchIsSpecifiedAndSourceNameIsUsed,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsAllInstalledPackagesWhenNoParametersAreSpecified,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsAllPackagesFromActiveRepositoryWhenRemoteIsPresent,The following statement contains a magic number: Assert.Equal(4' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsAllPackagesFromActiveRepositoryWhenRemoteIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(result.ElementAt(2)' new {Id = "P2"' Version = new SemanticVersion("1.2")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsAllPackagesFromActiveRepositoryWhenRemoteIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(result.ElementAt(3)' new {Id = "P3"' Version = new SemanticVersion("1.0")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsCorrectPackagesFromActiveRepositoryWhenRemoteAndSkipAndFirstIsPresent,The following statement contains a magic number: cmdlet.First = 2;
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsCorrectPackagesFromActiveRepositoryWhenRemoteAndSkipAndFirstIsPresent,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsAllPackagesFromSpecifiedSourceWhenNoFilterIsSpecified,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsAllPackagesFromSpecifiedSourceWhenNoFilterIsSpecifiedAndSourceNameIsUsed,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageDoesNotReturnPackageFromDisabledSources,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsAllPackagesFromSpecifiedSourceWhenNoFilterIsSpecifiedAndRemoteIsNotSpecified,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsPackagesFromRemoteWhenSolutionIsClosedAndRemoteIsPresent,The following statement contains a magic number: Assert.Equal(4' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsPackagesFromRemoteWhenSolutionIsClosedAndRemoteIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(result.ElementAt(2)' new {Id = "P2"' Version = new SemanticVersion("1.2")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsPackagesFromRemoteWhenSolutionIsClosedAndRemoteIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(result.ElementAt(3)' new {Id = "P3"' Version = new SemanticVersion("1.0")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsPackagesFromRemoteWhenSolutionIsClosedAndSourceIsPresent,The following statement contains a magic number: Assert.Equal(2' result.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsListOfPackagesWithUpdates,The following statement contains a magic number: Assert.Equal(packages.Count()' 2);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackagesReturnsLatestPackageVersionByDefault,The following statement contains a magic number: Assert.Equal(packages.Count()' 3);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackagesReturnsLatestPackageVersionByDefault,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(2)' new {Id = "TestPack"' Version = new SemanticVersion("0.7")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackagesDoesNotCollapseVersionIfAllVersionsIsPresent,The following statement contains a magic number: Assert.Equal(packages.Count()' 6);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackagesDoesNotCollapseVersionIfAllVersionsIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(2)' new {Id = "jQuery"' Version = new SemanticVersion("1.52")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackagesDoesNotCollapseVersionIfAllVersionsIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(3)'                                       new {Id = "NHibernate"' Version = new SemanticVersion("1.1")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackagesDoesNotCollapseVersionIfAllVersionsIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(4)'                                       new {Id = "NHibernate"' Version = new SemanticVersion("1.13")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackagesDoesNotCollapseVersionIfAllVersionsIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(5)' new {Id = "TestPack"' Version = new SemanticVersion("0.7")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackagesReturnsLatestUpdateVersions,The following statement contains a magic number: Assert.Equal(packages.Count()' 2);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesCollapsesVersion,The following statement contains a magic number: Assert.Equal(packages.Count()' 3);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesCollapsesVersion,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(2)' new {Id = "TestPack"' Version = new SemanticVersion("0.7")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesFiltersAndCollapsesVersion,The following statement contains a magic number: Assert.Equal(packages.Count()' 2);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesShowsAllPackageVersionsIfSwitchIsPresent,The following statement contains a magic number: Assert.Equal(packages.Count()' 6);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesShowsAllPackageVersionsIfSwitchIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(2)' new {Id = "jQuery"' Version = new SemanticVersion("1.52")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesShowsAllPackageVersionsIfSwitchIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(3)'                                       new {Id = "NHibernate"' Version = new SemanticVersion("1.1")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesShowsAllPackageVersionsIfSwitchIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(4)'                                       new {Id = "NHibernate"' Version = new SemanticVersion("1.13")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesShowsAllPackageVersionsIfSwitchIsPresent,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(5)' new {Id = "TestPack"' Version = new SemanticVersion("0.7")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesWithShowAllVersionsAppliesFirstAndSkipFilters,The following statement contains a magic number: cmdlet.Skip = 2;
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesWithShowAllVersionsAppliesFirstAndSkipFilters,The following statement contains a magic number: cmdlet.First = 2;
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,RecentPackagesWithShowAllVersionsAppliesFirstAndSkipFilters,The following statement contains a magic number: Assert.Equal(packages.Count()' 2);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,TestRecentSwitchWorkCorrectly,The following statement contains a magic number: Assert.Equal(3' packages.Count);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,TestRecentSwitchWorkCorrectly,The following statement contains a magic number: Assert.Same(packageC' packages[2]);
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsPrereleasePackageForInstalledWhenFlagIsNotSpecified,The following statement contains a magic number: Assert.Equal(3' packages.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsPrereleasePackageForInstalledWhenFlagIsNotSpecified,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(2)' new {Id = "C"' Version = new SemanticVersion("1.3.7.5")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsPrereleasePackageForRecentWhenFlagIsNotSpecified,The following statement contains a magic number: Assert.Equal(3' packages.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsPrereleasePackageForRecentWhenFlagIsNotSpecified,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(2)' new {Id = "C"' Version = new SemanticVersion("1.3.7.5")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageDoesNotReturnsUpdatesForPrereleasePackagesWhenFlagIsNotSpecified,The following statement contains a magic number: Assert.Equal(2' packages.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsUpdatesForPrereleasePackagesWhenFlagIsSpecified,The following statement contains a magic number: Assert.Equal(3' packages.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageReturnsUpdatesForPrereleasePackagesWhenFlagIsSpecified,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(2)' new {Id = "C"' Version = new SemanticVersion("1.3.7.5-b")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageDoesNotListPrereleasePackagesWhenFlagIsNotSpecified,The following statement contains a magic number: Assert.Equal(2' packages.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageListPrereleasePackagesWhenFlagIsSpecified,The following statement contains a magic number: Assert.Equal(3' packages.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageListPrereleasePackagesWhenFlagIsSpecified,The following statement contains a magic number: AssertPackageResultsEqual(packages.ElementAt(2)' new {Id = "D"' Version = new SemanticVersion("1.0")});
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageDoNotShowUnlistedPackages,The following statement contains a magic number: Assert.Equal(2' packages.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetPackageCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetPackageCommandTest.cs,GetPackageDoNotShowUnlistedPackagesForUpdates2,The following statement contains a magic number: Assert.Equal(2' packages.Count());
Magic Number,NuGet.PowerShell.Commands.Test,GetProjectCommandTest,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\test\PowerShellCmdlets.Test\GetProjectCommandTest.cs,GetProjectCmdletReturnsAllProjectsWhenAllIsSet,The following statement contains a magic number: Assert.Equal(3' result.Count());
