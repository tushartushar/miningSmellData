Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,NUnit.NugetCracker,TestSolution,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestSolution.cs,,The length of the parameter partialSolutionTextWithTwoCSharpProjectsAndManySolutionFolders is 62.
Long Statement,NUnit.NugetCracker,TestCSharpProject,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestCSharpProject.cs,TestFixPackageReference,The length of the statement  "			Assert.That<string>(ref result' Is.StringContaining(@"<HintPath>..\..\..\packages\Sample.PluginInterface.2.5.7.0\lib\net35")); " is 126.
Long Statement,NUnit.NugetCracker,TestCSharpProject,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestCSharpProject.cs,TestReplaceProjectByNuget,The length of the statement  "			var result = CSharpProject.ReplaceProjectByNuget(projectXml' "UserRepositoryPlugin"' "UserRepoPlugin"' "v2.0"' @"..\..\..\packages"); " is 133.
Long Statement,NUnit.NugetCracker,TestCSharpProject,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestCSharpProject.cs,TestReplaceProjectByNuget,The length of the statement  "			Assert.That<string>(ref result' Is.StringContaining(@"<HintPath>..\..\..\packages\UserRepositoryPlugin\lib\net20\UserRepoPlugin.dll</HintPath>")); " is 146.
Long Statement,NUnit.NugetCracker,TestCSharpProject,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestCSharpProject.cs,TestReplaceProjectByNuget,The length of the statement  "			Assert.That<string>(ref result' Is.Not.StringContaining(@"<ProjectReference Include=""..\UserRepositoryPlugin\UserRepositoryPlugin.csproj"">")); " is 144.
Long Statement,NUnit.NugetCracker,TestCSharpProject,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestCSharpProject.cs,TestReplaceProjectByNuget,The length of the statement  "			Assert.That<string>(ref result' Is.StringContaining(@"<ProjectReference Include=""..\UserRepositoryPlugin2\UserRepositoryPlugin2.csproj"">")); " is 142.
Long Statement,NUnit.NugetCracker,TestCSharpProject,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestCSharpProject.cs,TestAdjustElements,The length of the statement  "			Assert.That<string>(ref result' Is.StringContaining("<licenseUrl>https://github.com/monoman/NugetCracker/wiki/License:--BSD-simplified</licenseUrl>")); " is 151.
Long Statement,NUnit.NugetCracker,TestCSharpProject,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestCSharpProject.cs,TestAdjustElements,The length of the statement  "			Assert.That<string>(ref result' Is.StringContaining("<projectUrl>https://github.com/monoman/NugetCracker/wiki/NugetCracker-Project</projectUrl>")); " is 147.
Long Statement,NUnit.NugetCracker,TestCSharpProject,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestCSharpProject.cs,TestAdjustElements,The length of the statement  "			Assert.That<string>(ref result' Is.StringContaining("<copyright>Copyright Â© Klaus Wuestfeld' Rafael 'Monoman' Teixeira 2011</copyright>")); " is 139.
Long Statement,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestRegexReplace,The length of the statement  "			var result1 = initial.RegexReplace("<package [^>]*>"' ""' "(\\s*</packages>)"' "<package id=\"Commons.Prevalence\" version=\"1.0\" />"); " is 136.
Long Statement,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestRegexReplace,The length of the statement  "			var result2 = initial.RegexReplace("<non-package [^>]*>"' ""' "(\\s*</packages>)"' "<package id=\"Commons.Prevalence\" version=\"1.0\" />$1"); " is 142.
Long Statement,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestSetMetadata,The length of the statement  "			Assert.That<string>(ref result1' Is.StringContaining("<title>A simple test</title>").And.Not.StringContaining("owners")); " is 121.
Long Statement,NUnit.NugetCracker,TestSolution,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestSolution.cs,TestParseAvailableData,The length of the statement  "			Solution.ParseAvailableData(partialSolutionTextWithTwoCSharpProjectsAndManySolutionFolders' (name' path) => list.Add(new Tuple<string' string>(name' path))); " is 157.
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestSetVersion,The following statement contains a magic number: try {  				File.WriteAllText(filename' @"  [assembly: AssemblyVersion(""1.0.0.0"")]  [assembly: AssemblyFileVersion(""1.0.0.0"")]");  				filename.SetVersion(new Version(0' 8' 3' 0));  				var text = File.ReadAllText(filename);  				Assert.That<string>(ref text' Is.StringContaining("AssemblyVersion(\"0.8.3.0\")"));  				Assert.That<string>(ref text' Is.StringContaining("AssemblyFileVersion(\"0.8.3.0\")"));  			} finally {  				if (File.Exists(filename))  					File.Delete(filename);  			}
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestSetVersion,The following statement contains a magic number: try {  				File.WriteAllText(filename' @"  [assembly: AssemblyVersion(""1.0.0.0"")]  [assembly: AssemblyFileVersion(""1.0.0.0"")]");  				filename.SetVersion(new Version(0' 8' 3' 0));  				var text = File.ReadAllText(filename);  				Assert.That<string>(ref text' Is.StringContaining("AssemblyVersion(\"0.8.3.0\")"));  				Assert.That<string>(ref text' Is.StringContaining("AssemblyFileVersion(\"0.8.3.0\")"));  			} finally {  				if (File.Exists(filename))  					File.Delete(filename);  			}
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.AreEqual(3' result.Length);
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.That(ref result[2]' Is.EqualTo("object"));
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.AreEqual(8' result.Length);
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.That(ref result[2]' Is.EqualTo("is"));
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.That(ref result[3]' Is.EqualTo("broken"));
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.That(ref result[4]' Is.EqualTo("in"));
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.That(ref result[5]' Is.EqualTo("many"));
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.That(ref result[6]' Is.EqualTo("pieces"));
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.That(ref result[7]' Is.EqualTo("object"));
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.AreEqual(3' result.Length);
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.That(ref result[2]' Is.EqualTo("object"));
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.AreEqual(2' result.Length);
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.AreEqual(2' result.Length);
Magic Number,NUnit.NugetCracker,TestExtensions,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestExtensions.cs,TestParseArguments,The following statement contains a magic number: Assert.AreEqual(2' result.Length);
Magic Number,NUnit.NugetCracker,TestSolution,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestSolution.cs,TestParseAvailableData,The following statement contains a magic number: Assert.That(list.Count' Is.EqualTo(2));
Magic Number,NUnit.NugetCracker,TestSolution,C:\repos\monoman_NugetCracker\NUnit.NugetCracker.Core\TestSolution.cs,TestConstructor,The following statement contains a magic number: TestInstanceNamed("TestConstructorOfSolution"'  				(Solution sln' string solutionName' string tempPath' string filename) =>  				{  					Assert.That(sln.Projects.Count()' Is.EqualTo(2));  					Assert.That(sln.Projects' Is.Unique);  					Assert.That(sln.FullPath' Is.EqualTo(filename));  					Assert.That(sln.Name' Is.EqualTo(solutionName));  					Assert.That(sln.InstalledPackagesDir' Is.EqualTo(Path.Combine(tempPath' "packages")));  				});
