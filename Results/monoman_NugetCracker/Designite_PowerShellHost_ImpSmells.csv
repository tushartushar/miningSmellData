Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NuGetConsole.Host.PowerShell.Implementation,NuGetHostUserInterface,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\NuGetHostUserInterface.cs,Prompt,Cyclomatic complexity of the method is 9
Complex Method,NuGetConsole.Host.PowerShell.Implementation,NuGetHostUserInterface,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\NuGetHostUserInterface.cs,PromptCollection,Cyclomatic complexity of the method is 8
Complex Method,NuGetConsole.Host,CommandExpansion,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\Utils\CommandExpansion.cs,GetExpansions,Cyclomatic complexity of the method is 8
Long Parameter List,NuGetConsole.Host.PowerShell.Implementation,RunspaceExtensions,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\RunspaceExtensions.cs,InvokeAsync,The method has 5 parameters. Parameters: runspace' command' inputs' outputResults' pipelineStateChanged
Long Parameter List,NuGetConsole.Host.PowerShell.Implementation,NuGetHostUserInterface,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\NuGetHostUserInterface.cs,PromptForCredential,The method has 6 parameters. Parameters: caption' message' userName' targetName' allowedCredentialTypes' options
Long Parameter List,NuGetConsole.Host.PowerShell,NativeMethods,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\NativeMethods.cs,CredUIPromptForCredentials,The method has 10 parameters. Parameters: pUiInfo' pszTargetName' reserved' dwAuthError' pszUserName' ulUserNameMaxChars' pszPassword' ulPasswordMaxChars' pfSave' dwFlags
Long Parameter List,NuGetConsole.Host.PowerShell,NativeMethods,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\NativeMethods.cs,CredUIPromptForCredentials,The method has 7 parameters. Parameters: caption' message' userName' targetName' allowedCredentialTypes' options' parentHwnd
Long Parameter List,NuGetConsole.Host,MethodBinder,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\Utils\MethodBinder.cs,TryInvoke,The method has 5 parameters. Parameters: type' name' target' args' result
Long Identifier,NuGetConsole.Host.PowerShell.Implementation,PowerShellHost,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\PowerShellHost.cs,,The length of the parameter _updateWorkingDirectoryPending is 30.
Long Statement,NuGetConsole.Host.PowerShell.Implementation,RunspaceExtensions,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\RunspaceExtensions.cs,SetExecutionPolicy,The length of the statement  "            string command = string.Format(CultureInfo.InvariantCulture' "Set-ExecutionPolicy {0} -Scope {1} -Force"' policy.ToString()' scope.ToString());" is 143.
Long Statement,NuGetConsole.Host.PowerShell.Implementation,RunspaceExtensions,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\RunspaceExtensions.cs,ExecuteScript,The length of the statement  "                   "$__pc_args=@(); $input|%{$__pc_args+=$_}; & " + PathHelper.EscapePSPath(fullPath) + " $__pc_args[0] $__pc_args[1] $__pc_args[2]; Remove-Variable __pc_args -Scope 0"'" is 166.
Long Statement,NuGetConsole.Host.PowerShell.Implementation,PowerShellHost,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\PowerShellHost.cs,GetExpansions,The length of the statement  "                            "$__pc_args=@(); $input|%{$__pc_args+=$_}; TabExpansion $__pc_args[0] $__pc_args[1]; Remove-Variable __pc_args -Scope 0"'" is 121.
Long Statement,NuGetConsole.Host.PowerShell,HostUtilities,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\HostUtilities.cs,GetProfileCommands,The length of the statement  "            PSObject dollarProfile = HostUtilities.GetDollarProfile(allUsersAllHosts' allUsersCurrentHost' currentUserAllHosts' currentUserCurrentHost);" is 140.
Long Statement,NuGetConsole.Host.PowerShell,HostUtilities,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\HostUtilities.cs,GetProfileCommands,The length of the statement  "            string[] profilePaths = new string[] { allUsersAllHosts' allUsersCurrentHost' currentUserAllHosts' currentUserCurrentHost };" is 124.
Empty Catch Block,NuGetConsole.Host.PowerShell,HostUtilities,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\HostUtilities.cs,GetAllUsersFolderPath,The method has an empty catch block.
Empty Catch Block,NuGetConsole.Host,ComplexCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\Utils\ComplexCommand.cs,CheckComplete,The method has an empty catch block.
Magic Number,NuGetConsole.Host.PowerShell.Implementation,RunspaceExtensions,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\RunspaceExtensions.cs,ExtractErrorFromErrorRecord,The following statement contains a magic number: return str.Substring(0' str.Length - 2);
Magic Number,NuGetConsole.Host.PowerShell.Implementation,NuGetHostUserInterface,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\NuGetHostUserInterface.cs,ToColor,The following statement contains a magic number: _consoleColors = new Color[16] {                                                    Color.FromRgb(0x00' 0x00' 0x00)'                                                    Color.FromRgb(0x00' 0x00' 0x80)'                                                    Color.FromRgb(0x00' 0x80' 0x00)'                                                    Color.FromRgb(0x00' 0x80' 0x80)'                                                    Color.FromRgb(0x80' 0x00' 0x00)'                                                    Color.FromRgb(0x80' 0x00' 0x80)'                                                    Color.FromRgb(0x80' 0x80' 0x00)'                                                    Color.FromRgb(0xC0' 0xC0' 0xC0)'                                                    Color.FromRgb(0x80' 0x80' 0x80)'                                                    Color.FromRgb(0x00' 0x00' 0xFF)'                                                    Color.FromRgb(0x00' 0xFF' 0x00)'                                                    Color.FromRgb(0x00' 0xFF' 0xFF)'                                                    Color.FromRgb(0xFF' 0x00' 0x00)'                                                    Color.FromRgb(0xFF' 0x00' 0xFF)'                                                    Color.FromRgb(0xFF' 0xFF' 0x00)'                                                    Color.FromRgb(0xFF' 0xFF' 0xFF)'                                                };
Missing Default,NuGetConsole.Host.PowerShell.Implementation,AsyncPowerShellHost,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\AsyncPowerShellHost.cs,ExecuteHost,The following switch statement is missing a default case: switch (e.PipelineStateInfo.State)                     {                         case PipelineState.Completed:                         case PipelineState.Failed:                         case PipelineState.Stopped:                             if (e.PipelineStateInfo.Reason != null)                             {                                 ReportError(e.PipelineStateInfo.Reason);                             }                              OnExecuteCommandEnd();                             ExecuteEnd.Raise(this' EventArgs.Empty);                             break;                     }
Missing Default,NuGetConsole.Host.PowerShell.Implementation,RunspaceExtensions,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellHost\RunspaceExtensions.cs,InvokeAsync,The following switch statement is missing a default case: switch (e.PipelineStateInfo.State)                 {                     case PipelineState.Completed:                     case PipelineState.Failed:                     case PipelineState.Stopped:                         ((Pipeline)sender).Dispose();                         break;                 }
