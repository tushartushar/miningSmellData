Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NuGet.PowerShell.Commands,GetPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\GetPackageCommand.cs,WritePackages,Cyclomatic complexity of the method is 8
Complex Method,NuGet.PowerShell.Commands,UpdatePackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\UpdatePackageCommand.cs,ProcessRecordCore,Cyclomatic complexity of the method is 13
Long Parameter List,NuGet.PowerShell.Commands,FindPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\FindPackageCommand.cs,FindPackageCommand,The method has 6 parameters. Parameters: repositoryFactory' packageSourceProvider' solutionManager' packageManagerFactory' recentPackagesRepository' httpClientEvents
Long Parameter List,NuGet.PowerShell.Commands,GetPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\GetPackageCommand.cs,GetPackageCommand,The method has 7 parameters. Parameters: repositoryFactory' packageSourceProvider' solutionManager' packageManagerFactory' recentPackagesRepository' httpClientEvents' productUpdateService
Long Parameter List,NuGet.PowerShell.Commands,IErrorHandler,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\IErrorHandler.cs,HandleException,The method has 5 parameters. Parameters: exception' terminating' errorId' category' target
Long Parameter List,NuGet.PowerShell.Commands,InstallPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\InstallPackageCommand.cs,InstallPackageCommand,The method has 7 parameters. Parameters: solutionManager' packageManagerFactory' repositoryFactory' packageSourceProvider' httpClientEvents' productUpdateService' vsCommonOperations
Long Parameter List,NuGet.PowerShell.Commands,NuGetBaseCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\NuGetBaseCommand.cs,HandleException,The method has 5 parameters. Parameters: exception' terminating' errorId' category' target
Long Parameter List,NuGet.PowerShell.Commands,PSPathUtility,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\PSPathUtility.cs,TryTranslatePSPath,The method has 5 parameters. Parameters: session' psPath' path' exists' errorMessage
Long Parameter List,NuGet.PowerShell.Commands,UpdatePackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\UpdatePackageCommand.cs,UpdatePackageCommand,The method has 7 parameters. Parameters: solutionManager' packageManagerFactory' repositoryFactory' packageSourceProvider' httpClientEvents' productUpdateService' vsCommonOperations
Long Statement,NuGet.PowerShell.Commands,GetPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\GetPackageCommand.cs,FilterPackages,The length of the statement  "                // In the event the client is going up against a v1 feed' do not try to fetch pre release packages since this flag does not exist." is 130.
Long Statement,NuGet.PowerShell.Commands,GetPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\GetPackageCommand.cs,FilterPackages,The length of the statement  "                    // Review: We should change this to show both the absolute latest and the latest versions but that requires changes to our collapsing behavior." is 143.
Long Statement,NuGet.PowerShell.Commands,GetPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\GetPackageCommand.cs,FilterPackages,The length of the statement  "                // Optimization: If First parameter is specified' we'll wrap the IQueryable in a BufferedEnumerable to prevent consuming the entire result set." is 143.
Long Statement,NuGet.PowerShell.Commands,GetPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\GetPackageCommand.cs,FilterPackages,The length of the statement  "                // If we aren't collapsing versions' and the pre-release flag is not set' only display release versions when displaying from a remote source." is 141.
Long Statement,NuGet.PowerShell.Commands,InstallPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\InstallPackageCommand.cs,CreatePackageManager,The length of the statement  "                return repository == null ? null : PackageManagerFactory.CreatePackageManager(repository' useFallbackForDependencies: true);" is 124.
Long Statement,NuGet.PowerShell.Commands,InstallPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\InstallPackageCommand.cs,ProcessRecordCore,The length of the statement  "                    PackageManager.InstallPackage(ProjectManager' Id' Version' ignoreDependencies: IgnoreDependencies' allowPrereleaseVersions: IncludePrerelease.IsPresent'" is 152.
Long Statement,NuGet.PowerShell.Commands,UpdatePackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\UpdatePackageCommand.cs,CreatePackageManager,The length of the statement  "                return repository == null ? null : PackageManagerFactory.CreatePackageManager(repository' useFallbackForDependencies: true);" is 124.
Magic Number,NuGet.PowerShell.Commands,GetPackageCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\GetPackageCommand.cs,FilterPackages,The following statement contains a magic number: packages = packages.AsBufferedEnumerable(First * 3).AsQueryable();
Missing Default,NuGet.PowerShell.Commands,NuGetBaseCommand,C:\research\architectureSmells\repos\monoman_NugetCracker\Nuget\src\VsConsole\PowerShellCmdlets\NuGetBaseCommand.cs,Log,The following switch statement is missing a default case: switch (level)             {                 case MessageLevel.Debug:                     WriteVerbose(formattedMessage);                     break;                  case MessageLevel.Warning:                     WriteWarning(formattedMessage);                     break;                  case MessageLevel.Info:                     WriteLine(formattedMessage);                     break;                  case MessageLevel.Error:                     WriteError(formattedMessage);                     break;             }
