Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGet,RequestHelper,C:\repos\monoman_NugetCracker\Nuget\src\Core\Http\RequestHelper.cs,GetResponse,The method has 104 lines of code.
Long Parameter List,NuGet,RequestHelper,C:\repos\monoman_NugetCracker\Nuget\src\Core\Http\RequestHelper.cs,GetResponse,The method has 5 parameters. Parameters: createRequest' prepareRequest' proxyCache' credentialCache' credentialProvider
Long Statement,NuGet,ConsoleCredentialProvider,C:\repos\monoman_NugetCracker\Nuget\src\CommandLine\Common\ConsoleCredentialProvider.cs,GetCredentials,The length of the statement  "            string message = credentialType == CredentialType.ProxyCredentials ? NuGetResources.Credentials_ProxyCredentials : NuGetResources.Credentials_RequestCredentials; " is 161.
Empty Catch Block,Bootstrapper,Program,C:\repos\monoman_NugetCracker\Nuget\src\Bootstrapper\Program.cs,Move,The method has an empty catch block.
Magic Number,NuGet,HttpClient,C:\repos\monoman_NugetCracker\Nuget\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: const int ChunkSize = 1024 * 4;
Magic Number,NuGet,HttpClient,C:\repos\monoman_NugetCracker\Nuget\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: const int ChunkSize = 1024 * 4;
Magic Number,NuGet,HttpClient,C:\repos\monoman_NugetCracker\Nuget\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: using (var response = GetResponse())              {                  // Total response length                  int length = (int)response.ContentLength;                  using (Stream stream = response.GetResponseStream())                  {                      // in some circumstances' the Content-Length response header is missing' resulting in                      // the ContentLength = -1. In which case' we copy the whole stream and do not report progress.                      if (length < 0)                      {                          using (var memoryStream = new MemoryStream())                          {                              stream.CopyTo(memoryStream' ChunkSize);                              buffer = memoryStream.ToArray();                          }                            // reporting fake progress as 100%                          OnProgressAvailable(100);                      }                      else                      {                          // We read the response stream chunk by chunk (each chunk is 4KB).                           // After reading each chunk' we report the progress based on the total number bytes read so far.                          int totalReadSoFar = 0;                          buffer = new byte[length];                          while (totalReadSoFar < length)                          {                              int bytesRead = stream.Read(buffer' totalReadSoFar' Math.Min(length - totalReadSoFar' ChunkSize));                              if (bytesRead == 0)                              {                                  break;                              }                              else                              {                                  totalReadSoFar += bytesRead;                                  OnProgressAvailable((totalReadSoFar * 100) / length);                              }                          }                      }                  }              }
Magic Number,NuGet,HttpClient,C:\repos\monoman_NugetCracker\Nuget\src\Core\Http\HttpClient.cs,DownloadData,The following statement contains a magic number: using (var response = GetResponse())              {                  // Total response length                  int length = (int)response.ContentLength;                  using (Stream stream = response.GetResponseStream())                  {                      // in some circumstances' the Content-Length response header is missing' resulting in                      // the ContentLength = -1. In which case' we copy the whole stream and do not report progress.                      if (length < 0)                      {                          using (var memoryStream = new MemoryStream())                          {                              stream.CopyTo(memoryStream' ChunkSize);                              buffer = memoryStream.ToArray();                          }                            // reporting fake progress as 100%                          OnProgressAvailable(100);                      }                      else                      {                          // We read the response stream chunk by chunk (each chunk is 4KB).                           // After reading each chunk' we report the progress based on the total number bytes read so far.                          int totalReadSoFar = 0;                          buffer = new byte[length];                          while (totalReadSoFar < length)                          {                              int bytesRead = stream.Read(buffer' totalReadSoFar' Math.Min(length - totalReadSoFar' ChunkSize));                              if (bytesRead == 0)                              {                                  break;                              }                              else                              {                                  totalReadSoFar += bytesRead;                                  OnProgressAvailable((totalReadSoFar * 100) / length);                              }                          }                      }                  }              }
