Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NugetCracker.Commands,BumpVersionCommand,C:\repos\monoman_NugetCracker\NugetCracker.Core\Commands\BumpVersionCommand.cs,Process,The method has 5 parameters. Parameters: logger' args' metaProject' components' packagesOutputDirectory
Long Parameter List,NugetCracker.Commands,BumpVersionCommand,C:\repos\monoman_NugetCracker\NugetCracker.Core\Commands\BumpVersionCommand.cs,BumpVersion,The method has 5 parameters. Parameters: logger' component' partToBump' packagesOutputDirectory' noBuild
Long Parameter List,NugetCracker.Commands,ExcludeDirectoryCommand,C:\repos\monoman_NugetCracker\NugetCracker.Core\Commands\ExcludeDirectoryCommand.cs,Process,The method has 5 parameters. Parameters: logger' args' metaProject' components' packagesOutputDirectory
Long Parameter List,NugetCracker.Commands,ListCommand,C:\repos\monoman_NugetCracker\NugetCracker.Core\Commands\ListCommand.cs,Process,The method has 5 parameters. Parameters: logger' args' metaProject' components' packagesOutputDirectory
Long Parameter List,NugetCracker.Commands,ScanCommand,C:\repos\monoman_NugetCracker\NugetCracker.Core\Commands\ScanCommand.cs,Process,The method has 5 parameters. Parameters: logger' args' metaProject' components' packagesOutputDirectory
Long Parameter List,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,PromoteToNuget,The method has 8 parameters. Parameters: logger' outputDirectory' tags' licenseUrl' projectUrl' iconUrl' copyright' requireLicenseAcceptance
Long Parameter List,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,AdjustNuspec,The method has 7 parameters. Parameters: nuspec' tags' licenseUrl' projectUrl' iconUrl' copyright' requireLicenseAcceptance
Long Parameter List,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,AdjustElements,The method has 7 parameters. Parameters: xml' tags' licenseUrl' projectUrl' iconUrl' copyright' requireLicenseAcceptance
Long Parameter List,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,ReplaceProjectReference,The method has 5 parameters. Parameters: logger' package' assemblyName' framework' installDirs
Long Parameter List,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,ReplaceProjectByNuget,The method has 5 parameters. Parameters: xml' packageName' assemblyName' framework' installedPackagesDir
Long Parameter List,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,AddSingleLibReference,The method has 5 parameters. Parameters: xml' packageName' assemblyName' framework' installedPackagesDir
Long Parameter List,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,DoAddNuget,The method has 5 parameters. Parameters: logger' nugetComponent' components' packagesOutputDirectory' firstlevel
Long Parameter List,NugetCracker.Interfaces,ICommand,C:\repos\monoman_NugetCracker\NugetCracker.Core\Interfaces\ICommand.cs,Process,The method has 5 parameters. Parameters: logger' args' metaProject' components' packagesOutputDirectory
Long Parameter List,NugetCracker.Interfaces,IProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Interfaces\IProject.cs,PromoteToNuget,The method has 8 parameters. Parameters: logger' outputDirectory' tags' licenseUrl' projectUrl' iconUrl' copyright' requireLicenseAcceptance
Long Parameter List,NugetCracker.Interfaces,IProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Interfaces\IProject.cs,ReplaceProjectReference,The method has 5 parameters. Parameters: logger' package' assemblyName' framework' installDirs
Long Parameter List,NugetCracker.Data,ComponentsList,C:\repos\monoman_NugetCracker\NugetCracker.Core\Data\ComponentsList.cs,FilterBy,The method has 5 parameters. Parameters: pattern' nugets' orderByTreeDepth' groupByType' orphans
Long Parameter List,NugetCracker,Extensions,C:\repos\monoman_NugetCracker\NugetCracker.Core\Extensions.cs,RegexReplace,The method has 5 parameters. Parameters: text' pattern' replace' altPattern' altReplace
Long Parameter List,NugetCracker.Utilities,ToolHelper,C:\repos\monoman_NugetCracker\NugetCracker.Core\Utilities\ToolHelper.cs,ExecuteTool,The method has 5 parameters. Parameters: logger' toolName' arguments' workingDirectory' processToolOutput
Long Statement,NugetCracker.Commands,BumpVersionCommand,C:\repos\monoman_NugetCracker\NugetCracker.Core\Commands\BumpVersionCommand.cs,BumpUp,The length of the statement  "				logger.Info("Bumped component '{0}' version from {1} to {2}"' componentName' currentVersion.ToString()' newVersion.ToString()); " is 127.
Long Statement,NugetCracker.Components.CSharp,CSharpComponentsFactory,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpComponentsFactory.cs,FindComponentsIn,The length of the statement  "				string webApplicationPattern = "Project\\(\"\\{E24C65DC-7377-472B-9ABA-BC803B73C61A\\}\"\\)\\s*\\=\\s*\"([^\"]+)\"\\s*\\'\\s*\"([^\"]+)\""; " is 139.
Long Statement,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,FixPackageReference,The length of the statement  "			string pattern2 = "^(\\s*<HintPath>.*\\\\)(" + packageName + "[^\\\\]*)(\\\\lib\\\\net[^\\\\]*)(\\\\[^\\\\]*\\.dll)([^<]*</HintPath>\\s*)$"; " is 140.
Long Statement,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,AdjustNuspec,The length of the statement  "			_projectDir.Combine(nuspec).TransformFile(xml => AdjustElements(xml' tags' licenseUrl' projectUrl' iconUrl' copyright' requireLicenseAcceptance)); " is 146.
Long Statement,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,ReplaceProjectByNuget,The length of the statement  "			string pattern = "<ProjectReference [^>]*" + packageName + "\\.[^\\.]*proj[^>]*>.*<Name>" + packageName + "</Name>\\s*</ProjectReference>"; " is 139.
Long Statement,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,AddSingleLibReference,The length of the statement  "				"      <HintPath>" + installedPackagesDir.Combine(packageName) + "\\lib\\" + framework.ToLibFolder() + "\\" + assemblyName + ".dll</HintPath>\r\n" + " is 148.
Long Statement,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,ParseProjectFile,The length of the statement  "				UsesNUnit = GetListOfReferencedLibraries(project' nm).Any(s => s.Equals("nunit.framework"' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,ToString,The length of the statement  "			return string.Format("{0}{1} - {2} ({6}) [{3} - {4}] {5}"' Name' CurrentVersionTag' Description' Type' _targetFrameworkVersion.ToLibFolder()' _status' OwningStatus); " is 165.
Long Statement,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,DoAddNuget,The length of the statement  "						FullPath.TransformFile(xml => AddSingleLibReference(xml' nugetComponent.Name' assembly' framework' RelativeInstalledPackagesDir)); " is 130.
Long Statement,NugetCracker.Components,Solution,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\Solution.cs,ParseAvailableData,The length of the statement  "			var matches = projectFinder.Matches(solutionText).Cast<Match>().Concat(webApplicationFinder.Matches(solutionText).Cast<Match>()); " is 129.
Long Statement,NugetCracker.Data,ComponentsList,C:\repos\monoman_NugetCracker\NugetCracker.Core\Data\ComponentsList.cs,FindComponent,The length of the statement  "						Console.WriteLine("Too many components match the pattern '{0}': {1}. Try another pattern!"' componentNamePattern' list.Count); " is 126.
Virtual Method Call from Constructor,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,CSharpProject,The constructor "CSharpProject" calls a virtual method "GetProjectName".
Virtual Method Call from Constructor,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,CSharpProject,The constructor "CSharpProject" calls a virtual method "ParseAvailableData".
Empty Catch Block,NugetCracker.Data,ComponentsList,C:\repos\monoman_NugetCracker\NugetCracker.Core\Data\ComponentsList.cs,FindComponent,The method has an empty catch block.
Magic Number,NugetCracker.Components.CSharp,CSharpComponentsFactory,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpComponentsFactory.cs,FindComponentsIn,The following statement contains a magic number: foreach (var solution in Directory.EnumerateFiles(folderPath' "*.sln")) {  				string solutionContents = File.ReadAllText(solution);  				string webApplicationPattern = "Project\\(\"\\{E24C65DC-7377-472B-9ABA-BC803B73C61A\\}\"\\)\\s*\\=\\s*\"([^\"]+)\"\\s*\\'\\s*\"([^\"]+)\"";  				var match = Regex.Match(solutionContents' webApplicationPattern' RegexOptions.Multiline);  				while (match.Success) {  					var webApplicationPath = match.Groups[2].Value;  					if (Directory.Exists(Path.Combine(Path.GetDirectoryName(solution)' webApplicationPath)))  						yield return new CSharpWebsite(solution' match.Groups[1].Value' webApplicationPath);  					match = match.NextMatch();  				}  			}
Magic Number,NugetCracker.Components.CSharp,CSharpProject,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\CSharp\CSharpProject.cs,ParseAssemblyInfoFile,The following statement contains a magic number: if (File.Exists(sourcePath)) {  				try {  					string info = File.ReadAllText(sourcePath);  					string pattern = "AssemblyVersion\\(\"([^\"]*)\"\\)";  					var match = Regex.Match(info' pattern' RegexOptions.Multiline);  					if (match.Success) {  						try {  							string version = match.Groups[1].Value;  							if (version.Contains('*'))  								version = version.Replace('*'' '0');  							if (version.Count(c => c == '.') < 3)  								version = version + ".0";  							CurrentVersion = new Version(version);  						} catch {  							return false;  						}  						found = true;  					}  					pattern = "AssemblyDescription\\(\"([^\"]+)\"\\)";  					match = Regex.Match(info' pattern' RegexOptions.Multiline);  					if (match.Success)  						Description = match.Groups[1].Value;  				} catch (Exception e) {  					Console.Error.WriteLine("Could not read file '{0}'. Cause: {1}"' sourcePath' e.Message);  				}  			} else  				Console.Error.WriteLine("\nMissing file: {0}"' sourcePath);
Magic Number,NugetCracker.Components,NugetReference,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\NugetReference.cs,NugetReference,The following statement contains a magic number: Versions = nuget.CurrentVersion.ToString(4);
Magic Number,NugetCracker.Components,Solution,C:\repos\monoman_NugetCracker\NugetCracker.Core\Components\Solution.cs,ParseAvailableData,The following statement contains a magic number: foreach (var match in matches)  				addProject(match.Groups[1].Value' match.Groups[2].Value);
Magic Number,NugetCracker.Data,ComponentsList,C:\repos\monoman_NugetCracker\NugetCracker.Core\Data\ComponentsList.cs,FindComponent,The following statement contains a magic number: try {  				var list = _list.FindAll(c => c is T && c.MatchName(componentNamePattern));  				if (filter != null)  					list = list.FindAll(c => filter(c as T));  				if (list.Count == 1)  					return (T)list[0];  				if (interactive) {  					if (list.Count > 20)  						Console.WriteLine("Too many components match the pattern '{0}': {1}. Try another pattern!"' componentNamePattern' list.Count);  					else if (list.Count == 0)  						Console.WriteLine("No components match the pattern '{0}'. Try another pattern!"' componentNamePattern);  					else {  						do {  							var i = 0;  							Console.WriteLine("Select from this list:");  							foreach (var component in list)  								Console.WriteLine("[{0:0000}] {1}"' ++i' component);  							Console.Write("Type 1-{0}' 0 to abandon: "' list.Count);  							var input = Console.ReadLine();  							if (int.TryParse(input' out i)) {  								if (i == 0)  									break;  								if (i > 0 && i <= list.Count)  									return (T)list[i - 1];  							}  						} while (true);  					}  				}  			} catch {  			}
Magic Number,NugetCracker,Extensions,C:\repos\monoman_NugetCracker\NugetCracker.Core\Extensions.cs,EllipsedTo,The following statement contains a magic number: return line.Substring(0' maxlength - 3) + "...";
Magic Number,NugetCracker.Persistence,MetaProjectPersistence,C:\repos\monoman_NugetCracker\NugetCracker.Core\Persistence\MetaProjectPersistence.cs,ToAbsolutePath,The following statement contains a magic number: if (dirPath.StartsWith(".."))  				return Path.Combine(basePath' dirPath.Substring(3));
Missing Default,NugetCracker,Extensions,C:\repos\monoman_NugetCracker\NugetCracker.Core\Extensions.cs,Bump,The following switch statement is missing a default case: switch (partToBump) {  				case VersionPart.Major:  					return new Version(oldVersion.Major + 1' 0' 0' 0);  				case VersionPart.Minor:  					return new Version(oldVersion.Major' oldVersion.Minor + 1' 0' 0);  				case VersionPart.Build:  					return new Version(oldVersion.Major' oldVersion.Minor' oldVersion.Build + 1' 0);  				case VersionPart.Revision:  					return new Version(oldVersion.Major' oldVersion.Minor' oldVersion.Build' oldVersion.Revision + 1);  			}
