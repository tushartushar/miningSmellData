Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The method has 923 lines of code.
Long Method,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The method has 149 lines of code.
Long Method,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The method has 151 lines of code.
Long Method,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The method has 120 lines of code.
Long Method,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The method has 179 lines of code.
Long Method,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The method has 100 lines of code.
Long Method,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,The method has 217 lines of code.
Long Method,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The method has 163 lines of code.
Long Method,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The method has 178 lines of code.
Complex Method,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,LoadOrganicListing,Cyclomatic complexity of the method is 11
Complex Method,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,Cyclomatic complexity of the method is 19
Complex Method,Lettuce,Extensions,C:\repos\SirCmpwn_Tomato\Lettuce\Extensions.cs,SafeSplit,Cyclomatic complexity of the method is 8
Complex Method,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,Cyclomatic complexity of the method is 10
Complex Method,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,Cyclomatic complexity of the method is 21
Complex Method,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,Cyclomatic complexity of the method is 11
Complex Method,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,Cyclomatic complexity of the method is 11
Long Identifier,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,,The length of the parameter breakOnInvalidInstructionToolStripMenuItem is 42.
Long Identifier,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,,The length of the parameter setPCToAddressToolStripMenuItem is 31.
Long Identifier,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,,The length of the parameter takeScreenshotToolStripMenuItem is 31.
Long Identifier,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,,The length of the parameter detatchKeyboardToolStripMenuItem is 32.
Long Identifier,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,,The length of the parameter startRecordingToolStripMenuItem is 31.
Long Identifier,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,,The length of the parameter takeScreenshotToolStripMenuItem is 31.
Long Statement,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ClockSpeedForm)); " is 134.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,textBoxRegisterPC_TextChanged,The length of the statement  "            if (!(disassemblyDisplay1.SelectedAddress < CPU.PC && disassemblyDisplay1.EndAddress > CPU.PC) && disassemblyDisplay1.EnableUpdates) " is 132.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Debugger)); " is 128.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 145.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.watchTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.addWatchButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.label16.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 142.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.watchesListView.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 150.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.watchesContextMenuStrip.Opening += new System.ComponentModel.CancelEventHandler(this.watchesContextMenuStrip_Opening); " is 123.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.disassemblyDisplay1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 155.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.rawMemoryDisplay.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 149.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 139.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.groupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 144.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.label3.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.groupBox3.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 144.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.listBoxConnectedDevices.SelectedIndexChanged += new System.EventHandler(this.listBoxConnectedDevices_SelectedIndexChanged); " is 128.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.listBoxConnectedDevices.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.listBoxConnectedDevices_MouseDoubleClick); " is 139.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.breakOnInvalidInstructionToolStripMenuItem.Click += new System.EventHandler(this.breakOnInvalidInstructionToolStripMenuItem_Click); " is 136.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.propertyGrid1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 148.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.propertyGrid1.PropertyValueChanged += new System.Windows.Forms.PropertyValueChangedEventHandler(this.propertyGrid1_PropertyValueChanged); " is 142.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.warningLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.warningLabel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(251))))' ((int)(((byte)(251))))' ((int)(((byte)(251))))); " is 132.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.pictureBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The length of the statement  "            this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(251))))' ((int)(((byte)(251))))' ((int)(((byte)(251))))); " is 131.
Long Statement,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DefineValueForm)); " is 135.
Long Statement,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The length of the statement  "                    e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2)); " is 138.
Long Statement,Lettuce,GenericKeyboardWindow,C:\repos\SirCmpwn_Tomato\Lettuce\GenericKeyboardWindow.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GenericKeyboardWindow)); " is 141.
Long Statement,Lettuce,GenericKeyboardWindow,C:\repos\SirCmpwn_Tomato\Lettuce\GenericKeyboardWindow.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GoToAddressForm)); " is 135.
Long Statement,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(HardwareConfiguration)); " is 141.
Long Statement,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The length of the statement  "            this.txtStepInto.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The length of the statement  "            this.txtStepOver.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The length of the statement  "            this.txtChangeRunning.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The length of the statement  "            this.txtGotoAddr.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The length of the statement  "            this.btnSave.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 143.
Long Statement,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LEM1802Window)); " is 133.
Long Statement,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,listBox1_SelectedIndexChanged,The length of the statement  "                removeButton.Enabled = writeProtectedCheckBox.Enabled = bigEndianCheckBox.Enabled = saveSelectedDiskButton.Enabled = true; " is 122.
Long Statement,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,listBox1_SelectedIndexChanged,The length of the statement  "                removeButton.Enabled = insertDiskButton.Enabled = writeProtectedCheckBox.Enabled = bigEndianCheckBox.Enabled = saveSelectedDiskButton.Enabled = false; " is 150.
Long Statement,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(M35FDWindow)); " is 131.
Long Statement,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The length of the statement  "            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The length of the statement  "            this.label3.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MemoryConfiguration)); " is 139.
Long Statement,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SPED3Window)); " is 131.
Long Statement,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The length of the statement  "            this.label3.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The length of the statement  "            this.button5.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The length of the statement  "            this.button6.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Complex Conditional,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,textBox1_KeyDown,The conditional expression  "e.KeyCode == Keys.D1 ||                  e.KeyCode == Keys.D2 ||                  e.KeyCode == Keys.D3 ||                  e.KeyCode == Keys.D4 ||                  e.KeyCode == Keys.D5 ||                  e.KeyCode == Keys.D6 ||                  e.KeyCode == Keys.D7 ||                  e.KeyCode == Keys.D8 ||                  e.KeyCode == Keys.D9 ||                  e.KeyCode == Keys.D0 ||                  e.KeyCode == Keys.NumPad1 ||                  e.KeyCode == Keys.NumPad2 ||                  e.KeyCode == Keys.NumPad3 ||                  e.KeyCode == Keys.NumPad4 ||                  e.KeyCode == Keys.NumPad5 ||                  e.KeyCode == Keys.NumPad6 ||                  e.KeyCode == Keys.NumPad7 ||                  e.KeyCode == Keys.NumPad8 ||                  e.KeyCode == Keys.NumPad9 ||                  e.KeyCode == Keys.NumPad0 ||                  e.KeyCode == Keys.Back ||                  e.KeyCode == Keys.Delete ||                  e.KeyCode == Keys.Left ||                  e.KeyCode == Keys.Right"  is complex.
Complex Conditional,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,textBoxRegisterX_KeyDown,The conditional expression  "e.KeyCode == Keys.D1 ||                  e.KeyCode == Keys.D2 ||                  e.KeyCode == Keys.D3 ||                  e.KeyCode == Keys.D4 ||                  e.KeyCode == Keys.D5 ||                  e.KeyCode == Keys.D6 ||                  e.KeyCode == Keys.D7 ||                  e.KeyCode == Keys.D8 ||                  e.KeyCode == Keys.D9 ||                  e.KeyCode == Keys.D0 ||                  e.KeyCode == Keys.NumPad1 ||                  e.KeyCode == Keys.NumPad2 ||                  e.KeyCode == Keys.NumPad3 ||                  e.KeyCode == Keys.NumPad4 ||                  e.KeyCode == Keys.NumPad5 ||                  e.KeyCode == Keys.NumPad6 ||                  e.KeyCode == Keys.NumPad7 ||                  e.KeyCode == Keys.NumPad8 ||                  e.KeyCode == Keys.NumPad9 ||                  e.KeyCode == Keys.NumPad0 ||                  e.KeyCode == Keys.A ||                  e.KeyCode == Keys.B ||                  e.KeyCode == Keys.C ||                  e.KeyCode == Keys.D ||                  e.KeyCode == Keys.E ||                  e.KeyCode == Keys.F ||                  e.KeyCode == Keys.Back ||                  e.KeyCode == Keys.Delete ||                  e.KeyCode == Keys.Left ||                  e.KeyCode == Keys.Right"  is complex.
Complex Conditional,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,Debugger_KeyDown,The conditional expression  "RuntimeInfo.IsMacOSX && (e.KeyCode == Keys.W || e.KeyCode == Keys.Q) && e.Modifiers == Keys.Alt"  is complex.
Complex Conditional,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,textBoxRegisterX_KeyDown,The conditional expression  "e.KeyCode == Keys.D1 ||                  e.KeyCode == Keys.D2 ||                  e.KeyCode == Keys.D3 ||                  e.KeyCode == Keys.D4 ||                  e.KeyCode == Keys.D5 ||                  e.KeyCode == Keys.D6 ||                  e.KeyCode == Keys.D7 ||                  e.KeyCode == Keys.D8 ||                  e.KeyCode == Keys.D9 ||                  e.KeyCode == Keys.D0 ||                  e.KeyCode == Keys.NumPad1 ||                  e.KeyCode == Keys.NumPad2 ||                  e.KeyCode == Keys.NumPad3 ||                  e.KeyCode == Keys.NumPad4 ||                  e.KeyCode == Keys.NumPad5 ||                  e.KeyCode == Keys.NumPad6 ||                  e.KeyCode == Keys.NumPad7 ||                  e.KeyCode == Keys.NumPad8 ||                  e.KeyCode == Keys.NumPad9 ||                  e.KeyCode == Keys.NumPad0 ||                  e.KeyCode == Keys.A ||                  e.KeyCode == Keys.B ||                  e.KeyCode == Keys.C ||                  e.KeyCode == Keys.D ||                  e.KeyCode == Keys.E ||                  e.KeyCode == Keys.F ||                  e.KeyCode == Keys.Back ||                  e.KeyCode == Keys.Delete ||                  e.KeyCode == Keys.Left ||                  e.KeyCode == Keys.Right"  is complex.
Complex Conditional,Lettuce,Extensions,C:\repos\SirCmpwn_Tomato\Lettuce\Extensions.cs,TrimExcessWhitespace,The conditional expression  "!(char.IsWhiteSpace(value[i]) && previousWhitespace) || inString || inChar"  is complex.
Complex Conditional,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,textBoxRegisterX_KeyDown,The conditional expression  "e.KeyCode == Keys.D1 ||                  e.KeyCode == Keys.D2 ||                  e.KeyCode == Keys.D3 ||                  e.KeyCode == Keys.D4 ||                  e.KeyCode == Keys.D5 ||                  e.KeyCode == Keys.D6 ||                  e.KeyCode == Keys.D7 ||                  e.KeyCode == Keys.D8 ||                  e.KeyCode == Keys.D9 ||                  e.KeyCode == Keys.D0 ||                  e.KeyCode == Keys.NumPad1 ||                  e.KeyCode == Keys.NumPad2 ||                  e.KeyCode == Keys.NumPad3 ||                  e.KeyCode == Keys.NumPad4 ||                  e.KeyCode == Keys.NumPad5 ||                  e.KeyCode == Keys.NumPad6 ||                  e.KeyCode == Keys.NumPad7 ||                  e.KeyCode == Keys.NumPad8 ||                  e.KeyCode == Keys.NumPad9 ||                  e.KeyCode == Keys.NumPad0 ||                  e.KeyCode == Keys.A ||                  e.KeyCode == Keys.B ||                  e.KeyCode == Keys.C ||                  e.KeyCode == Keys.D ||                  e.KeyCode == Keys.E ||                  e.KeyCode == Keys.F ||                  e.KeyCode == Keys.Back ||                  e.KeyCode == Keys.Delete ||                  e.KeyCode == Keys.Left ||                  e.KeyCode == Keys.Right"  is complex.
Virtual Method Call from Constructor,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,LEM1802Window,The constructor "LEM1802Window" calls a virtual method "InitClientSize".
Empty Catch Block,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The method has an empty catch block.
Empty Catch Block,Lettuce,INIFile,C:\repos\SirCmpwn_Tomato\Lettuce\INIFile.cs,Read,The method has an empty catch block.
Empty Catch Block,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InvalidateAsync,The method has an empty catch block.
Empty Catch Block,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InvalidateAsync,The method has an empty catch block.
Empty Catch Block,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,ResetTitleAsync,The method has an empty catch block.
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(104' 13);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(104' 13);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(15' 25);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(15' 25);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(151' 20);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(151' 20);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(91' 51);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(91' 51);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 2;
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(172' 81);
Magic Number,Lettuce,ClockSpeedForm,C:\repos\SirCmpwn_Tomato\Lettuce\ClockSpeedForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(172' 81);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,ResetLayout,The following statement contains a magic number: if (this.InvokeRequired)              {                  try                  {                      this.Invoke(new Action(ResetLayout));                  }                  catch { }              }              else              {                  if (!MayUpdateLayout)                      return;                  MayUpdateLayout = false;                  SuspendLayout();                  textBoxRegisterA.Text = GetHexString(CPU.A' 4);                  textBoxRegisterB.Text = GetHexString(CPU.B' 4);                  textBoxRegisterC.Text = GetHexString(CPU.C' 4);                  textBoxRegisterX.Text = GetHexString(CPU.X' 4);                  textBoxRegisterY.Text = GetHexString(CPU.Y' 4);                  textBoxRegisterZ.Text = GetHexString(CPU.Z' 4);                  textBoxRegisterI.Text = GetHexString(CPU.I' 4);                  textBoxRegisterJ.Text = GetHexString(CPU.J' 4);                  textBoxRegisterPC.Text = GetHexString(CPU.PC' 4);                  textBoxRegisterSP.Text = GetHexString(CPU.SP' 4);                  textBoxRegisterEX.Text = GetHexString(CPU.EX' 4);                  textBoxRegisterIA.Text = GetHexString(CPU.IA' 4);                  checkBoxRunning.Checked = CPU.IsRunning;                  checkBoxInterruptQueue.Checked = CPU.InterruptQueueEnabled;                  labelQueuedInterrupts.Text = "Queued Interrupts: " + CPU.InterruptQueue.Count.ToString();                  checkBoxOnFire.Checked = CPU.IsOnFire;                  cycleCountLabel.Text = "Cycles: " + CPU.TotalCycles;                  rawMemoryDisplay.Invalidate();                  disassemblyDisplay1.Invalidate();                  propertyGrid1.SelectedObject = propertyGrid1.SelectedObject; // Forces update' intentionally redundant                  UpdateWatches();                  if (CPU.IsRunning)                      DisableAll();                  else                      EnableAll();                  ResumeLayout(true);                  MayUpdateLayout = true;              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,LoadOrganicListing,The following statement contains a magic number: foreach (var _line in lines)              {                  string line = _line;                  if (line.Trim().Length == 0)                      continue;                  line = line.Substring(line.IndexOf(')')).Trim();                  line = line.Substring(line.IndexOf(' ')).Trim();                  string addressText = line.Remove(line.IndexOf(']'));                  addressText = addressText.Substring(line.IndexOf('[') + 3).Trim();                  ushort address = 0;                  if (addressText != "NOLIST")                      address = ushort.Parse(addressText' NumberStyles.HexNumber);                  if (line.Substring(line.IndexOf(" ")).Trim().StartsWith("ERROR"))                      continue;                  if (line.Substring(line.IndexOf(" ")).Trim().StartsWith("WARNING"))                      continue;                  line = line.Substring(line.IndexOf("  ")).Trim();                  if (line.SafeContains(':'))                  {                      if (line.Contains(' '))                          line = line.Remove(line.IndexOf(" ")).Trim();                      line = line.Replace(":"' "");                      if (!KnownLabels.ContainsKey(address))                          KnownLabels.Add(address' line);                  }                  else                  {                      if (!_line.Contains("                      ") && !line.ToLower().StartsWith(".")) // .dat directive stuff                      {                          if (!KnownCode.ContainsKey(address))                              KnownCode.Add(address' line);                      }                  }              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,toolStripMenuItem2_Click,The following statement contains a magic number: CPU.ClockSpeed = 50000;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,toolStripMenuItem3_Click,The following statement contains a magic number: CPU.ClockSpeed = 100000;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,toolStripMenuItem4_Click,The following statement contains a magic number: CPU.ClockSpeed = 200000;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,toolStripMenuItem5_Click,The following statement contains a magic number: CPU.ClockSpeed = 1000000;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,loadToolStripMenuItem_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty(binFile))              {                  // Load binary file                  List<ushort> data = new List<ushort>();                  using (Stream stream = File.OpenRead(binFile))                  {                      for (int i = 0; i < stream.Length; i += 2)                      {                          byte a = (byte)stream.ReadByte();                          byte b = (byte)stream.ReadByte();                          if (littleEndian)                              data.Add((ushort)(a | (b << 8)));                          else                              data.Add((ushort)(b | (a << 8)));                      }                  }                  Program.CPU.FlashMemory(data.ToArray());              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,loadToolStripMenuItem_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty(binFile))              {                  // Load binary file                  List<ushort> data = new List<ushort>();                  using (Stream stream = File.OpenRead(binFile))                  {                      for (int i = 0; i < stream.Length; i += 2)                      {                          byte a = (byte)stream.ReadByte();                          byte b = (byte)stream.ReadByte();                          if (littleEndian)                              data.Add((ushort)(a | (b << 8)));                          else                              data.Add((ushort)(b | (a << 8)));                      }                  }                  Program.CPU.FlashMemory(data.ToArray());              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,loadToolStripMenuItem_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty(binFile))              {                  // Load binary file                  List<ushort> data = new List<ushort>();                  using (Stream stream = File.OpenRead(binFile))                  {                      for (int i = 0; i < stream.Length; i += 2)                      {                          byte a = (byte)stream.ReadByte();                          byte b = (byte)stream.ReadByte();                          if (littleEndian)                              data.Add((ushort)(a | (b << 8)));                          else                              data.Add((ushort)(b | (a << 8)));                      }                  }                  Program.CPU.FlashMemory(data.ToArray());              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,reloadToolStripMenuItem_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty(Lettuce.Program.lastbinFilepath))              {                  using (Stream stream = File.OpenRead(Lettuce.Program.lastbinFilepath))                  {                      for (int i = 0; i < stream.Length; i += 2)                      {                          byte a = (byte)stream.ReadByte();                          byte b = (byte)stream.ReadByte();                          if (Lettuce.Program.lastlittleEndian)                              data.Add((ushort)(a | (b << 8)));                          else                              data.Add((ushort)(b | (a << 8)));                      }                  }              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,reloadToolStripMenuItem_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty(Lettuce.Program.lastbinFilepath))              {                  using (Stream stream = File.OpenRead(Lettuce.Program.lastbinFilepath))                  {                      for (int i = 0; i < stream.Length; i += 2)                      {                          byte a = (byte)stream.ReadByte();                          byte b = (byte)stream.ReadByte();                          if (Lettuce.Program.lastlittleEndian)                              data.Add((ushort)(a | (b << 8)));                          else                              data.Add((ushort)(b | (a << 8)));                      }                  }              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,reloadToolStripMenuItem_Click,The following statement contains a magic number: if (!string.IsNullOrEmpty(Lettuce.Program.lastbinFilepath))              {                  using (Stream stream = File.OpenRead(Lettuce.Program.lastbinFilepath))                  {                      for (int i = 0; i < stream.Length; i += 2)                      {                          byte a = (byte)stream.ReadByte();                          byte b = (byte)stream.ReadByte();                          if (Lettuce.Program.lastlittleEndian)                              data.Add((ushort)(a | (b << 8)));                          else                              data.Add((ushort)(b | (a << 8)));                      }                  }              }
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(12' 27);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(12' 27);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(603' 563);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(603' 563);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchTextBox.Location = new System.Drawing.Point(420' 532);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchTextBox.Location = new System.Drawing.Point(420' 532);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchTextBox.Size = new System.Drawing.Size(122' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchTextBox.Size = new System.Drawing.Size(122' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchTextBox.TabIndex = 11;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.addWatchButton.Location = new System.Drawing.Point(548' 530);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.addWatchButton.Location = new System.Drawing.Point(548' 530);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.addWatchButton.Size = new System.Drawing.Size(46' 23);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.addWatchButton.Size = new System.Drawing.Size(46' 23);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.addWatchButton.TabIndex = 10;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(417' 274);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label16.Location = new System.Drawing.Point(417' 274);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(50' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label16.Size = new System.Drawing.Size(50' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label16.TabIndex = 9;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchesListView.Location = new System.Drawing.Point(420' 289);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchesListView.Location = new System.Drawing.Point(420' 289);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchesListView.Size = new System.Drawing.Size(174' 235);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchesListView.Size = new System.Drawing.Size(174' 235);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchesListView.TabIndex = 8;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.expressionHeader.Width = 70;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.resultHeader.Width = 100;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchesContextMenuStrip.Size = new System.Drawing.Size(155' 26);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.watchesContextMenuStrip.Size = new System.Drawing.Size(155' 26);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.removeWatchToolStripMenuItem.Size = new System.Drawing.Size(154' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.removeWatchToolStripMenuItem.Size = new System.Drawing.Size(154' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stackDisplay.Location = new System.Drawing.Point(8' 32);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stackDisplay.Location = new System.Drawing.Point(8' 32);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stackDisplay.Margin = new System.Windows.Forms.Padding(5' 4' 5' 4);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stackDisplay.Margin = new System.Windows.Forms.Padding(5' 4' 5' 4);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stackDisplay.Margin = new System.Windows.Forms.Padding(5' 4' 5' 4);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stackDisplay.Margin = new System.Windows.Forms.Padding(5' 4' 5' 4);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stackDisplay.Size = new System.Drawing.Size(113' 238);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stackDisplay.Size = new System.Drawing.Size(113' 238);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stackDisplay.TabIndex = 7;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point(6' 16);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label18.Location = new System.Drawing.Point(6' 16);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size(35' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label18.Size = new System.Drawing.Size(35' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label18.TabIndex = 6;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.disassemblyDisplay1.Location = new System.Drawing.Point(6' 289);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.disassemblyDisplay1.Location = new System.Drawing.Point(6' 289);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.disassemblyDisplay1.Margin = new System.Windows.Forms.Padding(4);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.disassemblyDisplay1.Size = new System.Drawing.Size(407' 264);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.disassemblyDisplay1.Size = new System.Drawing.Size(407' 264);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.disassemblyDisplay1.TabIndex = 5;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.rawMemoryDisplay.Location = new System.Drawing.Point(129' 32);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.rawMemoryDisplay.Location = new System.Drawing.Point(129' 32);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.rawMemoryDisplay.Margin = new System.Windows.Forms.Padding(5' 4' 5' 4);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.rawMemoryDisplay.Margin = new System.Windows.Forms.Padding(5' 4' 5' 4);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.rawMemoryDisplay.Margin = new System.Windows.Forms.Padding(5' 4' 5' 4);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.rawMemoryDisplay.Margin = new System.Windows.Forms.Padding(5' 4' 5' 4);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.rawMemoryDisplay.Size = new System.Drawing.Size(465' 238);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.rawMemoryDisplay.Size = new System.Drawing.Size(465' 238);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.rawMemoryDisplay.TabIndex = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 273);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 273);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(65' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(65' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(126' 16);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(126' 16);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(69' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(69' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(621' 27);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(621' 27);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(167' 278);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(167' 278);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOnFire.Location = new System.Drawing.Point(6' 229);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOnFire.Location = new System.Drawing.Point(6' 229);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOnFire.Size = new System.Drawing.Size(60' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOnFire.Size = new System.Drawing.Size(60' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxOnFire.TabIndex = 30;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.labelQueuedInterrupts.Location = new System.Drawing.Point(6' 213);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.labelQueuedInterrupts.Location = new System.Drawing.Point(6' 213);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.labelQueuedInterrupts.Size = new System.Drawing.Size(104' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.labelQueuedInterrupts.Size = new System.Drawing.Size(104' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.labelQueuedInterrupts.TabIndex = 29;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepOver.Location = new System.Drawing.Point(86' 247);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepOver.Location = new System.Drawing.Point(86' 247);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepOver.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepOver.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepOver.TabIndex = 28;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepInto.Location = new System.Drawing.Point(3' 247);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepInto.Location = new System.Drawing.Point(3' 247);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepInto.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepInto.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.buttonStepInto.TabIndex = 27;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxInterruptQueue.Location = new System.Drawing.Point(6' 193);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxInterruptQueue.Location = new System.Drawing.Point(6' 193);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxInterruptQueue.Size = new System.Drawing.Size(100' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxInterruptQueue.Size = new System.Drawing.Size(100' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxInterruptQueue.TabIndex = 26;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterPC.Location = new System.Drawing.Point(24' 144);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterPC.Location = new System.Drawing.Point(24' 144);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterPC.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterPC.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterPC.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterPC.TabIndex = 19;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterIA.Location = new System.Drawing.Point(104' 167);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterIA.Location = new System.Drawing.Point(104' 167);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterIA.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterIA.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterIA.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterIA.TabIndex = 25;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterEX.Location = new System.Drawing.Point(104' 144);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterEX.Location = new System.Drawing.Point(104' 144);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterEX.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterEX.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterEX.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterEX.TabIndex = 23;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterSP.Location = new System.Drawing.Point(24' 167);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterSP.Location = new System.Drawing.Point(24' 167);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterSP.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterSP.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterSP.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterSP.TabIndex = 21;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point(83' 170);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label15.Location = new System.Drawing.Point(83' 170);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size(23' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label15.Size = new System.Drawing.Size(23' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label15.TabIndex = 24;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(80' 147);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label14.Location = new System.Drawing.Point(80' 147);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(36' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label14.Size = new System.Drawing.Size(36' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label14.TabIndex = 22;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label13.Location = new System.Drawing.Point(0' 170);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(26' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label13.Size = new System.Drawing.Size(26' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label13.TabIndex = 20;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label12.Location = new System.Drawing.Point(0' 147);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(39' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label12.Size = new System.Drawing.Size(39' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label12.TabIndex = 18;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterJ.Location = new System.Drawing.Point(104' 121);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterJ.Location = new System.Drawing.Point(104' 121);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterJ.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterJ.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterJ.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterJ.TabIndex = 17;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(86' 124);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(86' 124);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label11.TabIndex = 16;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterI.Location = new System.Drawing.Point(24' 121);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterI.Location = new System.Drawing.Point(24' 121);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterI.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterI.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterI.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterI.TabIndex = 15;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(6' 124);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(6' 124);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 14;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterZ.Location = new System.Drawing.Point(104' 98);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterZ.Location = new System.Drawing.Point(104' 98);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterZ.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterZ.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterZ.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterZ.TabIndex = 13;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(86' 101);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(86' 101);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 12;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterC.Location = new System.Drawing.Point(24' 98);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterC.Location = new System.Drawing.Point(24' 98);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterC.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterC.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterC.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterC.TabIndex = 11;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(6' 101);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(6' 101);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 10;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterY.Location = new System.Drawing.Point(104' 75);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterY.Location = new System.Drawing.Point(104' 75);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterY.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterY.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterY.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterY.TabIndex = 9;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(86' 78);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(86' 78);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 8;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterB.Location = new System.Drawing.Point(24' 75);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterB.Location = new System.Drawing.Point(24' 75);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterB.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterB.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterB.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterB.TabIndex = 7;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 78);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(6' 78);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 6;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterX.Location = new System.Drawing.Point(104' 52);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterX.Location = new System.Drawing.Point(104' 52);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterX.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterX.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterX.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterX.TabIndex = 5;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(86' 55);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(86' 55);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterA.Location = new System.Drawing.Point(24' 52);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterA.Location = new System.Drawing.Point(24' 52);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterA.MaxLength = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterA.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterA.Size = new System.Drawing.Size(57' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.textBoxRegisterA.TabIndex = 3;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(6' 55);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(6' 55);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(20' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 2;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 39);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 39);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(60' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(60' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRunning.Location = new System.Drawing.Point(6' 19);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRunning.Location = new System.Drawing.Point(6' 19);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRunning.Size = new System.Drawing.Size(66' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxRunning.Size = new System.Drawing.Size(66' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(621' 311);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(621' 311);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(167' 279);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(167' 279);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.TabIndex = 2;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxBreakOnInterrupt.Location = new System.Drawing.Point(6' 252);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxBreakOnInterrupt.Location = new System.Drawing.Point(6' 252);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxBreakOnInterrupt.Size = new System.Drawing.Size(111' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxBreakOnInterrupt.Size = new System.Drawing.Size(111' 17);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxBreakOnInterrupt.TabIndex = 2;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.listBoxConnectedDevices.Location = new System.Drawing.Point(6' 32);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.listBoxConnectedDevices.Location = new System.Drawing.Point(6' 32);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.listBoxConnectedDevices.Size = new System.Drawing.Size(155' 212);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.listBoxConnectedDevices.Size = new System.Drawing.Size(155' 212);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(6' 16);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label17.Location = new System.Drawing.Point(6' 16);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(104' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.label17.Size = new System.Drawing.Size(104' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(1010' 24);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(1010' 24);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.TabIndex = 3;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.emulationToolStripMenuItem.Size = new System.Drawing.Size(73' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.emulationToolStripMenuItem.Size = new System.Drawing.Size(73' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stopToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stopToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.resetToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.resetToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.speedToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.speedToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem2.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem2.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem3.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem3.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem4.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem4.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem5.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem5.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.customToolStripMenuItem.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.customToolStripMenuItem.Size = new System.Drawing.Size(116' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.loadToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.loadToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.optionsToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.optionsToolStripMenuItem.Size = new System.Drawing.Size(117' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.breakOnInvalidInstructionToolStripMenuItem.Size = new System.Drawing.Size(218' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.breakOnInvalidInstructionToolStripMenuItem.Size = new System.Drawing.Size(218' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.debugToolStripMenuItem.Size = new System.Drawing.Size(54' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.debugToolStripMenuItem.Size = new System.Drawing.Size(54' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stepIntoToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stepIntoToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stepOverToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.stepOverToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.loadListingToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.loadListingToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.defineValueToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.defineValueToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.reloadToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.reloadToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.memoryToolStripMenuItem.Size = new System.Drawing.Size(64' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.memoryToolStripMenuItem.Size = new System.Drawing.Size(64' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.gotoAddressToolStripMenuItem.Size = new System.Drawing.Size(187' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.gotoAddressToolStripMenuItem.Size = new System.Drawing.Size(187' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.resetToolStripMenuItem1.Size = new System.Drawing.Size(187' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.resetToolStripMenuItem1.Size = new System.Drawing.Size(187' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.settingsToolStripMenuItem.Size = new System.Drawing.Size(61' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.settingsToolStripMenuItem.Size = new System.Drawing.Size(61' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.keyboardToolStripMenuItem.Size = new System.Drawing.Size(124' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.keyboardToolStripMenuItem.Size = new System.Drawing.Size(124' 22);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Location = new System.Drawing.Point(794' 27);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Location = new System.Drawing.Point(794' 27);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Size = new System.Drawing.Size(204' 563);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.Size = new System.Drawing.Size(204' 563);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.propertyGrid1.TabIndex = 4;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.warningLabel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(251))))' ((int)(((byte)(251))))' ((int)(((byte)(251)))));
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.warningLabel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(251))))' ((int)(((byte)(251))))' ((int)(((byte)(251)))));
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.warningLabel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(251))))' ((int)(((byte)(251))))' ((int)(((byte)(251)))));
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.warningLabel.Location = new System.Drawing.Point(777' 2);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.warningLabel.Location = new System.Drawing.Point(777' 2);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.warningLabel.Size = new System.Drawing.Size(204' 19);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.warningLabel.Size = new System.Drawing.Size(204' 19);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.warningLabel.TabIndex = 5;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(251))))' ((int)(((byte)(251))))' ((int)(((byte)(251)))));
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(251))))' ((int)(((byte)(251))))' ((int)(((byte)(251)))));
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(251))))' ((int)(((byte)(251))))' ((int)(((byte)(251)))));
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(982' 2);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(982' 2);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(16' 16);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(16' 16);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.TabIndex = 6;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.cycleCountLabel.Location = new System.Drawing.Point(69' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.cycleCountLabel.Location = new System.Drawing.Point(69' 20);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.cycleCountLabel.Size = new System.Drawing.Size(50' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.cycleCountLabel.Size = new System.Drawing.Size(50' 13);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.cycleCountLabel.TabIndex = 31;
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1010' 602);
Magic Number,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1010' 602);
Magic Number,Lettuce,DeferredGifEncoder,C:\repos\SirCmpwn_Tomato\Lettuce\DeferredGifEncoder.cs,FinishAsync,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      GifEncoder.Start(fileName);                      GifEncoder.SetDelay(16); // 60 Hz                      GifEncoder.SetRepeat(0); // Always repeat                      foreach (var frame in frames)                          GifEncoder.AddFrame(frame);                      GifEncoder.Finish();                      Encoding = false;                      if (completed != null)                          completed();                  });
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(38' 13);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(38' 13);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 25);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 25);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(170' 20);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(170' 20);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 48);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 48);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(74' 13);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(74' 13);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(12' 64);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(12' 64);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.MaxLength = 4;
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(170' 20);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(170' 20);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.TabIndex = 3;
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(107' 90);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(107' 90);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 4;
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(194' 122);
Magic Number,Lettuce,DefineValueForm,C:\repos\SirCmpwn_Tomato\Lettuce\DefineValueForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(194' 122);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay,The following statement contains a magic number: vScrollBar.Maximum = 65535;
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_MouseDoubleClick,The following statement contains a magic number: Font font = new Font(FontFamily.GenericMonospace' 12);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_MouseDoubleClick,The following statement contains a magic number: int offset = e.Y / (TextRenderer.MeasureText("0000"' font).Height + 2);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: Font font = new Font(FontFamily.GenericMonospace' 12);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: Disassembly = disassembler.FastDisassemble(ref CPU.Memory' SelectedAddress' (ushort)(SelectedAddress + 100));
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: bool setLast = false' dark = SelectedAddress % 2 == 0;
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += baseFontSize.Height + 2)              {                  string address = Debugger.GetHexString(Disassembly[index].Address' 4) + ": ";                  addressFontSize = TextRenderer.MeasureText(address' font);                  Brush foreground = Brushes.Black;                  if (dark)                      e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255' 230' 230' 230))' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                  dark = !dark;                    int breakPointCount = CPU.Breakpoints.Where(b => b.Address == Disassembly[index].Address).Count();                    if (breakPointCount != 0)                  {                      e.Graphics.FillRectangle(Brushes.DarkRed' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.White;                  }                  if (Disassembly[index].Address == CPU.PC)                  {                      if (breakPointCount != 0)                      {                          if (Disassembly[index].IsLabel)                              e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height));                          else                          {                              if (index != 0)                              {                                  if (Disassembly[index - 1].IsLabel)                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height));                                  else                                      e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                              }                              else                                  e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y + 2' this.Width' addressFontSize.Height - 2));                          }                      }                      else                          e.Graphics.FillRectangle(Brushes.Yellow' new Rectangle(0' y' this.Width' addressFontSize.Height + 2));                      foreground = Brushes.Black;                  }                    e.Graphics.DrawString(address' font' Brushes.Gray' 2' y);                    if (!Debugger.KnownCode.ContainsKey(Disassembly[index].Address) || Disassembly[index].IsLabel)                      e.Graphics.DrawString(Disassembly[index].Code' font' foreground' 2 + addressFontSize.Width + 3' y);                  else                      e.Graphics.DrawString(Debugger.KnownCode[Disassembly[index].Address]' font' foreground'                          2 + addressFontSize.Width + 3' y );                    if(y + addressFontSize.Height > this.Height)                  {                      setLast = true;                      EndAddress = Disassembly[index].Address;                  }                    index++;              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,DisassemblyDisplay_Paint,The following statement contains a magic number: if (IsMouseWithin && !CPU.IsRunning) // TODO: Make this more versatile' probably integrate with organic              {                  int x = MouseLocation.X;                  for( int y = 0; y < this.Height; y += baseFontSize.Height + 2 )                  {                      if (Disassembly[index].IsLabel || Disassembly[index].Code.StartsWith("DAT"))                      {                          index++;                          continue;                      }                      Size size = TextRenderer.MeasureText("0000: " + Disassembly[index].Code' font);                      size.Width += 5;                      if (new Rectangle(new Point(0' y)' size).IntersectsWith(                          new Rectangle(new Point(x' MouseLocation.Y)' new Size(1' 1))))                      {                          ushort oldPC = CPU.PC;                          ushort oldSP = CPU.SP;                          CPU.PC = (ushort)(Disassembly[index].Address + 1);                          int valueA = 0' valueB = 0;                          ushort valueAcalc = CPU.Get(Disassembly[index].ValueA);                          ushort valueBcalc = CPU.Get(Disassembly[index].ValueB);                          if (Disassembly[index].Opcode == 0)                          {                              valueB = int.MaxValue;                              valueA = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                          }                          else                          {                              valueB = TextRenderer.MeasureText("0000: " + Disassembly[index].OpcodeText + " "' font).Width + 4;                              valueA = valueB + TextRenderer.MeasureText(Disassembly[index].ValueBText + "' "' font).Width - 8;                          }                          if (x >= valueB && x <= valueA)                          {                              // hovering over value B                              if (Disassembly[index].ValueB <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueB' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueBText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueBText' font' Brushes.Black' new PointF(valueB' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueBText + " = 0x" + Debugger.GetHexString(valueBcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueB + (TextRenderer.MeasureText(Disassembly[index].ValueBText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          else if (x >= valueA)                          {                              // hovering over value A                              if (Disassembly[index].ValueA <= 0x1E)                              {                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(valueA' y)'                                      TextRenderer.MeasureText(Disassembly[index].ValueAText' font)));                                  e.Graphics.DrawString(Disassembly[index].ValueAText' font' Brushes.Black' new PointF(valueA' y));                                  int locationY = y + size.Height;                                  if (this.Height / 2 < y)                                      locationY = y - size.Height;                                  string text = Disassembly[index].ValueAText + " = 0x" + Debugger.GetHexString(valueAcalc' 4);                                  Size hoverSize = TextRenderer.MeasureText(text' font);                                  e.Graphics.FillRectangle(Brushes.LightBlue' new Rectangle(new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY)' hoverSize));                                  e.Graphics.DrawString(text' font' Brushes.Black' new Point(                                      (valueA + (TextRenderer.MeasureText(Disassembly[index].ValueAText' font).Width / 2)) -                                      (hoverSize.Width / 2)' locationY));                              }                          }                          CPU.PC = oldPC;                          CPU.SP = oldSP;                          break;                      }                      index++;                  }              }
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,setPCToAddressToolStripMenuItem_Click,The following statement contains a magic number: Font font = new Font(FontFamily.GenericMonospace' 12);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,setPCToAddressToolStripMenuItem_Click,The following statement contains a magic number: int offset = MouseLocation.Y / (TextRenderer.MeasureText("0"' font).Height + 2);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(168' 48);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(168' 48);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.gotoAddressToolStripMenuItem.Size = new System.Drawing.Size(167' 22);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.gotoAddressToolStripMenuItem.Size = new System.Drawing.Size(167' 22);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.setPCToAddressToolStripMenuItem.Size = new System.Drawing.Size(167' 22);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.setPCToAddressToolStripMenuItem.Size = new System.Drawing.Size(167' 22);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.vScrollBar.Location = new System.Drawing.Point(465' 0);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.vScrollBar.Size = new System.Drawing.Size(17' 202);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.vScrollBar.Size = new System.Drawing.Size(17' 202);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(482' 202);
Magic Number,Lettuce,DisassemblyDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\DisassemblyDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(482' 202);
Magic Number,Lettuce,Extensions,C:\repos\SirCmpwn_Tomato\Lettuce\Extensions.cs,Unescape,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (value[i] != '\\')                      newvalue += value[i];                  else                  {                      if (i + 1 == value.Length)                          return null;                      switch (value[i + 1])                      {                          case 'a':                              newvalue += "\a";                              break;                          case 'b':                              newvalue += "\b";                              break;                          case 'f':                              newvalue += "\f";                              break;                          case 'n':                              newvalue += "\n";                              break;                          case 'r':                              newvalue += "\r";                              break;                          case 't':                              newvalue += "\t";                              break;                          case 'v':                              newvalue += "\v";                              break;                          case '\'':                              newvalue += "\'";                              break;                          case '"':                              newvalue += "\"";                              break;                          case '\\':                              newvalue += "\\";                              break;                          case '0':                              newvalue += "\0";                              break;                          case 'x':                              if (i + 3 > value.Length)                                  return null;                              string hex = value[i + 2].ToString() + value[i + 3].ToString();                              i += 2;                              try                              {                                  newvalue += (char)Encoding.ASCII.GetBytes(new char[] { (char)byte.Parse(hex' NumberStyles.HexNumber) })[0];                              }                              catch                              {                                  return null;                              }                              break;                          default:                              return null;                      }                      i++;                  }              }
Magic Number,Lettuce,Extensions,C:\repos\SirCmpwn_Tomato\Lettuce\Extensions.cs,Unescape,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (value[i] != '\\')                      newvalue += value[i];                  else                  {                      if (i + 1 == value.Length)                          return null;                      switch (value[i + 1])                      {                          case 'a':                              newvalue += "\a";                              break;                          case 'b':                              newvalue += "\b";                              break;                          case 'f':                              newvalue += "\f";                              break;                          case 'n':                              newvalue += "\n";                              break;                          case 'r':                              newvalue += "\r";                              break;                          case 't':                              newvalue += "\t";                              break;                          case 'v':                              newvalue += "\v";                              break;                          case '\'':                              newvalue += "\'";                              break;                          case '"':                              newvalue += "\"";                              break;                          case '\\':                              newvalue += "\\";                              break;                          case '0':                              newvalue += "\0";                              break;                          case 'x':                              if (i + 3 > value.Length)                                  return null;                              string hex = value[i + 2].ToString() + value[i + 3].ToString();                              i += 2;                              try                              {                                  newvalue += (char)Encoding.ASCII.GetBytes(new char[] { (char)byte.Parse(hex' NumberStyles.HexNumber) })[0];                              }                              catch                              {                                  return null;                              }                              break;                          default:                              return null;                      }                      i++;                  }              }
Magic Number,Lettuce,Extensions,C:\repos\SirCmpwn_Tomato\Lettuce\Extensions.cs,Unescape,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (value[i] != '\\')                      newvalue += value[i];                  else                  {                      if (i + 1 == value.Length)                          return null;                      switch (value[i + 1])                      {                          case 'a':                              newvalue += "\a";                              break;                          case 'b':                              newvalue += "\b";                              break;                          case 'f':                              newvalue += "\f";                              break;                          case 'n':                              newvalue += "\n";                              break;                          case 'r':                              newvalue += "\r";                              break;                          case 't':                              newvalue += "\t";                              break;                          case 'v':                              newvalue += "\v";                              break;                          case '\'':                              newvalue += "\'";                              break;                          case '"':                              newvalue += "\"";                              break;                          case '\\':                              newvalue += "\\";                              break;                          case '0':                              newvalue += "\0";                              break;                          case 'x':                              if (i + 3 > value.Length)                                  return null;                              string hex = value[i + 2].ToString() + value[i + 3].ToString();                              i += 2;                              try                              {                                  newvalue += (char)Encoding.ASCII.GetBytes(new char[] { (char)byte.Parse(hex' NumberStyles.HexNumber) })[0];                              }                              catch                              {                                  return null;                              }                              break;                          default:                              return null;                      }                      i++;                  }              }
Magic Number,Lettuce,Extensions,C:\repos\SirCmpwn_Tomato\Lettuce\Extensions.cs,Unescape,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)              {                  if (value[i] != '\\')                      newvalue += value[i];                  else                  {                      if (i + 1 == value.Length)                          return null;                      switch (value[i + 1])                      {                          case 'a':                              newvalue += "\a";                              break;                          case 'b':                              newvalue += "\b";                              break;                          case 'f':                              newvalue += "\f";                              break;                          case 'n':                              newvalue += "\n";                              break;                          case 'r':                              newvalue += "\r";                              break;                          case 't':                              newvalue += "\t";                              break;                          case 'v':                              newvalue += "\v";                              break;                          case '\'':                              newvalue += "\'";                              break;                          case '"':                              newvalue += "\"";                              break;                          case '\\':                              newvalue += "\\";                              break;                          case '0':                              newvalue += "\0";                              break;                          case 'x':                              if (i + 3 > value.Length)                                  return null;                              string hex = value[i + 2].ToString() + value[i + 3].ToString();                              i += 2;                              try                              {                                  newvalue += (char)Encoding.ASCII.GetBytes(new char[] { (char)byte.Parse(hex' NumberStyles.HexNumber) })[0];                              }                              catch                              {                                  return null;                              }                              break;                          default:                              return null;                      }                      i++;                  }              }
Magic Number,Lettuce,GenericKeyboardWindow,C:\repos\SirCmpwn_Tomato\Lettuce\GenericKeyboardWindow.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(340' 118);
Magic Number,Lettuce,GenericKeyboardWindow,C:\repos\SirCmpwn_Tomato\Lettuce\GenericKeyboardWindow.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(340' 118);
Magic Number,Lettuce,GenericKeyboardWindow,C:\repos\SirCmpwn_Tomato\Lettuce\GenericKeyboardWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(340' 118);
Magic Number,Lettuce,GenericKeyboardWindow,C:\repos\SirCmpwn_Tomato\Lettuce\GenericKeyboardWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(340' 118);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,GoToAddressForm,The following statement contains a magic number: textBox1.Text = Debugger.GetHexString(initialValue' 4);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(68' 51);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(68' 51);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 25);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 25);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.MaxLength = 1024;
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(131' 20);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(131' 20);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(48' 13);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(48' 13);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(150' 81);
Magic Number,Lettuce,GoToAddressForm,C:\repos\SirCmpwn_Tomato\Lettuce\GoToAddressForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(150' 81);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(177' 20);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(177' 20);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(13' 29);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(13' 29);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(92' 13);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(92' 13);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.availableListBox.Location = new System.Drawing.Point(12' 45);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.availableListBox.Location = new System.Drawing.Point(12' 45);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.availableListBox.Size = new System.Drawing.Size(177' 199);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.availableListBox.Size = new System.Drawing.Size(177' 199);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.availableListBox.TabIndex = 2;
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.addDeviceButton.Location = new System.Drawing.Point(195' 110);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.addDeviceButton.Location = new System.Drawing.Point(195' 110);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.addDeviceButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.addDeviceButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.addDeviceButton.TabIndex = 3;
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.removeDeviceButton.Location = new System.Drawing.Point(195' 139);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.removeDeviceButton.Location = new System.Drawing.Point(195' 139);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.removeDeviceButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.removeDeviceButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.removeDeviceButton.TabIndex = 4;
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.selectedListBox.Location = new System.Drawing.Point(276' 45);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.selectedListBox.Location = new System.Drawing.Point(276' 45);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.selectedListBox.Size = new System.Drawing.Size(175' 199);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.selectedListBox.Size = new System.Drawing.Size(175' 199);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.selectedListBox.TabIndex = 5;
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveUpButton.Location = new System.Drawing.Point(457' 45);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveUpButton.Location = new System.Drawing.Point(457' 45);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveUpButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveUpButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveUpButton.TabIndex = 6;
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveDownButton.Location = new System.Drawing.Point(457' 74);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveDownButton.Location = new System.Drawing.Point(457' 74);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveDownButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveDownButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.moveDownButton.TabIndex = 7;
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point(457' 221);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point(457' 221);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button5.TabIndex = 8;
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(273' 29);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(273' 29);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(88' 13);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(88' 13);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 9;
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.saveDevicesCheckBox.Location = new System.Drawing.Point(457' 198);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.saveDevicesCheckBox.Location = new System.Drawing.Point(457' 198);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.saveDevicesCheckBox.Size = new System.Drawing.Size(77' 17);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.saveDevicesCheckBox.Size = new System.Drawing.Size(77' 17);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.saveDevicesCheckBox.TabIndex = 10;
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(540' 256);
Magic Number,Lettuce,HardwareConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\HardwareConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(540' 256);
Magic Number,Lettuce,INIFile,C:\repos\SirCmpwn_Tomato\Lettuce\INIFile.cs,Read,The following statement contains a magic number: foreach (var rawLine in rawLines)              {                  var line = rawLine.TrimEnd();                  if (line.Length == 0)                  {                      // empty line                      lines.Add(new INILine(null' null' null' null));                      continue;                  }                  string comment = null;                    if (line[0] == ';') // ; asdasd                  {                      lines.Add(new INILine(null' null' null' line.Substring(1)));                      continue;                  }                  if (line.Contains(';')) // comment at the end?                  {                      var parts = line.Split(new[] { ';' }' 2);                      line = parts[0].Trim();                      comment = parts[1];                  }                    if (line[0] == '[') // [asd]    or    [asd] ; foo                  {                      currentSection = line.Substring(1' line.Length - 2);                      lines.Add(new INILine(currentSection' null' null' comment));                  }                  else // key=value      or      key=value ; foo                  {                      var parts = line.Split(new[] { '=' }' 2);                      if (parts.Length != 2)                          continue;                      lines.Add(new INILine(currentSection' parts[0]' parts[1]' comment));                  }              }
Magic Number,Lettuce,INIFile,C:\repos\SirCmpwn_Tomato\Lettuce\INIFile.cs,Read,The following statement contains a magic number: foreach (var rawLine in rawLines)              {                  var line = rawLine.TrimEnd();                  if (line.Length == 0)                  {                      // empty line                      lines.Add(new INILine(null' null' null' null));                      continue;                  }                  string comment = null;                    if (line[0] == ';') // ; asdasd                  {                      lines.Add(new INILine(null' null' null' line.Substring(1)));                      continue;                  }                  if (line.Contains(';')) // comment at the end?                  {                      var parts = line.Split(new[] { ';' }' 2);                      line = parts[0].Trim();                      comment = parts[1];                  }                    if (line[0] == '[') // [asd]    or    [asd] ; foo                  {                      currentSection = line.Substring(1' line.Length - 2);                      lines.Add(new INILine(currentSection' null' null' comment));                  }                  else // key=value      or      key=value ; foo                  {                      var parts = line.Split(new[] { '=' }' 2);                      if (parts.Length != 2)                          continue;                      lines.Add(new INILine(currentSection' parts[0]' parts[1]' comment));                  }              }
Magic Number,Lettuce,INIFile,C:\repos\SirCmpwn_Tomato\Lettuce\INIFile.cs,Read,The following statement contains a magic number: foreach (var rawLine in rawLines)              {                  var line = rawLine.TrimEnd();                  if (line.Length == 0)                  {                      // empty line                      lines.Add(new INILine(null' null' null' null));                      continue;                  }                  string comment = null;                    if (line[0] == ';') // ; asdasd                  {                      lines.Add(new INILine(null' null' null' line.Substring(1)));                      continue;                  }                  if (line.Contains(';')) // comment at the end?                  {                      var parts = line.Split(new[] { ';' }' 2);                      line = parts[0].Trim();                      comment = parts[1];                  }                    if (line[0] == '[') // [asd]    or    [asd] ; foo                  {                      currentSection = line.Substring(1' line.Length - 2);                      lines.Add(new INILine(currentSection' null' null' comment));                  }                  else // key=value      or      key=value ; foo                  {                      var parts = line.Split(new[] { '=' }' 2);                      if (parts.Length != 2)                          continue;                      lines.Add(new INILine(currentSection' parts[0]' parts[1]' comment));                  }              }
Magic Number,Lettuce,INIFile,C:\repos\SirCmpwn_Tomato\Lettuce\INIFile.cs,Read,The following statement contains a magic number: foreach (var rawLine in rawLines)              {                  var line = rawLine.TrimEnd();                  if (line.Length == 0)                  {                      // empty line                      lines.Add(new INILine(null' null' null' null));                      continue;                  }                  string comment = null;                    if (line[0] == ';') // ; asdasd                  {                      lines.Add(new INILine(null' null' null' line.Substring(1)));                      continue;                  }                  if (line.Contains(';')) // comment at the end?                  {                      var parts = line.Split(new[] { ';' }' 2);                      line = parts[0].Trim();                      comment = parts[1];                  }                    if (line[0] == '[') // [asd]    or    [asd] ; foo                  {                      currentSection = line.Substring(1' line.Length - 2);                      lines.Add(new INILine(currentSection' null' null' comment));                  }                  else // key=value      or      key=value ; foo                  {                      var parts = line.Split(new[] { '=' }' 2);                      if (parts.Length != 2)                          continue;                      lines.Add(new INILine(currentSection' parts[0]' parts[1]' comment));                  }              }
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl0.Location = new System.Drawing.Point(12' 15);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl0.Location = new System.Drawing.Point(12' 15);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl0.Size = new System.Drawing.Size(52' 13);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl0.Size = new System.Drawing.Size(52' 13);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtStepInto.Location = new System.Drawing.Point(128' 12);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtStepInto.Location = new System.Drawing.Point(128' 12);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtStepInto.Size = new System.Drawing.Size(70' 20);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtStepInto.Size = new System.Drawing.Size(70' 20);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtStepOver.Location = new System.Drawing.Point(128' 38);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtStepOver.Location = new System.Drawing.Point(128' 38);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtStepOver.Size = new System.Drawing.Size(70' 20);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtStepOver.Size = new System.Drawing.Size(70' 20);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtStepOver.TabIndex = 3;
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl1.Location = new System.Drawing.Point(12' 41);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl1.Location = new System.Drawing.Point(12' 41);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl1.Size = new System.Drawing.Size(56' 13);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl1.Size = new System.Drawing.Size(56' 13);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl1.TabIndex = 2;
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtChangeRunning.Location = new System.Drawing.Point(128' 64);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtChangeRunning.Location = new System.Drawing.Point(128' 64);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtChangeRunning.Size = new System.Drawing.Size(70' 20);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtChangeRunning.Size = new System.Drawing.Size(70' 20);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtChangeRunning.TabIndex = 5;
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl2.Location = new System.Drawing.Point(12' 67);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl2.Location = new System.Drawing.Point(12' 67);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl2.Size = new System.Drawing.Size(111' 13);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl2.Size = new System.Drawing.Size(111' 13);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl2.TabIndex = 4;
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoAddr.Location = new System.Drawing.Point(128' 90);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoAddr.Location = new System.Drawing.Point(128' 90);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoAddr.Size = new System.Drawing.Size(70' 20);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoAddr.Size = new System.Drawing.Size(70' 20);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.txtGotoAddr.TabIndex = 7;
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl3.Location = new System.Drawing.Point(12' 93);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl3.Location = new System.Drawing.Point(12' 93);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl3.Size = new System.Drawing.Size(73' 13);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl3.Size = new System.Drawing.Size(73' 13);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: lbl3.TabIndex = 6;
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(12' 123);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(12' 123);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(186' 23);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(186' 23);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.TabIndex = 8;
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(210' 157);
Magic Number,Lettuce,KeyboardConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\KeyboardConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(210' 157);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitClientSize,The following statement contains a magic number: this.ClientSize = new Size(LEM1802.Width * 4 + 20' LEM1802.Height * 4 + 35);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitClientSize,The following statement contains a magic number: this.ClientSize = new Size(LEM1802.Width * 4 + 20' LEM1802.Height * 4 + 35);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitClientSize,The following statement contains a magic number: this.ClientSize = new Size(LEM1802.Width * 4 + 20' LEM1802.Height * 4 + 35);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitClientSize,The following statement contains a magic number: this.ClientSize = new Size(LEM1802.Width * 4 + 20' LEM1802.Height * 4 + 35);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,LEM1802Window,The following statement contains a magic number: timer = new System.Threading.Timer(delegate(object o)                  {                      InvalidateAsync();                  }' null' 16' 16);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,LEM1802Window,The following statement contains a magic number: timer = new System.Threading.Timer(delegate(object o)                  {                      InvalidateAsync();                  }' null' 16' 16);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle(Brushes.White' new Rectangle(0' 0' this.Width' 15));
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine(Pens.Black' new Point(0' 15)' new Point(this.Width' 15));
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine(Pens.Black' new Point(0' 15)' new Point(this.Width' 15));
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage(screen' 10' 25' this.ClientSize.Width - 20' this.ClientSize.Height - 35);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage(screen' 10' 25' this.ClientSize.Width - 20' this.ClientSize.Height - 35);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage(screen' 10' 25' this.ClientSize.Width - 20' this.ClientSize.Height - 35);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawImage(screen' 10' 25' this.ClientSize.Width - 20' this.ClientSize.Height - 35);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(165' 92);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(165' 92);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.takeScreenshotToolStripMenuItem.Size = new System.Drawing.Size(164' 22);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.takeScreenshotToolStripMenuItem.Size = new System.Drawing.Size(164' 22);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.detatchKeyboardToolStripMenuItem.Size = new System.Drawing.Size(164' 22);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.detatchKeyboardToolStripMenuItem.Size = new System.Drawing.Size(164' 22);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.startRecordingToolStripMenuItem.Size = new System.Drawing.Size(164' 22);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.startRecordingToolStripMenuItem.Size = new System.Drawing.Size(164' 22);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(522' 372);
Magic Number,Lettuce,LEM1802Window,C:\repos\SirCmpwn_Tomato\Lettuce\LEM1802Window.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(522' 372);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,browseButton_Click,The following statement contains a magic number: using (Stream stream = File.Open(ofd.FileName' FileMode.Open))              {                  if (stream.Length != 1474560)                  {                      MessageBox.Show("Disk image must be exactly 737'280 words long (1'474'560 bytes).");                      return;                  }                  ushort[] data = new ushort[737280];                  byte[] temp = new byte[2];                  for (int i = 0; i < data.Length; i++)                  {                      stream.Read(temp' 0' 2);                      data[i] = BitConverter.ToUInt16(temp' 0);                  }                  AddImage(data' Path.GetFileName(ofd.FileName));              }
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,browseButton_Click,The following statement contains a magic number: using (Stream stream = File.Open(ofd.FileName' FileMode.Open))              {                  if (stream.Length != 1474560)                  {                      MessageBox.Show("Disk image must be exactly 737'280 words long (1'474'560 bytes).");                      return;                  }                  ushort[] data = new ushort[737280];                  byte[] temp = new byte[2];                  for (int i = 0; i < data.Length; i++)                  {                      stream.Read(temp' 0' 2);                      data[i] = BitConverter.ToUInt16(temp' 0);                  }                  AddImage(data' Path.GetFileName(ofd.FileName));              }
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,browseButton_Click,The following statement contains a magic number: using (Stream stream = File.Open(ofd.FileName' FileMode.Open))              {                  if (stream.Length != 1474560)                  {                      MessageBox.Show("Disk image must be exactly 737'280 words long (1'474'560 bytes).");                      return;                  }                  ushort[] data = new ushort[737280];                  byte[] temp = new byte[2];                  for (int i = 0; i < data.Length; i++)                  {                      stream.Read(temp' 0' 2);                      data[i] = BitConverter.ToUInt16(temp' 0);                  }                  AddImage(data' Path.GetFileName(ofd.FileName));              }
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,browseButton_Click,The following statement contains a magic number: using (Stream stream = File.Open(ofd.FileName' FileMode.Open))              {                  if (stream.Length != 1474560)                  {                      MessageBox.Show("Disk image must be exactly 737'280 words long (1'474'560 bytes).");                      return;                  }                  ushort[] data = new ushort[737280];                  byte[] temp = new byte[2];                  for (int i = 0; i < data.Length; i++)                  {                      stream.Read(temp' 0' 2);                      data[i] = BitConverter.ToUInt16(temp' 0);                  }                  AddImage(data' Path.GetFileName(ofd.FileName));              }
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,addBlankDisk_Click,The following statement contains a magic number: DiskImages.Add(new DiskImage()              {                  Name = "Blank Disk"'                  Data = new ushort[737280]'                  IsBlank = true'                  Writable = true'                  LittleEndian = true              });
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,saveSelectedDiskButton_Click,The following statement contains a magic number: using (Stream stream = File.Create(sfd.FileName))              {                  for (int i = 0; i < disk.Data.Length; i++)                  {                      if (disk.LittleEndian)                          stream.Write(BitConverter.GetBytes(disk.Data[i])' 0' 2);                      else                          stream.Write(BitConverter.GetBytes(disk.Data[i]).Reverse().ToArray()' 0' 2);                  }              }
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,saveSelectedDiskButton_Click,The following statement contains a magic number: using (Stream stream = File.Create(sfd.FileName))              {                  for (int i = 0; i < disk.Data.Length; i++)                  {                      if (disk.LittleEndian)                          stream.Write(BitConverter.GetBytes(disk.Data[i])' 0' 2);                      else                          stream.Write(BitConverter.GetBytes(disk.Data[i]).Reverse().ToArray()' 0' 2);                  }              }
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(202' 20);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(202' 20);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 29);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 29);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(80' 13);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(80' 13);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point(16' 45);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point(16' 45);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size(198' 160);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size(198' 160);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.TabIndex = 2;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.removeButton.Location = new System.Drawing.Point(16' 210);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.removeButton.Location = new System.Drawing.Point(16' 210);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.removeButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.removeButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.removeButton.TabIndex = 3;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Location = new System.Drawing.Point(139' 210);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Location = new System.Drawing.Point(139' 210);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.TabIndex = 4;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(220' 92);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(220' 92);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(90' 13);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(90' 13);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 5;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.imageNameLabel.Location = new System.Drawing.Point(220' 105);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.imageNameLabel.Location = new System.Drawing.Point(220' 105);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.imageNameLabel.Size = new System.Drawing.Size(74' 13);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.imageNameLabel.Size = new System.Drawing.Size(74' 13);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.imageNameLabel.TabIndex = 6;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.insertDiskButton.Location = new System.Drawing.Point(220' 154);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.insertDiskButton.Location = new System.Drawing.Point(220' 154);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.insertDiskButton.Size = new System.Drawing.Size(151' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.insertDiskButton.Size = new System.Drawing.Size(151' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.insertDiskButton.TabIndex = 7;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.ejectButton.Location = new System.Drawing.Point(220' 125);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.ejectButton.Location = new System.Drawing.Point(220' 125);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.ejectButton.Size = new System.Drawing.Size(151' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.ejectButton.Size = new System.Drawing.Size(151' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.ejectButton.TabIndex = 8;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.writeProtectedCheckBox.Location = new System.Drawing.Point(220' 45);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.writeProtectedCheckBox.Location = new System.Drawing.Point(220' 45);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.writeProtectedCheckBox.Size = new System.Drawing.Size(100' 17);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.writeProtectedCheckBox.Size = new System.Drawing.Size(100' 17);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.writeProtectedCheckBox.TabIndex = 9;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.bigEndianCheckBox.Location = new System.Drawing.Point(220' 68);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.bigEndianCheckBox.Location = new System.Drawing.Point(220' 68);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.bigEndianCheckBox.Size = new System.Drawing.Size(77' 17);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.bigEndianCheckBox.Size = new System.Drawing.Size(77' 17);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.bigEndianCheckBox.TabIndex = 10;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(220' 182);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(220' 182);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(151' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(151' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 11;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.saveSelectedDiskButton.Location = new System.Drawing.Point(220' 210);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.saveSelectedDiskButton.Location = new System.Drawing.Point(220' 210);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.saveSelectedDiskButton.Size = new System.Drawing.Size(151' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.saveSelectedDiskButton.Size = new System.Drawing.Size(151' 23);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.saveSelectedDiskButton.TabIndex = 12;
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(373' 236);
Magic Number,Lettuce,M35FDWindow,C:\repos\SirCmpwn_Tomato\Lettuce\M35FDWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(373' 236);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 9);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(164' 20);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(164' 20);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(13' 29);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(13' 29);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(260' 45);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(260' 45);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 77);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 77);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(180' 20);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(180' 20);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 2;
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Location = new System.Drawing.Point(198' 75);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Location = new System.Drawing.Point(198' 75);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.browseButton.TabIndex = 3;
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Location = new System.Drawing.Point(16' 107);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Location = new System.Drawing.Point(16' 107);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Size = new System.Drawing.Size(84' 17);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.Size = new System.Drawing.Size(84' 17);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.checkBox1.TabIndex = 4;
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(198' 103);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(198' 103);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 5;
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(117' 103);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(117' 103);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(75' 23);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 6;
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(285' 134);
Magic Number,Lettuce,MemoryConfiguration,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryConfiguration.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(285' 134);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay,The following statement contains a magic number: wordsWide = 8;
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay,The following statement contains a magic number: wordsWide = 8;
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: Font font = new Font(FontFamily.GenericMonospace' 12);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: bool dark = (int)(SelectedAddress / wordsWide) % 2 == 0;
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: SolidBrush lightGreyBrush = new SolidBrush(Color.FromArgb(255' 230' 230' 230));
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: SolidBrush lightGreyBrush = new SolidBrush(Color.FromArgb(255' 230' 230' 230));
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: SolidBrush lightGreyBrush = new SolidBrush(Color.FromArgb(255' 230' 230' 230));
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: SolidBrush lightGreyBrush = new SolidBrush(Color.FromArgb(255' 230' 230' 230));
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += cell.Height + 2)              {                  if (dark)                      e.Graphics.FillRectangle(lightGreyBrush' 0' y' Width' cell.Height);                  dark = !dark;                    e.Graphics.DrawString(Debugger.GetHexString(address' 4) + ":"' font' greyBrush' 2' y);                  wordsWide = 0;                  for (int x = 4 + gutter.Width; x < Width; )                  {                      string value = Debugger.GetHexString(CPU.Memory[address]' 4);                      Size size = TextRenderer.MeasureText(value' font);                      if (x + size.Width < Width)                      {                          if (CPU.SP == address && AsStack)                              e.Graphics.FillRectangle(blueBrush' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          if (outlinedAddress == address && !AsStack)                              e.Graphics.DrawRectangle(blackPen' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          e.Graphics.DrawString(value' font' blackBrush' x' y);                          address++;                          wordsWide++;                      }                      x += size.Width;                  }              }
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += cell.Height + 2)              {                  if (dark)                      e.Graphics.FillRectangle(lightGreyBrush' 0' y' Width' cell.Height);                  dark = !dark;                    e.Graphics.DrawString(Debugger.GetHexString(address' 4) + ":"' font' greyBrush' 2' y);                  wordsWide = 0;                  for (int x = 4 + gutter.Width; x < Width; )                  {                      string value = Debugger.GetHexString(CPU.Memory[address]' 4);                      Size size = TextRenderer.MeasureText(value' font);                      if (x + size.Width < Width)                      {                          if (CPU.SP == address && AsStack)                              e.Graphics.FillRectangle(blueBrush' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          if (outlinedAddress == address && !AsStack)                              e.Graphics.DrawRectangle(blackPen' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          e.Graphics.DrawString(value' font' blackBrush' x' y);                          address++;                          wordsWide++;                      }                      x += size.Width;                  }              }
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += cell.Height + 2)              {                  if (dark)                      e.Graphics.FillRectangle(lightGreyBrush' 0' y' Width' cell.Height);                  dark = !dark;                    e.Graphics.DrawString(Debugger.GetHexString(address' 4) + ":"' font' greyBrush' 2' y);                  wordsWide = 0;                  for (int x = 4 + gutter.Width; x < Width; )                  {                      string value = Debugger.GetHexString(CPU.Memory[address]' 4);                      Size size = TextRenderer.MeasureText(value' font);                      if (x + size.Width < Width)                      {                          if (CPU.SP == address && AsStack)                              e.Graphics.FillRectangle(blueBrush' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          if (outlinedAddress == address && !AsStack)                              e.Graphics.DrawRectangle(blackPen' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          e.Graphics.DrawString(value' font' blackBrush' x' y);                          address++;                          wordsWide++;                      }                      x += size.Width;                  }              }
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += cell.Height + 2)              {                  if (dark)                      e.Graphics.FillRectangle(lightGreyBrush' 0' y' Width' cell.Height);                  dark = !dark;                    e.Graphics.DrawString(Debugger.GetHexString(address' 4) + ":"' font' greyBrush' 2' y);                  wordsWide = 0;                  for (int x = 4 + gutter.Width; x < Width; )                  {                      string value = Debugger.GetHexString(CPU.Memory[address]' 4);                      Size size = TextRenderer.MeasureText(value' font);                      if (x + size.Width < Width)                      {                          if (CPU.SP == address && AsStack)                              e.Graphics.FillRectangle(blueBrush' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          if (outlinedAddress == address && !AsStack)                              e.Graphics.DrawRectangle(blackPen' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          e.Graphics.DrawString(value' font' blackBrush' x' y);                          address++;                          wordsWide++;                      }                      x += size.Width;                  }              }
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += cell.Height + 2)              {                  if (dark)                      e.Graphics.FillRectangle(lightGreyBrush' 0' y' Width' cell.Height);                  dark = !dark;                    e.Graphics.DrawString(Debugger.GetHexString(address' 4) + ":"' font' greyBrush' 2' y);                  wordsWide = 0;                  for (int x = 4 + gutter.Width; x < Width; )                  {                      string value = Debugger.GetHexString(CPU.Memory[address]' 4);                      Size size = TextRenderer.MeasureText(value' font);                      if (x + size.Width < Width)                      {                          if (CPU.SP == address && AsStack)                              e.Graphics.FillRectangle(blueBrush' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          if (outlinedAddress == address && !AsStack)                              e.Graphics.DrawRectangle(blackPen' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          e.Graphics.DrawString(value' font' blackBrush' x' y);                          address++;                          wordsWide++;                      }                      x += size.Width;                  }              }
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += cell.Height + 2)              {                  if (dark)                      e.Graphics.FillRectangle(lightGreyBrush' 0' y' Width' cell.Height);                  dark = !dark;                    e.Graphics.DrawString(Debugger.GetHexString(address' 4) + ":"' font' greyBrush' 2' y);                  wordsWide = 0;                  for (int x = 4 + gutter.Width; x < Width; )                  {                      string value = Debugger.GetHexString(CPU.Memory[address]' 4);                      Size size = TextRenderer.MeasureText(value' font);                      if (x + size.Width < Width)                      {                          if (CPU.SP == address && AsStack)                              e.Graphics.FillRectangle(blueBrush' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          if (outlinedAddress == address && !AsStack)                              e.Graphics.DrawRectangle(blackPen' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          e.Graphics.DrawString(value' font' blackBrush' x' y);                          address++;                          wordsWide++;                      }                      x += size.Width;                  }              }
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: for (int y = 0; y < this.Height; y += cell.Height + 2)              {                  if (dark)                      e.Graphics.FillRectangle(lightGreyBrush' 0' y' Width' cell.Height);                  dark = !dark;                    e.Graphics.DrawString(Debugger.GetHexString(address' 4) + ":"' font' greyBrush' 2' y);                  wordsWide = 0;                  for (int x = 4 + gutter.Width; x < Width; )                  {                      string value = Debugger.GetHexString(CPU.Memory[address]' 4);                      Size size = TextRenderer.MeasureText(value' font);                      if (x + size.Width < Width)                      {                          if (CPU.SP == address && AsStack)                              e.Graphics.FillRectangle(blueBrush' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          if (outlinedAddress == address && !AsStack)                              e.Graphics.DrawRectangle(blackPen' new Rectangle(x' y' size.Width - 4' size.Height - 1));                          e.Graphics.DrawString(value' font' blackBrush' x' y);                          address++;                          wordsWide++;                      }                      x += size.Width;                  }              }
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_Paint,The following statement contains a magic number: if (wordsWide > 0)                  vScrollBar.Maximum = 65535 / wordsWide;
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_MouseDoubleClick,The following statement contains a magic number: Font font = new Font(FontFamily.GenericMonospace' 12);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_MouseDoubleClick,The following statement contains a magic number: gutter.Width += 2;
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_MouseDoubleClick,The following statement contains a magic number: cell.Height += 2;
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_MouseDoubleClick,The following statement contains a magic number: if (e.X > gutter.Width)              {                  textBox = new TextBox();                  ushort address =(ushort)(                      (e.Y / cell.Height) * wordsWide +                      ((e.X - gutter.Width) / cell.Width)                      + SelectedAddress);                  textBox.Tag = address;                  textBox.KeyDown += textBoxRegisterX_KeyDown;                  textBox.Location = new Point(                      ((e.X - gutter.Width) / cell.Width) * cell.Width + gutter.Width'                      e.Y / cell.Height * cell.Height);                  textBox.Text = Debugger.GetHexString(CPU.Memory[address]' 4);                  textBox.Size = cell;                  textBox.MaxLength = 4;                  this.Controls.Add(textBox);              }
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_MouseDoubleClick,The following statement contains a magic number: if (e.X > gutter.Width)              {                  textBox = new TextBox();                  ushort address =(ushort)(                      (e.Y / cell.Height) * wordsWide +                      ((e.X - gutter.Width) / cell.Width)                      + SelectedAddress);                  textBox.Tag = address;                  textBox.KeyDown += textBoxRegisterX_KeyDown;                  textBox.Location = new Point(                      ((e.X - gutter.Width) / cell.Width) * cell.Width + gutter.Width'                      e.Y / cell.Height * cell.Height);                  textBox.Text = Debugger.GetHexString(CPU.Memory[address]' 4);                  textBox.Size = cell;                  textBox.MaxLength = 4;                  this.Controls.Add(textBox);              }
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_MouseClick,The following statement contains a magic number: gutter.Width += 2;
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,MemoryDisplay_MouseClick,The following statement contains a magic number: cell.Height += 2;
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,editValueToolStripMenuItem_Click,The following statement contains a magic number: MemoryDisplay_MouseDoubleClick(sender' new MouseEventArgs(MouseButtons.Left' 2' MouseLocation.X' MouseLocation.Y' 0));
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,contextMenuStrip1_Opening,The following statement contains a magic number: MemoryDisplay_MouseClick(sender' new MouseEventArgs(MouseButtons.Left' 2' MouseLocation.X' MouseLocation.Y' 0));
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(146' 48);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(146' 48);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.editValueToolStripMenuItem.Size = new System.Drawing.Size(145' 22);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.editValueToolStripMenuItem.Size = new System.Drawing.Size(145' 22);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.gotoAddressToolStripMenuItem.Size = new System.Drawing.Size(145' 22);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.gotoAddressToolStripMenuItem.Size = new System.Drawing.Size(145' 22);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.vScrollBar.Location = new System.Drawing.Point(384' 0);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.vScrollBar.Size = new System.Drawing.Size(17' 170);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.vScrollBar.Size = new System.Drawing.Size(17' 170);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(401' 170);
Magic Number,Lettuce,MemoryDisplay,C:\repos\SirCmpwn_Tomato\Lettuce\MemoryDisplay.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(401' 170);
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,The following statement contains a magic number: if (!string.IsNullOrEmpty(binFile))              {                  lastbinFilepath = binFile;                  // Load binary file                  List<ushort> data = new List<ushort>();                  using (Stream stream = File.OpenRead(binFile))                  {                      for (int i = 0; i < stream.Length; i += 2)                      {                          byte a = (byte)stream.ReadByte();                          byte b = (byte)stream.ReadByte();                          if (littleEndian)                              data.Add((ushort)(a | (b << 8)));                          else                              data.Add((ushort)(b | (a << 8)));                      }                  }                  CPU.FlashMemory(data.ToArray());              }              else                  CPU.IsRunning = false;
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,The following statement contains a magic number: if (!string.IsNullOrEmpty(binFile))              {                  lastbinFilepath = binFile;                  // Load binary file                  List<ushort> data = new List<ushort>();                  using (Stream stream = File.OpenRead(binFile))                  {                      for (int i = 0; i < stream.Length; i += 2)                      {                          byte a = (byte)stream.ReadByte();                          byte b = (byte)stream.ReadByte();                          if (littleEndian)                              data.Add((ushort)(a | (b << 8)));                          else                              data.Add((ushort)(b | (a << 8)));                      }                  }                  CPU.FlashMemory(data.ToArray());              }              else                  CPU.IsRunning = false;
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,The following statement contains a magic number: if (!string.IsNullOrEmpty(binFile))              {                  lastbinFilepath = binFile;                  // Load binary file                  List<ushort> data = new List<ushort>();                  using (Stream stream = File.OpenRead(binFile))                  {                      for (int i = 0; i < stream.Length; i += 2)                      {                          byte a = (byte)stream.ReadByte();                          byte b = (byte)stream.ReadByte();                          if (littleEndian)                              data.Add((ushort)(a | (b << 8)));                          else                              data.Add((ushort)(b | (a << 8)));                      }                  }                  CPU.FlashMemory(data.ToArray());              }              else                  CPU.IsRunning = false;
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,The following statement contains a magic number: if (EnableAutomaticArrangement)              {                  debugger.StartPosition = FormStartPosition.Manual;                  if (RuntimeInfo.IsMacOSX)                      debugger.Location = new Point(0' 22);                  else                      debugger.Location = new Point(0' 0);              }
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,The following statement contains a magic number: screenLocation.Y = debugger.Location.Y + 4;
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,The following statement contains a magic number: screenLocation.X = debugger.Location.X + debugger.Width + 5;
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,The following statement contains a magic number: timer = new System.Threading.Timer(FetchExecute' null' 10' Timeout.Infinite);
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,AddWindow,The following statement contains a magic number: if (screenLocation.Y + window.Height > Screen.PrimaryScreen.WorkingArea.Height) // Wrap excessive windows              {                  screenLocation.Y = 25;                  screenLocation.X += 25;              }
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,AddWindow,The following statement contains a magic number: if (screenLocation.Y + window.Height > Screen.PrimaryScreen.WorkingArea.Height) // Wrap excessive windows              {                  screenLocation.Y = 25;                  screenLocation.X += 25;              }
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,AddWindow,The following statement contains a magic number: if (window.OpenByDefault)              {                  if (EnableAutomaticArrangement)                      window.Location = screenLocation;                  screenLocation.Y += window.Height + 12;                  window.Show();                  window.Invalidate();                  window.Update();                  window.Focus();              }
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,FetchExecute,The following statement contains a magic number: if (!CPU.IsRunning)              {                  timer = new System.Threading.Timer(FetchExecute' null' 10' Timeout.Infinite);                  LastTick = DateTime.Now;                  return;              }
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,FetchExecute,The following statement contains a magic number: CPU.Execute((int)(timeToEmulate.TotalMilliseconds * (CPU.ClockSpeed / 1000)));
Magic Number,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,FetchExecute,The following statement contains a magic number: timer = new System.Threading.Timer(FetchExecute' null' 10' Timeout.Infinite);
Magic Number,Lettuce,RuntimeInfo,C:\repos\SirCmpwn_Tomato\Lettuce\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: IsUnix = (p == 4) || (p == 6) || (p == 128);
Magic Number,Lettuce,RuntimeInfo,C:\repos\SirCmpwn_Tomato\Lettuce\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: IsUnix = (p == 4) || (p == 6) || (p == 128);
Magic Number,Lettuce,RuntimeInfo,C:\repos\SirCmpwn_Tomato\Lettuce\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: IsUnix = (p == 4) || (p == 6) || (p == 128);
Magic Number,Lettuce,RuntimeInfo,C:\repos\SirCmpwn_Tomato\Lettuce\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: Is32Bit = IntPtr.Size == 4;
Magic Number,Lettuce,RuntimeInfo,C:\repos\SirCmpwn_Tomato\Lettuce\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: Is64Bit = IntPtr.Size == 8;
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InvalidateAsync,The following statement contains a magic number: if (InvokeRequired)              {                  try                  {                      InvalidateAsyncDelegate iad = InvalidateAsync;                      Invoke(iad' new object());                  }                  catch { }              }              else              {                  Invalidate(true);                  Update();                  timer.Change(16' System.Threading.Timeout.Infinite); // 60 Hz              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Load,The following statement contains a magic number: Matrix4 projection = Matrix4.CreatePerspectiveFieldOfView((float)Math.PI / 4' Width / (float)Height' 1.0f' 64.0f);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Resize,The following statement contains a magic number: Matrix4 projection = Matrix4.CreatePerspectiveFieldOfView((float)Math.PI / 4' Width / (float)Height' 1.0f' 64.0f);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: Matrix4 modelview = Matrix4.LookAt(new Vector3(0' -4' 0)' Vector3.Zero' Vector3.UnitZ);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (SPED3.TotalVerticies > 0)              {                  GL.Begin(BeginMode.LineStrip);                  var verticies = SPED3.Verticies;                  Vector3 position;                  float flickerIntensity = 0.007f;                    float initialIntensity = 1 - (SPED3.TotalVerticies * flickerIntensity);                  Vector4 alpha = new Vector4(initialIntensity' initialIntensity' initialIntensity' initialIntensity);                    for (int i = brightestIndex; i < SPED3.TotalVerticies + brightestIndex; i++)                  {                      if (SPED3.EnableFlickering)                          GL.Color4(Vector4.Multiply(GetColor(verticies[i % SPED3.TotalVerticies])' alpha));                      else                          GL.Color4(GetColor(verticies[i % SPED3.TotalVerticies]));                      alpha = new Vector4(alpha.X + flickerIntensity' alpha.Y + flickerIntensity'                          alpha.Z + flickerIntensity' alpha.W + flickerIntensity);                      position = new Vector3((float)(verticies[i % SPED3.TotalVerticies].X) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Y) / 256 * 2 - 1'                          (float)(verticies[i % SPED3.TotalVerticies].Z) / 256 * 2 - 1);                      GL.Vertex3(position);                  }                    GL.End();                    if (SPED3.EnableFlickering)                  {                      GL.Begin(BeginMode.Quads);                      position = new Vector3((float)(verticies[brightestIndex].X) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Y) / 256 * 2 - 1'                                             (float)(verticies[brightestIndex].Z) / 256 * 2 - 1);                      GL.Color4(GetColor(verticies[brightestIndex]));                      foreach (var point in cubeVerticies)                          GL.Vertex3(point + position);                      GL.End();                  }                  brightestIndex += (int)(3 * SPED3.FlickerMultipler);                  if (brightestIndex >= SPED3.TotalVerticies)                      brightestIndex = 0;              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (stopwatch.ElapsedMilliseconds < 16)              {                  timer = new System.Threading.Timer(InvalidateAsync' null' 16 - stopwatch.ElapsedMilliseconds'                      System.Threading.Timeout.Infinite); // ~60 Hz              }              else              {                  timer = new System.Threading.Timer(InvalidateAsync' null' 16'                      System.Threading.Timeout.Infinite); // ~60 Hz              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (stopwatch.ElapsedMilliseconds < 16)              {                  timer = new System.Threading.Timer(InvalidateAsync' null' 16 - stopwatch.ElapsedMilliseconds'                      System.Threading.Timeout.Infinite); // ~60 Hz              }              else              {                  timer = new System.Threading.Timer(InvalidateAsync' null' 16'                      System.Threading.Timeout.Infinite); // ~60 Hz              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,glControl1_Paint,The following statement contains a magic number: if (stopwatch.ElapsedMilliseconds < 16)              {                  timer = new System.Threading.Timer(InvalidateAsync' null' 16 - stopwatch.ElapsedMilliseconds'                      System.Threading.Timeout.Infinite); // ~60 Hz              }              else              {                  timer = new System.Threading.Timer(InvalidateAsync' null' 16'                      System.Threading.Timeout.Infinite); // ~60 Hz              }
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.glControl1.Size = new System.Drawing.Size(490' 468);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.glControl1.Size = new System.Drawing.Size(490' 468);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(161' 70);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(161' 70);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.takeScreenshotToolStripMenuItem.Size = new System.Drawing.Size(160' 22);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.takeScreenshotToolStripMenuItem.Size = new System.Drawing.Size(160' 22);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.recordGIFToolStripMenuItem.Size = new System.Drawing.Size(160' 22);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.recordGIFToolStripMenuItem.Size = new System.Drawing.Size(160' 22);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(490' 468);
Magic Number,Lettuce,SPED3Window,C:\repos\SirCmpwn_Tomato\Lettuce\SPED3Window.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(490' 468);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(64' 64);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(64' 64);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(82' 12);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(82' 12);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(165' 20);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(165' 20);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(83' 32);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(83' 32);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(305' 44);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(305' 44);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(12' 79);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(12' 79);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(110' 13);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(110' 13);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 3;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 95);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(12' 95);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(385' 78);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(385' 78);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 4;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(12' 205);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(12' 205);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(122' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(122' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 5;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(140' 176);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.Location = new System.Drawing.Point(140' 176);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(122' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.Size = new System.Drawing.Size(122' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button2.TabIndex = 6;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point(12' 176);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new System.Drawing.Point(12' 176);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size(122' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new System.Drawing.Size(122' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.TabIndex = 7;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point(140' 205);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.Location = new System.Drawing.Point(140' 205);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size(122' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.Size = new System.Drawing.Size(122' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button4.TabIndex = 8;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point(268' 176);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.Location = new System.Drawing.Point(268' 176);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size(129' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.Size = new System.Drawing.Size(129' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button5.TabIndex = 9;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.Location = new System.Drawing.Point(268' 205);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.Location = new System.Drawing.Point(268' 205);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.Size = new System.Drawing.Size(129' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.Size = new System.Drawing.Size(129' 23);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.button6.TabIndex = 10;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRecover.Location = new System.Drawing.Point(210' 79);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRecover.Location = new System.Drawing.Point(210' 79);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRecover.Size = new System.Drawing.Size(187' 13);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRecover.Size = new System.Drawing.Size(187' 13);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRecover.TabIndex = 11;
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(407' 236);
Magic Number,Lettuce,UnhandledExceptionForm,C:\repos\SirCmpwn_Tomato\Lettuce\UnhandledExceptionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(407' 236);
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Magic Number,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following statement contains a magic number: if (HasOperators(expression))              {                  // Recurse                  var parts = SplitExpression(expression);                  if (parts[0] == "" && parts[1] == "-") // Negate                      return (ulong)-(long)Evaluate(parts[2]' cpu);                  if (parts[0] == "" && parts[1] == "~") // NOT                      return ~Evaluate(parts[2]' cpu);                  switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }              }              else              {                  // Interpret value                  if (expression.StartsWith("0x") || expression.StartsWith("$") || expression.EndsWith("h")) // Hex                      return Convert.ToUInt64(expression' 16);                  else if (expression.StartsWith("0b") || expression.StartsWith("%") || expression.EndsWith("b")) // Binary                      return Convert.ToUInt64(expression' 2);                  else if (expression.StartsWith("0o")) // Octal                      return Convert.ToUInt64(expression' 8);                  else                  {                      // Check for number                      bool number = true;                      for (int i = 0; i < expression.Length; i++)                          if (!char.IsNumber(expression[i]))                              number = false;                      if (number) // Decimal                          return Convert.ToUInt64(expression);                      else                      {                          // Look up reference' it's a register or something                          switch (expression.ToUpper())                          {                              case "A":                                  return cpu.A;                              case "B":                                  return cpu.B;                              case "C":                                  return cpu.C;                              case "X":                                  return cpu.X;                              case "Y":                                  return cpu.Y;                              case "Z":                                  return cpu.Z;                              case "I":                                  return cpu.I;                              case "J":                                  return cpu.J;                              case "PC":                                  return cpu.PC;                              case "SP":                                  return cpu.SP;                              case "EX":                                  return cpu.EX;                              case "IA":                                  return cpu.IA;                              default:                                  foreach (var kvp in Debugger.KnownLabels)                                  {                                      if (kvp.Value.ToLower() == expression.ToLower())                                      {                                          return kvp.Key;                                      }                                  }                                  break;                          }                          throw new KeyNotFoundException("Symbol not found: " + expression + ".");                      }                  }              }
Missing Default,Lettuce,Debugger,C:\repos\SirCmpwn_Tomato\Lettuce\Debugger.cs,Debugger_KeyDown,The following switch statement is missing a default case: switch (keybinding.Key)                      {                          case FUNC_STEP_INTO:                              buttonStepInto_Click(sender' e);                              break;                          case FUNC_STEP_OVER:                              buttonStepOver_Click(sender' e);                              break;                          case FUNC_CHANGE_RUNNING:                              checkBoxRunning.Checked = !checkBoxRunning.Checked;                              break;                          case FUNC_GOTO_ADDRESS:                              gotoAddressToolStripMenuItem_Click(sender' e);                              break;                      }
Missing Default,Lettuce,Program,C:\repos\SirCmpwn_Tomato\Lettuce\Program.cs,Main,The following switch statement is missing a default case: switch (arg)                      {                          case "--no-wait":                          case "--nowait":                              CPU.IsRunning = true;                              break;                          case "-c":                          case "--connect":                              if (i + 1 == args.Length || args[i + 1].StartsWith("-"))                              {                                  Console.Error.WriteLine("Missing argument at --connect");                                  break;                              }                              bool gotWrongParam = false;                              string deviceID = args[++i];                              string[] ids = deviceID.Split(''');                              foreach (var dID in ids)                              {                                  uint id;                                  bool foundDevice = false;                                    if (uint.TryParse(dID' NumberStyles.HexNumber' null' out id))                                  {                                      foreach (Device d in PossibleDevices)                                      {                                          if (d.DeviceID == id)                                          {                                              devices.Add((Device) Activator.CreateInstance(d.GetType()));                                              foundDevice = true;                                          }                                      }                                  }                                  else                                  {                                      foreach (Device d in PossibleDevices)                                      {                                          if (d.GetType().Name.ToLower() == dID.ToLower())                                          {                                              devices.Add((Device)Activator.CreateInstance(d.GetType()));                                              foundDevice = true;                                          }                                      }                                  }                                  if (!foundDevice)                                  {                                      Console.Error.WriteLine("Device '" + dID + "' could not be found' continuing..");                                      gotWrongParam = true;                                  }                              }                              if (gotWrongParam)                                  return;                              break;                          case "--skip-pairing":                              pairKeyboards = false;                              break;                          case "--listing":                              var file = args[++i];                              if(!File.Exists(file))                              {                                  Console.Error.WriteLine("Could not find listing-file: " + file);                                  return;                              }                              Debugger.LoadOrganicListing(file);                              break;                          case "--little-endian":                              littleEndian = true;                              break;                          case "--list-devices":                              Console.WriteLine("Got {0} devices:"' PossibleDevices.Count);                              foreach (var device in PossibleDevices)                              {                                  Console.WriteLine("ID: 0x{0:X}' Name: {1}"' device.DeviceID' device.GetType().Name);                              }                              return;                          case "--disable-auto-arrange":                              EnableAutomaticArrangement = false;                              break;                          case "--help":                              Console.WriteLine("Lettuce - a graphical debugger for DCPU-16 programs");                              Console.WriteLine("Options:");                              Console.WriteLine("\t--no-wait             Starts debugging immediately.");                              Console.WriteLine("\t--connect [Devices]   A comma-seperated list of devices to connect");                              Console.WriteLine("\t                      For example: --connect 0x40E41D9D'M35FD");                              Console.WriteLine("\t                      See also: --list-devices");                              Console.WriteLine("\t--list-devices        Lists all available devices and exits.");                              Console.WriteLine("\t--skip-pairing");                              Console.WriteLine("\t--listing [File.lst]  Loads File.lst to make debugging easier.");                              Console.WriteLine("\t--little-endian       Switches to little-endian mode.");                              Console.WriteLine("\t--help                Outputs this and exits.");                              return;                      }
Missing Default,Lettuce,Watch,C:\repos\SirCmpwn_Tomato\Lettuce\Watch.cs,Evaluate,The following switch statement is missing a default case: switch (parts[1]) // Evaluate                  {                      case "+":                          return Evaluate(parts[0]' cpu)                                 +                                 Evaluate(parts[2]' cpu);                      case "-":                          return Evaluate(parts[0]' cpu)                                 -                                 Evaluate(parts[2]' cpu);                      case "*":                          return Evaluate(parts[0]' cpu)                                 *                                 Evaluate(parts[2]' cpu);                      case "/":                          return Evaluate(parts[0]' cpu)                                 /                                 Evaluate(parts[2]' cpu);                      case "%":                          return Evaluate(parts[0]' cpu)                                 %                                 Evaluate(parts[2]' cpu);                      case "<<":                          return Evaluate(parts[0]' cpu)                                 <<                                 (int)Evaluate(parts[2]' cpu);                      case ">>":                          return Evaluate(parts[0]' cpu)                                 >>                                 (int)Evaluate(parts[2]' cpu);                      case "<":                          return Evaluate(parts[0]' cpu)                                 <                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "<=":                          return Evaluate(parts[0]' cpu)                                 <=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">":                          return Evaluate(parts[0]' cpu)                                 >                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case ">=":                          return Evaluate(parts[0]' cpu)                                 >=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "==":                          return Evaluate(parts[0]' cpu)                                 ==                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "!=":                          return Evaluate(parts[0]' cpu)                                 !=                                 Evaluate(parts[2]' cpu) ? 1UL : 0UL;                      case "&":                          return Evaluate(parts[0]' cpu)                                 &                                 Evaluate(parts[2]' cpu);                      case "^":                          return Evaluate(parts[0]' cpu)                                 ^                                 Evaluate(parts[2]' cpu);                      case "|":                          return Evaluate(parts[0]' cpu)                                 |                                 Evaluate(parts[2]' cpu);                      case "&&":                          return (Evaluate(parts[0]' cpu) == 1                                 &&                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                      case "||":                          return (Evaluate(parts[0]' cpu) == 1                                 ||                                 Evaluate(parts[2]' cpu) == 1) ? 1UL : 0UL;                  }
