Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tomato.Hardware,GenericKeyboard,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericKeyboard.cs,GetKeyValue,The method has 85 lines of code.
Long Method,Tomato.Hardware,M35FD,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\M35FD.cs,HandleInterrupt,The method has 63 lines of code.
Complex Method,Tomato.Hardware,GenericClock,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericClock.cs,HandleInterrupt,Cyclomatic complexity of the method is 10
Complex Method,Tomato.Hardware,GenericKeyboard,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericKeyboard.cs,HandleInterrupt,Cyclomatic complexity of the method is 14
Complex Method,Tomato.Hardware,GenericKeyboard,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericKeyboard.cs,GetKeyValue,Cyclomatic complexity of the method is 28
Complex Method,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,HandleInterrupt,Cyclomatic complexity of the method is 16
Complex Method,Tomato.Hardware,M35FD,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\M35FD.cs,HandleInterrupt,Cyclomatic complexity of the method is 39
Complex Method,Tomato.Hardware,M35FD,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\M35FD.cs,Tick,Cyclomatic complexity of the method is 11
Complex Method,Tomato.Hardware,SPC2000,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPC2000.cs,HandleInterrupt,Cyclomatic complexity of the method is 15
Complex Method,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,UpdateRotation,Cyclomatic complexity of the method is 8
Complex Method,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,HandleInterrupt,Cyclomatic complexity of the method is 17
Magic Number,Tomato.Hardware,GenericClock,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericClock.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	Frequency = AttachedCPU.B;  	ElapsedTicks = 0;  	break;  case 1:  	AttachedCPU.C = ElapsedTicks;  	break;  case 2:  	InterruptMessage = AttachedCPU.B;  	break;  }  
Magic Number,Tomato.Hardware,GenericKeyboard,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericKeyboard.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	Buffer.Clear ();  	break;  case 1:  	if (Buffer.Count != 0)  		AttachedCPU.C = Buffer.Dequeue ();  	else  		AttachedCPU.C = 0;  	break;  case 2:  	if (PressedKeys.Contains (AttachedCPU.B))  		AttachedCPU.C = 1;  	else  		AttachedCPU.C = 0;  	break;  case 3:  	InterruptMessage = AttachedCPU.B;  	break;  }  
Magic Number,Tomato.Hardware,GenericKeyboard,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericKeyboard.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	Buffer.Clear ();  	break;  case 1:  	if (Buffer.Count != 0)  		AttachedCPU.C = Buffer.Dequeue ();  	else  		AttachedCPU.C = 0;  	break;  case 2:  	if (PressedKeys.Contains (AttachedCPU.B))  		AttachedCPU.C = 1;  	else  		AttachedCPU.C = 0;  	break;  case 3:  	InterruptMessage = AttachedCPU.B;  	break;  }  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,LEM1802,The following statement contains a magic number: if (DefaultFont == null) {  	Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream ("Tomato.Hardware.DefaultFont.dat");  	DefaultFont = new ushort[stream.Length / 2];  	for (int i = 0; i < DefaultFont.Length; i++) {  		byte left = (byte)stream.ReadByte ();  		byte right = (byte)stream.ReadByte ();  		ushort value = (ushort)(right | (left << 8));  		DefaultFont [i] = value;  	}  }  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,LEM1802,The following statement contains a magic number: if (DefaultFont == null) {  	Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream ("Tomato.Hardware.DefaultFont.dat");  	DefaultFont = new ushort[stream.Length / 2];  	for (int i = 0; i < DefaultFont.Length; i++) {  		byte left = (byte)stream.ReadByte ();  		byte right = (byte)stream.ReadByte ();  		ushort value = (ushort)(right | (left << 8));  		DefaultFont [i] = value;  	}  }  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,LEM1802,The following statement contains a magic number: DefaultFont = new ushort[stream.Length / 2];  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,LEM1802,The following statement contains a magic number: for (int i = 0; i < DefaultFont.Length; i++) {  	byte left = (byte)stream.ReadByte ();  	byte right = (byte)stream.ReadByte ();  	ushort value = (ushort)(right | (left << 8));  	DefaultFont [i] = value;  }  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0x00:  	ScreenMap = AttachedCPU.B;  	break;  case 0x01:  	FontMap = AttachedCPU.B;  	break;  case 0x02:  	PaletteMap = AttachedCPU.B;  	break;  case 0x03:  	BorderColorValue = (ushort)(AttachedCPU.B & 0xF);  	break;  case 0x04:  	Array.Copy (DefaultFont' 0' AttachedCPU.Memory' AttachedCPU.B' DefaultFont.Length);  	return 256;  case 0x05:  	Array.Copy (DefaultPalette' 0' AttachedCPU.Memory' AttachedCPU.B' DefaultPalette.Length);  	return 16;  }  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0x00:  	ScreenMap = AttachedCPU.B;  	break;  case 0x01:  	FontMap = AttachedCPU.B;  	break;  case 0x02:  	PaletteMap = AttachedCPU.B;  	break;  case 0x03:  	BorderColorValue = (ushort)(AttachedCPU.B & 0xF);  	break;  case 0x04:  	Array.Copy (DefaultFont' 0' AttachedCPU.Memory' AttachedCPU.B' DefaultFont.Length);  	return 256;  case 0x05:  	Array.Copy (DefaultPalette' 0' AttachedCPU.Memory' AttachedCPU.B' DefaultPalette.Length);  	return 16;  }  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,HandleInterrupt,The following statement contains a magic number: return 256;  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,HandleInterrupt,The following statement contains a magic number: return 16;  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,GetPaletteColor,The following statement contains a magic number: b |= (byte)(b << 4);  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,GetPaletteColor,The following statement contains a magic number: g = (byte)((color & 0xF0) >> 4);  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,GetPaletteColor,The following statement contains a magic number: g |= (byte)(g << 4);  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,GetPaletteColor,The following statement contains a magic number: r = (byte)((color & 0xF00) >> 8);  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,GetPaletteColor,The following statement contains a magic number: r |= (byte)(r << 4);  
Magic Number,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,GetPaletteColor,The following statement contains a magic number: return Color.FromArgb (255' r' g' b);  
Magic Number,Tomato.Hardware,M35FD,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\M35FD.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	// Poll device  	AttachedCPU.B = (ushort)DeviceState;  	AttachedCPU.C = (ushort)LastError;  	break;  case 1:  	// Set interrupt  	InterruptMessage = AttachedCPU.X;  	break;  case 2:  	// Read sector  	if (DeviceState == M35FDStateCode.STATE_NO_MEDIA) {  		LastError = M35FDErrorCode.ERROR_NO_MEDIA;  		AttachedCPU.B = 0;  		break;  	}  	if (isReading || isWriting) {  		LastError = M35FDErrorCode.ERROR_BUSY;  		AttachedCPU.B = 0;  		break;  	}  	targetTrack = (uint)AttachedCPU.X / wordsPerTrack;  	seekTicks = (int)(tracksPerTick * Math.Abs (targetTrack - currentTrack));  	fromAddress = (uint)AttachedCPU.X * wordsPerSector;  	toAddress = AttachedCPU.Y;  	AttachedCPU.B = 1;  	wordsWritten = 0;  	isReading = true;  	LastError = M35FDErrorCode.ERROR_NONE;  	DeviceState = M35FDStateCode.STATE_BUSY;  	break;  case 3:  	// Write sector  	if (DeviceState == M35FDStateCode.STATE_NO_MEDIA) {  		LastError = M35FDErrorCode.ERROR_NO_MEDIA;  		AttachedCPU.B = 0;  		break;  	}  	if (isReading || isWriting) {  		LastError = M35FDErrorCode.ERROR_BUSY;  		AttachedCPU.B = 0;  		break;  	}  	if (!Writable) {  		LastError = M35FDErrorCode.ERROR_PROTECTED;  		AttachedCPU.B = 0;  		break;  	}  	targetTrack = (uint)AttachedCPU.X / wordsPerTrack;  	seekTicks = (int)(tracksPerTick * Math.Abs (targetTrack - currentTrack));  	toAddress = (uint)AttachedCPU.X * wordsPerSector;  	fromAddress = AttachedCPU.Y;  	AttachedCPU.B = 1;  	wordsWritten = 0;  	isWriting = true;  	LastError = M35FDErrorCode.ERROR_NONE;  	DeviceState = M35FDStateCode.STATE_BUSY;  	break;  }  
Magic Number,Tomato.Hardware,M35FD,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\M35FD.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	// Poll device  	AttachedCPU.B = (ushort)DeviceState;  	AttachedCPU.C = (ushort)LastError;  	break;  case 1:  	// Set interrupt  	InterruptMessage = AttachedCPU.X;  	break;  case 2:  	// Read sector  	if (DeviceState == M35FDStateCode.STATE_NO_MEDIA) {  		LastError = M35FDErrorCode.ERROR_NO_MEDIA;  		AttachedCPU.B = 0;  		break;  	}  	if (isReading || isWriting) {  		LastError = M35FDErrorCode.ERROR_BUSY;  		AttachedCPU.B = 0;  		break;  	}  	targetTrack = (uint)AttachedCPU.X / wordsPerTrack;  	seekTicks = (int)(tracksPerTick * Math.Abs (targetTrack - currentTrack));  	fromAddress = (uint)AttachedCPU.X * wordsPerSector;  	toAddress = AttachedCPU.Y;  	AttachedCPU.B = 1;  	wordsWritten = 0;  	isReading = true;  	LastError = M35FDErrorCode.ERROR_NONE;  	DeviceState = M35FDStateCode.STATE_BUSY;  	break;  case 3:  	// Write sector  	if (DeviceState == M35FDStateCode.STATE_NO_MEDIA) {  		LastError = M35FDErrorCode.ERROR_NO_MEDIA;  		AttachedCPU.B = 0;  		break;  	}  	if (isReading || isWriting) {  		LastError = M35FDErrorCode.ERROR_BUSY;  		AttachedCPU.B = 0;  		break;  	}  	if (!Writable) {  		LastError = M35FDErrorCode.ERROR_PROTECTED;  		AttachedCPU.B = 0;  		break;  	}  	targetTrack = (uint)AttachedCPU.X / wordsPerTrack;  	seekTicks = (int)(tracksPerTick * Math.Abs (targetTrack - currentTrack));  	toAddress = (uint)AttachedCPU.X * wordsPerSector;  	fromAddress = AttachedCPU.Y;  	AttachedCPU.B = 1;  	wordsWritten = 0;  	isWriting = true;  	LastError = M35FDErrorCode.ERROR_NONE;  	DeviceState = M35FDStateCode.STATE_BUSY;  	break;  }  
Magic Number,Tomato.Hardware,M35FD,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\M35FD.cs,InsertDisk,The following statement contains a magic number: if (disk.Length != 737280)  	throw new IOException ("Invalid disk size.");  
Magic Number,Tomato.Hardware,SPC2000,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPC2000.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	GetStatus ();  	break;  case 1:  	UnitToSkip = (uint)(AttachedCPU.Memory [AttachedCPU.B] << 16);  	UnitToSkip |= AttachedCPU.Memory [AttachedCPU.B + 1];  	break;  case 2:  	GetStatus ();  	if (AttachedCPU.C == 1) {  		// Trigger device  		// Not sure what to do here.  	}  	break;  case 3:  	SkipUnit = AttachedCPU.B;  	break;  }  
Magic Number,Tomato.Hardware,SPC2000,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPC2000.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	GetStatus ();  	break;  case 1:  	UnitToSkip = (uint)(AttachedCPU.Memory [AttachedCPU.B] << 16);  	UnitToSkip |= AttachedCPU.Memory [AttachedCPU.B + 1];  	break;  case 2:  	GetStatus ();  	if (AttachedCPU.C == 1) {  		// Trigger device  		// Not sure what to do here.  	}  	break;  case 3:  	SkipUnit = AttachedCPU.B;  	break;  }  
Magic Number,Tomato.Hardware,SPC2000,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPC2000.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	GetStatus ();  	break;  case 1:  	UnitToSkip = (uint)(AttachedCPU.Memory [AttachedCPU.B] << 16);  	UnitToSkip |= AttachedCPU.Memory [AttachedCPU.B + 1];  	break;  case 2:  	GetStatus ();  	if (AttachedCPU.C == 1) {  		// Trigger device  		// Not sure what to do here.  	}  	break;  case 3:  	SkipUnit = AttachedCPU.B;  	break;  }  
Magic Number,Tomato.Hardware,SPC2000,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPC2000.cs,HandleInterrupt,The following statement contains a magic number: UnitToSkip = (uint)(AttachedCPU.Memory [AttachedCPU.B] << 16);  
Magic Number,Tomato.Hardware,SPC2000,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPC2000.cs,GetStatus,The following statement contains a magic number: AttachedCPU.B = 6;  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,SPED3,The following statement contains a magic number: rotationTimer = new Timer (UpdateRotation' null' 16' Timeout.Infinite);  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,UpdateRotation,The following statement contains a magic number: if (TargetRotation != CurrentRotation) {  	if (Math.Abs (TargetRotation - CurrentRotation) < speed)  		CurrentRotation = TargetRotation;  	else {  		if (CompareDegrees (CurrentRotation' TargetRotation) <= 0)  			CurrentRotation -= speed;  		else  			CurrentRotation += speed;  		if (speed < 0.8f)  			speed += 0.02f;  		while (CurrentRotation < 0)  			CurrentRotation += 360;  		CurrentRotation %= 360;  	}  } else {  	State = SPED3State.STATE_RUNNING;  	if (speed > 0.02f)  		speed -= 0.02f;  }  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,UpdateRotation,The following statement contains a magic number: if (TargetRotation != CurrentRotation) {  	if (Math.Abs (TargetRotation - CurrentRotation) < speed)  		CurrentRotation = TargetRotation;  	else {  		if (CompareDegrees (CurrentRotation' TargetRotation) <= 0)  			CurrentRotation -= speed;  		else  			CurrentRotation += speed;  		if (speed < 0.8f)  			speed += 0.02f;  		while (CurrentRotation < 0)  			CurrentRotation += 360;  		CurrentRotation %= 360;  	}  } else {  	State = SPED3State.STATE_RUNNING;  	if (speed > 0.02f)  		speed -= 0.02f;  }  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,UpdateRotation,The following statement contains a magic number: if (Math.Abs (TargetRotation - CurrentRotation) < speed)  	CurrentRotation = TargetRotation;  else {  	if (CompareDegrees (CurrentRotation' TargetRotation) <= 0)  		CurrentRotation -= speed;  	else  		CurrentRotation += speed;  	if (speed < 0.8f)  		speed += 0.02f;  	while (CurrentRotation < 0)  		CurrentRotation += 360;  	CurrentRotation %= 360;  }  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,UpdateRotation,The following statement contains a magic number: if (Math.Abs (TargetRotation - CurrentRotation) < speed)  	CurrentRotation = TargetRotation;  else {  	if (CompareDegrees (CurrentRotation' TargetRotation) <= 0)  		CurrentRotation -= speed;  	else  		CurrentRotation += speed;  	if (speed < 0.8f)  		speed += 0.02f;  	while (CurrentRotation < 0)  		CurrentRotation += 360;  	CurrentRotation %= 360;  }  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,UpdateRotation,The following statement contains a magic number: while (CurrentRotation < 0)  	CurrentRotation += 360;  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,UpdateRotation,The following statement contains a magic number: CurrentRotation += 360;  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,UpdateRotation,The following statement contains a magic number: CurrentRotation %= 360;  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,UpdateRotation,The following statement contains a magic number: rotationTimer = new Timer (UpdateRotation' null' 16' Timeout.Infinite);  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,CompareDegrees,The following statement contains a magic number: if (A > 180 && B < 180)  	return (360 - A) + B;  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,CompareDegrees,The following statement contains a magic number: if (A > 180 && B < 180)  	return (360 - A) + B;  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,CompareDegrees,The following statement contains a magic number: if (A > 180 && B < 180)  	return (360 - A) + B;  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,CompareDegrees,The following statement contains a magic number: return (360 - A) + B;  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,CompareDegrees,The following statement contains a magic number: if (A < 180 && B > 180)  	return -((360 - B) + A);  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,CompareDegrees,The following statement contains a magic number: if (A < 180 && B > 180)  	return -((360 - B) + A);  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,CompareDegrees,The following statement contains a magic number: if (A < 180 && B > 180)  	return -((360 - B) + A);  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,CompareDegrees,The following statement contains a magic number: return -((360 - B) + A);  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	AttachedCPU.B = (ushort)State;  	AttachedCPU.C = (ushort)SPED3Error.ERROR_NONE;  	break;  case 1:  	MemoryMap = AttachedCPU.X;  	TotalVerticies = (ushort)(AttachedCPU.Y % 128);  	if (TotalVerticies != 0)  		State = SPED3State.STATE_RUNNING;  	if (VerticiesChanged != null)  		VerticiesChanged (this' null);  	// To notify applications when to rebuild the vertex buffer  	break;  case 2:  	TargetRotation = (ushort)(AttachedCPU.X % 360);  	if (TargetRotation != CurrentRotation)  		State = SPED3State.STATE_TURNING;  	break;  }  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	AttachedCPU.B = (ushort)State;  	AttachedCPU.C = (ushort)SPED3Error.ERROR_NONE;  	break;  case 1:  	MemoryMap = AttachedCPU.X;  	TotalVerticies = (ushort)(AttachedCPU.Y % 128);  	if (TotalVerticies != 0)  		State = SPED3State.STATE_RUNNING;  	if (VerticiesChanged != null)  		VerticiesChanged (this' null);  	// To notify applications when to rebuild the vertex buffer  	break;  case 2:  	TargetRotation = (ushort)(AttachedCPU.X % 360);  	if (TargetRotation != CurrentRotation)  		State = SPED3State.STATE_TURNING;  	break;  }  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,HandleInterrupt,The following statement contains a magic number: switch (AttachedCPU.A) {  case 0:  	AttachedCPU.B = (ushort)State;  	AttachedCPU.C = (ushort)SPED3Error.ERROR_NONE;  	break;  case 1:  	MemoryMap = AttachedCPU.X;  	TotalVerticies = (ushort)(AttachedCPU.Y % 128);  	if (TotalVerticies != 0)  		State = SPED3State.STATE_RUNNING;  	if (VerticiesChanged != null)  		VerticiesChanged (this' null);  	// To notify applications when to rebuild the vertex buffer  	break;  case 2:  	TargetRotation = (ushort)(AttachedCPU.X % 360);  	if (TargetRotation != CurrentRotation)  		State = SPED3State.STATE_TURNING;  	break;  }  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,HandleInterrupt,The following statement contains a magic number: TotalVerticies = (ushort)(AttachedCPU.Y % 128);  
Magic Number,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,HandleInterrupt,The following statement contains a magic number: TargetRotation = (ushort)(AttachedCPU.X % 360);  
Magic Number,Tomato.Hardware,SPED3Vertex,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,SPED3Vertex,The following statement contains a magic number: Y = (byte)((word1 >> 8) & 0xFF);  
Magic Number,Tomato.Hardware,SPED3Vertex,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,SPED3Vertex,The following statement contains a magic number: Color = (SPED3Color)((word2 >> 8) & 3);  
Magic Number,Tomato.Hardware,SPED3Vertex,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,SPED3Vertex,The following statement contains a magic number: Color = (SPED3Color)((word2 >> 8) & 3);  
Magic Number,Tomato.Hardware,SPED3Vertex,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,SPED3Vertex,The following statement contains a magic number: Intensity = (SPED3Intensity)((word2 >> 10) & 1);  
Missing Default,Tomato.Hardware,GenericClock,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericClock.cs,HandleInterrupt,The following switch statement is missing a default case: switch (AttachedCPU.A) {  case 0:  	Frequency = AttachedCPU.B;  	ElapsedTicks = 0;  	break;  case 1:  	AttachedCPU.C = ElapsedTicks;  	break;  case 2:  	InterruptMessage = AttachedCPU.B;  	break;  }  
Missing Default,Tomato.Hardware,GenericKeyboard,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericKeyboard.cs,HandleInterrupt,The following switch statement is missing a default case: switch (AttachedCPU.A) {  case 0:  	Buffer.Clear ();  	break;  case 1:  	if (Buffer.Count != 0)  		AttachedCPU.C = Buffer.Dequeue ();  	else  		AttachedCPU.C = 0;  	break;  case 2:  	if (PressedKeys.Contains (AttachedCPU.B))  		AttachedCPU.C = 1;  	else  		AttachedCPU.C = 0;  	break;  case 3:  	InterruptMessage = AttachedCPU.B;  	break;  }  
Missing Default,Tomato.Hardware,GenericKeyboard,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\GenericKeyboard.cs,GetKeyValue,The following switch statement is missing a default case: switch (KeyCode) {  case Keys.NumPad0:  	KeyCode = Keys.D0;  	break;  case Keys.NumPad1:  	KeyCode = Keys.D1;  	break;  case Keys.NumPad2:  	KeyCode = Keys.D2;  	break;  case Keys.NumPad3:  	KeyCode = Keys.D3;  	break;  case Keys.NumPad4:  	KeyCode = Keys.D4;  	break;  case Keys.NumPad5:  	KeyCode = Keys.D5;  	break;  case Keys.NumPad6:  	KeyCode = Keys.D6;  	break;  case Keys.NumPad7:  	KeyCode = Keys.D7;  	break;  case Keys.NumPad8:  	KeyCode = Keys.D8;  	break;  case Keys.NumPad9:  	KeyCode = Keys.D9;  	break;  }  
Missing Default,Tomato.Hardware,LEM1802,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\LEM1802.cs,HandleInterrupt,The following switch statement is missing a default case: switch (AttachedCPU.A) {  case 0x00:  	ScreenMap = AttachedCPU.B;  	break;  case 0x01:  	FontMap = AttachedCPU.B;  	break;  case 0x02:  	PaletteMap = AttachedCPU.B;  	break;  case 0x03:  	BorderColorValue = (ushort)(AttachedCPU.B & 0xF);  	break;  case 0x04:  	Array.Copy (DefaultFont' 0' AttachedCPU.Memory' AttachedCPU.B' DefaultFont.Length);  	return 256;  case 0x05:  	Array.Copy (DefaultPalette' 0' AttachedCPU.Memory' AttachedCPU.B' DefaultPalette.Length);  	return 16;  }  
Missing Default,Tomato.Hardware,M35FD,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\M35FD.cs,HandleInterrupt,The following switch statement is missing a default case: switch (AttachedCPU.A) {  case 0:  	// Poll device  	AttachedCPU.B = (ushort)DeviceState;  	AttachedCPU.C = (ushort)LastError;  	break;  case 1:  	// Set interrupt  	InterruptMessage = AttachedCPU.X;  	break;  case 2:  	// Read sector  	if (DeviceState == M35FDStateCode.STATE_NO_MEDIA) {  		LastError = M35FDErrorCode.ERROR_NO_MEDIA;  		AttachedCPU.B = 0;  		break;  	}  	if (isReading || isWriting) {  		LastError = M35FDErrorCode.ERROR_BUSY;  		AttachedCPU.B = 0;  		break;  	}  	targetTrack = (uint)AttachedCPU.X / wordsPerTrack;  	seekTicks = (int)(tracksPerTick * Math.Abs (targetTrack - currentTrack));  	fromAddress = (uint)AttachedCPU.X * wordsPerSector;  	toAddress = AttachedCPU.Y;  	AttachedCPU.B = 1;  	wordsWritten = 0;  	isReading = true;  	LastError = M35FDErrorCode.ERROR_NONE;  	DeviceState = M35FDStateCode.STATE_BUSY;  	break;  case 3:  	// Write sector  	if (DeviceState == M35FDStateCode.STATE_NO_MEDIA) {  		LastError = M35FDErrorCode.ERROR_NO_MEDIA;  		AttachedCPU.B = 0;  		break;  	}  	if (isReading || isWriting) {  		LastError = M35FDErrorCode.ERROR_BUSY;  		AttachedCPU.B = 0;  		break;  	}  	if (!Writable) {  		LastError = M35FDErrorCode.ERROR_PROTECTED;  		AttachedCPU.B = 0;  		break;  	}  	targetTrack = (uint)AttachedCPU.X / wordsPerTrack;  	seekTicks = (int)(tracksPerTick * Math.Abs (targetTrack - currentTrack));  	toAddress = (uint)AttachedCPU.X * wordsPerSector;  	fromAddress = AttachedCPU.Y;  	AttachedCPU.B = 1;  	wordsWritten = 0;  	isWriting = true;  	LastError = M35FDErrorCode.ERROR_NONE;  	DeviceState = M35FDStateCode.STATE_BUSY;  	break;  }  
Missing Default,Tomato.Hardware,SPC2000,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPC2000.cs,HandleInterrupt,The following switch statement is missing a default case: switch (AttachedCPU.A) {  case 0:  	GetStatus ();  	break;  case 1:  	UnitToSkip = (uint)(AttachedCPU.Memory [AttachedCPU.B] << 16);  	UnitToSkip |= AttachedCPU.Memory [AttachedCPU.B + 1];  	break;  case 2:  	GetStatus ();  	if (AttachedCPU.C == 1) {  		// Trigger device  		// Not sure what to do here.  	}  	break;  case 3:  	SkipUnit = AttachedCPU.B;  	break;  }  
Missing Default,Tomato.Hardware,SPED3,D:\newReposJune17\SirCmpwn_Tomato\Tomato.Hardware\SPED3.cs,HandleInterrupt,The following switch statement is missing a default case: switch (AttachedCPU.A) {  case 0:  	AttachedCPU.B = (ushort)State;  	AttachedCPU.C = (ushort)SPED3Error.ERROR_NONE;  	break;  case 1:  	MemoryMap = AttachedCPU.X;  	TotalVerticies = (ushort)(AttachedCPU.Y % 128);  	if (TotalVerticies != 0)  		State = SPED3State.STATE_RUNNING;  	if (VerticiesChanged != null)  		VerticiesChanged (this' null);  	// To notify applications when to rebuild the vertex buffer  	break;  case 2:  	TargetRotation = (ushort)(AttachedCPU.X % 360);  	if (TargetRotation != CurrentRotation)  		State = SPED3State.STATE_TURNING;  	break;  }  
