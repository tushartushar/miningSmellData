Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,WriteResult,The length of the statement  "			Console.WriteLine(String.Format("End: {0} - Took: {1} minutes {2}.{3} seconds"' DateTime.Now' ts.Minutes' ts.Seconds' ts.Milliseconds)); " is 136.
Long Statement,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,SelectSimpleQuery,The length of the statement  "						new Select(provider).From<SubSonic.Tests.TestClasses.Product>().Where("ProductID").IsEqualTo(1).ExecuteSingle<SubSonic.Tests.TestClasses.Product>(); " is 148.
Magic Number,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,SelectActiveRecordList,The following statement contains a magic number: for (int i = 1; i < 1000; i++)  			{  				var p = Product.Find(x => x.ProductID > 0 && x.ProductID <= 10);  				//Console.Write(i + "'");  			}
Magic Number,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,SelectActiveRecordList,The following statement contains a magic number: for (int i = 1; i < 1000; i++)  			{  				var p = Product.Find(x => x.ProductID > 0 && x.ProductID <= 10);  				//Console.Write(i + "'");  			}
Magic Number,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,SelectActiveRecord,The following statement contains a magic number: for (int i = 1; i < 10000; i++)  			{  				var p = Product.SingleOrDefault(x => x.ProductID == 1' provider.ConnectionString' provider.DbDataProviderName);  				//Console.Write(i + "'");  			}
Magic Number,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,SelectSimpleQuery,The following statement contains a magic number: for (int i = 1; i < 10000; i++)  			{  				SubSonic.Tests.TestClasses.Product p =  						new Select(provider).From<SubSonic.Tests.TestClasses.Product>().Where("ProductID").IsEqualTo(1).ExecuteSingle<SubSonic.Tests.TestClasses.Product>();  				//Console.Write(i + "'");  			}
Magic Number,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,SelectSimpleRepo,The following statement contains a magic number: for (int i = 1; i < 10000; i++)  			{  				SubSonic.Tests.TestClasses.Product p = repo.Single<SubSonic.Tests.TestClasses.Product>(1);  				//Console.Write(i + "'");  			}
Magic Number,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,SelectIQueryable,The following statement contains a magic number: for (int i = 1; i < 10000; i++)  			{  				SubSonic.Tests.TestClasses.Product p = db.Products.SingleOrDefault(x => x.ProductID == 1);  				//Console.Write(i + "'");  			}
Magic Number,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,RunInsert,The following statement contains a magic number: for (int i = 1; i < 1000; i++)  			{  				SubSonic.Tests.TestClasses.Product p = new SubSonic.Tests.TestClasses.Product();  				p.CategoryID = 1;  				p.Discontinued = false;  				p.ProductName = "Product" + i;  				p.Sku = Guid.NewGuid();  				p.UnitPrice = 1000;  				repo.Add(p);  				//Console.Write(i + "'");  			}
Magic Number,PerfRunner,Program,C:\repos\subsonic_SubSonic-3.0\PerfRunner\Program.cs,RunInsert,The following statement contains a magic number: for (int i = 1; i < 1000; i++)  			{  				SubSonic.Tests.TestClasses.Product p = new SubSonic.Tests.TestClasses.Product();  				p.CategoryID = 1;  				p.Discontinued = false;  				p.ProductName = "Product" + i;  				p.Sku = Guid.NewGuid();  				p.UnitPrice = 1000;  				repo.Add(p);  				//Console.Write(i + "'");  			}
