Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,DisposeThrowsIfSocketAlreadyDisposed,The length of the statement  "            Assert.Equal("Invalid state detected: NetMQPoller contains a disposed NetMQSocket. Sockets must be either removed before being disposed' or disposed after the poller is disposed."' ex.Message); " is 193.
Long Statement,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SubscriberCleanupOnUnbind,The length of the statement  "                    using (var monitor = new NetMQMonitor(sub' String.Format("inproc://cleanup.test{0}"' Guid.NewGuid())' SocketEvents.Closed)) " is 123.
Long Statement,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseMultipartMessageWithRetrySucceedsFirstTry,The length of the statement  "                var progressProactor = new NetMQProactor(progressSubscriber' (socket' message) => Debug.WriteLine("C: {0} {1:ss.fff}"' message[0].ConvertToString()' DateTime.Now)); " is 164.
Long Statement,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,MultiplePublishers,The length of the statement  "                // Note that resending sub2.Send(..) here wont help because XSub won't resent existing subs to XPub - quite sane behavior " is 121.
Long Statement,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,CouldTrackSubscriberIdentityInXPubSocket,The length of the statement  "                // NB Identity must be set before pub.Subscribe/Unsubscribe/Send' because these operations clear a private field with last subscriber " is 133.
Long Statement,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,CouldTrackSubscriberIdentityInXPubSocket,The length of the statement  "                Assert.True(identity1.SequenceEqual(pub.Options.Identity)' "Identity must be kept after Subscribe/Unsubscribe/Send operations (which clear m_lastPipe)"); " is 153.
Long Statement,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,CouldTrackSubscriberIdentityInXPubSocket,The length of the statement  "                Assert.True(identity2.SequenceEqual(pub.Options.Identity)' "Identity must be kept after Subscribe/Unsubscribe/Send operations (which clear m_lastPipe)"); " is 153.
Magic Number,NetMQ.Tests,ActorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ActorTests.cs,Simple,The following statement contains a magic number: Assert.Equal(2' msg.FrameCount);
Magic Number,NetMQ.Tests,AsyncTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\AsyncTests.cs,ReceiveMultipartMessage,The following statement contains a magic number: Assert.Equal(new byte[]{ 0x00' 0x01' 0x02' 0x03 }' received[2].Buffer);
Magic Number,NetMQ.Tests,AsyncTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\AsyncTests.cs,SupportCancellation,The following statement contains a magic number: cts.CancelAfter(1000);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,SimplePublishSubscribe,The following statement contains a magic number: speaker.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,SimplePublishSubscribe,The following statement contains a magic number: listener.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Silence,The following statement contains a magic number: speaker.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Silence,The following statement contains a magic number: listener.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Silence,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Silence,The following statement contains a magic number: Assert.False(listener.TryReceive(TimeSpan.FromMilliseconds(300)' out BeaconMessage message));
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Unsubscribe,The following statement contains a magic number: speaker.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Unsubscribe,The following statement contains a magic number: listener.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Unsubscribe,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Unsubscribe,The following statement contains a magic number: Assert.False(listener.TryReceive(TimeSpan.FromMilliseconds(300)' out BeaconMessage message));
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,SubscribeToDifferentTopic,The following statement contains a magic number: speaker.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,SubscribeToDifferentTopic,The following statement contains a magic number: listener.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,SubscribeToDifferentTopic,The following statement contains a magic number: Assert.False(listener.TryReceive(TimeSpan.FromMilliseconds(300)' out BeaconMessage message));
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Polling,The following statement contains a magic number: speaker.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,Polling,The following statement contains a magic number: listener.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,ConfigureTwice,The following statement contains a magic number: speaker.Configure(5555);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,ConfigureTwice,The following statement contains a magic number: speaker.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,ConfigureTwice,The following statement contains a magic number: listener.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,BothSpeakerAndListener,The following statement contains a magic number: beacon1.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,BothSpeakerAndListener,The following statement contains a magic number: beacon2.Configure(9999);
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,BothSpeakerAndListenerOverLoopback,The following statement contains a magic number: beacon1.Configure(9998' "loopback");
Magic Number,NetMQ.Tests,BeaconTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\BeaconTests.cs,BothSpeakerAndListenerOverLoopback,The following statement contains a magic number: beacon2.Configure(9998' "loopback");
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongLittleEndian,The following statement contains a magic number: ByteArraySegment byteArraySegment = new ByteArraySegment(new byte[8]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongLittleEndian,The following statement contains a magic number: Assert.Equal(0' byteArraySegment[7]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongLittleEndian,The following statement contains a magic number: byteArraySegment.PutLong(Endianness.Little' 72057594037927936' 0);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongLittleEndian,The following statement contains a magic number: Assert.Equal(1' byteArraySegment[7]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongLittleEndian,The following statement contains a magic number: Assert.Equal(72057594037927936' num);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongSmallEndian,The following statement contains a magic number: ByteArraySegment byteArraySegment = new ByteArraySegment(new byte[8]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongSmallEndian,The following statement contains a magic number: Assert.Equal(1' byteArraySegment[7]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongSmallEndian,The following statement contains a magic number: byteArraySegment.PutLong(Endianness.Big' 72057594037927936' 0);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongSmallEndian,The following statement contains a magic number: Assert.Equal(0' byteArraySegment[7]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,LongSmallEndian,The following statement contains a magic number: Assert.Equal(72057594037927936' num);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntLittleEndian,The following statement contains a magic number: ByteArraySegment byteArraySegment = new ByteArraySegment(new byte[4]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntLittleEndian,The following statement contains a magic number: Assert.Equal(0' byteArraySegment[3]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntLittleEndian,The following statement contains a magic number: byteArraySegment.PutInteger(Endianness.Little' 16777216' 0);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntLittleEndian,The following statement contains a magic number: Assert.Equal(1' byteArraySegment[3]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntLittleEndian,The following statement contains a magic number: Assert.Equal(16777216' num);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntBigEndian,The following statement contains a magic number: ByteArraySegment byteArraySegment = new ByteArraySegment(new byte[4]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntBigEndian,The following statement contains a magic number: Assert.Equal(1' byteArraySegment[3]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntBigEndian,The following statement contains a magic number: byteArraySegment.PutInteger(Endianness.Big' 16777216' 0);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntBigEndian,The following statement contains a magic number: Assert.Equal(0' byteArraySegment[3]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,IntBigEndian,The following statement contains a magic number: Assert.Equal(16777216' num);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,UnsignedShortLittleEndian,The following statement contains a magic number: ByteArraySegment byteArraySegment = new ByteArraySegment(new byte[2]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,UnsignedShortLittleEndian,The following statement contains a magic number: byteArraySegment.PutUnsignedShort(Endianness.Little' 256' 0);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,UnsignedShortLittleEndian,The following statement contains a magic number: Assert.Equal(256' num);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,UnsignedShortBigEndian,The following statement contains a magic number: ByteArraySegment byteArraySegment = new ByteArraySegment(new byte[2]);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,UnsignedShortBigEndian,The following statement contains a magic number: byteArraySegment.PutUnsignedShort(Endianness.Big' 256' 0);
Magic Number,NetMQ.Tests,ByteArraySegmentTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ByteArraySegmentTests.cs,UnsignedShortBigEndian,The following statement contains a magic number: Assert.Equal(256' num);
Magic Number,NetMQ.Tests,CleanupTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\CleanupTests.cs,Block,The following statement contains a magic number: const int count = 1000;
Magic Number,NetMQ.Tests,CleanupTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\CleanupTests.cs,Block,The following statement contains a magic number: NetMQConfig.Linger = TimeSpan.FromSeconds(0.5);
Magic Number,NetMQ.Tests,CleanupTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\CleanupTests.cs,Block,The following statement contains a magic number: Assert.True(stopwatch.ElapsedMilliseconds > 500);
Magic Number,NetMQ.Tests,CleanupTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\CleanupTests.cs,NoBlock,The following statement contains a magic number: const int count = 1000;
Magic Number,NetMQ.Tests,CleanupTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\CleanupTests.cs,NoBlock,The following statement contains a magic number: NetMQConfig.Linger = TimeSpan.FromSeconds(0.5);
Magic Number,NetMQ.Tests,CleanupTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\CleanupTests.cs,NoBlock,The following statement contains a magic number: Assert.True(stopwatch.ElapsedMilliseconds < 500);
Magic Number,NetMQ.Tests,EventDelegatorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\EventDelegatorTests.cs,Basics,The following statement contains a magic number: sourceHandler = (sender' args) => delegator.Fire(this' new Args<double>(args.Value / 2.0));
Magic Number,NetMQ.Tests,EventDelegatorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\EventDelegatorTests.cs,Basics,The following statement contains a magic number: Source(this' new Args<int>(5));
Magic Number,NetMQ.Tests,EventDelegatorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\EventDelegatorTests.cs,Basics,The following statement contains a magic number: Assert.Equal(2.5' value);
Magic Number,NetMQ.Tests,EventDelegatorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\EventDelegatorTests.cs,Basics,The following statement contains a magic number: Source(this' new Args<int>(12));
Magic Number,NetMQ.Tests,EventDelegatorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\EventDelegatorTests.cs,Basics,The following statement contains a magic number: Assert.Equal(6.0' value);
Magic Number,NetMQ.Tests,EventDelegatorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\EventDelegatorTests.cs,Basics,The following statement contains a magic number: Assert.Equal(2' callCount);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,TwoFrames,The following statement contains a magic number: Assert.Equal(2' message.FrameCount);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,PushMessage,The following statement contains a magic number: Assert.Equal(2' message.FrameCount);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,EmptyFrames,The following statement contains a magic number: Assert.Equal(0' message[2].MessageSize);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,EmptyFrames,The following statement contains a magic number: Assert.Equal(3' message.FrameCount);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,RouterDealerMessaging,The following statement contains a magic number: Assert.Equal(2' serverIncomingMessage.FrameCount);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,Issue52_ReqToRouterBug,The following statement contains a magic number: Assert.Equal(3' msg.FrameCount);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,Issue52_ReqToRouterBug,The following statement contains a magic number: Assert.Equal(msg[2].ConvertToString()' testmessage);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,SpecifyEncoding,The following statement contains a magic number: Assert.Equal(20' frame.MessageSize);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,AppendInt32,The following statement contains a magic number: message.Append(5);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,AppendInt32,The following statement contains a magic number: Assert.Equal(4' message[1].MessageSize);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,AppendInt32,The following statement contains a magic number: Assert.Equal(5' message[1].ConvertToInt32());
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,PushInt32,The following statement contains a magic number: message.Push(5);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,PushInt32,The following statement contains a magic number: Assert.Equal(4' message[0].MessageSize);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,PushInt32,The following statement contains a magic number: Assert.Equal(5' message[0].ConvertToInt32());
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,AppendInt64,The following statement contains a magic number: Assert.Equal(8' message[1].MessageSize);
Magic Number,NetMQ.Tests,MessageTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MessageTests.cs,PushInt64,The following statement contains a magic number: Assert.Equal(8' message[0].MessageSize);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGC,The following statement contains a magic number: var bytes = new byte[200];
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGC,The following statement contains a magic number: msg.InitGC(bytes' 100);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGC,The following statement contains a magic number: Assert.Equal(100' msg.Size);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: var bytes = new byte[200];
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: msg.InitGC(bytes' 100' 50);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: msg.InitGC(bytes' 100' 50);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: Assert.Equal(50' msg.Size);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: var src = new byte[100];
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: i < 100
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: msg.Put(src[50]);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: msg.Put(src[51]' 1);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: msg.Put(src' 52' 2' 48);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: msg.Put(src' 52' 2' 48);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: msg.Put(src' 52' 2' 48);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: msg[i] = (byte)(i + 50);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitGCOffset,The following statement contains a magic number: i < 50
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitPool,The following statement contains a magic number: msg.InitPool(100);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitPool,The following statement contains a magic number: Assert.Equal(100' pool.TakeSize[0]);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitPool,The following statement contains a magic number: Assert.Equal(100' msg.Size);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,InitPool,The following statement contains a magic number: Assert.Equal(100' msg.Data.Length);
Magic Number,NetMQ.Tests,MsgTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\MsgTests.cs,CopyPooled,The following statement contains a magic number: msg.InitPool(100);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,Monitoring,The following statement contains a magic number: monitor.Timeout = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,Monitoring,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,Monitoring,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,Monitoring,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,StartAsync,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,StartAsync,The following statement contains a magic number: Assert.True(task.Wait(TimeSpan.FromMilliseconds(1000)));
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,NoHangWhenMonitoringUnboundInprocAddress,The following statement contains a magic number: var ex = Assert.Throws<AggregateException>(() => task.Wait(TimeSpan.FromMilliseconds(1000)));
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,ErrorCodeTest,The following statement contains a magic number: monitor.Timeout = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,ErrorCodeTest,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,ErrorCodeTest,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,ErrorCodeTest,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,MonitorDisposeProperlyWhenDisposedAfterMonitoredTcpSocket,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,NetMQMonitorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQMonitorTests.cs,MonitorDisposeProperlyWhenDisposedAfterMonitoredTcpSocket,The following statement contains a magic number: var completed = Task.Factory.StartNew(() => monitor.Dispose()).Wait(1000);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,Monitoring,The following statement contains a magic number: Assert.True(listeningEvent.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,Monitoring,The following statement contains a magic number: Assert.True(connectedEvent.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,Monitoring,The following statement contains a magic number: Assert.True(acceptedEvent.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddSocketDuringWork,The following statement contains a magic number: Assert.True(signal1.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddSocketDuringWork,The following statement contains a magic number: Assert.True(signal2.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddSocketAfterRemoving,The following statement contains a magic number: Assert.True(signal1.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddSocketAfterRemoving,The following statement contains a magic number: Assert.True(signal2.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddSocketAfterRemoving,The following statement contains a magic number: Assert.True(signal3.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddTwoSocketAfterRemoving,The following statement contains a magic number: Assert.True(signal1.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddTwoSocketAfterRemoving,The following statement contains a magic number: Assert.True(signal2.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddTwoSocketAfterRemoving,The following statement contains a magic number: Assert.True(signal3.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddTwoSocketAfterRemoving,The following statement contains a magic number: Assert.True(signal4.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddTwoSocketAfterRemoving,The following statement contains a magic number: Assert.True(signal2.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,AddTwoSocketAfterRemoving,The following statement contains a magic number: Assert.Equal(2' router2Arrived);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,SimpleTimer,The following statement contains a magic number: const int timerIntervalMillis = 100;
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,SimpleTimer,The following statement contains a magic number: Thread.Sleep(150);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,SimpleTimer,The following statement contains a magic number: Thread.Sleep(300);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,RemoveTimer,The following statement contains a magic number: var timer = new NetMQTimer(TimeSpan.FromMilliseconds(100));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,RemoveTimer,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,RemoveTimer,The following statement contains a magic number: Thread.Sleep(300);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,RunMultipleTimes,The following statement contains a magic number: const int timerIntervalMillis = 20;
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,RunMultipleTimes,The following statement contains a magic number: timer.Elapsed += (s' a) =>              {                  count++;                    if (count == 3)                  {                      timer.Enable = false;                  }              };
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,RunMultipleTimes,The following statement contains a magic number: Thread.Sleep(timerIntervalMillis * 6);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,RunMultipleTimes,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoTimers,The following statement contains a magic number: var timer1 = new NetMQTimer(TimeSpan.FromMilliseconds(60));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoTimers,The following statement contains a magic number: var timer2 = new NetMQTimer(TimeSpan.FromMilliseconds(40));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoTimers,The following statement contains a magic number: Assert.True(signal1.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoTimers,The following statement contains a magic number: Assert.True(signal2.WaitOne(300));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,EnableTimer,The following statement contains a magic number: const int timerIntervalMillis = 20;
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,EnableTimer,The following statement contains a magic number: timer1.Elapsed += (s' a) =>              {                  count++;                    if (count == 1)                  {                      timer2.Enable = true;                      timer1.Enable = false;                  }                  else if (count == 2)                  {                      timer1.Enable = false;                  }              };
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,EnableTimer,The following statement contains a magic number: Thread.Sleep(timerIntervalMillis * 6);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,EnableTimer,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: const int timerIntervalMillis = 10;
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: timer.Elapsed += (s' a) =>              {                  count++;                    if (count == 1)                  {                      stopwatch.Start();                      timer.Interval = 30;                  }                  else if (count == 2)                  {                      length1 = stopwatch.ElapsedMilliseconds;                        timer.Interval = 60;                      stopwatch.Restart();                  }                  else if (count == 3)                  {                      length2 = stopwatch.ElapsedMilliseconds;                        stopwatch.Stop();                        timer.Enable = false;                  }              };
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: timer.Elapsed += (s' a) =>              {                  count++;                    if (count == 1)                  {                      stopwatch.Start();                      timer.Interval = 30;                  }                  else if (count == 2)                  {                      length1 = stopwatch.ElapsedMilliseconds;                        timer.Interval = 60;                      stopwatch.Restart();                  }                  else if (count == 3)                  {                      length2 = stopwatch.ElapsedMilliseconds;                        stopwatch.Stop();                        timer.Enable = false;                  }              };
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: timer.Elapsed += (s' a) =>              {                  count++;                    if (count == 1)                  {                      stopwatch.Start();                      timer.Interval = 30;                  }                  else if (count == 2)                  {                      length1 = stopwatch.ElapsedMilliseconds;                        timer.Interval = 60;                      stopwatch.Restart();                  }                  else if (count == 3)                  {                      length2 = stopwatch.ElapsedMilliseconds;                        stopwatch.Stop();                        timer.Enable = false;                  }              };
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: timer.Elapsed += (s' a) =>              {                  count++;                    if (count == 1)                  {                      stopwatch.Start();                      timer.Interval = 30;                  }                  else if (count == 2)                  {                      length1 = stopwatch.ElapsedMilliseconds;                        timer.Interval = 60;                      stopwatch.Restart();                  }                  else if (count == 3)                  {                      length2 = stopwatch.ElapsedMilliseconds;                        stopwatch.Stop();                        timer.Enable = false;                  }              };
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: Assert.True(Math.Abs(length1 - 30) <= 10.0);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: Assert.True(Math.Abs(length1 - 30) <= 10.0);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: Assert.True(Math.Abs(length2 - 60) <= 10.0);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,ChangeTimerInterval,The following statement contains a magic number: Assert.True(Math.Abs(length2 - 60) <= 10.0);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TestPollerDispose,The following statement contains a magic number: const int timerIntervalMillis = 10;
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TestPollerDispose,The following statement contains a magic number: timer.Elapsed += (s' a) =>              {                  if (count++ == 5)                      signal.Set();              };
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TestPollerDispose,The following statement contains a magic number: Assert.True(signal.WaitOne(500));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,NativeSocket,The following statement contains a magic number: Assert.False(socketSignal.WaitOne(100));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,NativeSocket,The following statement contains a magic number: Assert.True(socketSignal.WaitOne(100));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,NativeSocket,The following statement contains a magic number: Assert.False(socketSignal.WaitOne(100));
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoThreads,The following statement contains a magic number: Task t1 = Task.Factory.StartNew(() =>                  {                      for (int i = 0; i < 100; i++)                      {                          var task = new Task(() => { count1++; });                          allTasks.Add(task);                          task.Start(poller);                      }                  });
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoThreads,The following statement contains a magic number: Task t2 = Task.Factory.StartNew(() =>                  {                      for (int i = 0; i < 100; i++)                      {                          var task = new Task(() => { count2++; });                          allTasks.Add(task);                          task.Start(poller);                      }                  });
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoThreads,The following statement contains a magic number: t1.Wait(1000);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoThreads,The following statement contains a magic number: t2.Wait(1000);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoThreads,The following statement contains a magic number: Task.WaitAll(allTasks.ToArray()' 1000);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoThreads,The following statement contains a magic number: Assert.Equal(100' count1);
Magic Number,NetMQ.Tests,NetMQPollerTest,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQPollerTest.cs,TwoThreads,The following statement contains a magic number: Assert.Equal(100' count2);
Magic Number,NetMQ.Tests,NetMQProactorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQProactorTests.cs,ReceiveMessage,The following statement contains a magic number: Assert.True(manualResetEvent.WaitOne(100));
Magic Number,NetMQ.Tests,NetMQQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQQueueTests.cs,EnqueueShouldNotBlockWhenCapacityIsZero,The following statement contains a magic number: Task task = Task.Run(() =>                  {                      for (int i = 0; i < socketWatermarkCapacity + 100; i++)                      {                          queue.Enqueue(i);                      }                  });
Magic Number,NetMQ.Tests,NetMQQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQQueueTests.cs,TryDequeue,The following statement contains a magic number: Assert.False(queue.TryDequeue(out int result' TimeSpan.FromMilliseconds(100)));
Magic Number,NetMQ.Tests,NetMQQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQQueueTests.cs,TryDequeue,The following statement contains a magic number: Assert.True(queue.TryDequeue(out result' TimeSpan.FromMilliseconds(100)));
Magic Number,NetMQ.Tests,NetMQQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQQueueTests.cs,WithPoller,The following statement contains a magic number: Assert.False(manualResetEvent.WaitOne(100));
Magic Number,NetMQ.Tests,NetMQQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetMQQueueTests.cs,WithPoller,The following statement contains a magic number: Assert.True(manualResetEvent.WaitOne(100));
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt64,The following statement contains a magic number: RoundTripInt64(0x0102030405060708' 1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt64,The following statement contains a magic number: RoundTripInt64(0x0102030405060708' 1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt64,The following statement contains a magic number: RoundTripInt64(0x0102030405060708' 1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt64,The following statement contains a magic number: RoundTripInt64(0x0102030405060708' 1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt64,The following statement contains a magic number: RoundTripInt64(0x0102030405060708' 1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt64,The following statement contains a magic number: RoundTripInt64(0x0102030405060708' 1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt64,The following statement contains a magic number: RoundTripInt64(0x0102030405060708' 1' 2' 3' 4' 5' 6' 7' 8);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,RoundTripInt64,The following statement contains a magic number: Assert.Equal(8' buffer.Length);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt32,The following statement contains a magic number: RoundTripInt32(0x01020304' 1' 2' 3' 4);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt32,The following statement contains a magic number: RoundTripInt32(0x01020304' 1' 2' 3' 4);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt32,The following statement contains a magic number: RoundTripInt32(0x01020304' 1' 2' 3' 4);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,RoundTripInt32,The following statement contains a magic number: Assert.Equal(4' buffer.Length);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,TestInt16,The following statement contains a magic number: RoundTripInt16(0x0102' 1' 2);
Magic Number,NetMQ.Tests,NetworkOrderBitsConverterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\NetworkOrderBitsConverterTests.cs,RoundTripInt16,The following statement contains a magic number: Assert.Equal(2' buffer.Length);
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,SendMultipartBytesTest,The following statement contains a magic number: var socket = new MockOutgoingSocket((ref Msg msg' TimeSpan timeout' bool more) =>              {                  if (count == 0)                  {                      Assert.Equal(SendReceiveConstants.InfiniteTimeout' timeout);                      Assert.Single(msg.Data);                      Assert.Equal(1' msg.Data[0]);                      Assert.True(more);                      count++;                  }                  else                  {                      Assert.Equal(SendReceiveConstants.InfiniteTimeout' timeout);                      Assert.Single(msg.Data);                      Assert.Equal(2' msg.Data[0]);                      Assert.False(more);                      count++;                  }                    return true;              });
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,SendMultipartBytesTest,The following statement contains a magic number: socket.SendMultipartBytes(new byte[] { 1 }' new byte[] { 2 });
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,SendMultipartBytesTest,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartBytesWithTimeoutTest,The following statement contains a magic number: var socket = new MockOutgoingSocket((ref Msg msg' TimeSpan timeout' bool more) =>              {                  if (count == 0)                  {                      Assert.Equal(TimeSpan.FromSeconds(1)' timeout);                      Assert.Single(msg.Data);                      Assert.Equal(1' msg.Data[0]);                      Assert.True(more);                      count++;                  }                  else                  {                      Assert.Equal(SendReceiveConstants.InfiniteTimeout' timeout);                      Assert.Single(msg.Data);                      Assert.Equal(2' msg.Data[0]);                      Assert.False(more);                      count++;                  }                    return true;              });
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartBytesWithTimeoutTest,The following statement contains a magic number: Assert.True(socket.TrySendMultipartBytes(TimeSpan.FromSeconds(1)' new byte[] { 1 }' new byte[] { 2 }));
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartBytesWithTimeoutTest,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartBytesWithTimeoutTestFailed,The following statement contains a magic number: Assert.False(socket.TrySendMultipartBytes(TimeSpan.FromSeconds(1)' new byte[] { 1 }' new byte[] { 2 }));
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartBytesTest,The following statement contains a magic number: var socket = new MockOutgoingSocket((ref Msg msg' TimeSpan timeout' bool more) =>              {                  if (count == 0)                  {                      Assert.Equal(TimeSpan.FromSeconds(0)' timeout);                      Assert.Single(msg.Data);                      Assert.Equal(1' msg.Data[0]);                      Assert.True(more);                      count++;                  }                  else                  {                      Assert.Equal(SendReceiveConstants.InfiniteTimeout' timeout);                      Assert.Single(msg.Data);                      Assert.Equal(2' msg.Data[0]);                      Assert.False(more);                      count++;                  }                    return true;              });
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartBytesTest,The following statement contains a magic number: Assert.True(socket.TrySendMultipartBytes(new byte[] { 1 }' new byte[] { 2 }));
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartBytesTest,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartMessageTest,The following statement contains a magic number: var socket = new MockOutgoingSocket((ref Msg msg' TimeSpan timeout' bool more) =>              {                  if (count == 0)                  {                      Assert.Equal(TimeSpan.FromSeconds(0)' timeout);                      Assert.Single(msg.Data);                      Assert.Equal(1' msg.Data[0]);                      Assert.True(more);                      count++;                  }                  else                  {                      Assert.Equal(SendReceiveConstants.InfiniteTimeout' timeout);                      Assert.Single(msg.Data);                      Assert.Equal(2' msg.Data[0]);                      Assert.False(more);                      count++;                  }                    return true;              });
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartMessageTest,The following statement contains a magic number: message.Append(new byte[] {2});
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartMessageTest,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySendMultipartMessageFailed,The following statement contains a magic number: message.Append(new byte[] { 2 });
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,SignalTest,The following statement contains a magic number: var socket = new MockOutgoingSocket((ref Msg msg' TimeSpan timeout' bool more) =>              {                  Assert.Equal(SendReceiveConstants.InfiniteTimeout' timeout);                  Assert.Equal(8' msg.Data.Length);                    var value = NetworkOrderBitsConverter.ToInt64(msg.Data);                    Assert.Equal(0x7766554433221100L' value);                    Assert.False(more);                  return true;              });
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySignalTest,The following statement contains a magic number: var socket = new MockOutgoingSocket((ref Msg msg' TimeSpan timeout' bool more) =>              {                  Assert.Equal(TimeSpan.Zero' timeout);                  Assert.Equal(8' msg.Data.Length);                    var value = NetworkOrderBitsConverter.ToInt64(msg.Data);                    Assert.Equal(0x7766554433221100L' value);                    Assert.False(more);                  return true;              });
Magic Number,NetMQ.Tests,OutgoingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\OutgoingSocketExtensionsTests.cs,TrySignalFailedTest,The following statement contains a magic number: var socket = new MockOutgoingSocket((ref Msg msg' TimeSpan timeout' bool more) =>              {                  Assert.Equal(TimeSpan.Zero' timeout);                  Assert.Equal(8' msg.Data.Length);                    var value = NetworkOrderBitsConverter.ToInt64(msg.Data);                    Assert.Equal(0x7766554433221100L' value);                    Assert.False(more);                  return false;              });
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: const int MegaBit = 1024;
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: const int MegaByte = 1024;
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: pub.Options.MulticastHops = 2;
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: pub.Options.MulticastRate = 40*MegaBit;
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: pub.Options.MulticastRecoveryInterval = TimeSpan.FromMinutes(10);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: pub.Options.SendBuffer = MegaByte*10;
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: sub.Options.ReceiveBuffer = MegaByte*10;
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: Assert.Equal(2' pub.Options.MulticastHops);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: Assert.Equal(40*MegaBit' pub.Options.MulticastRate);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMinutes(10)' pub.Options.MulticastRecoveryInterval);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: Assert.Equal(MegaByte*10' pub.Options.SendBuffer);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SetPgmSettings,The following statement contains a magic number: Assert.Equal(MegaByte*10' sub.Options.ReceiveBuffer);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,Sending1000Messages,The following statement contains a magic number: Task subTask = Task.Factory.StartNew(() =>              {                  using (var sub = new SubscriberSocket())                  {                      sub.Bind("pgm://224.0.0.1:5555");                      sub.Subscribe("");                        subReady.Set();                        while (count < 1000)                      {                          Assert.Equal(count' BitConverter.ToInt32(sub.ReceiveFrameBytes(out bool more)' 0));                          Assert.False(more);                          count++;                      }                  }              });
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,Sending1000Messages,The following statement contains a magic number: Task pubTask = Task.Factory.StartNew(() =>              {                  using (var pub = new PublisherSocket())                  {                      pub.Connect("pgm://224.0.0.1:5555");                        for (int i = 0; i < 1000; i++)                          pub.SendFrame(BitConverter.GetBytes(i));                        // if we close the socket before the subscriber receives all messages subscriber                      // might miss messages' lets wait another second                      Thread.Sleep(1000);                  }              });
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,Sending1000Messages,The following statement contains a magic number: Task pubTask = Task.Factory.StartNew(() =>              {                  using (var pub = new PublisherSocket())                  {                      pub.Connect("pgm://224.0.0.1:5555");                        for (int i = 0; i < 1000; i++)                          pub.SendFrame(BitConverter.GetBytes(i));                        // if we close the socket before the subscriber receives all messages subscriber                      // might miss messages' lets wait another second                      Thread.Sleep(1000);                  }              });
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,Sending1000Messages,The following statement contains a magic number: Assert.Equal(1000' count);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,LargeMessage,The following statement contains a magic number: var data = new byte[3200];
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,LargeMessage,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(i)' 0' data' i*2' 2);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,LargeMessage,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(i)' 0' data' i*2' 2);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,LargeMessage,The following statement contains a magic number: Assert.Equal(3200' message.Length);
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,LargeMessage,The following statement contains a magic number: Assert.Equal(i' BitConverter.ToInt16(message' i*2));
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SubscriberCleanupOnUnbind,The following statement contains a magic number: Assert.True(closed.Wait(1000));
Magic Number,NetMQ.Tests,PgmTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PgmTests.cs,SubscriberCleanupOnUnbind,The following statement contains a magic number: i < 10
Magic Number,NetMQ.Tests,ProxyTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ProxyTests.cs,StoppingProxyDisengagesFunctionality,The following statement contains a magic number: Assert.False(server.TrySkipFrame(TimeSpan.FromMilliseconds(50)));
Magic Number,NetMQ.Tests,ProxyTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ProxyTests.cs,TestProxySendAndReceiveWithExternalPoller,The following statement contains a magic number: Assert.False(server.TrySkipFrame(TimeSpan.FromMilliseconds(50)));
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,TopicPubSub,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,SimplePubSub,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,NotSubscribed,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,MultipleSubscriptions,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,MultipleSubscriptions,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,MultipleSubscribersOnDifferentTopics,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,MultiplePublishersAndSubscribersOnSameTopic,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,Unsubscribe,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,Unsubscribe,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,ThroughXPubXSub,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,ThroughXPubXSubWithReconnectingPublisher,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,PubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PubSubTests.cs,ThroughXPubXSubWithReconnectingPublisher,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,PushPullTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PushPullTests.cs,EmptyMessage,The following statement contains a magic number: pushSocket.SendFrame(new byte[300]);
Magic Number,NetMQ.Tests,PushPullTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\PushPullTests.cs,EmptyMessage,The following statement contains a magic number: Assert.Equal(300' pullSocket.ReceiveFrameString().Length);
Magic Number,NetMQ.Tests,ReceivingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ReceivingSocketExtensionsTests.cs,ReceiveMultipartBytes,The following statement contains a magic number: Assert.Equal(4' actual.Capacity);
Magic Number,NetMQ.Tests,ReceivingSocketExtensionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\ReceivingSocketExtensionsTests.cs,ReceiveMultipartStrings,The following statement contains a magic number: Assert.Equal(4' actual.Capacity);
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseMultipartMessageWithRetrySucceedsFirstTry,The following statement contains a magic number: const int numTries = 5;
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseMultipartMessageWithRetrySucceedsFirstTry,The following statement contains a magic number: var requestTimeout = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseMultipartMessageWithRetryFails,The following statement contains a magic number: const int numTries = 5;
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseMultipartMessageWithRetryFails,The following statement contains a magic number: var requestTimeout = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseMultipartMessageWithRetryFails,The following statement contains a magic number: var serverProactor = new NetMQProactor(server' (socket' message) =>                  {                      Debug.WriteLine("ResponseEcho received message {0} at {1:ss.fff}"' message[2].ConvertToString()'                          DateTime.Now);                  });
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseMultipartMessageWithRetrySucceedsNotOnFirstTry,The following statement contains a magic number: const int numTries = 5;
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseMultipartMessageWithRetrySucceedsNotOnFirstTry,The following statement contains a magic number: var requestTimeout = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseMultipartMessageWithRetrySucceedsNotOnFirstTry,The following statement contains a magic number: var serverProactor = new NetMQProactor(server' (socket' message) =>                  {                      Debug.WriteLine("ResponseEcho received message {0} at {1:ss.fff}"' message[2].ConvertToString()'                          DateTime.Now);                        attempt++;                        if (attempt > 1)                      {                          // reply same message                          socket.SendMultipartMessage(message);                      }                  });
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseStringWithRetryFails,The following statement contains a magic number: const int numTries = 5;
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseStringWithRetryFails,The following statement contains a magic number: var requestTimeout = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseStringWithRetryFails,The following statement contains a magic number: var serverProactor = new NetMQProactor(server' (socket' message) =>                  {                      Debug.WriteLine("ResponseEcho received message {0} at {1:ss.fff}"' message[2].ConvertToString()'                          DateTime.Now);                  });
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseStringWithRetrySucceedsNotOnFirstTry,The following statement contains a magic number: const int numTries = 5;
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseStringWithRetrySucceedsNotOnFirstTry,The following statement contains a magic number: var requestTimeout = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,RequestWithRetryTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RequestWithRetryTests.cs,RequestResponseStringWithRetrySucceedsNotOnFirstTry,The following statement contains a magic number: var serverProactor = new NetMQProactor(server' (socket' message) =>                  {                      Debug.WriteLine("ResponseEcho received message {0} at {1:ss.fff}"' message[2].ConvertToString()'                          DateTime.Now);                        attempt++;                        if (attempt > 1)                      {                          // reply same message                          socket.SendMultipartMessage(message);                      }                  });
Magic Number,NetMQ.Tests,RouterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RouterTests.cs,Mandatory,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,RouterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RouterTests.cs,ReceiveReadyDot35Bug,The following statement contains a magic number: Assert.False(server.Poll(TimeSpan.FromMilliseconds(1500)));
Magic Number,NetMQ.Tests,RouterTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\RouterTests.cs,TwoMessagesFromRouterToDealer,The following statement contains a magic number: client.ReceiveReady += (sender' e) =>                  {                      e.Socket.ReceiveMultipartStrings();                      cnt++;                      if (cnt == 2)                      {                          poller.Stop();                      }                  };
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.MulticastRate = 100;
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(100' socket.Options.MulticastRate);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.MulticastRecoveryInterval = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMilliseconds(100)' socket.Options.MulticastRecoveryInterval);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.ReceiveBuffer = 100;
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(100' socket.Options.ReceiveBuffer);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.Linger = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMilliseconds(100)' socket.Options.Linger);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.ReconnectInterval = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMilliseconds(100)' socket.Options.ReconnectInterval);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.ReconnectIntervalMax = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMilliseconds(100)' socket.Options.ReconnectIntervalMax);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.Backlog = 100;
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(100' socket.Options.Backlog);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.MaxMsgSize = 100;
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(100' socket.Options.MaxMsgSize);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.SendHighWatermark = 100;
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(100' socket.Options.SendHighWatermark);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.ReceiveHighWatermark = 100;
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(100' socket.Options.ReceiveHighWatermark);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.MulticastHops = 100;
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(100' socket.Options.MulticastHops);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.TcpKeepaliveIdle = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMilliseconds(100)' socket.Options.TcpKeepaliveIdle);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: socket.Options.TcpKeepaliveInterval = TimeSpan.FromMilliseconds(100);
Magic Number,NetMQ.Tests,SocketOptionsTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketOptionsTests.cs,GetAndSetAllProperties,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMilliseconds(100)' socket.Options.TcpKeepaliveInterval);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,CheckTrySendSucceeds,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,CheckTrySendFails,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargeMessage,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargeMessage,The following statement contains a magic number: var msg = new byte[300];
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargeMessage,The following statement contains a magic number: Assert.Equal(300' msg2.Length);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,ReceiveMessageWithTimeout,The following statement contains a magic number: var payload = new byte[300];
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,ReceiveMessageWithTimeout,The following statement contains a magic number: const int waitTime = 500;
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,ReceiveMessageWithTimeout,The following statement contains a magic number: var t2 = new Task(() =>                  {                      using (var subSocket = new SubscriberSocket())                      {                          subSocket.Connect("tcp://127.0.0.1:12345");                          subSocket.Subscribe("");                          Thread.Sleep(100);                          pubSync.Set();                            NetMQMessage msg = null;                          Assert.False(subSocket.TryReceiveMultipartMessage(TimeSpan.FromMilliseconds(100)' ref msg));                            Assert.True(subSocket.TryReceiveMultipartMessage(TimeSpan.FromMilliseconds(waitTime)' ref msg));                          Assert.NotNull(msg);                          Assert.Equal(1' msg.FrameCount);                          Assert.Equal(300' msg.First.MessageSize);                          pubSync.Set();                      }                  }' TaskCreationOptions.LongRunning);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,ReceiveMessageWithTimeout,The following statement contains a magic number: var t2 = new Task(() =>                  {                      using (var subSocket = new SubscriberSocket())                      {                          subSocket.Connect("tcp://127.0.0.1:12345");                          subSocket.Subscribe("");                          Thread.Sleep(100);                          pubSync.Set();                            NetMQMessage msg = null;                          Assert.False(subSocket.TryReceiveMultipartMessage(TimeSpan.FromMilliseconds(100)' ref msg));                            Assert.True(subSocket.TryReceiveMultipartMessage(TimeSpan.FromMilliseconds(waitTime)' ref msg));                          Assert.NotNull(msg);                          Assert.Equal(1' msg.FrameCount);                          Assert.Equal(300' msg.First.MessageSize);                          pubSync.Set();                      }                  }' TaskCreationOptions.LongRunning);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,ReceiveMessageWithTimeout,The following statement contains a magic number: var t2 = new Task(() =>                  {                      using (var subSocket = new SubscriberSocket())                      {                          subSocket.Connect("tcp://127.0.0.1:12345");                          subSocket.Subscribe("");                          Thread.Sleep(100);                          pubSync.Set();                            NetMQMessage msg = null;                          Assert.False(subSocket.TryReceiveMultipartMessage(TimeSpan.FromMilliseconds(100)' ref msg));                            Assert.True(subSocket.TryReceiveMultipartMessage(TimeSpan.FromMilliseconds(waitTime)' ref msg));                          Assert.NotNull(msg);                          Assert.Equal(1' msg.FrameCount);                          Assert.Equal(300' msg.First.MessageSize);                          pubSync.Set();                      }                  }' TaskCreationOptions.LongRunning);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargeMessageLittleEndian,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargeMessageLittleEndian,The following statement contains a magic number: var msg = new byte[300];
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargeMessageLittleEndian,The following statement contains a magic number: Assert.Equal(300' msg2.Length);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,TestKeepalive,The following statement contains a magic number: rep.Options.TcpKeepaliveIdle = TimeSpan.FromSeconds(5);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,TestKeepalive,The following statement contains a magic number: req.Options.TcpKeepaliveIdle = TimeSpan.FromSeconds(5);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,TestKeepalive,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(5)' req.Options.TcpKeepaliveIdle);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,TestKeepalive,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(5)' rep.Options.TcpKeepaliveIdle);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,MultipleLargeMessages,The following statement contains a magic number: var largeMessage = new byte[12000];
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,MultipleLargeMessages,The following statement contains a magic number: largeMessage[i] = (byte)(i % 256);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,MultipleLargeMessages,The following statement contains a magic number: i < 12000
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,MultipleLargeMessages,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: var largerBuffer = new byte[256];
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: largerBuffer[124] = 0xD;
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: largerBuffer[125] = 0xE;
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: largerBuffer[126] = 0xE;
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: largerBuffer[127] = 0xD;
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: pub.SendFrame(largerBuffer' 128);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: Assert.Equal(128' recvMessage.Length);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: Assert.Equal(0xD' recvMessage[124]);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: Assert.Equal(0xE' recvMessage[125]);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: Assert.Equal(0xE' recvMessage[126]);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,LargerBufferLength,The following statement contains a magic number: Assert.Equal(0xD' recvMessage[127]);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,RawSocket,The following statement contains a magic number: var buffer = new byte[16];
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,HasInTest,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,HasInTest,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,HasOutTest,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,Disconnect,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,Disconnect,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,Unbind,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,Unbind,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,Unbind,The following statement contains a magic number: Assert.False(client2.TrySendFrame(TimeSpan.FromSeconds(2)' "2"));
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,ReconnectOnRouterBug,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,ReconnectOnRouterBug,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,ReconnectOnRouterBug,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,InprocRouterDealerTest,The following statement contains a magic number: backendRouter.ReceiveReady += (o' e) =>                  {                      // Handle worker activity on backend                      while (e.Socket.HasIn)                      {                          var msg = e.Socket.ReceiveMultipartMessage();                          var idRouter = msg.Pop();                          // forget the empty frame                          if (msg.First.IsEmpty)                              msg.Pop();                            var id = msg.Pop();                          if (msg.First.IsEmpty)                              msg.Pop();                            if (msg.FrameCount == 1)                          {                              // worker send RDY message queue his Identity to the free workers queue                              if (readyMsg[0] == msg[0].Buffer[0] &&                                  readyMsg[1] == msg[0].Buffer[1] &&                                  readyMsg[2] == msg[0].Buffer[2])                              {                                  lock (freeWorkers)                                  {                                      freeWorkers.Enqueue(id.Buffer);                                  }                              }                          }                      }                  };
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,InprocRouterDealerTest,The following statement contains a magic number: backendRouter.ReceiveReady += (o' e) =>                  {                      // Handle worker activity on backend                      while (e.Socket.HasIn)                      {                          var msg = e.Socket.ReceiveMultipartMessage();                          var idRouter = msg.Pop();                          // forget the empty frame                          if (msg.First.IsEmpty)                              msg.Pop();                            var id = msg.Pop();                          if (msg.First.IsEmpty)                              msg.Pop();                            if (msg.FrameCount == 1)                          {                              // worker send RDY message queue his Identity to the free workers queue                              if (readyMsg[0] == msg[0].Buffer[0] &&                                  readyMsg[1] == msg[0].Buffer[1] &&                                  readyMsg[2] == msg[0].Buffer[2])                              {                                  lock (freeWorkers)                                  {                                      freeWorkers.Enqueue(id.Buffer);                                  }                              }                          }                      }                  };
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,InprocRouterDealerTest,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,InprocRouterDealerTest,The following statement contains a magic number: i < 2
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,InprocRouterDealerTest,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NetMQ.Tests,SocketTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,InprocRouterDealerTest,The following statement contains a magic number: Assert.Equal(2' freeWorkers.Count);
Magic Number,NetMQ.Tests,NetMQSocketExtensions,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\SocketTests.cs,Unbind,The following statement contains a magic number: closed.Wait(1000);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,TopicPubSub,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,TopicPubSub,The following statement contains a magic number: Assert.Equal(2' msg.Length);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,Census,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,SimplePubSub,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,NotSubscribed,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,MultipleSubscriptions,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,MultipleSubscriptions,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,MultipleSubscribers,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,MultiplePublishers,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,MultiplePublishers,The following statement contains a magic number: Assert.Equal(2' msg.Length);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,MultiplePublishers,The following statement contains a magic number: Assert.Equal(2' msg2.Length);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,MultiplePublishers,The following statement contains a magic number: Assert.Equal(2' msg.Length);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,MultiplePublishers,The following statement contains a magic number: Assert.Equal(2' msg2.Length);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,Unsubscribe,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,Unsubscribe,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastEnabled,The following statement contains a magic number: var payload = new[] {(byte) 42};
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastEnabled,The following statement contains a magic number: sub1.SendFrame(new byte[] {2' (byte) 'A'}' true);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastEnabled,The following statement contains a magic number: sub1.SendFrame(new[] {(byte) 42});
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastEnabled,The following statement contains a magic number: Assert.Equal(2' topic[0]);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastEnabled,The following statement contains a magic number: Assert.True(broadcast2[0] == 65);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastEnabled,The following statement contains a magic number: var received = sub1.TryReceive(ref msg' System.TimeSpan.FromMilliseconds(500));
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastDisabled,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastDisabled,The following statement contains a magic number: var payload = new[] { (byte)42 };
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastDisabled,The following statement contains a magic number: sub1.SendFrame(new[] { (byte)42 });
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastDisabled,The following statement contains a magic number: Assert.True(broadcast2[0] == 65);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,BroadcastDisabled,The following statement contains a magic number: Assert.True(broadcast1[0] == 65);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,CouldTrackSubscriberIdentityInXPubSocket,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,CouldTrackSubscriberIdentityInXPubSocket,The following statement contains a magic number: var identity2 = new byte[] { 2 };
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,CouldTrackSubscriberIdentityInXPubSocket,The following statement contains a magic number: sub1.SendFrame(new[] { (byte)42 });
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,CouldTrackSubscriberIdentityInXPubSocket,The following statement contains a magic number: sub2.SendFrame(new[] { (byte)43 });
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,CouldTrackSubscriberIdentityInXPubSocket,The following statement contains a magic number: sub1.SendFrame(new[] { (byte)44 });
Magic Number,NetMQ.Tests,XPubSubTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\XPubSubTests.cs,CouldTrackSubscriberIdentityInXPubSocket,The following statement contains a magic number: sub2.SendFrame(new[] { (byte)45 });
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,PushingToQueueShouldIncreaseBackPosition,The following statement contains a magic number: var queue = new YQueue<string>(100);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,PushingToQueueShouldIncreaseBackPosition,The following statement contains a magic number: Assert.Equal(2' queue.BackPos);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,PushingToQueueShouldIncreaseBackPosition,The following statement contains a magic number: Assert.Equal(3' queue.BackPos);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,PoppingFromQueueShouldIncreaseFrontPosition,The following statement contains a magic number: var queue = new YQueue<string>(100);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,PoppingFromQueueShouldIncreaseFrontPosition,The following statement contains a magic number: Assert.Equal(2' queue.FrontPos);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,PoppingFromQueueShouldIncreaseFrontPosition,The following statement contains a magic number: Assert.Equal(3' queue.FrontPos);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,QueuedItemsShouldBeReturned,The following statement contains a magic number: var queue = new YQueue<string>(100);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,SmallChunkSizeShouldNotAffectBehavior,The following statement contains a magic number: var queue = new YQueue<string>(2);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,UnpushShouldRemoveLastPushedItem,The following statement contains a magic number: var queue = new YQueue<string>(2);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,UnpushShouldRemoveLastPushedItem,The following statement contains a magic number: Assert.Equal(3' queue.BackPos);
Magic Number,NetMQ.Tests.Core,YQueueTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\Core\YQueueTests.cs,UnpushShouldRemoveLastPushedItem,The following statement contains a magic number: Assert.Equal(2' queue.BackPos);
Magic Number,NetMQ.Tests.InProcActors.AccountJSON,AccountActorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\InProcActors\AccountJSON\AccountActorTests.cs,AccountActorJsonSendReceiveTests,The following statement contains a magic number: var accountAction = new AccountAction(TransactionType.Credit' 10);
Magic Number,NetMQ.Tests.InProcActors.AccountJSON,AccountActorTests,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\InProcActors\AccountJSON\AccountActorTests.cs,AccountActorJsonSendReceiveTests,The following statement contains a magic number: Assert.Equal(10.0m' updatedAccount.Balance);
Magic Number,NetMQ.Tests.InProcActors.AccountJSON,AccountShimHandler,D:\research\architectureSmells\repos\zeromq_netmq\src\NetMQ.Tests\InProcActors\AccountJSON\AccountShimHandler.cs,Run,The following statement contains a magic number: string accountJson = msg[2].ConvertToString();
