Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Begin,Cyclomatic complexity of the method is 13
Complex Method,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,FromHSV,Cyclomatic complexity of the method is 33
Complex Method,Spooker,EntityList,F:\newReposMay17\codeindie_spooker\Source\EntityList.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,Spooker.Network,NetworkAgent,F:\newReposMay17\codeindie_spooker\Source\Network\NetworkAgent.cs,Update,Cyclomatic complexity of the method is 27
Complex Method,Spooker.Network,NetUtility,F:\newReposMay17\codeindie_spooker\Source\Network\NetUtility.cs,SortMembersList,Cyclomatic complexity of the method is 8
Complex Method,Spooker.Graphics.Particles,ParticleSystem,F:\newReposMay17\codeindie_spooker\Source\Graphics\Particles\ParticleSystem.cs,InitializeParticle,Cyclomatic complexity of the method is 10
Complex Method,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,Cyclomatic complexity of the method is 13
Long Parameter List,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Draw,The method has 8 parameters.
Long Parameter List,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Draw,The method has 10 parameters.
Long Parameter List,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,WriteQuad,The method has 7 parameters.
Long Parameter List,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,WriteText,The method has 9 parameters.
Long Parameter List,Spooker.Graphics,Texture,F:\newReposMay17\codeindie_spooker\Source\Graphics\Texture.cs,CopyPixels,The method has 5 parameters.
Long Parameter List,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Barycentric,The method has 5 parameters.
Long Parameter List,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,CatmullRom,The method has 5 parameters.
Long Parameter List,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,ScaleClamp,The method has 5 parameters.
Long Parameter List,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The method has 5 parameters.
Long Parameter List,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,Barycentric,The method has 5 parameters.
Long Parameter List,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,CatmullRom,The method has 5 parameters.
Long Parameter List,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,Hermite,The method has 5 parameters.
Long Parameter List,Spooker,Matrix,F:\newReposMay17\codeindie_spooker\Source\Matrix.cs,Matrix,The method has 9 parameters.
Long Parameter List,Spooker,Matrix,F:\newReposMay17\codeindie_spooker\Source\Matrix.cs,Matrix,The method has 16 parameters.
Long Parameter List,Spooker.Graphics.Particles,Particle,F:\newReposMay17\codeindie_spooker\Source\Graphics\Particles\Particle.cs,Initialize,The method has 6 parameters.
Long Statement,Spooker.Graphics,ScaleEffectMultiplier,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteEffects.cs,Get,The length of the statement  "	return new Vector2 (((effects & SpriteEffects.FlipHorizontally) != 0) ? -1 : 1' ((effects & SpriteEffects.FlipVertically) != 0) ? -1 : 1); " is 138.
Long Statement,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Draw,The length of the statement  "	batcher.WriteQuad (texture.ToSfml ()' position.ToSfml ()' sourceRect.ToSfml ()' color.ToSfml ()' scale.ToSfml ()' origin.ToSfml ()' rotation); " is 142.
Long Statement,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Draw,The length of the statement  "	batcher.WriteText (font.ToSfml ()' text' (uint)characterSize' position.ToSfml ()' color.ToSfml ()' scale.ToSfml ()' origin.ToSfml ()' rotation' (SFML.Graphics.Text.Styles)style); " is 178.
Long Statement,Spooker.Graphics,Sprite,F:\newReposMay17\codeindie_spooker\Source\Graphics\Sprite.cs,Intersects,The length of the statement  "				if (o1v.X > 0 && o1v.Y > 0 && o2v.X > 0 && o2v.Y > 0 && o1v.X < o1SubRectSize.X && o1v.Y < o1SubRectSize.Y && o2v.X < o2SubRectSize.X && o2v.Y < o2SubRectSize.Y) { " is 163.
Long Statement,Spooker.Graphics,Sprite,F:\newReposMay17\codeindie_spooker\Source\Graphics\Sprite.cs,RotatePoint,The length of the statement  "	return new Vector2 (vec.X * (float)Math.Cos (angle) - vec.Y * (float)Math.Sin (angle)' vec.X * (float)Math.Sin (angle) + vec.Y * (float)Math.Cos (angle)); " is 154.
Long Statement,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,ToString,The length of the statement  "	return "Color [R: " + R.ToString ("0.00") + " G: " + G.ToString ("0.00") + " B: " + B.ToString ("0.00") + " A: " + A.ToString ("0.00") + "]"; " is 141.
Long Statement,Spooker.Graphics,Texture,F:\newReposMay17\codeindie_spooker\Source\Graphics\Texture.cs,CopyPixels,The length of the statement  "	_image.Copy (from._image' (uint)toX' (uint)toY' new SFML.Graphics.IntRect (fromX' fromY' (int)from.Size.X' (int)from.Size.Y)); " is 126.
Long Statement,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,CatmullRom,The length of the statement  "	return 0.5 * (2.0 * value2 + (value3 - value1) * amount + (2.0 * value1 - 5.0 * value2 + 4.0 * value3 - value4) * amountSquared + (3.0 * value2 - value1 - 3.0 * value3 + value4) * amountCubed); " is 193.
Long Statement,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,Contains,The length of the statement  "	return ((((X <= value.X) && ((value.X + value.Width) <= (X + Width))) && (Y <= value.Y)) && ((value.Y + value.Height) <= (Y + Height))); " is 136.
Long Statement,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,GetHashCode,The length of the statement  "	return unchecked((int)((uint)Left ^ (((uint)Top << 13) | ((uint)Top >> 19)) ^ (((uint)Width << 26) | ((uint)Width >> 6)) ^ (((uint)Height << 7) | ((uint)Height >> 25)))); " is 170.
Long Statement,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,Barycentric,The length of the statement  "	return new Vector2 ((float)MathHelper.Barycentric (value1.X' value2.X' value3.X' amount1' amount2)' (float)MathHelper.Barycentric (value1.Y' value2.Y' value3.Y' amount1' amount2)); " is 180.
Long Statement,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,CatmullRom,The length of the statement  "	return new Vector2 ((float)MathHelper.CatmullRom (value1.X' value2.X' value3.X' value4.X' amount)' (float)MathHelper.CatmullRom (value1.Y' value2.Y' value3.Y' value4.Y' amount)); " is 178.
Long Statement,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,Clamp,The length of the statement  "	return new Vector2 ((float)MathHelper.Clamp (value1.X' min.X' max.X)' (float)MathHelper.Clamp (value1.Y' min.Y' max.Y)); " is 120.
Long Statement,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,Hermite,The length of the statement  "	return new Vector2 ((float)MathHelper.Hermite (value1.X' tangent1.X' value2.X' tangent2.X' amount)' (float)MathHelper.Hermite (value1.Y' tangent1.Y' value2.Y' tangent2.Y' amount)); " is 180.
Long Statement,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,Lerp,The length of the statement  "	return new Vector2 ((float)MathHelper.Lerp (value1.X' value2.X' amount)' (float)MathHelper.Lerp (value1.Y' value2.Y' amount)); " is 126.
Long Statement,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,SmoothStep,The length of the statement  "	return new Vector2 ((float)MathHelper.SmoothStep (value1.X' value2.X' amount)' (float)MathHelper.SmoothStep (value1.Y' value2.Y' amount)); " is 138.
Long Statement,Spooker,Matrix,F:\newReposMay17\codeindie_spooker\Source\Matrix.cs,CreateRotation,The length of the statement  "	return new Matrix (cos' -sin' center.X * (1 - cos) + center.Y * sin' sin' cos' center.Y * (1 - cos) - center.X * sin' 0' 0' 1); " is 127.
Long Statement,Spooker.Network,PacketWriter,F:\newReposMay17\codeindie_spooker\Source\Network\PacketWriter.cs,WriteAllProperties,The length of the statement  "	WriteAllProperties (ob' BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 122.
Long Statement,Spooker.Network,PacketReader,F:\newReposMay17\codeindie_spooker\Source\Network\PacketReader.cs,ReadMatrix,The length of the statement  "	return new Matrix (ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()' ReadSingle ()); " is 259.
Long Statement,Spooker.Network,PacketReader,F:\newReposMay17\codeindie_spooker\Source\Network\PacketReader.cs,ReadAllFields,The length of the statement  "	ReadAllFields (target' BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 121.
Long Statement,Spooker.Network,PacketReader,F:\newReposMay17\codeindie_spooker\Source\Network\PacketReader.cs,ReadAllProperties,The length of the statement  "	ReadAllProperties (target' BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 125.
Long Statement,Spooker.Graphics.Particles,ParticleSystem,F:\newReposMay17\codeindie_spooker\Source\Graphics\Particles\ParticleSystem.cs,InitializeParticle,The length of the statement  "		acceleration = new Vector2 ((float)MathHelper.Random (_settings.MinAccelerationVector.X' _settings.MaxAccelerationVector.X)' (float)MathHelper.Random (_settings.MinAccelerationVector.Y' _settings.MaxAccelerationVector.Y)); " is 222.
Long Statement,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The length of the statement  "				obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f); " is 130.
Long Statement,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The length of the statement  "				obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f); " is 139.
Long Statement,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The length of the statement  "				vert.AddRange (o.Points.Select (point => new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (point.Item1)' ConvertUnits.ToSimUnits (point.Item2)))); " is 158.
Long Statement,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The length of the statement  "			obj.Shape.Position = new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (obj.Position.X)' ConvertUnits.ToSimUnits (obj.Position.Y)); " is 142.
Long Statement,Spooker.Graphics.TiledMap,Object,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Object.cs,Update,The length of the statement  "	sprite.Position = new Vector2 (ConvertUnits.ToDisplayUnits (Shape.Position.X)' ConvertUnits.ToDisplayUnits (Shape.Position.Y)); " is 127.
Complex Conditional,Spooker.Graphics,Sprite,F:\newReposMay17\codeindie_spooker\Source\Graphics\Sprite.cs,Intersects,The conditional expression  "o1v.X > 0 && o1v.Y > 0 && o2v.X > 0 && o2v.Y > 0 && o1v.X < o1SubRectSize.X && o1v.Y < o1SubRectSize.Y && o2v.X < o2SubRectSize.X && o2v.Y < o2SubRectSize.Y"  is complex.
Virtual Method Call from Constructor,Spooker.GameStates,StateFactory,F:\newReposMay17\codeindie_spooker\Source\GameStates\StateFactory.cs,StateFactory,The constructor "StateFactory" calls a virtual method "MouseWheelMoved".
Virtual Method Call from Constructor,Spooker.GameStates,StateFactory,F:\newReposMay17\codeindie_spooker\Source\GameStates\StateFactory.cs,StateFactory,The constructor "StateFactory" calls a virtual method "TextEntered".
Virtual Method Call from Constructor,Spooker.GameStates,StateFactory,F:\newReposMay17\codeindie_spooker\Source\GameStates\StateFactory.cs,StateFactory,The constructor "StateFactory" calls a virtual method "KeyPressed".
Virtual Method Call from Constructor,Spooker.GameStates,StateFactory,F:\newReposMay17\codeindie_spooker\Source\GameStates\StateFactory.cs,StateFactory,The constructor "StateFactory" calls a virtual method "KeyReleased".
Virtual Method Call from Constructor,Spooker.GameStates,StateFactory,F:\newReposMay17\codeindie_spooker\Source\GameStates\StateFactory.cs,StateFactory,The constructor "StateFactory" calls a virtual method "MouseMoved".
Virtual Method Call from Constructor,Spooker.GameStates,StateFactory,F:\newReposMay17\codeindie_spooker\Source\GameStates\StateFactory.cs,StateFactory,The constructor "StateFactory" calls a virtual method "MouseButtonPressed".
Virtual Method Call from Constructor,Spooker.GameStates,StateFactory,F:\newReposMay17\codeindie_spooker\Source\GameStates\StateFactory.cs,StateFactory,The constructor "StateFactory" calls a virtual method "MouseButtonReleased".
Virtual Method Call from Constructor,Spooker.Core,GameWindow,F:\newReposMay17\codeindie_spooker\Source\Core\GameWindow.cs,GameWindow,The constructor "GameWindow" calls a virtual method "Dispose".
Magic Number,Spooker.Graphics,Camera,F:\newReposMay17\codeindie_spooker\Source\Graphics\Camera.cs,Camera,The following statement contains a magic number: base.Position = Size / 2;  
Magic Number,Spooker.Graphics,Camera,F:\newReposMay17\codeindie_spooker\Source\Graphics\Camera.cs,Update,The following statement contains a magic number: Scale = new Vector2 ((float)MathHelper.Clamp (Scale.X' 0.01' 10)' (float)MathHelper.Clamp (Scale.Y' 0.01' 10));  
Magic Number,Spooker.Graphics,Camera,F:\newReposMay17\codeindie_spooker\Source\Graphics\Camera.cs,Update,The following statement contains a magic number: Scale = new Vector2 ((float)MathHelper.Clamp (Scale.X' 0.01' 10)' (float)MathHelper.Clamp (Scale.Y' 0.01' 10));  
Magic Number,Spooker.Graphics,Camera,F:\newReposMay17\codeindie_spooker\Source\Graphics\Camera.cs,Update,The following statement contains a magic number: Scale = new Vector2 ((float)MathHelper.Clamp (Scale.X' 0.01' 10)' (float)MathHelper.Clamp (Scale.Y' 0.01' 10));  
Magic Number,Spooker.Graphics,Camera,F:\newReposMay17\codeindie_spooker\Source\Graphics\Camera.cs,Update,The following statement contains a magic number: Scale = new Vector2 ((float)MathHelper.Clamp (Scale.X' 0.01' 10)' (float)MathHelper.Clamp (Scale.Y' 0.01' 10));  
Magic Number,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Create,The following statement contains a magic number: if (Count >= (_vertices.Length / 4)) {  	if (_vertices.Length < Max)  		Array.Resize (ref _vertices' Math.Min (_vertices.Length * 2' Max));  	else  		throw new Exception ("Too many items");  }  
Magic Number,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Create,The following statement contains a magic number: if (Count >= (_vertices.Length / 4)) {  	if (_vertices.Length < Max)  		Array.Resize (ref _vertices' Math.Min (_vertices.Length * 2' Max));  	else  		throw new Exception ("Too many items");  }  
Magic Number,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Create,The following statement contains a magic number: if (_vertices.Length < Max)  	Array.Resize (ref _vertices' Math.Min (_vertices.Length * 2' Max));  else  	throw new Exception ("Too many items");  
Magic Number,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Create,The following statement contains a magic number: Array.Resize (ref _vertices' Math.Min (_vertices.Length * 2' Max));  
Magic Number,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Create,The following statement contains a magic number: _queueCount += 4;  
Magic Number,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Create,The following statement contains a magic number: return 4 * Count++;  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 3) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 4) {  	red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  	green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  	blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  	alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  } else if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: red = Convert.ToInt32 (hex.Substring (0' 1) + hex.Substring (0' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: green = Convert.ToInt32 (hex.Substring (1' 1) + hex.Substring (1' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (2' 1) + hex.Substring (2' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: alpha = Convert.ToInt32 (hex.Substring (3' 1) + hex.Substring (2' 1)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 6) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  } else if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: if (hex.Length == 8) {  	red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  	green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  	blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  	alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: red = Convert.ToInt32 (hex.Substring (0' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: green = Convert.ToInt32 (hex.Substring (2' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: blue = Convert.ToInt32 (hex.Substring (4' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: alpha = Convert.ToInt32 (hex.Substring (6' 2)' 16);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: R = MathHelper.ScaleClamp (red' 0' 255' 0' 1);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: G = MathHelper.ScaleClamp (green' 0' 255' 0' 1);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: B = MathHelper.ScaleClamp (blue' 0' 255' 0' 1);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,Color,The following statement contains a magic number: A = MathHelper.ScaleClamp (alpha' 0' 255' 0' 1);  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,FromHSV,The following statement contains a magic number: h *= 360;  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,FromHSV,The following statement contains a magic number: switch (hi) {  case 0:  	r = v;  	g = t;  	b = p;  	break;  case 1:  	r = q;  	g = v;  	b = p;  	break;  case 2:  	r = p;  	g = v;  	b = t;  	break;  case 3:  	r = p;  	g = q;  	b = v;  	break;  case 4:  	r = t;  	g = p;  	b = v;  	break;  case 5:  	r = v;  	g = p;  	b = q;  	break;  default:  	r = g = b = 0;  	break;  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,FromHSV,The following statement contains a magic number: switch (hi) {  case 0:  	r = v;  	g = t;  	b = p;  	break;  case 1:  	r = q;  	g = v;  	b = p;  	break;  case 2:  	r = p;  	g = v;  	b = t;  	break;  case 3:  	r = p;  	g = q;  	b = v;  	break;  case 4:  	r = t;  	g = p;  	b = v;  	break;  case 5:  	r = v;  	g = p;  	b = q;  	break;  default:  	r = g = b = 0;  	break;  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,FromHSV,The following statement contains a magic number: switch (hi) {  case 0:  	r = v;  	g = t;  	b = p;  	break;  case 1:  	r = q;  	g = v;  	b = p;  	break;  case 2:  	r = p;  	g = v;  	b = t;  	break;  case 3:  	r = p;  	g = q;  	b = v;  	break;  case 4:  	r = t;  	g = p;  	b = v;  	break;  case 5:  	r = v;  	g = p;  	b = q;  	break;  default:  	r = g = b = 0;  	break;  }  
Magic Number,Spooker.Graphics,Color,F:\newReposMay17\codeindie_spooker\Source\Graphics\Color.cs,FromHSV,The following statement contains a magic number: switch (hi) {  case 0:  	r = v;  	g = t;  	b = p;  	break;  case 1:  	r = q;  	g = v;  	b = p;  	break;  case 2:  	r = p;  	g = v;  	b = t;  	break;  case 3:  	r = p;  	g = q;  	b = v;  	break;  case 4:  	r = t;  	g = p;  	b = v;  	break;  case 5:  	r = v;  	g = p;  	b = q;  	break;  default:  	r = g = b = 0;  	break;  }  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,CatmullRom,The following statement contains a magic number: return 0.5 * (2.0 * value2 + (value3 - value1) * amount + (2.0 * value1 - 5.0 * value2 + 4.0 * value3 - value4) * amountSquared + (3.0 * value2 - value1 - 3.0 * value3 + value4) * amountCubed);  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,CatmullRom,The following statement contains a magic number: return 0.5 * (2.0 * value2 + (value3 - value1) * amount + (2.0 * value1 - 5.0 * value2 + 4.0 * value3 - value4) * amountSquared + (3.0 * value2 - value1 - 3.0 * value3 + value4) * amountCubed);  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,CatmullRom,The following statement contains a magic number: return 0.5 * (2.0 * value2 + (value3 - value1) * amount + (2.0 * value1 - 5.0 * value2 + 4.0 * value3 - value4) * amountSquared + (3.0 * value2 - value1 - 3.0 * value3 + value4) * amountCubed);  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,CatmullRom,The following statement contains a magic number: return 0.5 * (2.0 * value2 + (value3 - value1) * amount + (2.0 * value1 - 5.0 * value2 + 4.0 * value3 - value4) * amountSquared + (3.0 * value2 - value1 - 3.0 * value3 + value4) * amountCubed);  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,CatmullRom,The following statement contains a magic number: return 0.5 * (2.0 * value2 + (value3 - value1) * amount + (2.0 * value1 - 5.0 * value2 + 4.0 * value3 - value4) * amountSquared + (3.0 * value2 - value1 - 3.0 * value3 + value4) * amountCubed);  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,CatmullRom,The following statement contains a magic number: return 0.5 * (2.0 * value2 + (value3 - value1) * amount + (2.0 * value1 - 5.0 * value2 + 4.0 * value3 - value4) * amountSquared + (3.0 * value2 - value1 - 3.0 * value3 + value4) * amountCubed);  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,CatmullRom,The following statement contains a magic number: return 0.5 * (2.0 * value2 + (value3 - value1) * amount + (2.0 * value1 - 5.0 * value2 + 4.0 * value3 - value4) * amountSquared + (3.0 * value2 - value1 - 3.0 * value3 + value4) * amountCubed);  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 0f)  	result = value1;  else if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 0f)  	result = value1;  else if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 0f)  	result = value1;  else if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 0f)  	result = value1;  else if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 0f)  	result = value1;  else if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: if (amount == 1f)  	result = value2;  else  	result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,Hermite,The following statement contains a magic number: result = (2 * v1 - 2 * v2 + t2 + t1) * sCubed + (3 * v2 - 3 * v1 - 2 * t1 - t2) * sSquared + t1 * s + v1;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,ToDegrees,The following statement contains a magic number: return radians * 57.295779513082320876798154814105;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,ToRadians,The following statement contains a magic number: return degrees * 0.017453292519943295769236907684886;  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,WrapAngle,The following statement contains a magic number: angle = Math.IEEERemainder (angle' 6.2831854820251465);  
Magic Number,Spooker,MathHelper,F:\newReposMay17\codeindie_spooker\Source\MathHelper.cs,RandomChance,The following statement contains a magic number: return percent >= Random (100);  
Magic Number,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,Inflate,The following statement contains a magic number: Width += horizontalValue * 2;  
Magic Number,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,Inflate,The following statement contains a magic number: Height += verticalValue * 2;  
Magic Number,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,GetHashCode,The following statement contains a magic number: return unchecked((int)((uint)Left ^ (((uint)Top << 13) | ((uint)Top >> 19)) ^ (((uint)Width << 26) | ((uint)Width >> 6)) ^ (((uint)Height << 7) | ((uint)Height >> 25))));  
Magic Number,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,GetHashCode,The following statement contains a magic number: return unchecked((int)((uint)Left ^ (((uint)Top << 13) | ((uint)Top >> 19)) ^ (((uint)Width << 26) | ((uint)Width >> 6)) ^ (((uint)Height << 7) | ((uint)Height >> 25))));  
Magic Number,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,GetHashCode,The following statement contains a magic number: return unchecked((int)((uint)Left ^ (((uint)Top << 13) | ((uint)Top >> 19)) ^ (((uint)Width << 26) | ((uint)Width >> 6)) ^ (((uint)Height << 7) | ((uint)Height >> 25))));  
Magic Number,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,GetHashCode,The following statement contains a magic number: return unchecked((int)((uint)Left ^ (((uint)Top << 13) | ((uint)Top >> 19)) ^ (((uint)Width << 26) | ((uint)Width >> 6)) ^ (((uint)Height << 7) | ((uint)Height >> 25))));  
Magic Number,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,GetHashCode,The following statement contains a magic number: return unchecked((int)((uint)Left ^ (((uint)Top << 13) | ((uint)Top >> 19)) ^ (((uint)Width << 26) | ((uint)Width >> 6)) ^ (((uint)Height << 7) | ((uint)Height >> 25))));  
Magic Number,Spooker,Rectangle,F:\newReposMay17\codeindie_spooker\Source\Rectangle.cs,GetHashCode,The following statement contains a magic number: return unchecked((int)((uint)Left ^ (((uint)Top << 13) | ((uint)Top >> 19)) ^ (((uint)Width << 26) | ((uint)Width >> 6)) ^ (((uint)Height << 7) | ((uint)Height >> 25))));  
Magic Number,Spooker,Vector2,F:\newReposMay17\codeindie_spooker\Source\Vector2.cs,Direction,The following statement contains a magic number: return num3 < 0 ? num3 + (2 * (float)Math.PI) : num3;  
Magic Number,Spooker.Audio,AudioManager,F:\newReposMay17\codeindie_spooker\Source\Audio\AudioManager.cs,LoadContent,The following statement contains a magic number: foreach (var file in files)  	_sounds.Add (file.Name.Remove (file.Name.Length - 4' 4)' new SoundBuffer (file.FullName));  
Magic Number,Spooker.Audio,AudioManager,F:\newReposMay17\codeindie_spooker\Source\Audio\AudioManager.cs,LoadContent,The following statement contains a magic number: foreach (var file in files)  	_sounds.Add (file.Name.Remove (file.Name.Length - 4' 4)' new SoundBuffer (file.FullName));  
Magic Number,Spooker.Audio,AudioManager,F:\newReposMay17\codeindie_spooker\Source\Audio\AudioManager.cs,LoadContent,The following statement contains a magic number: _sounds.Add (file.Name.Remove (file.Name.Length - 4' 4)' new SoundBuffer (file.FullName));  
Magic Number,Spooker.Audio,AudioManager,F:\newReposMay17\codeindie_spooker\Source\Audio\AudioManager.cs,LoadContent,The following statement contains a magic number: _sounds.Add (file.Name.Remove (file.Name.Length - 4' 4)' new SoundBuffer (file.FullName));  
Magic Number,Spooker.Network,NetUtility,F:\newReposMay17\codeindie_spooker\Source\Network\NetUtility.cs,SortMembersList,The following statement contains a magic number: while (h * 3 + 1 <= list.Length)  	h = 3 * h + 1;  
Magic Number,Spooker.Network,NetUtility,F:\newReposMay17\codeindie_spooker\Source\Network\NetUtility.cs,SortMembersList,The following statement contains a magic number: while (h * 3 + 1 <= list.Length)  	h = 3 * h + 1;  
Magic Number,Spooker.Network,NetUtility,F:\newReposMay17\codeindie_spooker\Source\Network\NetUtility.cs,SortMembersList,The following statement contains a magic number: h = 3 * h + 1;  
Magic Number,Spooker.Network,NetUtility,F:\newReposMay17\codeindie_spooker\Source\Network\NetUtility.cs,SortMembersList,The following statement contains a magic number: while (h > 0) {  	for (int i = h - 1; i < list.Length; i++) {  		MemberInfo tmp = list [i];  		int j = i;  		while (true) {  			if (j >= h) {  				if (string.Compare (list [j - h].Name' tmp.Name' StringComparison.InvariantCulture) > 0) {  					list [j] = list [j - h];  					j -= h;  				} else  					break;  			} else  				break;  		}  		list [j] = tmp;  	}  	h /= 3;  }  
Magic Number,Spooker.Network,NetUtility,F:\newReposMay17\codeindie_spooker\Source\Network\NetUtility.cs,SortMembersList,The following statement contains a magic number: h /= 3;  
Magic Number,Spooker.Graphics.Lights,LightEngine,F:\newReposMay17\codeindie_spooker\Source\Graphics\Lights\LightEngine.cs,LightEngine,The following statement contains a magic number: _lightTexture = new RenderTexture (1024' 1024);  
Magic Number,Spooker.Graphics.Lights,LightEngine,F:\newReposMay17\codeindie_spooker\Source\Graphics\Lights\LightEngine.cs,LightEngine,The following statement contains a magic number: _lightTexture = new RenderTexture (1024' 1024);  
Magic Number,Spooker.Graphics.Lights,LightEngine,F:\newReposMay17\codeindie_spooker\Source\Graphics\Lights\LightEngine.cs,SetTexture,The following statement contains a magic number: _lightSprite.Origin = new Vector2 (_lightSprite.Size.X / 2' _lightSprite.Size.Y / 2);  
Magic Number,Spooker.Graphics.Lights,LightEngine,F:\newReposMay17\codeindie_spooker\Source\Graphics\Lights\LightEngine.cs,SetTexture,The following statement contains a magic number: _lightSprite.Origin = new Vector2 (_lightSprite.Size.X / 2' _lightSprite.Size.Y / 2);  
Magic Number,Spooker.Graphics.Particles,ParticleSystem,F:\newReposMay17\codeindie_spooker\Source\Graphics\Particles\ParticleSystem.cs,AddParticles,The following statement contains a magic number: for (int i = 0; i < numParticles; i++) {  	// if we're out of free particles' we allocate another ten particles  	// which should keep us going.  	if (_freeParticles.Count == 0) {  		for (int j = 0; j < 10; j++) {  			var newParticle = new Particle ();  			_particles.Add (newParticle);  			_freeParticles.Enqueue (newParticle);  		}  	}  	// grab a particle from the freeParticles queue' and Initialize it.  	var p = _freeParticles.Dequeue ();  	InitializeParticle (p' where' velocity);  }  
Magic Number,Spooker.Graphics.Particles,ParticleSystem,F:\newReposMay17\codeindie_spooker\Source\Graphics\Particles\ParticleSystem.cs,AddParticles,The following statement contains a magic number: if (_freeParticles.Count == 0) {  	for (int j = 0; j < 10; j++) {  		var newParticle = new Particle ();  		_particles.Add (newParticle);  		_freeParticles.Enqueue (newParticle);  	}  }  
Magic Number,Spooker.Graphics.Particles,ParticleSystem,F:\newReposMay17\codeindie_spooker\Source\Graphics\Particles\ParticleSystem.cs,AddParticles,The following statement contains a magic number: for (int j = 0; j < 10; j++) {  	var newParticle = new Particle ();  	_particles.Add (newParticle);  	_freeParticles.Enqueue (newParticle);  }  
Magic Number,Spooker.Graphics.Particles,ParticleSystem,F:\newReposMay17\codeindie_spooker\Source\Graphics\Particles\ParticleSystem.cs,LoadContent,The following statement contains a magic number: _origin = _texture.Size / 2;  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: foreach (var objectGroup in objectGroups) {  	foreach (var o in objectGroup.Objects) {  		var obj = new Object {  			Name = o.Name'  			Type = o.Type'  			Position = new Vector2 (o.X' o.Y)'  			Size = new Vector2 (o.Width' o.Height)'  			Properties = o.Properties  		};  		if (o.Points != null)  			foreach (var p in o.Points)  				obj.Points.Add (new Point (p.Item1' p.Item2));  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  			if (obj.Size.X == 0 || obj.Size.Y == 0)  				continue;  			obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  			obj.Position += obj.Size / 2;  			if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  				obj.Position.Y -= o.Height;  				obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  					Position = obj.Position'  					SourceRect = gidDict [o.Tile.Gid].Key'  					Origin = obj.Size / 2  				};  				obj.ObjectType = ObjectType.Graphic;  			} else  				obj.ObjectType = ObjectType.Rectangle;  		}  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  			obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  			obj.ObjectType = ObjectType.Ellipse;  		}  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline || o.ObjectType == TmxObjectGroup.TmxObjectType.Polygon) {  			var vert = new Vertices ();  			vert.AddRange (o.Points.Select (point => new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (point.Item1)' ConvertUnits.ToSimUnits (point.Item2))));  			if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline) {  				obj.ObjectType = ObjectType.Polyline;  				obj.Shape = BodyFactory.CreateChainShape (Physics' vert);  			} else {  				obj.ObjectType = ObjectType.Polygon;  				var verts = Triangulate.ConvexPartition (vert' TriangulationAlgorithm.Bayazit);  				obj.Shape = BodyFactory.CreateCompoundPolygon (Physics' verts' 1f);  			}  		}  		obj.Shape.Position = new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (obj.Position.X)' ConvertUnits.ToSimUnits (obj.Position.Y));  		if (objectGroup.Name.Contains ("Dynamic")) {  			obj.Shape.BodyType = BodyType.Dynamic;  			obj.Shape.IsStatic = false;  			obj.Shape.LinearDamping = 1f;  		} else {  			obj.Shape.BodyType = BodyType.Static;  			obj.Shape.IsStatic = true;  		}  		objList.Add (obj);  	}  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: foreach (var objectGroup in objectGroups) {  	foreach (var o in objectGroup.Objects) {  		var obj = new Object {  			Name = o.Name'  			Type = o.Type'  			Position = new Vector2 (o.X' o.Y)'  			Size = new Vector2 (o.Width' o.Height)'  			Properties = o.Properties  		};  		if (o.Points != null)  			foreach (var p in o.Points)  				obj.Points.Add (new Point (p.Item1' p.Item2));  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  			if (obj.Size.X == 0 || obj.Size.Y == 0)  				continue;  			obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  			obj.Position += obj.Size / 2;  			if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  				obj.Position.Y -= o.Height;  				obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  					Position = obj.Position'  					SourceRect = gidDict [o.Tile.Gid].Key'  					Origin = obj.Size / 2  				};  				obj.ObjectType = ObjectType.Graphic;  			} else  				obj.ObjectType = ObjectType.Rectangle;  		}  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  			obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  			obj.ObjectType = ObjectType.Ellipse;  		}  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline || o.ObjectType == TmxObjectGroup.TmxObjectType.Polygon) {  			var vert = new Vertices ();  			vert.AddRange (o.Points.Select (point => new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (point.Item1)' ConvertUnits.ToSimUnits (point.Item2))));  			if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline) {  				obj.ObjectType = ObjectType.Polyline;  				obj.Shape = BodyFactory.CreateChainShape (Physics' vert);  			} else {  				obj.ObjectType = ObjectType.Polygon;  				var verts = Triangulate.ConvexPartition (vert' TriangulationAlgorithm.Bayazit);  				obj.Shape = BodyFactory.CreateCompoundPolygon (Physics' verts' 1f);  			}  		}  		obj.Shape.Position = new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (obj.Position.X)' ConvertUnits.ToSimUnits (obj.Position.Y));  		if (objectGroup.Name.Contains ("Dynamic")) {  			obj.Shape.BodyType = BodyType.Dynamic;  			obj.Shape.IsStatic = false;  			obj.Shape.LinearDamping = 1f;  		} else {  			obj.Shape.BodyType = BodyType.Static;  			obj.Shape.IsStatic = true;  		}  		objList.Add (obj);  	}  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: foreach (var objectGroup in objectGroups) {  	foreach (var o in objectGroup.Objects) {  		var obj = new Object {  			Name = o.Name'  			Type = o.Type'  			Position = new Vector2 (o.X' o.Y)'  			Size = new Vector2 (o.Width' o.Height)'  			Properties = o.Properties  		};  		if (o.Points != null)  			foreach (var p in o.Points)  				obj.Points.Add (new Point (p.Item1' p.Item2));  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  			if (obj.Size.X == 0 || obj.Size.Y == 0)  				continue;  			obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  			obj.Position += obj.Size / 2;  			if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  				obj.Position.Y -= o.Height;  				obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  					Position = obj.Position'  					SourceRect = gidDict [o.Tile.Gid].Key'  					Origin = obj.Size / 2  				};  				obj.ObjectType = ObjectType.Graphic;  			} else  				obj.ObjectType = ObjectType.Rectangle;  		}  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  			obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  			obj.ObjectType = ObjectType.Ellipse;  		}  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline || o.ObjectType == TmxObjectGroup.TmxObjectType.Polygon) {  			var vert = new Vertices ();  			vert.AddRange (o.Points.Select (point => new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (point.Item1)' ConvertUnits.ToSimUnits (point.Item2))));  			if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline) {  				obj.ObjectType = ObjectType.Polyline;  				obj.Shape = BodyFactory.CreateChainShape (Physics' vert);  			} else {  				obj.ObjectType = ObjectType.Polygon;  				var verts = Triangulate.ConvexPartition (vert' TriangulationAlgorithm.Bayazit);  				obj.Shape = BodyFactory.CreateCompoundPolygon (Physics' verts' 1f);  			}  		}  		obj.Shape.Position = new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (obj.Position.X)' ConvertUnits.ToSimUnits (obj.Position.Y));  		if (objectGroup.Name.Contains ("Dynamic")) {  			obj.Shape.BodyType = BodyType.Dynamic;  			obj.Shape.IsStatic = false;  			obj.Shape.LinearDamping = 1f;  		} else {  			obj.Shape.BodyType = BodyType.Static;  			obj.Shape.IsStatic = true;  		}  		objList.Add (obj);  	}  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: foreach (var objectGroup in objectGroups) {  	foreach (var o in objectGroup.Objects) {  		var obj = new Object {  			Name = o.Name'  			Type = o.Type'  			Position = new Vector2 (o.X' o.Y)'  			Size = new Vector2 (o.Width' o.Height)'  			Properties = o.Properties  		};  		if (o.Points != null)  			foreach (var p in o.Points)  				obj.Points.Add (new Point (p.Item1' p.Item2));  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  			if (obj.Size.X == 0 || obj.Size.Y == 0)  				continue;  			obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  			obj.Position += obj.Size / 2;  			if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  				obj.Position.Y -= o.Height;  				obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  					Position = obj.Position'  					SourceRect = gidDict [o.Tile.Gid].Key'  					Origin = obj.Size / 2  				};  				obj.ObjectType = ObjectType.Graphic;  			} else  				obj.ObjectType = ObjectType.Rectangle;  		}  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  			obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  			obj.ObjectType = ObjectType.Ellipse;  		}  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline || o.ObjectType == TmxObjectGroup.TmxObjectType.Polygon) {  			var vert = new Vertices ();  			vert.AddRange (o.Points.Select (point => new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (point.Item1)' ConvertUnits.ToSimUnits (point.Item2))));  			if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline) {  				obj.ObjectType = ObjectType.Polyline;  				obj.Shape = BodyFactory.CreateChainShape (Physics' vert);  			} else {  				obj.ObjectType = ObjectType.Polygon;  				var verts = Triangulate.ConvexPartition (vert' TriangulationAlgorithm.Bayazit);  				obj.Shape = BodyFactory.CreateCompoundPolygon (Physics' verts' 1f);  			}  		}  		obj.Shape.Position = new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (obj.Position.X)' ConvertUnits.ToSimUnits (obj.Position.Y));  		if (objectGroup.Name.Contains ("Dynamic")) {  			obj.Shape.BodyType = BodyType.Dynamic;  			obj.Shape.IsStatic = false;  			obj.Shape.LinearDamping = 1f;  		} else {  			obj.Shape.BodyType = BodyType.Static;  			obj.Shape.IsStatic = true;  		}  		objList.Add (obj);  	}  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: foreach (var o in objectGroup.Objects) {  	var obj = new Object {  		Name = o.Name'  		Type = o.Type'  		Position = new Vector2 (o.X' o.Y)'  		Size = new Vector2 (o.Width' o.Height)'  		Properties = o.Properties  	};  	if (o.Points != null)  		foreach (var p in o.Points)  			obj.Points.Add (new Point (p.Item1' p.Item2));  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  		if (obj.Size.X == 0 || obj.Size.Y == 0)  			continue;  		obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  		obj.Position += obj.Size / 2;  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  			obj.Position.Y -= o.Height;  			obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  				Position = obj.Position'  				SourceRect = gidDict [o.Tile.Gid].Key'  				Origin = obj.Size / 2  			};  			obj.ObjectType = ObjectType.Graphic;  		} else  			obj.ObjectType = ObjectType.Rectangle;  	}  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  		obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  		obj.ObjectType = ObjectType.Ellipse;  	}  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline || o.ObjectType == TmxObjectGroup.TmxObjectType.Polygon) {  		var vert = new Vertices ();  		vert.AddRange (o.Points.Select (point => new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (point.Item1)' ConvertUnits.ToSimUnits (point.Item2))));  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline) {  			obj.ObjectType = ObjectType.Polyline;  			obj.Shape = BodyFactory.CreateChainShape (Physics' vert);  		} else {  			obj.ObjectType = ObjectType.Polygon;  			var verts = Triangulate.ConvexPartition (vert' TriangulationAlgorithm.Bayazit);  			obj.Shape = BodyFactory.CreateCompoundPolygon (Physics' verts' 1f);  		}  	}  	obj.Shape.Position = new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (obj.Position.X)' ConvertUnits.ToSimUnits (obj.Position.Y));  	if (objectGroup.Name.Contains ("Dynamic")) {  		obj.Shape.BodyType = BodyType.Dynamic;  		obj.Shape.IsStatic = false;  		obj.Shape.LinearDamping = 1f;  	} else {  		obj.Shape.BodyType = BodyType.Static;  		obj.Shape.IsStatic = true;  	}  	objList.Add (obj);  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: foreach (var o in objectGroup.Objects) {  	var obj = new Object {  		Name = o.Name'  		Type = o.Type'  		Position = new Vector2 (o.X' o.Y)'  		Size = new Vector2 (o.Width' o.Height)'  		Properties = o.Properties  	};  	if (o.Points != null)  		foreach (var p in o.Points)  			obj.Points.Add (new Point (p.Item1' p.Item2));  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  		if (obj.Size.X == 0 || obj.Size.Y == 0)  			continue;  		obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  		obj.Position += obj.Size / 2;  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  			obj.Position.Y -= o.Height;  			obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  				Position = obj.Position'  				SourceRect = gidDict [o.Tile.Gid].Key'  				Origin = obj.Size / 2  			};  			obj.ObjectType = ObjectType.Graphic;  		} else  			obj.ObjectType = ObjectType.Rectangle;  	}  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  		obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  		obj.ObjectType = ObjectType.Ellipse;  	}  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline || o.ObjectType == TmxObjectGroup.TmxObjectType.Polygon) {  		var vert = new Vertices ();  		vert.AddRange (o.Points.Select (point => new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (point.Item1)' ConvertUnits.ToSimUnits (point.Item2))));  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline) {  			obj.ObjectType = ObjectType.Polyline;  			obj.Shape = BodyFactory.CreateChainShape (Physics' vert);  		} else {  			obj.ObjectType = ObjectType.Polygon;  			var verts = Triangulate.ConvexPartition (vert' TriangulationAlgorithm.Bayazit);  			obj.Shape = BodyFactory.CreateCompoundPolygon (Physics' verts' 1f);  		}  	}  	obj.Shape.Position = new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (obj.Position.X)' ConvertUnits.ToSimUnits (obj.Position.Y));  	if (objectGroup.Name.Contains ("Dynamic")) {  		obj.Shape.BodyType = BodyType.Dynamic;  		obj.Shape.IsStatic = false;  		obj.Shape.LinearDamping = 1f;  	} else {  		obj.Shape.BodyType = BodyType.Static;  		obj.Shape.IsStatic = true;  	}  	objList.Add (obj);  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: foreach (var o in objectGroup.Objects) {  	var obj = new Object {  		Name = o.Name'  		Type = o.Type'  		Position = new Vector2 (o.X' o.Y)'  		Size = new Vector2 (o.Width' o.Height)'  		Properties = o.Properties  	};  	if (o.Points != null)  		foreach (var p in o.Points)  			obj.Points.Add (new Point (p.Item1' p.Item2));  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  		if (obj.Size.X == 0 || obj.Size.Y == 0)  			continue;  		obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  		obj.Position += obj.Size / 2;  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  			obj.Position.Y -= o.Height;  			obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  				Position = obj.Position'  				SourceRect = gidDict [o.Tile.Gid].Key'  				Origin = obj.Size / 2  			};  			obj.ObjectType = ObjectType.Graphic;  		} else  			obj.ObjectType = ObjectType.Rectangle;  	}  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  		obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  		obj.ObjectType = ObjectType.Ellipse;  	}  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline || o.ObjectType == TmxObjectGroup.TmxObjectType.Polygon) {  		var vert = new Vertices ();  		vert.AddRange (o.Points.Select (point => new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (point.Item1)' ConvertUnits.ToSimUnits (point.Item2))));  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline) {  			obj.ObjectType = ObjectType.Polyline;  			obj.Shape = BodyFactory.CreateChainShape (Physics' vert);  		} else {  			obj.ObjectType = ObjectType.Polygon;  			var verts = Triangulate.ConvexPartition (vert' TriangulationAlgorithm.Bayazit);  			obj.Shape = BodyFactory.CreateCompoundPolygon (Physics' verts' 1f);  		}  	}  	obj.Shape.Position = new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (obj.Position.X)' ConvertUnits.ToSimUnits (obj.Position.Y));  	if (objectGroup.Name.Contains ("Dynamic")) {  		obj.Shape.BodyType = BodyType.Dynamic;  		obj.Shape.IsStatic = false;  		obj.Shape.LinearDamping = 1f;  	} else {  		obj.Shape.BodyType = BodyType.Static;  		obj.Shape.IsStatic = true;  	}  	objList.Add (obj);  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: foreach (var o in objectGroup.Objects) {  	var obj = new Object {  		Name = o.Name'  		Type = o.Type'  		Position = new Vector2 (o.X' o.Y)'  		Size = new Vector2 (o.Width' o.Height)'  		Properties = o.Properties  	};  	if (o.Points != null)  		foreach (var p in o.Points)  			obj.Points.Add (new Point (p.Item1' p.Item2));  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  		if (obj.Size.X == 0 || obj.Size.Y == 0)  			continue;  		obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  		obj.Position += obj.Size / 2;  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  			obj.Position.Y -= o.Height;  			obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  				Position = obj.Position'  				SourceRect = gidDict [o.Tile.Gid].Key'  				Origin = obj.Size / 2  			};  			obj.ObjectType = ObjectType.Graphic;  		} else  			obj.ObjectType = ObjectType.Rectangle;  	}  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  		obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  		obj.ObjectType = ObjectType.Ellipse;  	}  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline || o.ObjectType == TmxObjectGroup.TmxObjectType.Polygon) {  		var vert = new Vertices ();  		vert.AddRange (o.Points.Select (point => new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (point.Item1)' ConvertUnits.ToSimUnits (point.Item2))));  		if (o.ObjectType == TmxObjectGroup.TmxObjectType.Polyline) {  			obj.ObjectType = ObjectType.Polyline;  			obj.Shape = BodyFactory.CreateChainShape (Physics' vert);  		} else {  			obj.ObjectType = ObjectType.Polygon;  			var verts = Triangulate.ConvexPartition (vert' TriangulationAlgorithm.Bayazit);  			obj.Shape = BodyFactory.CreateCompoundPolygon (Physics' verts' 1f);  		}  	}  	obj.Shape.Position = new Microsoft.Xna.Framework.Vector2 (ConvertUnits.ToSimUnits (obj.Position.X)' ConvertUnits.ToSimUnits (obj.Position.Y));  	if (objectGroup.Name.Contains ("Dynamic")) {  		obj.Shape.BodyType = BodyType.Dynamic;  		obj.Shape.IsStatic = false;  		obj.Shape.LinearDamping = 1f;  	} else {  		obj.Shape.BodyType = BodyType.Static;  		obj.Shape.IsStatic = true;  	}  	objList.Add (obj);  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  	if (obj.Size.X == 0 || obj.Size.Y == 0)  		continue;  	obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  	obj.Position += obj.Size / 2;  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  		obj.Position.Y -= o.Height;  		obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  			Position = obj.Position'  			SourceRect = gidDict [o.Tile.Gid].Key'  			Origin = obj.Size / 2  		};  		obj.ObjectType = ObjectType.Graphic;  	} else  		obj.ObjectType = ObjectType.Rectangle;  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: if (o.ObjectType == TmxObjectGroup.TmxObjectType.Basic || o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  	if (obj.Size.X == 0 || obj.Size.Y == 0)  		continue;  	obj.Shape = BodyFactory.CreateRectangle (Physics' ConvertUnits.ToSimUnits (obj.Size.X)' ConvertUnits.ToSimUnits (obj.Size.Y)' 1f);  	obj.Position += obj.Size / 2;  	if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  		obj.Position.Y -= o.Height;  		obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  			Position = obj.Position'  			SourceRect = gidDict [o.Tile.Gid].Key'  			Origin = obj.Size / 2  		};  		obj.ObjectType = ObjectType.Graphic;  	} else  		obj.ObjectType = ObjectType.Rectangle;  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: obj.Position += obj.Size / 2;  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: if (o.ObjectType == TmxObjectGroup.TmxObjectType.Tile) {  	obj.Position.Y -= o.Height;  	obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  		Position = obj.Position'  		SourceRect = gidDict [o.Tile.Gid].Key'  		Origin = obj.Size / 2  	};  	obj.ObjectType = ObjectType.Graphic;  } else  	obj.ObjectType = ObjectType.Rectangle;  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: obj.Shape.UserData = new Sprite (gidDict [o.Tile.Gid].Value) {  	Position = obj.Position'  	SourceRect = gidDict [o.Tile.Gid].Key'  	Origin = obj.Size / 2  };  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  	obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  	obj.ObjectType = ObjectType.Ellipse;  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: if (o.ObjectType == TmxObjectGroup.TmxObjectType.Ellipse) {  	obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  	obj.ObjectType = ObjectType.Ellipse;  }  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  
Magic Number,Spooker.Graphics.TiledMap,Map,F:\newReposMay17\codeindie_spooker\Source\Graphics\TiledMap\Map.cs,ConvertObjects,The following statement contains a magic number: obj.Shape = BodyFactory.CreateEllipse (Physics' ConvertUnits.ToSimUnits (obj.Size.X / 2)' ConvertUnits.ToSimUnits (obj.Size.Y / 2)' 0' 1f);  
Missing Default,Spooker.Graphics,SpriteBatch,F:\newReposMay17\codeindie_spooker\Source\Graphics\SpriteBatch.cs,Begin,The following switch statement is missing a default case: switch (blendMode) {  case SpriteBlendMode.None:  	_states.BlendMode = SFML.Graphics.BlendMode.None;  	break;  case SpriteBlendMode.Alpha:  	_states.BlendMode = SFML.Graphics.BlendMode.Alpha;  	break;  case SpriteBlendMode.Additive:  	_states.BlendMode = SFML.Graphics.BlendMode.Add;  	break;  case SpriteBlendMode.Multiply:  	_states.BlendMode = SFML.Graphics.BlendMode.Multiply;  	break;  }  
Missing Default,Spooker.Network,NetworkAgent,F:\newReposMay17\codeindie_spooker\Source\Network\NetworkAgent.cs,Update,The following switch statement is missing a default case: switch (incomingMessage.MessageType) {  case NetIncomingMessageType.DiscoveryRequest:  	_peer.SendDiscoveryResponse (null' incomingMessage.SenderEndPoint);  	break;  case NetIncomingMessageType.VerboseDebugMessage:  case NetIncomingMessageType.DebugMessage:  case NetIncomingMessageType.WarningMessage:  case NetIncomingMessageType.ErrorMessage:  	if (_role == AgentRole.Server)  		output += incomingMessage.ReadString () + "\n";  	break;  case NetIncomingMessageType.StatusChanged:  	var status = (NetConnectionStatus)incomingMessage.ReadByte ();  	if (_role == AgentRole.Server)  		output += "Status Message: " + incomingMessage.ReadString () + "\n";  	if (status == NetConnectionStatus.Disconnected) {  		if (OnDisconnect != null)  			OnDisconnect.Invoke (incomingMessage);  	}  	if (status == NetConnectionStatus.Connected) {  		if (OnConnect != null)  			OnConnect.Invoke (incomingMessage);  	}  	break;  case NetIncomingMessageType.Data:  	var id = incomingMessage.ReadInt32 ();  	Packets [id].HandleData (incomingMessage);  	break;  }  
Missing Default,Spooker.Graphics.Particles,ParticleSystem,F:\newReposMay17\codeindie_spooker\Source\Graphics\Particles\ParticleSystem.cs,InitializeParticle,The following switch statement is missing a default case: switch (_settings.AccelerationMode) {  case AccelerationMode.Scalar:  	// randomly pick our acceleration using our direction and   	// the MinAcceleration/MaxAcceleration values  	var accelerationScale = (float)MathHelper.Random (_settings.MinAccelerationScale' _settings.MaxAccelerationScale);  	acceleration = direction * accelerationScale;  	break;  case AccelerationMode.EndVelocity:  	// Compute our acceleration based on our ending velocity from the settings.  	// We'll use the equation vt = v0 + (a0 * t). (If you're not familar with  	// this' it's one of the basic kinematics equations for constant  	// acceleration' and basically says:  	// velocity at time t = initial velocity + acceleration * t)  	// We're solving for a0 by substituting t for our lifetime' v0 for our  	// velocity' and vt as velocity * settings.EndVelocity.  	acceleration = (velocity * (_settings.EndVelocity - 1)) / lifetime;  	break;  case AccelerationMode.Vector:  	acceleration = new Vector2 ((float)MathHelper.Random (_settings.MinAccelerationVector.X' _settings.MaxAccelerationVector.X)' (float)MathHelper.Random (_settings.MinAccelerationVector.Y' _settings.MaxAccelerationVector.Y));  	break;  }  
