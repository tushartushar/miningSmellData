Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,Contains,The length of the statement  "                throw new InvalidOperationException("node.QueueIndex has been corrupted. Did you change it manually? Or add this node to another queue?");" is 138.
Long Statement,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,CascadeUp,The length of the statement  "                Swap(node' parentNode); //For some reason' this is faster with Swap() rather than (less..?) individual operations' like in CascadeDown()" is 136.
Long Statement,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,Dequeue,The length of the statement  "                throw new InvalidOperationException("Queue has been corrupted (Did you update a node priority manually instead of calling UpdatePriority()?" +" is 142.
Long Statement,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,Resize,The length of the statement  "                throw new InvalidOperationException("Called Resize(" + maxNodes + ")' but current queue contains " + _numNodes + " nodes");" is 123.
Long Statement,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,IsValidQueue,The length of the statement  "                    if(childLeftIndex < _nodes.Length && _nodes[childLeftIndex] != null && HasHigherPriority(_nodes[childLeftIndex]' _nodes[i]))" is 124.
Long Statement,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,IsValidQueue,The length of the statement  "                    if(childRightIndex < _nodes.Length && _nodes[childRightIndex] != null && HasHigherPriority(_nodes[childRightIndex]' _nodes[i]))" is 127.
Long Statement,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,Contains,The length of the statement  "                throw new InvalidOperationException("node.QueueIndex has been corrupted. Did you change it manually? Or add this node to another queue?");" is 138.
Long Statement,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,CascadeUp,The length of the statement  "                Swap(node' parentNode); //For some reason' this is faster with Swap() rather than (less..?) individual operations' like in CascadeDown()" is 136.
Long Statement,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,Dequeue,The length of the statement  "                throw new InvalidOperationException("Queue has been corrupted (Did you update a node priority manually instead of calling UpdatePriority()?" +" is 142.
Long Statement,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,Resize,The length of the statement  "                throw new InvalidOperationException("Called Resize(" + maxNodes + ")' but current queue contains " + _numNodes + " nodes");" is 123.
Long Statement,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,IsValidQueue,The length of the statement  "                    if(childLeftIndex < _nodes.Length && _nodes[childLeftIndex] != null && HasHigherPriority(_nodes[childLeftIndex]' _nodes[i]))" is 124.
Long Statement,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,IsValidQueue,The length of the statement  "                    if(childRightIndex < _nodes.Length && _nodes[childRightIndex] != null && HasHigherPriority(_nodes[childRightIndex]' _nodes[i]))" is 127.
Long Statement,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,Contains,The length of the statement  "                throw new InvalidOperationException("node.QueueIndex has been corrupted. Did you change it manually? Or add this node to another queue?");" is 138.
Long Statement,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,CascadeUp,The length of the statement  "                Swap(node' parentNode); //For some reason' this is faster with Swap() rather than (less..?) individual operations' like in CascadeDown()" is 136.
Long Statement,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,Dequeue,The length of the statement  "                throw new InvalidOperationException("Queue has been corrupted (Did you update a node priority manually instead of calling UpdatePriority()?" +" is 142.
Long Statement,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,Resize,The length of the statement  "                throw new InvalidOperationException("Called Resize(" + maxNodes + ")' but current queue contains " + _numNodes + " nodes");" is 123.
Long Statement,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,IsValidQueue,The length of the statement  "                    if(childLeftIndex < _nodes.Length && _nodes[childLeftIndex] != null && HasHigherPriority(_nodes[childLeftIndex]' _nodes[i]))" is 124.
Long Statement,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,IsValidQueue,The length of the statement  "                    if(childRightIndex < _nodes.Length && _nodes[childRightIndex] != null && HasHigherPriority(_nodes[childRightIndex]' _nodes[i]))" is 127.
Magic Number,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,CascadeUp,The following statement contains a magic number: int parent = node.QueueIndex / 2;
Magic Number,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,CascadeUp,The following statement contains a magic number: parent = node.QueueIndex / 2;
Magic Number,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,CascadeDown,The following statement contains a magic number: int childLeftIndex = 2 * finalQueueIndex;
Magic Number,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,OnNodeUpdated,The following statement contains a magic number: int parentIndex = node.QueueIndex / 2;
Magic Number,Priority_Queue,GenericPriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\GenericPriorityQueue.cs,IsValidQueue,The following statement contains a magic number: int childLeftIndex = 2 * i;
Magic Number,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,CascadeUp,The following statement contains a magic number: int parent = node.QueueIndex / 2;
Magic Number,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,CascadeUp,The following statement contains a magic number: parent = node.QueueIndex / 2;
Magic Number,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,CascadeDown,The following statement contains a magic number: int childLeftIndex = 2 * finalQueueIndex;
Magic Number,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,OnNodeUpdated,The following statement contains a magic number: int parentIndex = node.QueueIndex / 2;
Magic Number,Priority_Queue,StablePriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\StablePriorityQueue.cs,IsValidQueue,The following statement contains a magic number: int childLeftIndex = 2 * i;
Magic Number,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,CascadeUp,The following statement contains a magic number: int parent = node.QueueIndex / 2;
Magic Number,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,CascadeUp,The following statement contains a magic number: parent = node.QueueIndex / 2;
Magic Number,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,CascadeDown,The following statement contains a magic number: int childLeftIndex = 2 * finalQueueIndex;
Magic Number,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,OnNodeUpdated,The following statement contains a magic number: int parentIndex = node.QueueIndex / 2;
Magic Number,Priority_Queue,FastPriorityQueue<T>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\FastPriorityQueue.cs,IsValidQueue,The following statement contains a magic number: int childLeftIndex = 2 * i;
Magic Number,Priority_Queue,SimplePriorityQueue<TItem;TPriority>,C:\research\architectureSmells\repos\mortennobel_UnityUtils\Assets\UnityUtils\ThirdParty\Priority Queue\SimplePriorityQueue.cs,Enqueue,The following statement contains a magic number: _queue.Resize(_queue.MaxSize*2 + 1);
