Implementation smell,Namespace,Class,File,Method,Description
Long Method,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,MakeWindowBorderless,The method has 167 lines of code.
Long Method,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,MakeWindowBorderlessDelayed,The method has 144 lines of code.
Complex Method,BorderlessGaming.Logic.Core,ProcessWatcher,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\ProcessWatcher.cs,UpdateProcesses,Cyclomatic complexity of the method is 9
Complex Method,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,MakeWindowBorderlessDelayed,Cyclomatic complexity of the method is 14
Complex Method,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,ToggleWindowsTaskbarVisibility,Cyclomatic complexity of the method is 8
Long Parameter List,BorderlessGaming.Logic.Windows,ForegroundManager,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\ForegroundManager.cs,WinEventProc,The method has 7 parameters. Parameters: hWinEventHook' eventType' hwnd' idObject' idChild' dwEventThread' dwmsEventTime
Long Parameter List,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,MakeWindowBorderless,The method has 5 parameters. Parameters: processDetails' frmMain' targetWindow' targetFrame' favDetails
Long Parameter List,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,MakeWindowBorderlessDelayed,The method has 5 parameters. Parameters: processDetails' frmMain' targetWindow' targetFrame' favDetails
Long Parameter List,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Parameter List,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,MoveWindow,The method has 6 parameters. Parameters: hWnd' X' Y' nWidth' nHeight' bRepaint
Long Parameter List,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' wFlags
Long Parameter List,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,SetWinEventHook,The method has 7 parameters. Parameters: eventMin' eventMax' hmodWinEventProc' lpfnWinEventProc' idProcess' idThread' dwFlags
Long Parameter List,BorderlessGaming.Logic.Windows,NativeMethods,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Uac.cs,GetTokenInformation,The method has 5 parameters. Parameters: hToken' tokenInfoClass' pTokenInfo' tokenInfoLength' returnLength
Long Identifier,BorderlessGaming.Logic.Models,ProcessDetails,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\ProcessDetails.cs,ToString,The length of the parameter processNameIsDissimilarToWindowTitle is 36.
Long Identifier,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,ToggleWindowsTaskbarVisibility,The length of the parameter wantToMakeWindowsTaskbarVisible is 31.
Long Identifier,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,,The length of the parameter GetMainWindowForProcess_Locker is 30.
Long Identifier,BorderlessGaming.Logic.Windows,NativeMethods,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Uac.cs,,The length of the parameter SECURITY_MANDATORY_UNTRUSTED_RID is 32.
Long Statement,BorderlessGaming.Logic.Core,LanguageManager,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\LanguageManager.cs,Load,The length of the statement  "               MessageBox.Show($"No Langauges have been loaded! Ensure {AppEnvironment.LanguagePath} exist with at least one .lang file."); " is 124.
Long Statement,BorderlessGaming.Logic.Core,LanguageManager,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\LanguageManager.cs,Load,The length of the statement  "            var defaultLang = Languages.Values.FirstOrDefault(lang => lang.Culture.Equals(Config.Instance.AppSettings.DefaultCulture)); " is 123.
Long Statement,BorderlessGaming.Logic.Models,Config,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\Config.cs,IsHidden,The length of the statement  "            return HiddenProcess.AlwaysHiddenProcesses.Any(process => process.Equals(processName.ToLower())) || HiddenProcesses.Any(process => process.Name.Equals(processName.ToLower())); " is 175.
Long Statement,BorderlessGaming.Logic.System.Utilities,ExceptionHandler,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\Utilities\ExceptionHandler.cs,AddGlobalHandlers,The length of the statement  "                    MessageBox.Show($"An Unhandled Exception was Caught and Logged to:\r\n{filePath}"' "Exception Caught"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 147.
Long Statement,BorderlessGaming.Logic.Windows,ForegroundManager,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\ForegroundManager.cs,Subscribe,The length of the statement  "           _mHhook = Native.SetWinEventHook(EventSystemForeground' EventSystemForeground' IntPtr.Zero' _dele' 0' 0' WineventOutofcontext); " is 127.
Long Statement,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,ToggleMouseCursorVisibility,The length of the statement  "                        // Can't load from a memory stream because the constructor new Cursor() does not accept animated or non-monochrome cursors " is 122.
Long Statement,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,RedrawWindowsSystemTrayArea,The length of the statement  "                // Note: this doesn't actually move the mouse cursor on the screen -- this just sends a message to the system tray window " is 121.
Long Statement,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,RedrawWindowsSystemTrayArea,The length of the statement  "                //       that mouse movement occurred over it' forcing it to refresh.  Sending messages asking for a repaint or invalidated " is 123.
Complex Conditional,BorderlessGaming.Logic.Models,Favorite,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\Favorite.cs,ToString,The conditional expression  "OffsetL != 0 || OffsetR != 0 || OffsetT != 0 || OffsetB != 0"  is complex.
Complex Conditional,BorderlessGaming.Logic.Models,Favorite,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\Favorite.cs,ToString,The conditional expression  "PositionX != 0 || PositionY != 0 || PositionW != 0 || PositionH != 0"  is complex.
Complex Conditional,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,ToggleMouseCursorVisibility,The conditional expression  "forced == Boolstate.True && !MouseCursorIsHidden ||                  forced == Boolstate.False && MouseCursorIsHidden"  is complex.
Empty Catch Block,BorderlessGaming.Logic.Core,ProcessWatcher,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\ProcessWatcher.cs,Watch,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.Models,ProcessDetails,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\ProcessDetails.cs,ToString,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.System,AppEnvironment,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\AppEnvironment.cs,GetUserAppDataPath,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.System,AutoStart,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\AutoStart.cs,CreateEntry,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.System,Tools,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\Tools.cs,GotoSite,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.System,Tools,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\Tools.cs,CheckForUpdates,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.System.Utilities,ExceptionHandler,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\Utilities\ExceptionHandler.cs,AddGlobalHandlers,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.System.Utilities,TaskUtilities,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\Utilities\TaskUtilities.cs,StartTaskAndWait,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.System.Utilities,TaskUtilities,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\Utilities\TaskUtilities.cs,StartTaskAndWait,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.Windows,ForegroundManager,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\ForegroundManager.cs,WinEventProc,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,ToggleWindowsTaskbarVisibility,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,ToggleMouseCursorVisibility,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,ToggleMouseCursorVisibility,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,RedrawWindowsSystemTrayArea,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,GetMainWindowForProcess,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,GetMainWindowForProcess,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Logic.Windows,Uac,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Uac.cs,IsElevated,The method has an empty catch block.
Magic Number,BorderlessGaming.Logic.Core,ProcessWatcher,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\ProcessWatcher.cs,Watch,The following statement contains a magic number: while (!_watcherToken.IsCancellationRequested)              {                  UpdateProcesses();                  if (AutoHandleFavorites)                  {                      // check favorites against the cache                      foreach (var pd in Processes)                      {                          try                          {                              foreach (var favProcess in Config.Instance.Favorites)                              {                                    if (favProcess.Matches(pd))                                  {                                      favProcess.IsRunning = true;                                      favProcess.RunningId = pd.Proc.Id;                                      RemoveBorder(pd' favProcess);                                  }                              }                          }                          catch                          {                              // ignored                          }                      }                  }                  await Task.Delay(TimeSpan.FromSeconds((Config.Instance.AppSettings.SlowWindowDetection ? 10 : 3)));              }
Magic Number,BorderlessGaming.Logic.Core,ProcessWatcher,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\ProcessWatcher.cs,Watch,The following statement contains a magic number: while (!_watcherToken.IsCancellationRequested)              {                  UpdateProcesses();                  if (AutoHandleFavorites)                  {                      // check favorites against the cache                      foreach (var pd in Processes)                      {                          try                          {                              foreach (var favProcess in Config.Instance.Favorites)                              {                                    if (favProcess.Matches(pd))                                  {                                      favProcess.IsRunning = true;                                      favProcess.RunningId = pd.Proc.Id;                                      RemoveBorder(pd' favProcess);                                  }                              }                          }                          catch                          {                              // ignored                          }                      }                  }                  await Task.Delay(TimeSpan.FromSeconds((Config.Instance.AppSettings.SlowWindowDetection ? 10 : 3)));              }
Magic Number,BorderlessGaming.Logic.Core,ProcessWatcher,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\ProcessWatcher.cs,RemoveBorder,The following statement contains a magic number: if (favDetails != null && favDetails.DelayBorderless && overrideTimeout == false)              {                  //Wait 10 seconds before removing the border.                  var task = new Task(() => RemoveBorder(pd' favDetails' true));                  task.Wait(TimeSpan.FromSeconds(10));              }
Magic Number,BorderlessGaming.Logic.Core,ProcessWatcher,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\ProcessWatcher.cs,RemoveBorder_ToSpecificScreen,The following statement contains a magic number: if (favDetails != null && favDetails.DelayBorderless && overrideTimeout == false)              {                  //Wait 10 seconds before removing the border.                  var task = new Task(() => RemoveBorder_ToSpecificScreen(hWnd' screen' favDetails' true));                  task.Wait(TimeSpan.FromSeconds(10));              }
Magic Number,BorderlessGaming.Logic.Core,ProcessWatcher,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\ProcessWatcher.cs,RemoveBorder_ToSpecificRect,The following statement contains a magic number: if (favDetails != null && favDetails.DelayBorderless && overrideTimeout == false)              {                  //Wait 10 seconds before removing the border.                  var task = new Task(() => RemoveBorder_ToSpecificRect(hWnd' targetFrame' favDetails' true));                  task.Wait(TimeSpan.FromSeconds(10));              }
Magic Number,BorderlessGaming.Logic.Core,ProcessWatcher,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\ProcessWatcher.cs,UpdateProcesses,The following statement contains a magic number: foreach (var process in Processes.ToList())              {                  var index = Processes.FindIndex(x => x.WindowHandle == process.WindowHandle);                  var shouldBePruned = process.ProcessHasExited;                  if (!shouldBePruned)                  {                      var currentTitle = "";                        if (!process.NoAccess)                      {                          TaskUtilities.StartTaskAndWait(() => { currentTitle = Native.GetWindowTitle(process.WindowHandle); }'                              Config.Instance.AppSettings.SlowWindowDetection ? 10 : 2); shouldBePruned = process.WindowTitle != currentTitle;                      }                  }                  if (shouldBePruned)                  {                      if (process.MadeBorderless)                      {                          HandlePrunedProcess(process);                      }                      Processes.RemoveAt(index);                      _callback(process' true);                  }              }
Magic Number,BorderlessGaming.Logic.Core,ProcessWatcher,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Core\ProcessWatcher.cs,UpdateProcesses,The following statement contains a magic number: foreach (var process in Processes.ToList())              {                  var index = Processes.FindIndex(x => x.WindowHandle == process.WindowHandle);                  var shouldBePruned = process.ProcessHasExited;                  if (!shouldBePruned)                  {                      var currentTitle = "";                        if (!process.NoAccess)                      {                          TaskUtilities.StartTaskAndWait(() => { currentTitle = Native.GetWindowTitle(process.WindowHandle); }'                              Config.Instance.AppSettings.SlowWindowDetection ? 10 : 2); shouldBePruned = process.WindowTitle != currentTitle;                      }                  }                  if (shouldBePruned)                  {                      if (process.MadeBorderless)                      {                          HandlePrunedProcess(process);                      }                      Processes.RemoveAt(index);                      _callback(process' true);                  }              }
Magic Number,BorderlessGaming.Logic.Models,Language,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\Language.cs,LoadData,The following statement contains a magic number: foreach (var line in File.ReadAllLines(languageFile' Encoding.UTF8))              {                  if (string.IsNullOrWhiteSpace(line))                  {                      continue;                  }                  var c = line.FirstOrDefault();                  if (c.Equals('#'))                  {                      continue;                  }                  var languageData = line.Split(new[] {'|'}' 2);                  var key = languageData[0].Trim().ToLower();                  var data = languageData[1].Trim();                  if (!LanguageData.ContainsKey(key))                  {                      LanguageData.Add(key' data);                  }              }
Magic Number,BorderlessGaming.Logic.Models,PRectangle,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\PRectangle.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = X;                  hashCode = (hashCode * 397) ^ Y;                  hashCode = (hashCode * 397) ^ Width;                  hashCode = (hashCode * 397) ^ Height;                  return hashCode;              }
Magic Number,BorderlessGaming.Logic.Models,PRectangle,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\PRectangle.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = X;                  hashCode = (hashCode * 397) ^ Y;                  hashCode = (hashCode * 397) ^ Width;                  hashCode = (hashCode * 397) ^ Height;                  return hashCode;              }
Magic Number,BorderlessGaming.Logic.Models,PRectangle,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\PRectangle.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = X;                  hashCode = (hashCode * 397) ^ Y;                  hashCode = (hashCode * 397) ^ Width;                  hashCode = (hashCode * 397) ^ Height;                  return hashCode;              }
Magic Number,BorderlessGaming.Logic.Models,ProcessDetails,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\ProcessDetails.cs,ProcessDetails,The following statement contains a magic number: TaskUtilities.StartTaskAndWait(() => { WindowTitle = Native.GetWindowTitle(WindowHandle); }'                  Config.Instance.AppSettings.SlowWindowDetection ? 10 : 2);
Magic Number,BorderlessGaming.Logic.Models,ProcessDetails,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\ProcessDetails.cs,ProcessDetails,The following statement contains a magic number: TaskUtilities.StartTaskAndWait(() => { WindowTitle = Native.GetWindowTitle(WindowHandle); }'                  Config.Instance.AppSettings.SlowWindowDetection ? 10 : 2);
Magic Number,BorderlessGaming.Logic.Models,ProcessDetails,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\ProcessDetails.cs,ToString,The following statement contains a magic number: try              {                  if (!string.IsNullOrEmpty(DescriptionOverride))                  {                      return DescriptionOverride;                  }                    if (Config.Instance.AppSettings.ViewAllProcessDetails)                  {                      var styleCurrentWindowStandard = Native.GetWindowLong(WindowHandle' WindowLongIndex.Style);                      var styleCurrentWindowExtended = Native.GetWindowLong(WindowHandle' WindowLongIndex.ExtendedStyle);                        var extraDetails =                          $" [{(uint) styleCurrentWindowStandard:X8}.{(uint) styleCurrentWindowExtended:X8}]";                      return string.IsNullOrWhiteSpace(WindowTitle.Trim())                          ? $"{BinaryName} [#{Proc.Id}]{extraDetails}"                          : $"{WindowTitle.Trim()} [{BinaryName}' #{Proc.Id}]{extraDetails}";                  }                    if (string.IsNullOrWhiteSpace(WindowTitle.Trim()))                  {                      return BinaryName;                  }                    var processNameIsDissimilarToWindowTitle = true;                  if (WindowTitleForComparison.Length >= 5)                  {                      if (BinaryNameForComparison.Length >= 5)                      {                          if (BinaryNameForComparison.Substring(0' 5) == WindowTitleForComparison.Substring(0' 5))                          {                              processNameIsDissimilarToWindowTitle = false;                          }                      }                  }                    return processNameIsDissimilarToWindowTitle                      ? $"{WindowTitle.Trim()} [{BinaryName}]"                      : WindowTitle.Trim();              }              catch              {                  // ignored              }
Magic Number,BorderlessGaming.Logic.Models,ProcessDetails,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\ProcessDetails.cs,ToString,The following statement contains a magic number: try              {                  if (!string.IsNullOrEmpty(DescriptionOverride))                  {                      return DescriptionOverride;                  }                    if (Config.Instance.AppSettings.ViewAllProcessDetails)                  {                      var styleCurrentWindowStandard = Native.GetWindowLong(WindowHandle' WindowLongIndex.Style);                      var styleCurrentWindowExtended = Native.GetWindowLong(WindowHandle' WindowLongIndex.ExtendedStyle);                        var extraDetails =                          $" [{(uint) styleCurrentWindowStandard:X8}.{(uint) styleCurrentWindowExtended:X8}]";                      return string.IsNullOrWhiteSpace(WindowTitle.Trim())                          ? $"{BinaryName} [#{Proc.Id}]{extraDetails}"                          : $"{WindowTitle.Trim()} [{BinaryName}' #{Proc.Id}]{extraDetails}";                  }                    if (string.IsNullOrWhiteSpace(WindowTitle.Trim()))                  {                      return BinaryName;                  }                    var processNameIsDissimilarToWindowTitle = true;                  if (WindowTitleForComparison.Length >= 5)                  {                      if (BinaryNameForComparison.Length >= 5)                      {                          if (BinaryNameForComparison.Substring(0' 5) == WindowTitleForComparison.Substring(0' 5))                          {                              processNameIsDissimilarToWindowTitle = false;                          }                      }                  }                    return processNameIsDissimilarToWindowTitle                      ? $"{WindowTitle.Trim()} [{BinaryName}]"                      : WindowTitle.Trim();              }              catch              {                  // ignored              }
Magic Number,BorderlessGaming.Logic.Models,ProcessDetails,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\ProcessDetails.cs,ToString,The following statement contains a magic number: try              {                  if (!string.IsNullOrEmpty(DescriptionOverride))                  {                      return DescriptionOverride;                  }                    if (Config.Instance.AppSettings.ViewAllProcessDetails)                  {                      var styleCurrentWindowStandard = Native.GetWindowLong(WindowHandle' WindowLongIndex.Style);                      var styleCurrentWindowExtended = Native.GetWindowLong(WindowHandle' WindowLongIndex.ExtendedStyle);                        var extraDetails =                          $" [{(uint) styleCurrentWindowStandard:X8}.{(uint) styleCurrentWindowExtended:X8}]";                      return string.IsNullOrWhiteSpace(WindowTitle.Trim())                          ? $"{BinaryName} [#{Proc.Id}]{extraDetails}"                          : $"{WindowTitle.Trim()} [{BinaryName}' #{Proc.Id}]{extraDetails}";                  }                    if (string.IsNullOrWhiteSpace(WindowTitle.Trim()))                  {                      return BinaryName;                  }                    var processNameIsDissimilarToWindowTitle = true;                  if (WindowTitleForComparison.Length >= 5)                  {                      if (BinaryNameForComparison.Length >= 5)                      {                          if (BinaryNameForComparison.Substring(0' 5) == WindowTitleForComparison.Substring(0' 5))                          {                              processNameIsDissimilarToWindowTitle = false;                          }                      }                  }                    return processNameIsDissimilarToWindowTitle                      ? $"{WindowTitle.Trim()} [{BinaryName}]"                      : WindowTitle.Trim();              }              catch              {                  // ignored              }
Magic Number,BorderlessGaming.Logic.Models,ProcessDetails,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Models\ProcessDetails.cs,ToString,The following statement contains a magic number: try              {                  if (!string.IsNullOrEmpty(DescriptionOverride))                  {                      return DescriptionOverride;                  }                    if (Config.Instance.AppSettings.ViewAllProcessDetails)                  {                      var styleCurrentWindowStandard = Native.GetWindowLong(WindowHandle' WindowLongIndex.Style);                      var styleCurrentWindowExtended = Native.GetWindowLong(WindowHandle' WindowLongIndex.ExtendedStyle);                        var extraDetails =                          $" [{(uint) styleCurrentWindowStandard:X8}.{(uint) styleCurrentWindowExtended:X8}]";                      return string.IsNullOrWhiteSpace(WindowTitle.Trim())                          ? $"{BinaryName} [#{Proc.Id}]{extraDetails}"                          : $"{WindowTitle.Trim()} [{BinaryName}' #{Proc.Id}]{extraDetails}";                  }                    if (string.IsNullOrWhiteSpace(WindowTitle.Trim()))                  {                      return BinaryName;                  }                    var processNameIsDissimilarToWindowTitle = true;                  if (WindowTitleForComparison.Length >= 5)                  {                      if (BinaryNameForComparison.Length >= 5)                      {                          if (BinaryNameForComparison.Substring(0' 5) == WindowTitleForComparison.Substring(0' 5))                          {                              processNameIsDissimilarToWindowTitle = false;                          }                      }                  }                    return processNameIsDissimilarToWindowTitle                      ? $"{WindowTitle.Trim()} [{BinaryName}]"                      : WindowTitle.Trim();              }              catch              {                  // ignored              }
Magic Number,BorderlessGaming.Logic.System,AutoStart,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\AutoStart.cs,CreateEntry,The following statement contains a magic number: try              {                  using (var sched = new TaskService())                  {                      var t = sched.GetTask(_taskName);                      var taskExists = t != null;                      if (taskExists)                      {                          return;                      }                      var td = TaskService.Instance.NewTask();                      td.Principal.RunLevel = TaskRunLevel.Highest;                      td.RegistrationInfo.Author = "Andrew Sampson";                      td.RegistrationInfo.Date = new DateTime();                      td.RegistrationInfo.Description = "Starts Borderless Gaming when booting.";                      //wait 10 seconds until after login is complete to boot                      var logT = new LogonTrigger {Delay = new TimeSpan(0' 0' 0' 10)};                      td.Triggers.Add(logT);                      td.Actions.Add(new ExecAction(AppEnvironment.Path' silentMinimize' null));                      TaskService.Instance.RootFolder.RegisterTaskDefinition(_taskName' td);                      Console.WriteLine("Task Registered");                  }              }              catch (Exception)              {                  //  MessageBox.Show(ex.Message);              }
Magic Number,BorderlessGaming.Logic.System.Utilities,TaskUtilities,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\Utilities\TaskUtilities.cs,StartTaskAndWait,The following statement contains a magic number: try              {                  Task.Run(async () =>                  {                      var ts = new CancellationTokenSource();                      var ct = ts.Token;                      var task = Task.Factory.StartNew(target' ct);                      var dtStartTime = DateTime.Now;                      while (true)                      {                          if (task.IsCompleted || task.IsCanceled || task.IsFaulted)                          {                              break;                          }                          if (iHowLongToWait > 0)                          {                              if ((DateTime.Now - dtStartTime).TotalSeconds > iHowLongToWait)                              {                                  try                                  {                                      ts.Cancel();                                  }                                  catch                                  {                                      // ignored                                  }                                  break;                              }                          }                          await Task.Delay(15' ct);                          //MainWindow.DoEvents();                      }                  }).Wait();              }              catch (Exception)              {                  //              }
Magic Number,BorderlessGaming.Logic.Windows.Audio,VolumeMixer,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Audio\VolumeMixer.cs,GetApplicationVolume,The following statement contains a magic number: return level * 100;
Magic Number,BorderlessGaming.Logic.Windows.Audio,VolumeMixer,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Audio\VolumeMixer.cs,SetApplicationVolume,The following statement contains a magic number: volume.SetMasterVolume(level / 100' ref guid);
Magic Number,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,MakeWindowBorderless,The following statement contains a magic number: if (NeedsDelay(targetWindow))              {                  MakeWindowBorderlessDelayed(processDetails' frmMain' targetWindow' targetFrame' favDetails);              }              else              {                  // Automatically match a window to favorite details' if that information is available.                  // Note: if one is not available' the default settings will be used as a new Favorite() object.                    // Automatically match this window to a process                    // Failsafe to prevent rapid switching' but also allow a few changes to the window handle (to be persistent)                  if (processDetails != null)                  {                      if (processDetails.MadeBorderless)                      {                          if (processDetails.MadeBorderlessAttempts > 3 || !processDetails.WindowHasTargetableStyles)                          {                              return;                          }                      }                  }                    // If no target frame was specified' assume the entire space on the primary screen                  if (targetFrame.Width == 0 || targetFrame.Height == 0)                  {                      targetFrame = Screen.FromHandle(targetWindow).Bounds;                  }                    // Get window styles                  var styleCurrentWindowStandard = Native.GetWindowLong(targetWindow' WindowLongIndex.Style);                  var styleCurrentWindowExtended = Native.GetWindowLong(targetWindow' WindowLongIndex.ExtendedStyle);                    // Compute new styles (XOR of the inverse of all the bits to filter)                  var styleNewWindowStandard =                      styleCurrentWindowStandard                      & ~(                          WindowStyleFlags.Caption // composite of Border and DialogFrame                          //   | WindowStyleFlags.Border                          //   | WindowStyleFlags.DialogFrame                                            | WindowStyleFlags.ThickFrame                          | WindowStyleFlags.SystemMenu                          | WindowStyleFlags.MaximizeBox // same as TabStop                          | WindowStyleFlags.MinimizeBox // same as Group                      );                    var styleNewWindowExtended =                      styleCurrentWindowExtended                      & ~(                          WindowStyleFlags.ExtendedDlgModalFrame                          | WindowStyleFlags.ExtendedComposited                          | WindowStyleFlags.ExtendedWindowEdge                          | WindowStyleFlags.ExtendedClientEdge                          | WindowStyleFlags.ExtendedLayered                          | WindowStyleFlags.ExtendedStaticEdge                          | WindowStyleFlags.ExtendedToolWindow                          | WindowStyleFlags.ExtendedAppWindow                      );                    // Should have process details by now                  if (processDetails != null)                  {                      // Save original details on this window so that we have a chance at undoing the process                      processDetails.OriginalStyleFlagsStandard = styleCurrentWindowStandard;                      processDetails.OriginalStyleFlagsExtended = styleCurrentWindowExtended;                      Native.Rect rectTemp;                      Native.GetWindowRect(processDetails.WindowHandle' out rectTemp);                      processDetails.OriginalLocation = new Rectangle(rectTemp.Left' rectTemp.Top'                          rectTemp.Right - rectTemp.Left' rectTemp.Bottom - rectTemp.Top);                  }                    // remove the menu and menuitems and force a redraw                  if (favDetails.RemoveMenus)                  {                      // unfortunately' menus can't be re-added easily so they aren't removed by default anymore                      var menuHandle = Native.GetMenu(targetWindow);                      if (menuHandle != IntPtr.Zero)                      {                          var menuItemCount = Native.GetMenuItemCount(menuHandle);                            for (var i = 0; i < menuItemCount; i++)                          {                              Native.RemoveMenu(menuHandle' 0' MenuFlags.ByPosition | MenuFlags.Remove);                          }                            Native.DrawMenuBar(targetWindow);                      }                  }                    // auto-hide the Windows taskbar (do this before resizing the window)                  if (favDetails.HideWindowsTaskbar)                  {                      Native.ShowWindow(frmMain.Handle' WindowShowStyle.ShowNoActivate);                      if (frmMain.WindowState == FormWindowState.Minimized)                      {                          frmMain.WindowState = FormWindowState.Normal;                      }                        ToggleWindowsTaskbarVisibility(Boolstate.False);                  }                    // auto-hide the mouse cursor                  if (favDetails.HideMouseCursor)                  {                      ToggleMouseCursorVisibility(frmMain' Boolstate.False);                  }                    // update window styles                  Native.SetWindowLong(targetWindow' WindowLongIndex.Style' styleNewWindowStandard);                  Native.SetWindowLong(targetWindow' WindowLongIndex.ExtendedStyle' styleNewWindowExtended);                    // update window position                  if (favDetails.Size != FavoriteSize.NoChange)                  {                      if (favDetails.Size == FavoriteSize.FullScreen || favDetails.PositionW == 0 ||                          favDetails.PositionH == 0)                      {                          // Set the window size to the biggest possible' using bounding adjustments                          Native.SetWindowPos                          (                              targetWindow'                              0'                              targetFrame.X + favDetails.OffsetL'                              targetFrame.Y + favDetails.OffsetT'                              targetFrame.Width - favDetails.OffsetL + favDetails.OffsetR'                              targetFrame.Height - favDetails.OffsetT + favDetails.OffsetB'                              SetWindowPosFlags.ShowWindow | SetWindowPosFlags.NoOwnerZOrder |                              SetWindowPosFlags.NoSendChanging                          );                            // And auto-maximize                          if (favDetails.ShouldMaximize)                          {                              Native.ShowWindow(targetWindow' WindowShowStyle.Maximize);                          }                      }                      else                      {                          // Set the window size to the exact position specified by the user                          Native.SetWindowPos                          (                              targetWindow'                              0'                              favDetails.PositionX'                              favDetails.PositionY'                              favDetails.PositionW'                              favDetails.PositionH'                              SetWindowPosFlags.ShowWindow | SetWindowPosFlags.NoOwnerZOrder |                              SetWindowPosFlags.NoSendChanging                          );                      }                  }                    // Set topmost                  if (favDetails.TopMost)                  {                      Native.SetWindowPos                      (                          targetWindow'                          Native.HWND_TOPMOST'                          0'                          0'                          0'                          0'                          SetWindowPosFlags.ShowWindow | SetWindowPosFlags.NoMove | SetWindowPosFlags.NoSize |                          SetWindowPosFlags.NoSendChanging                      );                  }              }
Magic Number,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,MakeWindowBorderlessDelayed,The following statement contains a magic number: if (processDetails != null)              {                  if (processDetails.MadeBorderless)                  {                      if (processDetails.MadeBorderlessAttempts > 3 || !processDetails.WindowHasTargetableStyles)                      {                          return;                      }                  }              }
Magic Number,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,MakeWindowBorderlessDelayed,The following statement contains a magic number: TaskUtilities.WaitAndStartTask(() =>              {                  Native.SetWindowLong(targetWindow' WindowLongIndex.Style' styleNewWindowStandard);                  Native.SetWindowLong(targetWindow' WindowLongIndex.ExtendedStyle' styleNewWindowExtended);              }' 4);
Magic Number,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,RedrawWindowsSystemTrayArea,The following statement contains a magic number: try              {                  // Windows XP and earlier                  var hNotificationArea = Native.FindWindowEx                  (                      Native.FW(Native.FW(Native.FW(IntPtr.Zero' "Shell_TrayWnd")' "TrayNotifyWnd")' "SysPager")'                      IntPtr.Zero'                      "ToolbarWindow32"'                      "User Promoted Notification Area"                  );                    if (hNotificationArea == IntPtr.Zero || hNotificationArea.ToInt32() == Native.INVALID_HANDLE_VALUE)                  {                      return;                  }                    // Get the notification bounds                  var rect = new Native.Rect();                  Native.GetClientRect(hNotificationArea' ref rect);                    // Wiggle the mouse over the notification area                  // Note: this doesn't actually move the mouse cursor on the screen -- this just sends a message to the system tray window                  //       that mouse movement occurred over it' forcing it to refresh.  Sending messages asking for a repaint or invalidated                  //       area don't work' but this does.                  for (uint x = 0; x < rect.Right; x += 5)                  for (uint y = 0; y < rect.Bottom; y += 5)                  {                      Native.SendMessage(hNotificationArea' Native.WM_MOUSEMOVE' 0' (y << 16) | x);                  }              }              catch              {                  // ignored              }
Magic Number,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,RedrawWindowsSystemTrayArea,The following statement contains a magic number: try              {                  // Windows XP and earlier                  var hNotificationArea = Native.FindWindowEx                  (                      Native.FW(Native.FW(Native.FW(IntPtr.Zero' "Shell_TrayWnd")' "TrayNotifyWnd")' "SysPager")'                      IntPtr.Zero'                      "ToolbarWindow32"'                      "User Promoted Notification Area"                  );                    if (hNotificationArea == IntPtr.Zero || hNotificationArea.ToInt32() == Native.INVALID_HANDLE_VALUE)                  {                      return;                  }                    // Get the notification bounds                  var rect = new Native.Rect();                  Native.GetClientRect(hNotificationArea' ref rect);                    // Wiggle the mouse over the notification area                  // Note: this doesn't actually move the mouse cursor on the screen -- this just sends a message to the system tray window                  //       that mouse movement occurred over it' forcing it to refresh.  Sending messages asking for a repaint or invalidated                  //       area don't work' but this does.                  for (uint x = 0; x < rect.Right; x += 5)                  for (uint y = 0; y < rect.Bottom; y += 5)                  {                      Native.SendMessage(hNotificationArea' Native.WM_MOUSEMOVE' 0' (y << 16) | x);                  }              }              catch              {                  // ignored              }
Magic Number,BorderlessGaming.Logic.Windows,Manipulation,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Manipulation.cs,RedrawWindowsSystemTrayArea,The following statement contains a magic number: try              {                  // Windows XP and earlier                  var hNotificationArea = Native.FindWindowEx                  (                      Native.FW(Native.FW(Native.FW(IntPtr.Zero' "Shell_TrayWnd")' "TrayNotifyWnd")' "SysPager")'                      IntPtr.Zero'                      "ToolbarWindow32"'                      "User Promoted Notification Area"                  );                    if (hNotificationArea == IntPtr.Zero || hNotificationArea.ToInt32() == Native.INVALID_HANDLE_VALUE)                  {                      return;                  }                    // Get the notification bounds                  var rect = new Native.Rect();                  Native.GetClientRect(hNotificationArea' ref rect);                    // Wiggle the mouse over the notification area                  // Note: this doesn't actually move the mouse cursor on the screen -- this just sends a message to the system tray window                  //       that mouse movement occurred over it' forcing it to refresh.  Sending messages asking for a repaint or invalidated                  //       area don't work' but this does.                  for (uint x = 0; x < rect.Right; x += 5)                  for (uint y = 0; y < rect.Bottom; y += 5)                  {                      Native.SendMessage(hNotificationArea' Native.WM_MOUSEMOVE' 0' (y << 16) | x);                  }              }              catch              {                  // ignored              }
Magic Number,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,GetClassNameOfWindow,The following statement contains a magic number: try              {                  var cls_max_length = 1000;                  classText = new StringBuilder(""' cls_max_length + 5);                  GetClassName(hwnd' classText' cls_max_length + 2);                    if (!string.IsNullOrEmpty(classText.ToString()) && !string.IsNullOrWhiteSpace(classText.ToString()))                  {                      className = classText.ToString();                  }              }              catch (Exception ex)              {                  className = ex.Message;              }              finally              {                  classText = null;              }
Magic Number,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,GetClassNameOfWindow,The following statement contains a magic number: try              {                  var cls_max_length = 1000;                  classText = new StringBuilder(""' cls_max_length + 5);                  GetClassName(hwnd' classText' cls_max_length + 2);                    if (!string.IsNullOrEmpty(classText.ToString()) && !string.IsNullOrWhiteSpace(classText.ToString()))                  {                      className = classText.ToString();                  }              }              catch (Exception ex)              {                  className = ex.Message;              }              finally              {                  classText = null;              }
Magic Number,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,GetClassNameOfWindow,The following statement contains a magic number: try              {                  var cls_max_length = 1000;                  classText = new StringBuilder(""' cls_max_length + 5);                  GetClassName(hwnd' classText' cls_max_length + 2);                    if (!string.IsNullOrEmpty(classText.ToString()) && !string.IsNullOrWhiteSpace(classText.ToString()))                  {                      className = classText.ToString();                  }              }              catch (Exception ex)              {                  className = ex.Message;              }              finally              {                  classText = null;              }
Magic Number,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,GetWindowClassName,The following statement contains a magic number: var sbWindowClassName = new StringBuilder(256);
Magic Number,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,GetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 8)              {                  return GetWindowLong64(hWnd' nIndex);              }
Magic Number,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,SetWindowLong,The following statement contains a magic number: return IntPtr.Size == 8                  ? SetWindowLong64(hWnd' nIndex' dwNewLong)                  : SetWindowLong32(hWnd' nIndex' dwNewLong);
Magic Number,BorderlessGaming.Logic.Windows,Uac,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Uac.cs,IsElevated,The following statement contains a magic number: try              {                  // Windows version earlier than Vista                  if (Environment.OSVersion.Version.Major < 6)                      return true;                    if (IsRunAsAdmin())                      return true;                    return IsProcessElevated();              }              catch { }
Missing Default,BorderlessGaming.Logic.System,Tools,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\System\Tools.cs,CheckForUpdates,The following switch statement is missing a default case: switch (elementName)                                              {                                                  case "version":                                                      newVersion = new Version(reader.Value);                                                      break;                                                  case "url":                                                      releasePageUrl = reader.Value;                                                      break;                                              }
Missing Default,BorderlessGaming.Logic.Windows,Native,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Native.cs,GetMainWindowForProcess_EnumWindows,The following switch statement is missing a default case: switch (lParam)              {                  case 0:                      if (IsWindowVisible(hWndEnumerated))                      {                          if                          (                              (styleCurrentWindowStandard & WindowStyleFlags.Caption) > 0                              && (                                  (styleCurrentWindowStandard & WindowStyleFlags.Border) > 0                                  || (styleCurrentWindowStandard & WindowStyleFlags.ThickFrame) > 0                              )                          )                          {                              ptrList.Add(hWndEnumerated);                          }                      }                      break;                  case 1:                      if (IsWindowVisible(hWndEnumerated))                      {                          if ((uint)styleCurrentWindowStandard != 0)                          {                              ptrList.Add(hWndEnumerated);                          }                      }                      break;              }
Missing Default,BorderlessGaming.Logic.Windows,Windows,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming.Logic\Windows\Windows.cs,GetMainWindowForProcess_EnumWindows,The following switch statement is missing a default case: switch (lParam)              {                  case 0:                      if (Native.IsWindowVisible(hWndEnumerated))                      {                          if                          (                              (styleCurrentWindowStandard & WindowStyleFlags.Caption) > 0                              && (                                  (styleCurrentWindowStandard & WindowStyleFlags.Border) > 0                                  || (styleCurrentWindowStandard & WindowStyleFlags.ThickFrame) > 0                              )                          )                          {                              ptrList.Add(hWndEnumerated);                          }                      }                      break;                  case 1:                      if (Native.IsWindowVisible(hWndEnumerated))                      {                          if ((uint) styleCurrentWindowStandard != 0)                          {                              ptrList.Add(hWndEnumerated);                          }                      }                      break;              }
