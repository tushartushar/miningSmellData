Implementation smell,Namespace,Class,File,Method,Description
Long Method,BorderlessGaming.Forms,AboutForm,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\AboutForm.cs,InitializeComponent,The method has 261 lines of code.
Long Method,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The method has 115 lines of code.
Long Method,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The method has 729 lines of code.
Complex Method,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,Cyclomatic complexity of the method is 10
Complex Method,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,Cyclomatic complexity of the method is 17
Complex Method,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,WndProc,Cyclomatic complexity of the method is 9
Long Identifier,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,,The length of the parameter _toolStripDisableSteamIntegration is 33.
Long Identifier,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,,The length of the parameter toolStripViewFullProcessDetails is 31.
Long Identifier,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,,The length of the parameter toolStripToggleMouseCursorVisibility is 36.
Long Identifier,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,,The length of the parameter toolStripPauseAutomaticProcessing is 33.
Long Identifier,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,,The length of the parameter toolStripFullApplicationRefresh is 31.
Long Statement,BorderlessGaming.Forms,AboutForm,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\AboutForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AboutForm)); " is 129.
Long Statement,BorderlessGaming.Forms,AboutForm,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\AboutForm.cs,InitializeComponent,The length of the statement  "            this._viewGithubLinkLabel.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.OpenGithubRepo); " is 120.
Long Statement,BorderlessGaming.Forms,AboutForm,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\AboutForm.cs,InitializeComponent,The length of the statement  "            this._viewSteamGroupLinkLabel.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.OpenSteamGroup); " is 124.
Long Statement,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,DesktopAreaSelector_Shown,The length of the statement  "                "Draw a rectangle on the screen to outline where you want the game window to appear.\r\n\r\nYou can move' drag' and resize the rectangle after you have drawn it.\r\n\r\nDouble-click to confirm your selection or press Escape to abort."' " is 235.
Long Statement,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DesktopAreaSelector)); " is 139.
Long Statement,BorderlessGaming.Forms,InputText,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\InputText.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InputText)); " is 129.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,adjustWindowBoundsToolStripMenuItem_Click,The length of the statement  "string.Format(LanguageManager.Data("adjustWindowBoundsPrompt")' LanguageManager.Data("adjustWindowBoundsLeft"))' fav.OffsetL.ToString())' " is 137.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,adjustWindowBoundsToolStripMenuItem_Click,The length of the statement  "                   string.Format(LanguageManager.Data("adjustWindowBoundsPrompt")' LanguageManager.Data("adjustWindowBoundsRight"))' fav.OffsetR.ToString())' " is 138.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,adjustWindowBoundsToolStripMenuItem_Click,The length of the statement  "                    string.Format(LanguageManager.Data("adjustWindowBoundsPrompt")' LanguageManager.Data("adjustWindowBoundsTop"))' fav.OffsetT.ToString())' " is 136.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,adjustWindowBoundsToolStripMenuItem_Click,The length of the statement  "                    string.Format(LanguageManager.Data("adjustWindowBoundsPrompt")' LanguageManager.Data("adjustWindowBoundsBottom"))' fav.OffsetB.ToString())' " is 139.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,setWindowSizeToolStripMenuItem_Click,The length of the statement  "InputText(LanguageManager.Data("setWindowSizeTitle")' string.Format(LanguageManager.Data("setWindowSizePixelPrompt")' "X")' " is 123.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,setWindowSizeToolStripMenuItem_Click,The length of the statement  "                   InputText(LanguageManager.Data("setWindowSizeTitle")' string.Format(LanguageManager.Data("setWindowSizePixelPrompt")' "Y")' " is 123.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,setWindowSizeToolStripMenuItem_Click,The length of the statement  "                int.TryParse(InputText(LanguageManager.Data("setWindowSizeTitle")' LanguageManager.Data("setWindowSizeWidthPrompt")' fav.PositionW.ToString())' " is 143.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,setWindowSizeToolStripMenuItem_Click,The length of the statement  "                    InputText(LanguageManager.Data("setWindowSizeTitle")' LanguageManager.Data("setWindowSizeHeightPrompt")' fav.PositionH.ToString())' " is 131.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,MainWindow_Load,The length of the statement  "            Text = "Borderless Gaming " + Assembly.GetExecutingAssembly().GetName().Version.ToString(3) + ((Uac.Elevated) ? " [Administrator]" : ""); " is 137.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,MainWindow_FormClosing,The length of the statement  "            // This prevents a scenario where the user can't (easily) get back to Borderless Gaming to undo the hidden mouse cursor. " is 120.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainWindow)); " is 130.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            this.toolStripMouseHide.CheckedChanged += new System.EventHandler(this.useMouseHideHotkeyWinScrollLockToolStripMenuItem_CheckChanged); " is 134.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            this.toolStripMinimizedToTray.CheckedChanged += new System.EventHandler(this.startMinimizedToTrayToolStripMenuItem_CheckedChanged); " is 131.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            this.toolStripHideBalloonTips.CheckedChanged += new System.EventHandler(this.hideBalloonTipsToolStripMenuItem_CheckedChanged); " is 126.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            this.toolStripSlowWindowDetection.Click += new System.EventHandler(this.useSlowerWindowDetectionToolStripMenuItem_Click); " is 121.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            this.toolStripViewFullProcessDetails.CheckedChanged += new System.EventHandler(this.viewFullProcessDetailsToolStripMenuItem_CheckedChanged); " is 140.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            this.toolStripPauseAutomaticProcessing.Click += new System.EventHandler(this.pauseAutomaticProcessingToolStripMenuItem_Click); " is 126.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            this.toolStripToggleMouseCursorVisibility.Click += new System.EventHandler(this.toggleMouseCursorVisibilityToolStripMenuItem_Click); " is 132.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            this.toolStripToggleWindowsTaskbar.Click += new System.EventHandler(this.toggleWindowsTaskbarVisibilityToolStripMenuItem_Click); " is 128.
Long Statement,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The length of the statement  "            this.toolStripFullApplicationRefresh.Click += new System.EventHandler(this.fullApplicationRefreshToolStripMenuItem_Click); " is 122.
Complex Conditional,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The conditional expression  "RealCursorPosition.X > CurrentTopLeft.X - 10 && RealCursorPosition.X < CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10"  is complex.
Complex Conditional,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The conditional expression  "RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y - 10 && RealCursorPosition.Y <= CurrentTopLeft.Y + 10"  is complex.
Complex Conditional,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The conditional expression  "RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10"  is complex.
Complex Conditional,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The conditional expression  "RealCursorPosition.X > CurrentBottomRight.X - 10 && RealCursorPosition.X < CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10"  is complex.
Complex Conditional,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The conditional expression  "RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 && RealCursorPosition.Y >= CurrentTopLeft.Y - 10 &&                  RealCursorPosition.Y <= CurrentTopLeft.Y + 10"  is complex.
Complex Conditional,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The conditional expression  "RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10"  is complex.
Complex Conditional,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The conditional expression  "RealCursorPosition.Y > CurrentTopLeft.Y - 10 && RealCursorPosition.Y < CurrentTopLeft.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10"  is complex.
Complex Conditional,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The conditional expression  "RealCursorPosition.Y > CurrentBottomRight.Y - 10 && RealCursorPosition.Y < CurrentBottomRight.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10"  is complex.
Complex Conditional,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The conditional expression  "RealCursorPosition.X >= CurrentTopLeft.X + 10 && RealCursorPosition.X <= CurrentBottomRight.X - 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y + 10 && RealCursorPosition.Y <= CurrentBottomRight.Y - 10"  is complex.
Empty Catch Block,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,openDataFolderToolStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InputText,The method has an empty catch block.
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X > CurrentTopLeft.X - 10 && RealCursorPosition.X < CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.SizeWE;                  return CursPos.LeftLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X > CurrentTopLeft.X - 10 && RealCursorPosition.X < CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.SizeWE;                  return CursPos.LeftLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X > CurrentTopLeft.X - 10 && RealCursorPosition.X < CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.SizeWE;                  return CursPos.LeftLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X > CurrentTopLeft.X - 10 && RealCursorPosition.X < CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.SizeWE;                  return CursPos.LeftLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y - 10 && RealCursorPosition.Y <= CurrentTopLeft.Y + 10)              {                  Cursor = Cursors.SizeNWSE;                  return CursPos.TopLeft;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y - 10 && RealCursorPosition.Y <= CurrentTopLeft.Y + 10)              {                  Cursor = Cursors.SizeNWSE;                  return CursPos.TopLeft;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y - 10 && RealCursorPosition.Y <= CurrentTopLeft.Y + 10)              {                  Cursor = Cursors.SizeNWSE;                  return CursPos.TopLeft;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y - 10 && RealCursorPosition.Y <= CurrentTopLeft.Y + 10)              {                  Cursor = Cursors.SizeNWSE;                  return CursPos.TopLeft;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10)              {                  Cursor = Cursors.SizeNESW;                  return CursPos.BottomLeft;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10)              {                  Cursor = Cursors.SizeNESW;                  return CursPos.BottomLeft;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10)              {                  Cursor = Cursors.SizeNESW;                  return CursPos.BottomLeft;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X - 10 && RealCursorPosition.X <= CurrentTopLeft.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10)              {                  Cursor = Cursors.SizeNESW;                  return CursPos.BottomLeft;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X > CurrentBottomRight.X - 10 && RealCursorPosition.X < CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.SizeWE;                  return CursPos.RightLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X > CurrentBottomRight.X - 10 && RealCursorPosition.X < CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.SizeWE;                  return CursPos.RightLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X > CurrentBottomRight.X - 10 && RealCursorPosition.X < CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.SizeWE;                  return CursPos.RightLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X > CurrentBottomRight.X - 10 && RealCursorPosition.X < CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y > CurrentTopLeft.Y + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.SizeWE;                  return CursPos.RightLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 && RealCursorPosition.Y >= CurrentTopLeft.Y - 10 &&                  RealCursorPosition.Y <= CurrentTopLeft.Y + 10)              {                  Cursor = Cursors.SizeNESW;                  return CursPos.TopRight;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 && RealCursorPosition.Y >= CurrentTopLeft.Y - 10 &&                  RealCursorPosition.Y <= CurrentTopLeft.Y + 10)              {                  Cursor = Cursors.SizeNESW;                  return CursPos.TopRight;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 && RealCursorPosition.Y >= CurrentTopLeft.Y - 10 &&                  RealCursorPosition.Y <= CurrentTopLeft.Y + 10)              {                  Cursor = Cursors.SizeNESW;                  return CursPos.TopRight;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 && RealCursorPosition.Y >= CurrentTopLeft.Y - 10 &&                  RealCursorPosition.Y <= CurrentTopLeft.Y + 10)              {                  Cursor = Cursors.SizeNESW;                  return CursPos.TopRight;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10)              {                  Cursor = Cursors.SizeNWSE;                  return CursPos.BottomRight;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10)              {                  Cursor = Cursors.SizeNWSE;                  return CursPos.BottomRight;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10)              {                  Cursor = Cursors.SizeNWSE;                  return CursPos.BottomRight;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentBottomRight.X - 10 &&                  RealCursorPosition.X <= CurrentBottomRight.X + 10 &&                  RealCursorPosition.Y >= CurrentBottomRight.Y - 10 && RealCursorPosition.Y <= CurrentBottomRight.Y + 10)              {                  Cursor = Cursors.SizeNWSE;                  return CursPos.BottomRight;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.Y > CurrentTopLeft.Y - 10 && RealCursorPosition.Y < CurrentTopLeft.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10)              {                  Cursor = Cursors.SizeNS;                  return CursPos.TopLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.Y > CurrentTopLeft.Y - 10 && RealCursorPosition.Y < CurrentTopLeft.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10)              {                  Cursor = Cursors.SizeNS;                  return CursPos.TopLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.Y > CurrentTopLeft.Y - 10 && RealCursorPosition.Y < CurrentTopLeft.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10)              {                  Cursor = Cursors.SizeNS;                  return CursPos.TopLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.Y > CurrentTopLeft.Y - 10 && RealCursorPosition.Y < CurrentTopLeft.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10)              {                  Cursor = Cursors.SizeNS;                  return CursPos.TopLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.Y > CurrentBottomRight.Y - 10 && RealCursorPosition.Y < CurrentBottomRight.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10)              {                  Cursor = Cursors.SizeNS;                  return CursPos.BottomLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.Y > CurrentBottomRight.Y - 10 && RealCursorPosition.Y < CurrentBottomRight.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10)              {                  Cursor = Cursors.SizeNS;                  return CursPos.BottomLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.Y > CurrentBottomRight.Y - 10 && RealCursorPosition.Y < CurrentBottomRight.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10)              {                  Cursor = Cursors.SizeNS;                  return CursPos.BottomLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.Y > CurrentBottomRight.Y - 10 && RealCursorPosition.Y < CurrentBottomRight.Y + 10 &&                  RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.X < CurrentBottomRight.X - 10)              {                  Cursor = Cursors.SizeNS;                  return CursPos.BottomLine;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X + 10 && RealCursorPosition.X <= CurrentBottomRight.X - 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y + 10 && RealCursorPosition.Y <= CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.Hand;                  return CursPos.WithinSelectionArea;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X + 10 && RealCursorPosition.X <= CurrentBottomRight.X - 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y + 10 && RealCursorPosition.Y <= CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.Hand;                  return CursPos.WithinSelectionArea;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X + 10 && RealCursorPosition.X <= CurrentBottomRight.X - 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y + 10 && RealCursorPosition.Y <= CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.Hand;                  return CursPos.WithinSelectionArea;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,CursorPosition,The following statement contains a magic number: if (RealCursorPosition.X >= CurrentTopLeft.X + 10 && RealCursorPosition.X <= CurrentBottomRight.X - 10 &&                  RealCursorPosition.Y >= CurrentTopLeft.Y + 10 && RealCursorPosition.Y <= CurrentBottomRight.Y - 10)              {                  Cursor = Cursors.Hand;                  return CursPos.WithinSelectionArea;              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.LeftSizing)              {                  if (RealCursorPosition.X < CurrentBottomRight.X - 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentTopLeft.X = RealCursorPosition.X;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.TopLeftSizing)              {                  if (RealCursorPosition.X < CurrentBottomRight.X - 10 &&                      RealCursorPosition.Y < CurrentBottomRight.Y - 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentTopLeft.X = RealCursorPosition.X;                      CurrentTopLeft.Y = RealCursorPosition.Y;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.TopLeftSizing)              {                  if (RealCursorPosition.X < CurrentBottomRight.X - 10 &&                      RealCursorPosition.Y < CurrentBottomRight.Y - 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentTopLeft.X = RealCursorPosition.X;                      CurrentTopLeft.Y = RealCursorPosition.Y;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.BottomLeftSizing)              {                  if (RealCursorPosition.X < CurrentBottomRight.X - 10 && RealCursorPosition.Y > CurrentTopLeft.Y + 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentTopLeft.X = RealCursorPosition.X;                      CurrentBottomRight.Y = RealCursorPosition.Y;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.BottomLeftSizing)              {                  if (RealCursorPosition.X < CurrentBottomRight.X - 10 && RealCursorPosition.Y > CurrentTopLeft.Y + 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentTopLeft.X = RealCursorPosition.X;                      CurrentBottomRight.Y = RealCursorPosition.Y;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.RightSizing)              {                  if (RealCursorPosition.X > CurrentTopLeft.X + 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentBottomRight.X = RealCursorPosition.X;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.TopRightSizing)              {                  if (RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentBottomRight.X = RealCursorPosition.X;                      CurrentTopLeft.Y = RealCursorPosition.Y;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.TopRightSizing)              {                  if (RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.Y < CurrentBottomRight.Y - 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentBottomRight.X = RealCursorPosition.X;                      CurrentTopLeft.Y = RealCursorPosition.Y;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.BottomRightSizing)              {                  if (RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.Y > CurrentTopLeft.Y + 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentBottomRight.X = RealCursorPosition.X;                      CurrentBottomRight.Y = RealCursorPosition.Y;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.BottomRightSizing)              {                  if (RealCursorPosition.X > CurrentTopLeft.X + 10 && RealCursorPosition.Y > CurrentTopLeft.Y + 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentBottomRight.X = RealCursorPosition.X;                      CurrentBottomRight.Y = RealCursorPosition.Y;                      RectangleWidth = CurrentBottomRight.X - CurrentTopLeft.X;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.TopSizing)              {                  if (RealCursorPosition.Y < CurrentBottomRight.Y - 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentTopLeft.Y = RealCursorPosition.Y;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,ResizeSelection,The following statement contains a magic number: if (CurrentAction == ClickAction.BottomSizing)              {                  if (RealCursorPosition.Y > CurrentTopLeft.Y + 10)                  {                      //Erase the previous rectangle                      grfxDrawingSurface.DrawRectangle(EraserPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                      CurrentBottomRight.Y = RealCursorPosition.Y;                      RectangleHeight = CurrentBottomRight.Y - CurrentTopLeft.Y;                      grfxDrawingSurface.DrawRectangle(MyPen' TranslateRealPointToDrawn(CurrentTopLeft).X'                          TranslateRealPointToDrawn(CurrentTopLeft).Y' RectangleWidth' RectangleHeight);                  }              }
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(500' 400);
Magic Number,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(500' 400);
Magic Number,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,mnuFavoritesContext_Opening,The following statement contains a magic number: if (Screen.AllScreens.Length < 2)              {                  contextFavScreen.Visible = false;              }              else              {                  contextFavScreen.Visible = true;                    if (contextFavScreen.HasDropDownItems)                  {                      contextFavScreen.DropDownItems.Clear();                  }                    var superSize = Screen.PrimaryScreen.Bounds;                    foreach (var screen in Screen.AllScreens)                  {                      superSize = Tools.GetContainingRectangle(superSize' screen.Bounds);                        // fix for a .net-bug on Windows XP                      var idx = screen.DeviceName.IndexOf('\0');                      var fixedDeviceName = idx > 0 ? screen.DeviceName.Substring(0' idx) : screen.DeviceName;                        var label = fixedDeviceName + (screen.Primary ? " (P)" : string.Empty);                      var index = contextFavScreen.DropDownItems.Add(new ToolStripMenuItem                      {                          Text =  label'                          CheckOnClick = true'                          Checked = fav.FavScreen?.Equals(PRectangle.ToPRectangle(screen.Bounds)) ?? false                      });                      contextFavScreen.DropDownItems[index].Click += (s' ea) =>                      {                          var tt = (ToolStripMenuItem)s;                          fav.FavScreen = tt.Checked ? PRectangle.ToPRectangle(screen.Bounds) : new PRectangle();                          Config.Save();                      };                  }                  // add supersize Option                  var superIndex = contextFavScreen.DropDownItems.Add(new ToolStripMenuItem                  {                      Text = LanguageManager.Data("superSize")'                      CheckOnClick = true'                      Checked = fav.FavScreen?.Equals(PRectangle.ToPRectangle(superSize)) ?? false                  });                  contextFavScreen.DropDownItems[superIndex].Click += (s' ea) =>                  {                      fav.FavScreen = PRectangle.ToPRectangle(superSize);                      Config.Save();                  };              }
Magic Number,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,processContext_Opening,The following statement contains a magic number: if (Screen.AllScreens.Length < 2)              {                  contextBorderlessOn.Visible = false;              }              else              {                  contextBorderlessOn.Visible = true;                    if (contextBorderlessOn.HasDropDownItems)                  {                      contextBorderlessOn.DropDownItems.Clear();                  }                    var superSize = Screen.PrimaryScreen.Bounds;                    foreach (var screen in Screen.AllScreens)                  {                      superSize = Tools.GetContainingRectangle(superSize' screen.Bounds);                        // fix for a .net-bug on Windows XP                      var idx = screen.DeviceName.IndexOf('\0');                      var fixedDeviceName = idx > 0 ? screen.DeviceName.Substring(0' idx) : screen.DeviceName;                        var label = fixedDeviceName + (screen.Primary ? " (P)" : string.Empty);                        var tsi = new ToolStripMenuItem(label);                      tsi.Click += (s' ea) => { _watcher.RemoveBorder_ToSpecificScreen(pd' screen); };                        contextBorderlessOn.DropDownItems.Add(tsi);                  }                    // add supersize Option                  var superSizeItem = new ToolStripMenuItem(LanguageManager.Data("superSize"));                    superSizeItem.Click += (s' ea) => { _watcher.RemoveBorder_ToSpecificRect(pd' superSize); };                    contextBorderlessOn.DropDownItems.Add(superSizeItem);              }
Magic Number,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,MainWindow_Load,The following statement contains a magic number: Text = "Borderless Gaming " + Assembly.GetExecutingAssembly().GetName().Version.ToString(3) + ((Uac.Elevated) ? " [Administrator]" : "");
Magic Number,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,MainWindow_Load,The following statement contains a magic number: if (SteamApi.IsLoaded && _toolStripDisableSteamIntegration == null)              {                  _toolStripDisableSteamIntegration =                      new ToolStripMenuItem                      {                          Name = "toolStripDisableSteamIntegration"'                          Size = new Size(254' 22)'                          Text = LanguageManager.Data("toolStripDisableSteamIntegration")'                          ToolTipText = LanguageManager.Data("steamHint")'                          Checked = settings.DisableSteamIntegration'                          CheckOnClick = true                      };                  // let's do this before registering the CheckedChanged event                  _toolStripDisableSteamIntegration.CheckedChanged +=                      ToolStripDisableSteamIntegrationCheckChanged;                  toolsToolStripMenuItem.DropDownItems.Insert(0' _toolStripDisableSteamIntegration);              }
Magic Number,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,MainWindow_Load,The following statement contains a magic number: if (SteamApi.IsLoaded && _toolStripDisableSteamIntegration == null)              {                  _toolStripDisableSteamIntegration =                      new ToolStripMenuItem                      {                          Name = "toolStripDisableSteamIntegration"'                          Size = new Size(254' 22)'                          Text = LanguageManager.Data("toolStripDisableSteamIntegration")'                          ToolTipText = LanguageManager.Data("steamHint")'                          Checked = settings.DisableSteamIntegration'                          CheckOnClick = true                      };                  // let's do this before registering the CheckedChanged event                  _toolStripDisableSteamIntegration.CheckedChanged +=                      ToolStripDisableSteamIntegrationCheckChanged;                  toolsToolStripMenuItem.DropDownItems.Insert(0' _toolStripDisableSteamIntegration);              }
Magic Number,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,MainWindow_Resize,The following statement contains a magic number: if (WindowState == FormWindowState.Minimized)              {                  trayIcon.Visible = true;                    if (Config.Instance.AppSettings.HideBalloonTips && !Config.Instance.StartupOptions.Silent)                  {                      // Display a balloon tooltip message for 2 seconds                      trayIcon.BalloonTipText = string.Format(Resources.TrayMinimized' "Borderless Gaming");                      trayIcon.ShowBalloonTip(2000);                  }                    if (!Manipulation.WindowsTaskbarIsHidden)                  {                      Hide();                  }              }
Magic Number,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,WndProc,The following statement contains a magic number: if (m.Msg == Native.WM_HOTKEY)              {                  var keystroke = ((uint) m.LParam >> 16) & 0x0000FFFF;                  var keystrokeModifier = (uint) m.LParam & 0x0000FFFF;                    // Global hotkey to make a window borderless                  if (keystroke == MakeBorderlessHotKey && keystrokeModifier == MakeBorderlessHotKeyModifier)                  {                      // Find the currently-active window                      var hCurrentActiveWindow = Native.GetForegroundWindow();                        // Only if that window isn't Borderless Windows itself                      if (hCurrentActiveWindow != Handle)                      {                          // Figure out the process details based on the current window handle                          var pd = _watcher.FromHandle(hCurrentActiveWindow);                          if (pd == null)                          {                              Task.WaitAll(_watcher.Refresh());                              pd = _watcher.FromHandle(hCurrentActiveWindow);                              if (pd == null)                              {                                  return;                              }                          }                          // If we have information about this process -and- we've already made it borderless' then reverse the process                          if (pd.MadeBorderless)                          {                              Manipulation.RestoreWindow(pd);                          }                          // Otherwise' this is a fresh request to remove the border from the current window                          else                          {                              _watcher.RemoveBorder(pd);                          }                      }                        return; // handled the message' do not call base WndProc for this message                  }                    if (keystroke == MouseHideHotKey && keystrokeModifier == MouseHideHotKeyModifier)                  {                      Manipulation.ToggleMouseCursorVisibility(this);                        return; // handled the message' do not call base WndProc for this message                  }                    if (keystroke == MouseLockHotKey && keystrokeModifier == 0)                  {                      var hWnd = Native.GetForegroundWindow();                        // get size of clientarea                      var rect = new Native.Rect();                      Native.GetClientRect(hWnd' ref rect);                        // get top'left point of clientarea                      var p = new Native.POINTAPI {X = 0' Y = 0};                      Native.ClientToScreen(hWnd' ref p);                        var clipRect = new Rectangle(p.X' p.Y' rect.Right - rect.Left' rect.Bottom - rect.Top);                        Cursor.Clip = Cursor.Clip.Equals(clipRect) ? Rectangle.Empty : clipRect;                        return; // handled the message' do not call base WndProc for this message                  }              }
Magic Number,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.favoritesLabel' 2' 0);
Magic Number,BorderlessGaming.Forms,MainWindow,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\MainWindow.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lstFavorites' 2' 1);
Missing Default,BorderlessGaming.Forms,DesktopAreaSelector,C:\repos\Codeusa_Borderless-Gaming\BorderlessGaming\Forms\DesktopAreaSelector.cs,SetClickAction,The following switch statement is missing a default case: switch (CursorPosition())              {                  case CursPos.BottomLine:                      CurrentAction = ClickAction.BottomSizing;                      break;                    case CursPos.TopLine:                      CurrentAction = ClickAction.TopSizing;                      break;                    case CursPos.LeftLine:                      CurrentAction = ClickAction.LeftSizing;                      break;                    case CursPos.TopLeft:                      CurrentAction = ClickAction.TopLeftSizing;                      break;                    case CursPos.BottomLeft:                      CurrentAction = ClickAction.BottomLeftSizing;                      break;                    case CursPos.RightLine:                      CurrentAction = ClickAction.RightSizing;                      break;                    case CursPos.TopRight:                      CurrentAction = ClickAction.TopRightSizing;                      break;                    case CursPos.BottomRight:                      CurrentAction = ClickAction.BottomRightSizing;                      break;                    case CursPos.WithinSelectionArea:                      CurrentAction = ClickAction.Dragging;                      break;                    case CursPos.OutsideSelectionArea:                      CurrentAction = ClickAction.Outside;                      break;              }
