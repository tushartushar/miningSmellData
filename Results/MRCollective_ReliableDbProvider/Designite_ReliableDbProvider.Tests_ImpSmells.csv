Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,TryInvokeMember,Cyclomatic complexity of the method is 14
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,All,The method has 5 parameters. Parameters: where' orderBy' limit' columns' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,Paged,The method has 6 parameters. Parameters: where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,Paged,The method has 8 parameters. Parameters: sql' primaryKey' where' orderBy' columns' pageSize' currentPage' args
Long Parameter List,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,BuildPagedResult,The method has 8 parameters. Parameters: sql' primaryKeyField' where' orderBy' columns' pageSize' currentPage' args
Long Statement,ReliableDbProvider.Tests,TransientErrorDetectionStrategyShould<TTransientErrorDetectionStrategy>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,Mark_invalid_operation_exception_wrapped_exceptions_as_transient,The length of the statement  "            var e = new InvalidOperationException("Lazy load error"' new Exception("Wrapped exception"' SqlExceptionGenerator.GetSqlException(40197))); " is 139.
Long Statement,ReliableDbProvider.Tests,SqlExceptionGenerator,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,GetSqlException,The length of the statement  "            var error = (SqlError)Activator.CreateInstance(typeof(SqlError)' BindingFlags.NonPublic | BindingFlags.Instance' null' new object[] { errorCode' (byte)2' (byte)3' "server name"' "error message"' "proc"' 100 }' null); " is 216.
Long Statement,ReliableDbProvider.Tests,SqlExceptionGenerator,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,GetSqlException,The length of the statement  "                .GetMethod("CreateException"' BindingFlags.NonPublic | BindingFlags.Static' null' new[] { typeof(SqlErrorCollection)' typeof(string) }' null) " is 141.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,Paged,The length of the statement  "            return BuildPagedResult(where: where' orderBy: orderBy' columns: columns' pageSize: pageSize' currentPage: currentPage' args: args); " is 132.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,BuildPagedResult,The length of the statement  "                query = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {2}) AS Row' {0} FROM ({3}) AS PagedTable {4}) AS Paged "' columns' pageSize' orderBy' sql' where); " is 174.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,BuildPagedResult,The length of the statement  "                query = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {2}) AS Row' {0} FROM {3} {4}) AS Paged "' columns' pageSize' orderBy' TableName' where); " is 164.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,KeyValues,The length of the statement  "                throw new InvalidOperationException("There's no DescriptorField set - do this in your constructor to describe the text value you want to see"); " is 143.
Long Statement,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,TryInvokeMember,The length of the statement  "                throw new InvalidOperationException("Please use named arguments for this type of query - the column name' orderby' columns' etc"); " is 130.
Long Statement,ReliableDbProvider.Tests.SqlExpress,SqlExpressProvider,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpress\SqlExpressProvider.cs,GetConnection,The length of the statement  "            EventHandler<RetryingEventArgs> retry = (sender' args) => Console.WriteLine("Retry - Count:{0}' Delay:{1}' Exception:{2}\r\n\r\n"' args.CurrentRetryCount' args.Delay' args.LastException.Message); " is 195.
Magic Number,ReliableDbProvider.Tests.Config,DbTestBase<T>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Config\DbTestBase.cs,TemporarilyShutdownSqlServerExpress,The following statement contains a magic number: Task.Run(() =>              {                  while (!tokenSource.IsCancellationRequested)                  {                      _serviceController.Refresh();                      if (_serviceController.Status == ServiceControllerStatus.Running)                          _serviceController.Pause();                      _serviceController.WaitForStatus(ServiceControllerStatus.Paused);                        _serviceController.Refresh();                      _serviceController.Continue();                      _serviceController.WaitForStatus(ServiceControllerStatus.Running);                        Thread.Sleep(20);                  }              }' tokenSource.Token);
Magic Number,ReliableDbProvider.Tests,ConnectionTests<T>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\ConnectionTests.cs,TestConnectionEstablishment,The following statement contains a magic number: i < 1000
Magic Number,ReliableDbProvider.Tests,DbProviderTestBase<T>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\DbProviderTestBase.cs,Insert_and_select_multiple_entities,The following statement contains a magic number: var users = Builder<User>.CreateListOfSize(100)                      .All().With(u => u.Properties = new List<UserProperty>                          {                              new UserProperty {Name = "Name"' Value = "Value"' User = u}                          }                      )                      .Build().OrderBy(u => u.Name).ToList();
Magic Number,ReliableDbProvider.Tests,DbProviderTestBase<T>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\DbProviderTestBase.cs,Select_a_scalar,The following statement contains a magic number: var users = Builder<User>.CreateListOfSize(100).Build().ToList();
Magic Number,ReliableDbProvider.Tests,DbProviderTestBase<T>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\DbProviderTestBase.cs,Select_a_scalar,The following statement contains a magic number: Assert.That(count' Is.EqualTo(100));
Magic Number,ReliableDbProvider.Tests,DbProviderTestBase<T>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\DbProviderTestBase.cs,Insert_and_update_multiple_entities,The following statement contains a magic number: var users = Builder<User>.CreateListOfSize(100).Build().ToList();
Magic Number,ReliableDbProvider.Tests,SqlClientFactoryProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlClientFactoryProviderTests.cs,Fail_to_execute_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: Assert.Throws(Is.InstanceOf<EntityException>()' () =>                  {                      using (TemporarilyShutdownSqlServerExpress())                      {                          for (var i = 0; i < 1000; i++)                          {                              Insert_and_select_entity();                              Thread.Sleep(50);                          }                      }                  }              );
Magic Number,ReliableDbProvider.Tests,SqlClientFactoryProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlClientFactoryProviderTests.cs,Fail_to_execute_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: Assert.Throws(Is.InstanceOf<EntityException>()' () =>                  {                      using (TemporarilyShutdownSqlServerExpress())                      {                          for (var i = 0; i < 1000; i++)                          {                              Insert_and_select_entity();                              Thread.Sleep(50);                          }                      }                  }              );
Magic Number,ReliableDbProvider.Tests,SqlClientFactoryProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlClientFactoryProviderTests.cs,Fail_to_execute_batched_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: Assert.Throws(Is.InstanceOf<EntityException>()' () =>                  {                      using (TemporarilyShutdownSqlServerExpress())                      {                          for (var i = 0; i < 1000; i++)                          {                              Insert_and_select_multiple_entities();                              Thread.Sleep(50);                          }                      }                  }              );
Magic Number,ReliableDbProvider.Tests,SqlClientFactoryProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlClientFactoryProviderTests.cs,Fail_to_execute_batched_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: Assert.Throws(Is.InstanceOf<EntityException>()' () =>                  {                      using (TemporarilyShutdownSqlServerExpress())                      {                          for (var i = 0; i < 1000; i++)                          {                              Insert_and_select_multiple_entities();                              Thread.Sleep(50);                          }                      }                  }              );
Magic Number,ReliableDbProvider.Tests,SqlExpressProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpressProviderTests.cs,Execute_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,ReliableDbProvider.Tests,SqlExpressProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpressProviderTests.cs,Execute_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: i < 100
Magic Number,ReliableDbProvider.Tests,SqlExpressProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpressProviderTests.cs,Execute_scalar_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: var users = Builder<User>.CreateListOfSize(100).Build().ToList();
Magic Number,ReliableDbProvider.Tests,SqlExpressProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpressProviderTests.cs,Execute_scalar_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: Assert.That(count' Is.EqualTo(100));
Magic Number,ReliableDbProvider.Tests,SqlExpressProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpressProviderTests.cs,Execute_scalar_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,ReliableDbProvider.Tests,SqlExpressProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpressProviderTests.cs,Execute_scalar_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: i < 100
Magic Number,ReliableDbProvider.Tests,SqlExpressProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpressProviderTests.cs,Execute_batched_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,ReliableDbProvider.Tests,SqlExpressProviderShould,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpressProviderTests.cs,Execute_batched_commands_during_temporary_shutdown_of_sql_server,The following statement contains a magic number: i < 50
Magic Number,ReliableDbProvider.Tests,TransientErrorDetectionStrategyShould<TTransientErrorDetectionStrategy>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,Mark_unwrapped_exceptions_as_transient,The following statement contains a magic number: var e = SqlExceptionGenerator.GetSqlException(40197);
Magic Number,ReliableDbProvider.Tests,TransientErrorDetectionStrategyShould<TTransientErrorDetectionStrategy>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,Mark_wrapped_exceptions_as_transient,The following statement contains a magic number: var e = new Exception("Wrapped exception"' SqlExceptionGenerator.GetSqlException(40197));
Magic Number,ReliableDbProvider.Tests,TransientErrorDetectionStrategyShould<TTransientErrorDetectionStrategy>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,Mark_transaction_wrapped_exceptions_as_transient,The following statement contains a magic number: var e = new TransactionException("Wrapped exception"' SqlExceptionGenerator.GetSqlException(40197));
Magic Number,ReliableDbProvider.Tests,TransientErrorDetectionStrategyShould<TTransientErrorDetectionStrategy>,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,Mark_invalid_operation_exception_wrapped_exceptions_as_transient,The following statement contains a magic number: var e = new InvalidOperationException("Lazy load error"' new Exception("Wrapped exception"' SqlExceptionGenerator.GetSqlException(40197)));
Magic Number,ReliableDbProvider.Tests,SqlExceptionGenerator,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,GetSqlException,The following statement contains a magic number: var error = (SqlError)Activator.CreateInstance(typeof(SqlError)' BindingFlags.NonPublic | BindingFlags.Instance' null' new object[] { errorCode' (byte)2' (byte)3' "server name"' "error message"' "proc"' 100 }' null);
Magic Number,ReliableDbProvider.Tests,SqlExceptionGenerator,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,GetSqlException,The following statement contains a magic number: var error = (SqlError)Activator.CreateInstance(typeof(SqlError)' BindingFlags.NonPublic | BindingFlags.Instance' null' new object[] { errorCode' (byte)2' (byte)3' "server name"' "error message"' "proc"' 100 }' null);
Magic Number,ReliableDbProvider.Tests,SqlExceptionGenerator,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\TransientErrorDetectionTests.cs,GetSqlException,The following statement contains a magic number: var error = (SqlError)Activator.CreateInstance(typeof(SqlError)' BindingFlags.NonPublic | BindingFlags.Instance' null' new object[] { errorCode' (byte)2' (byte)3' "server name"' "error message"' "proc"' 100 }' null);
Magic Number,Massive,DynamicModel,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\Massive\Massive.cs,CreateUpdateCommand,The following statement contains a magic number: var keys = sbKeys.ToString().Substring(0' sbKeys.Length - 4);
Magic Number,ReliableDbProvider.Tests.SqlExpress,SqlExpressTransientErrorDetectionStrategy,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpress\SqlExpressTransientErrorDetectionStrategy.cs,IsTransient,The following statement contains a magic number: return sqlException != null                  && sqlException.Errors.Cast<SqlError>().Any(error => error.Number == 17142 || error.Number == 233);
Magic Number,ReliableDbProvider.Tests.SqlExpress,SqlExpressTransientErrorDetectionStrategy,C:\research\architectureSmells\repos\MRCollective_ReliableDbProvider\ReliableDbProvider.Tests\SqlExpress\SqlExpressTransientErrorDetectionStrategy.cs,IsTransient,The following statement contains a magic number: return sqlException != null                  && sqlException.Errors.Cast<SqlError>().Any(error => error.Number == 17142 || error.Number == 233);
