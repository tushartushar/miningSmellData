Implementation smell,Namespace,Class,File,Method,Description
Long Method,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The method has 278 lines of code.
Long Method,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The method has 286 lines of code.
Complex Method,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,Cyclomatic complexity of the method is 36
Complex Method,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Apache.Cassandra,TokenRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TokenRange.cs,Write,Cyclomatic complexity of the method is 9
Long Identifier,Apache.Cassandra,Isset,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\AuthenticationException.cs,,The length of the parameter row_cache_save_period_in_seconds is 32.
Long Identifier,Apache.Cassandra,Isset,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\AuthenticationException.cs,,The length of the parameter key_cache_save_period_in_seconds is 32.
Long Identifier,Apache.Cassandra,Isset,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\AuthenticationException.cs,,The length of the parameter memtable_operations_in_millions is 31.
Long Identifier,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,,The length of the parameter _row_cache_save_period_in_seconds is 33.
Long Identifier,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,,The length of the parameter _key_cache_save_period_in_seconds is 33.
Long Identifier,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,,The length of the parameter _memtable_operations_in_millions is 32.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_multiget_slice,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "multiget_slice failed: unknown result"); " is 124.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_multiget_count,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "multiget_count failed: unknown result"); " is 124.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_get_range_slices,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "get_range_slices failed: unknown result"); " is 126.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_get_paged_slice,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "get_paged_slice failed: unknown result"); " is 125.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,get_indexed_slices,The length of the statement  "        var asyncResult = Begin_get_indexed_slices(null' null' column_parent' index_clause' column_predicate' consistency_level); " is 121.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_get_indexed_slices,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "get_indexed_slices failed: unknown result"); " is 128.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_schema_versions,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_schema_versions failed: unknown result"); " is 134.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_keyspaces,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_keyspaces failed: unknown result"); " is 128.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_cluster_name,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_cluster_name failed: unknown result"); " is 131.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_version,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_version failed: unknown result"); " is 126.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_ring,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_ring failed: unknown result"); " is 123.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_token_map,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_token_map failed: unknown result"); " is 128.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_partitioner,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_partitioner failed: unknown result"); " is 130.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_snitch,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_snitch failed: unknown result"); " is 125.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_keyspace,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_keyspace failed: unknown result"); " is 127.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_splits,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_splits failed: unknown result"); " is 125.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_trace_next_query,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "trace_next_query failed: unknown result"); " is 126.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_describe_splits_ex,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "describe_splits_ex failed: unknown result"); " is 128.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_system_add_column_family,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "system_add_column_family failed: unknown result"); " is 134.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_system_drop_column_family,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "system_drop_column_family failed: unknown result"); " is 135.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_system_add_keyspace,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "system_add_keyspace failed: unknown result"); " is 129.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_system_drop_keyspace,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "system_drop_keyspace failed: unknown result"); " is 130.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_system_update_keyspace,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "system_update_keyspace failed: unknown result"); " is 132.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_system_update_column_family,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "system_update_column_family failed: unknown result"); " is 137.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_execute_cql_query,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "execute_cql_query failed: unknown result"); " is 127.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_execute_cql3_query,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "execute_cql3_query failed: unknown result"); " is 128.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_prepare_cql_query,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "prepare_cql_query failed: unknown result"); " is 127.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_prepare_cql3_query,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "prepare_cql3_query failed: unknown result"); " is 128.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_execute_prepared_cql_query,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "execute_prepared_cql_query failed: unknown result"); " is 136.
Long Statement,Apache.Cassandra,Client,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,recv_execute_prepared_cql3_query,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "execute_prepared_cql3_query failed: unknown result"); " is 137.
Long Statement,Apache.Cassandra,Processor,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Process,The length of the statement  "            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod' "Invalid method name: '" + msg.Name + "'"); " is 147.
Long Statement,Apache.Cassandra,Processor,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,get_indexed_slices_Process,The length of the statement  "          result.Success = iface_.get_indexed_slices(args.Column_parent' args.Index_clause' args.Column_predicate' args.Consistency_level); " is 129.
Magic Number,Apache.Cassandra,login_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Authnx = new AuthenticationException();                  Authnx.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Authzx = new AuthorizationException();                  Authzx.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,login_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.authnx) {            if (Authnx != null) {              field.Name = "Authnx";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Authnx.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.authzx) {            if (Authzx != null) {              field.Name = "Authzx";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Authzx.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_path = new ColumnPath();                  Column_path.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_path = new ColumnPath();                  Column_path.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column_path != null && __isset.column_path) {            field.Name = "column_path";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Column_path.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 3;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new ColumnOrSuperColumn();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Nfe = new NotFoundException();                  Nfe.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new ColumnOrSuperColumn();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Nfe = new NotFoundException();                  Nfe.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new ColumnOrSuperColumn();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Nfe = new NotFoundException();                  Nfe.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.nfe) {            if (Nfe != null) {              field.Name = "Nfe";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Nfe.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.nfe) {            if (Nfe != null) {              field.Name = "Nfe";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Nfe.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.nfe) {            if (Nfe != null) {              field.Name = "Nfe";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Nfe.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column_parent != null && __isset.column_parent) {            field.Name = "column_parent";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Column_parent.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Predicate != null && __isset.predicate) {            field.Name = "predicate";            field.Type = TType.Struct;            field.ID = 3;            oprot.WriteFieldBegin(field);            Predicate.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.List) {                  {                    Success = new List<ColumnOrSuperColumn>();                    TList _list95 = iprot.ReadListBegin();                    for( int _i96 = 0; _i96 < _list95.Count; ++_i96)                    {                      ColumnOrSuperColumn _elem97 = new ColumnOrSuperColumn();                      _elem97 = new ColumnOrSuperColumn();                      _elem97.Read(iprot);                      Success.Add(_elem97);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.List) {                  {                    Success = new List<ColumnOrSuperColumn>();                    TList _list95 = iprot.ReadListBegin();                    for( int _i96 = 0; _i96 < _list95.Count; ++_i96)                    {                      ColumnOrSuperColumn _elem97 = new ColumnOrSuperColumn();                      _elem97 = new ColumnOrSuperColumn();                      _elem97.Read(iprot);                      Success.Add(_elem97);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.List;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteListBegin(new TList(TType.Struct' Success.Count));                foreach (ColumnOrSuperColumn _iter98 in Success)                {                  _iter98.Write(oprot);                }                oprot.WriteListEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.List;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteListBegin(new TList(TType.Struct' Success.Count));                foreach (ColumnOrSuperColumn _iter98 in Success)                {                  _iter98.Write(oprot);                }                oprot.WriteListEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column_parent != null && __isset.column_parent) {            field.Name = "column_parent";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Column_parent.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Predicate != null && __isset.predicate) {            field.Name = "predicate";            field.Type = TType.Struct;            field.ID = 3;            oprot.WriteFieldBegin(field);            Predicate.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_count_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.I32) {                  Success = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_count_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.I32) {                  Success = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_count_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            field.Name = "Success";            field.Type = TType.I32;            field.ID = 0;            oprot.WriteFieldBegin(field);            oprot.WriteI32(Success);            oprot.WriteFieldEnd();          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_count_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            field.Name = "Success";            field.Type = TType.I32;            field.ID = 0;            oprot.WriteFieldBegin(field);            oprot.WriteI32(Success);            oprot.WriteFieldEnd();          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,multiget_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Keys = new List<byte[]>();                    TList _list99 = iprot.ReadListBegin();                    for( int _i100 = 0; _i100 < _list99.Count; ++_i100)                    {                      byte[] _elem101 = null;                      _elem101 = iprot.ReadBinary();                      Keys.Add(_elem101);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Keys = new List<byte[]>();                    TList _list99 = iprot.ReadListBegin();                    for( int _i100 = 0; _i100 < _list99.Count; ++_i100)                    {                      byte[] _elem101 = null;                      _elem101 = iprot.ReadBinary();                      Keys.Add(_elem101);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Keys = new List<byte[]>();                    TList _list99 = iprot.ReadListBegin();                    for( int _i100 = 0; _i100 < _list99.Count; ++_i100)                    {                      byte[] _elem101 = null;                      _elem101 = iprot.ReadBinary();                      Keys.Add(_elem101);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column_parent != null && __isset.column_parent) {            field.Name = "column_parent";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Column_parent.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Predicate != null && __isset.predicate) {            field.Name = "predicate";            field.Type = TType.Struct;            field.ID = 3;            oprot.WriteFieldBegin(field);            Predicate.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Map) {                  {                    Success = new Dictionary<byte[]' List<ColumnOrSuperColumn>>();                    TMap _map103 = iprot.ReadMapBegin();                    for( int _i104 = 0; _i104 < _map103.Count; ++_i104)                    {                      byte[] _key105;                      List<ColumnOrSuperColumn> _val106;                      _key105 = iprot.ReadBinary();                      {                        _val106 = new List<ColumnOrSuperColumn>();                        TList _list107 = iprot.ReadListBegin();                        for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                        {                          ColumnOrSuperColumn _elem109 = new ColumnOrSuperColumn();                          _elem109 = new ColumnOrSuperColumn();                          _elem109.Read(iprot);                          _val106.Add(_elem109);                        }                        iprot.ReadListEnd();                      }                      Success[_key105] = _val106;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Map) {                  {                    Success = new Dictionary<byte[]' List<ColumnOrSuperColumn>>();                    TMap _map103 = iprot.ReadMapBegin();                    for( int _i104 = 0; _i104 < _map103.Count; ++_i104)                    {                      byte[] _key105;                      List<ColumnOrSuperColumn> _val106;                      _key105 = iprot.ReadBinary();                      {                        _val106 = new List<ColumnOrSuperColumn>();                        TList _list107 = iprot.ReadListBegin();                        for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                        {                          ColumnOrSuperColumn _elem109 = new ColumnOrSuperColumn();                          _elem109 = new ColumnOrSuperColumn();                          _elem109.Read(iprot);                          _val106.Add(_elem109);                        }                        iprot.ReadListEnd();                      }                      Success[_key105] = _val106;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Map;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteMapBegin(new TMap(TType.String' TType.List' Success.Count));                foreach (byte[] _iter110 in Success.Keys)                {                  oprot.WriteBinary(_iter110);                  {                    oprot.WriteListBegin(new TList(TType.Struct' Success[_iter110].Count));                    foreach (ColumnOrSuperColumn _iter111 in Success[_iter110])                    {                      _iter111.Write(oprot);                    }                    oprot.WriteListEnd();                  }                }                oprot.WriteMapEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,multiget_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Map;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteMapBegin(new TMap(TType.String' TType.List' Success.Count));                foreach (byte[] _iter110 in Success.Keys)                {                  oprot.WriteBinary(_iter110);                  {                    oprot.WriteListBegin(new TList(TType.Struct' Success[_iter110].Count));                    foreach (ColumnOrSuperColumn _iter111 in Success[_iter110])                    {                      _iter111.Write(oprot);                    }                    oprot.WriteListEnd();                  }                }                oprot.WriteMapEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,multiget_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Keys = new List<byte[]>();                    TList _list112 = iprot.ReadListBegin();                    for( int _i113 = 0; _i113 < _list112.Count; ++_i113)                    {                      byte[] _elem114 = null;                      _elem114 = iprot.ReadBinary();                      Keys.Add(_elem114);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Keys = new List<byte[]>();                    TList _list112 = iprot.ReadListBegin();                    for( int _i113 = 0; _i113 < _list112.Count; ++_i113)                    {                      byte[] _elem114 = null;                      _elem114 = iprot.ReadBinary();                      Keys.Add(_elem114);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Keys = new List<byte[]>();                    TList _list112 = iprot.ReadListBegin();                    for( int _i113 = 0; _i113 < _list112.Count; ++_i113)                    {                      byte[] _elem114 = null;                      _elem114 = iprot.ReadBinary();                      Keys.Add(_elem114);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column_parent != null && __isset.column_parent) {            field.Name = "column_parent";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Column_parent.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Predicate != null && __isset.predicate) {            field.Name = "predicate";            field.Type = TType.Struct;            field.ID = 3;            oprot.WriteFieldBegin(field);            Predicate.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_count_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_count_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Map) {                  {                    Success = new Dictionary<byte[]' int>();                    TMap _map116 = iprot.ReadMapBegin();                    for( int _i117 = 0; _i117 < _map116.Count; ++_i117)                    {                      byte[] _key118;                      int _val119;                      _key118 = iprot.ReadBinary();                      _val119 = iprot.ReadI32();                      Success[_key118] = _val119;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_count_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Map) {                  {                    Success = new Dictionary<byte[]' int>();                    TMap _map116 = iprot.ReadMapBegin();                    for( int _i117 = 0; _i117 < _map116.Count; ++_i117)                    {                      byte[] _key118;                      int _val119;                      _key118 = iprot.ReadBinary();                      _val119 = iprot.ReadI32();                      Success[_key118] = _val119;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,multiget_count_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Map;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteMapBegin(new TMap(TType.String' TType.I32' Success.Count));                foreach (byte[] _iter120 in Success.Keys)                {                  oprot.WriteBinary(_iter120);                  oprot.WriteI32(Success[_iter120]);                }                oprot.WriteMapEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,multiget_count_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Map;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteMapBegin(new TMap(TType.String' TType.I32' Success.Count));                foreach (byte[] _iter120 in Success.Keys)                {                  oprot.WriteBinary(_iter120);                  oprot.WriteI32(Success[_iter120]);                }                oprot.WriteMapEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_range_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Range = new KeyRange();                  Range.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_range_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Range = new KeyRange();                  Range.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_range_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Predicate = new SlicePredicate();                  Predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Range = new KeyRange();                  Range.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_range_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Predicate != null && __isset.predicate) {            field.Name = "predicate";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Predicate.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_range_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Range != null && __isset.range) {            field.Name = "range";            field.Type = TType.Struct;            field.ID = 3;            oprot.WriteFieldBegin(field);            Range.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_range_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_range_slices_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.List) {                  {                    Success = new List<KeySlice>();                    TList _list121 = iprot.ReadListBegin();                    for( int _i122 = 0; _i122 < _list121.Count; ++_i122)                    {                      KeySlice _elem123 = new KeySlice();                      _elem123 = new KeySlice();                      _elem123.Read(iprot);                      Success.Add(_elem123);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_range_slices_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.List) {                  {                    Success = new List<KeySlice>();                    TList _list121 = iprot.ReadListBegin();                    for( int _i122 = 0; _i122 < _list121.Count; ++_i122)                    {                      KeySlice _elem123 = new KeySlice();                      _elem123 = new KeySlice();                      _elem123.Read(iprot);                      Success.Add(_elem123);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_range_slices_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.List;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteListBegin(new TList(TType.Struct' Success.Count));                foreach (KeySlice _iter124 in Success)                {                  _iter124.Write(oprot);                }                oprot.WriteListEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_range_slices_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.List;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteListBegin(new TList(TType.Struct' Success.Count));                foreach (KeySlice _iter124 in Success)                {                  _iter124.Write(oprot);                }                oprot.WriteListEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_paged_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Column_family = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Range = new KeyRange();                  Range.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Start_column = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_paged_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Column_family = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Range = new KeyRange();                  Range.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Start_column = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_paged_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Column_family = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Range = new KeyRange();                  Range.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Start_column = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_paged_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Range != null && __isset.range) {            field.Name = "range";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Range.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_paged_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Start_column != null && __isset.start_column) {            field.Name = "start_column";            field.Type = TType.String;            field.ID = 3;            oprot.WriteFieldBegin(field);            oprot.WriteBinary(Start_column);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_paged_slice_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_paged_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.List) {                  {                    Success = new List<KeySlice>();                    TList _list125 = iprot.ReadListBegin();                    for( int _i126 = 0; _i126 < _list125.Count; ++_i126)                    {                      KeySlice _elem127 = new KeySlice();                      _elem127 = new KeySlice();                      _elem127.Read(iprot);                      Success.Add(_elem127);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_paged_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.List) {                  {                    Success = new List<KeySlice>();                    TList _list125 = iprot.ReadListBegin();                    for( int _i126 = 0; _i126 < _list125.Count; ++_i126)                    {                      KeySlice _elem127 = new KeySlice();                      _elem127 = new KeySlice();                      _elem127.Read(iprot);                      Success.Add(_elem127);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_paged_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.List;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteListBegin(new TList(TType.Struct' Success.Count));                foreach (KeySlice _iter128 in Success)                {                  _iter128.Write(oprot);                }                oprot.WriteListEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_paged_slice_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.List;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteListBegin(new TList(TType.Struct' Success.Count));                foreach (KeySlice _iter128 in Success)                {                  _iter128.Write(oprot);                }                oprot.WriteListEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_indexed_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Index_clause = new IndexClause();                  Index_clause.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Column_predicate = new SlicePredicate();                  Column_predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_indexed_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Index_clause = new IndexClause();                  Index_clause.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Column_predicate = new SlicePredicate();                  Column_predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_indexed_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Index_clause = new IndexClause();                  Index_clause.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Column_predicate = new SlicePredicate();                  Column_predicate.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_indexed_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Index_clause != null && __isset.index_clause) {            field.Name = "index_clause";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Index_clause.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_indexed_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column_predicate != null && __isset.column_predicate) {            field.Name = "column_predicate";            field.Type = TType.Struct;            field.ID = 3;            oprot.WriteFieldBegin(field);            Column_predicate.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_indexed_slices_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,get_indexed_slices_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.List) {                  {                    Success = new List<KeySlice>();                    TList _list129 = iprot.ReadListBegin();                    for( int _i130 = 0; _i130 < _list129.Count; ++_i130)                    {                      KeySlice _elem131 = new KeySlice();                      _elem131 = new KeySlice();                      _elem131.Read(iprot);                      Success.Add(_elem131);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_indexed_slices_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.List) {                  {                    Success = new List<KeySlice>();                    TList _list129 = iprot.ReadListBegin();                    for( int _i130 = 0; _i130 < _list129.Count; ++_i130)                    {                      KeySlice _elem131 = new KeySlice();                      _elem131 = new KeySlice();                      _elem131.Read(iprot);                      Success.Add(_elem131);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,get_indexed_slices_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.List;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteListBegin(new TList(TType.Struct' Success.Count));                foreach (KeySlice _iter132 in Success)                {                  _iter132.Write(oprot);                }                oprot.WriteListEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,get_indexed_slices_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.List;              field.ID = 0;              oprot.WriteFieldBegin(field);              {                oprot.WriteListBegin(new TList(TType.Struct' Success.Count));                foreach (KeySlice _iter132 in Success)                {                  _iter132.Write(oprot);                }                oprot.WriteListEnd();              }              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,insert_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Column = new Column();                  Column.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,insert_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Column = new Column();                  Column.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,insert_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Column = new Column();                  Column.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,insert_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column_parent != null && __isset.column_parent) {            field.Name = "column_parent";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Column_parent.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,insert_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column != null && __isset.column) {            field.Name = "column";            field.Type = TType.Struct;            field.ID = 3;            oprot.WriteFieldBegin(field);            Column.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,insert_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,insert_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,insert_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,insert_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,insert_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,add_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Column = new CounterColumn();                  Column.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,add_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Column = new CounterColumn();                  Column.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,add_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_parent = new ColumnParent();                  Column_parent.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Column = new CounterColumn();                  Column.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,add_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column_parent != null && __isset.column_parent) {            field.Name = "column_parent";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Column_parent.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,add_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column != null && __isset.column) {            field.Name = "column";            field.Type = TType.Struct;            field.ID = 3;            oprot.WriteFieldBegin(field);            Column.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,add_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,add_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,add_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,add_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,add_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,remove_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_path = new ColumnPath();                  Column_path.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,remove_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_path = new ColumnPath();                  Column_path.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,remove_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Column_path = new ColumnPath();                  Column_path.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,remove_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Column_path != null && __isset.column_path) {            field.Name = "column_path";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Column_path.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,remove_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.timestamp) {            field.Name = "timestamp";            field.Type = TType.I64;            field.ID = 3;            oprot.WriteFieldBegin(field);            oprot.WriteI64(Timestamp);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,remove_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,remove_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,remove_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,remove_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,remove_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,remove_counter_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Path = new ColumnPath();                  Path.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,remove_counter_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Key = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Path = new ColumnPath();                  Path.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,remove_counter_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Path != null && __isset.path) {            field.Name = "path";            field.Type = TType.Struct;            field.ID = 2;            oprot.WriteFieldBegin(field);            Path.Write(oprot);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,remove_counter_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 3;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,remove_counter_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,remove_counter_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,remove_counter_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,remove_counter_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,batch_mutate_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Map) {                  {                    Mutation_map = new Dictionary<byte[]' Dictionary<string' List<Mutation>>>();                    TMap _map133 = iprot.ReadMapBegin();                    for( int _i134 = 0; _i134 < _map133.Count; ++_i134)                    {                      byte[] _key135;                      Dictionary<string' List<Mutation>> _val136;                      _key135 = iprot.ReadBinary();                      {                        _val136 = new Dictionary<string' List<Mutation>>();                        TMap _map137 = iprot.ReadMapBegin();                        for( int _i138 = 0; _i138 < _map137.Count; ++_i138)                        {                          string _key139;                          List<Mutation> _val140;                          _key139 = iprot.ReadString();                          {                            _val140 = new List<Mutation>();                            TList _list141 = iprot.ReadListBegin();                            for( int _i142 = 0; _i142 < _list141.Count; ++_i142)                            {                              Mutation _elem143 = new Mutation();                              _elem143 = new Mutation();                              _elem143.Read(iprot);                              _val140.Add(_elem143);                            }                            iprot.ReadListEnd();                          }                          _val136[_key139] = _val140;                        }                        iprot.ReadMapEnd();                      }                      Mutation_map[_key135] = _val136;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,batch_mutate_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 2;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,batch_mutate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,batch_mutate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,batch_mutate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,batch_mutate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,atomic_batch_mutate_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Map) {                  {                    Mutation_map = new Dictionary<byte[]' Dictionary<string' List<Mutation>>>();                    TMap _map147 = iprot.ReadMapBegin();                    for( int _i148 = 0; _i148 < _map147.Count; ++_i148)                    {                      byte[] _key149;                      Dictionary<string' List<Mutation>> _val150;                      _key149 = iprot.ReadBinary();                      {                        _val150 = new Dictionary<string' List<Mutation>>();                        TMap _map151 = iprot.ReadMapBegin();                        for( int _i152 = 0; _i152 < _map151.Count; ++_i152)                        {                          string _key153;                          List<Mutation> _val154;                          _key153 = iprot.ReadString();                          {                            _val154 = new List<Mutation>();                            TList _list155 = iprot.ReadListBegin();                            for( int _i156 = 0; _i156 < _list155.Count; ++_i156)                            {                              Mutation _elem157 = new Mutation();                              _elem157 = new Mutation();                              _elem157.Read(iprot);                              _val154.Add(_elem157);                            }                            iprot.ReadListEnd();                          }                          _val150[_key153] = _val154;                        }                        iprot.ReadMapEnd();                      }                      Mutation_map[_key149] = _val150;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Consistency_level = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,atomic_batch_mutate_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency_level) {            field.Name = "consistency_level";            field.Type = TType.I32;            field.ID = 2;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency_level);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,atomic_batch_mutate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,atomic_batch_mutate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,atomic_batch_mutate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,atomic_batch_mutate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,truncate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,truncate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,truncate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,truncate_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,describe_keyspace_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new KsDef();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Nfe = new NotFoundException();                  Nfe.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,describe_keyspace_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.nfe) {            if (Nfe != null) {              field.Name = "Nfe";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Nfe.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,describe_splits_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  CfName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Start_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  End_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Keys_per_split = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  CfName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Start_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  End_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Keys_per_split = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  CfName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Start_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  End_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Keys_per_split = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Start_token != null && __isset.start_token) {            field.Name = "start_token";            field.Type = TType.String;            field.ID = 2;            oprot.WriteFieldBegin(field);            oprot.WriteString(Start_token);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (End_token != null && __isset.end_token) {            field.Name = "end_token";            field.Type = TType.String;            field.ID = 3;            oprot.WriteFieldBegin(field);            oprot.WriteString(End_token);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.keys_per_split) {            field.Name = "keys_per_split";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32(Keys_per_split);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_ex_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  CfName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Start_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  End_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Keys_per_split = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_ex_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  CfName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Start_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  End_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Keys_per_split = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_ex_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  CfName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Start_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  End_token = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Keys_per_split = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_ex_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Start_token != null && __isset.start_token) {            field.Name = "start_token";            field.Type = TType.String;            field.ID = 2;            oprot.WriteFieldBegin(field);            oprot.WriteString(Start_token);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_ex_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (End_token != null && __isset.end_token) {            field.Name = "end_token";            field.Type = TType.String;            field.ID = 3;            oprot.WriteFieldBegin(field);            oprot.WriteString(End_token);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,describe_splits_ex_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.keys_per_split) {            field.Name = "keys_per_split";            field.Type = TType.I32;            field.ID = 4;            oprot.WriteFieldBegin(field);            oprot.WriteI32(Keys_per_split);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,system_add_column_family_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.String) {                  Success = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,system_add_column_family_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.String;              field.ID = 0;              oprot.WriteFieldBegin(field);              oprot.WriteString(Success);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,system_drop_column_family_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.String) {                  Success = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,system_drop_column_family_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.String;              field.ID = 0;              oprot.WriteFieldBegin(field);              oprot.WriteString(Success);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,system_add_keyspace_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.String) {                  Success = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,system_add_keyspace_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.String;              field.ID = 0;              oprot.WriteFieldBegin(field);              oprot.WriteString(Success);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,system_drop_keyspace_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.String) {                  Success = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,system_drop_keyspace_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.String;              field.ID = 0;              oprot.WriteFieldBegin(field);              oprot.WriteString(Success);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,system_update_keyspace_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.String) {                  Success = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,system_update_keyspace_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.String;              field.ID = 0;              oprot.WriteFieldBegin(field);              oprot.WriteString(Success);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,system_update_column_family_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.String) {                  Success = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,system_update_column_family_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.String;              field.ID = 0;              oprot.WriteFieldBegin(field);              oprot.WriteString(Success);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_cql_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Query = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Compression = (Compression)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.compression) {            field.Name = "compression";            field.Type = TType.I32;            field.ID = 2;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Compression);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Query = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Compression = (Compression)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Consistency = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Query = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Compression = (Compression)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Consistency = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.compression) {            field.Name = "compression";            field.Type = TType.I32;            field.ID = 2;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Compression);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency) {            field.Name = "consistency";            field.Type = TType.I32;            field.ID = 3;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,prepare_cql_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Query = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Compression = (Compression)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,prepare_cql_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.compression) {            field.Name = "compression";            field.Type = TType.I32;            field.ID = 2;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Compression);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,prepare_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Query = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Compression = (Compression)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,prepare_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.compression) {            field.Name = "compression";            field.Type = TType.I32;            field.ID = 2;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Compression);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ItemId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Values = new List<byte[]>();                    TList _list191 = iprot.ReadListBegin();                    for( int _i192 = 0; _i192 < _list191.Count; ++_i192)                    {                      byte[] _elem193 = null;                      _elem193 = iprot.ReadBinary();                      Values.Add(_elem193);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Values != null && __isset.values) {            field.Name = "values";            field.Type = TType.List;            field.ID = 2;            oprot.WriteFieldBegin(field);            {              oprot.WriteListBegin(new TList(TType.String' Values.Count));              foreach (byte[] _iter194 in Values)              {                oprot.WriteBinary(_iter194);              }              oprot.WriteListEnd();            }            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_prepared_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_prepared_cql_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ItemId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Values = new List<byte[]>();                    TList _list195 = iprot.ReadListBegin();                    for( int _i196 = 0; _i196 < _list195.Count; ++_i196)                    {                      byte[] _elem197 = null;                      _elem197 = iprot.ReadBinary();                      Values.Add(_elem197);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Consistency = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ItemId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Values = new List<byte[]>();                    TList _list195 = iprot.ReadListBegin();                    for( int _i196 = 0; _i196 < _list195.Count; ++_i196)                    {                      byte[] _elem197 = null;                      _elem197 = iprot.ReadBinary();                      Values.Add(_elem197);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Consistency = (ConsistencyLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (Values != null && __isset.values) {            field.Name = "values";            field.Type = TType.List;            field.ID = 2;            oprot.WriteFieldBegin(field);            {              oprot.WriteListBegin(new TList(TType.String' Values.Count));              foreach (byte[] _iter198 in Values)              {                oprot.WriteBinary(_iter198);              }              oprot.WriteListEnd();            }            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_args,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (__isset.consistency) {            field.Name = "consistency";            field.Type = TType.I32;            field.ID = 3;            oprot.WriteFieldBegin(field);            oprot.WriteI32((int)Consistency);            oprot.WriteFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Read,The following statement contains a magic number: while (true)          {            field = iprot.ReadFieldBegin();            if (field.Type == TType.Stop) {               break;            }            switch (field.ID)            {              case 0:                if (field.Type == TType.Struct) {                  Success = new CqlResult();                  Success.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 1:                if (field.Type == TType.Struct) {                  Ire = new InvalidRequestException();                  Ire.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Ue = new UnavailableException();                  Ue.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Te = new TimedOutException();                  Te.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  Sde = new SchemaDisagreementException();                  Sde.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }            iprot.ReadFieldEnd();          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,execute_prepared_cql3_query_result,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Cassandra.cs,Write,The following statement contains a magic number: if (this.__isset.success) {            if (Success != null) {              field.Name = "Success";              field.Type = TType.Struct;              field.ID = 0;              oprot.WriteFieldBegin(field);              Success.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ire) {            if (Ire != null) {              field.Name = "Ire";              field.Type = TType.Struct;              field.ID = 1;              oprot.WriteFieldBegin(field);              Ire.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.ue) {            if (Ue != null) {              field.Name = "Ue";              field.Type = TType.Struct;              field.ID = 2;              oprot.WriteFieldBegin(field);              Ue.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.te) {            if (Te != null) {              field.Name = "Te";              field.Type = TType.Struct;              field.ID = 3;              oprot.WriteFieldBegin(field);              Te.Write(oprot);              oprot.WriteFieldEnd();            }          } else if (this.__isset.sde) {            if (Sde != null) {              field.Name = "Sde";              field.Type = TType.Struct;              field.ID = 4;              oprot.WriteFieldBegin(field);              Sde.Write(oprot);              oprot.WriteFieldEnd();            }          }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Keyspace = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Column_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Comparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.String) {                Subcomparator_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.String) {                Comment = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 12:              if (field.Type == TType.Double) {                Read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 13:              if (field.Type == TType.List) {                {                  Column_metadata = new List<ColumnDef>();                  TList _list46 = iprot.ReadListBegin();                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)                  {                    ColumnDef _elem48 = new ColumnDef();                    _elem48 = new ColumnDef();                    _elem48.Read(iprot);                    Column_metadata.Add(_elem48);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 14:              if (field.Type == TType.I32) {                Gc_grace_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 15:              if (field.Type == TType.String) {                Default_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 16:              if (field.Type == TType.I32) {                Id = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 17:              if (field.Type == TType.I32) {                Min_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 18:              if (field.Type == TType.I32) {                Max_compaction_threshold = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 24:              if (field.Type == TType.Bool) {                Replicate_on_write = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 26:              if (field.Type == TType.String) {                Key_validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 28:              if (field.Type == TType.String) {                Key_alias = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 29:              if (field.Type == TType.String) {                Compaction_strategy = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 30:              if (field.Type == TType.Map) {                {                  Compaction_strategy_options = new Dictionary<string' string>();                  TMap _map49 = iprot.ReadMapBegin();                  for( int _i50 = 0; _i50 < _map49.Count; ++_i50)                  {                    string _key51;                    string _val52;                    _key51 = iprot.ReadString();                    _val52 = iprot.ReadString();                    Compaction_strategy_options[_key51] = _val52;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 32:              if (field.Type == TType.Map) {                {                  Compression_options = new Dictionary<string' string>();                  TMap _map53 = iprot.ReadMapBegin();                  for( int _i54 = 0; _i54 < _map53.Count; ++_i54)                  {                    string _key55;                    string _val56;                    _key55 = iprot.ReadString();                    _val56 = iprot.ReadString();                    Compression_options[_key55] = _val56;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 33:              if (field.Type == TType.Double) {                Bloom_filter_fp_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 34:              if (field.Type == TType.String) {                Caching = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 37:              if (field.Type == TType.Double) {                Dclocal_read_repair_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.Double) {                Row_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Double) {                Key_cache_size = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 19:              if (field.Type == TType.I32) {                Row_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 20:              if (field.Type == TType.I32) {                Key_cache_save_period_in_seconds = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 21:              if (field.Type == TType.I32) {                Memtable_flush_after_mins = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 22:              if (field.Type == TType.I32) {                Memtable_throughput_in_mb = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 23:              if (field.Type == TType.Double) {                Memtable_operations_in_millions = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 25:              if (field.Type == TType.Double) {                Merge_shards_chance = iprot.ReadDouble();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 27:              if (field.Type == TType.String) {                Row_cache_provider = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 31:              if (field.Type == TType.I32) {                Row_cache_keys_to_save = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Name != null && __isset.name) {          field.Name = "name";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteString(Name);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Column_type != null && __isset.column_type) {          field.Name = "column_type";          field.Type = TType.String;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteString(Column_type);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Comparator_type != null && __isset.comparator_type) {          field.Name = "comparator_type";          field.Type = TType.String;          field.ID = 5;          oprot.WriteFieldBegin(field);          oprot.WriteString(Comparator_type);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Subcomparator_type != null && __isset.subcomparator_type) {          field.Name = "subcomparator_type";          field.Type = TType.String;          field.ID = 6;          oprot.WriteFieldBegin(field);          oprot.WriteString(Subcomparator_type);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Comment != null && __isset.comment) {          field.Name = "comment";          field.Type = TType.String;          field.ID = 8;          oprot.WriteFieldBegin(field);          oprot.WriteString(Comment);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.row_cache_size) {          field.Name = "row_cache_size";          field.Type = TType.Double;          field.ID = 9;          oprot.WriteFieldBegin(field);          oprot.WriteDouble(Row_cache_size);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.key_cache_size) {          field.Name = "key_cache_size";          field.Type = TType.Double;          field.ID = 11;          oprot.WriteFieldBegin(field);          oprot.WriteDouble(Key_cache_size);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.read_repair_chance) {          field.Name = "read_repair_chance";          field.Type = TType.Double;          field.ID = 12;          oprot.WriteFieldBegin(field);          oprot.WriteDouble(Read_repair_chance);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Column_metadata != null && __isset.column_metadata) {          field.Name = "column_metadata";          field.Type = TType.List;          field.ID = 13;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.Struct' Column_metadata.Count));            foreach (ColumnDef _iter57 in Column_metadata)            {              _iter57.Write(oprot);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.gc_grace_seconds) {          field.Name = "gc_grace_seconds";          field.Type = TType.I32;          field.ID = 14;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Gc_grace_seconds);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Default_validation_class != null && __isset.default_validation_class) {          field.Name = "default_validation_class";          field.Type = TType.String;          field.ID = 15;          oprot.WriteFieldBegin(field);          oprot.WriteString(Default_validation_class);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.id) {          field.Name = "id";          field.Type = TType.I32;          field.ID = 16;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Id);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.min_compaction_threshold) {          field.Name = "min_compaction_threshold";          field.Type = TType.I32;          field.ID = 17;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Min_compaction_threshold);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.max_compaction_threshold) {          field.Name = "max_compaction_threshold";          field.Type = TType.I32;          field.ID = 18;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Max_compaction_threshold);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.row_cache_save_period_in_seconds) {          field.Name = "row_cache_save_period_in_seconds";          field.Type = TType.I32;          field.ID = 19;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Row_cache_save_period_in_seconds);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.key_cache_save_period_in_seconds) {          field.Name = "key_cache_save_period_in_seconds";          field.Type = TType.I32;          field.ID = 20;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Key_cache_save_period_in_seconds);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.memtable_flush_after_mins) {          field.Name = "memtable_flush_after_mins";          field.Type = TType.I32;          field.ID = 21;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Memtable_flush_after_mins);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.memtable_throughput_in_mb) {          field.Name = "memtable_throughput_in_mb";          field.Type = TType.I32;          field.ID = 22;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Memtable_throughput_in_mb);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.memtable_operations_in_millions) {          field.Name = "memtable_operations_in_millions";          field.Type = TType.Double;          field.ID = 23;          oprot.WriteFieldBegin(field);          oprot.WriteDouble(Memtable_operations_in_millions);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.replicate_on_write) {          field.Name = "replicate_on_write";          field.Type = TType.Bool;          field.ID = 24;          oprot.WriteFieldBegin(field);          oprot.WriteBool(Replicate_on_write);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.merge_shards_chance) {          field.Name = "merge_shards_chance";          field.Type = TType.Double;          field.ID = 25;          oprot.WriteFieldBegin(field);          oprot.WriteDouble(Merge_shards_chance);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Key_validation_class != null && __isset.key_validation_class) {          field.Name = "key_validation_class";          field.Type = TType.String;          field.ID = 26;          oprot.WriteFieldBegin(field);          oprot.WriteString(Key_validation_class);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Row_cache_provider != null && __isset.row_cache_provider) {          field.Name = "row_cache_provider";          field.Type = TType.String;          field.ID = 27;          oprot.WriteFieldBegin(field);          oprot.WriteString(Row_cache_provider);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Key_alias != null && __isset.key_alias) {          field.Name = "key_alias";          field.Type = TType.String;          field.ID = 28;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(Key_alias);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Compaction_strategy != null && __isset.compaction_strategy) {          field.Name = "compaction_strategy";          field.Type = TType.String;          field.ID = 29;          oprot.WriteFieldBegin(field);          oprot.WriteString(Compaction_strategy);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Compaction_strategy_options != null && __isset.compaction_strategy_options) {          field.Name = "compaction_strategy_options";          field.Type = TType.Map;          field.ID = 30;          oprot.WriteFieldBegin(field);          {            oprot.WriteMapBegin(new TMap(TType.String' TType.String' Compaction_strategy_options.Count));            foreach (string _iter58 in Compaction_strategy_options.Keys)            {              oprot.WriteString(_iter58);              oprot.WriteString(Compaction_strategy_options[_iter58]);            }            oprot.WriteMapEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.row_cache_keys_to_save) {          field.Name = "row_cache_keys_to_save";          field.Type = TType.I32;          field.ID = 31;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Row_cache_keys_to_save);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Compression_options != null && __isset.compression_options) {          field.Name = "compression_options";          field.Type = TType.Map;          field.ID = 32;          oprot.WriteFieldBegin(field);          {            oprot.WriteMapBegin(new TMap(TType.String' TType.String' Compression_options.Count));            foreach (string _iter59 in Compression_options.Keys)            {              oprot.WriteString(_iter59);              oprot.WriteString(Compression_options[_iter59]);            }            oprot.WriteMapEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.bloom_filter_fp_chance) {          field.Name = "bloom_filter_fp_chance";          field.Type = TType.Double;          field.ID = 33;          oprot.WriteFieldBegin(field);          oprot.WriteDouble(Bloom_filter_fp_chance);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (Caching != null && __isset.caching) {          field.Name = "caching";          field.Type = TType.String;          field.ID = 34;          oprot.WriteFieldBegin(field);          oprot.WriteString(Caching);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfDef.cs,Write,The following statement contains a magic number: if (__isset.dclocal_read_repair_chance) {          field.Name = "dclocal_read_repair_chance";          field.Type = TType.Double;          field.ID = 37;          oprot.WriteFieldBegin(field);          oprot.WriteDouble(Dclocal_read_repair_chance);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfSplit,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfSplit.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                Row_count = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfSplit,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfSplit.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                Row_count = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CfSplit,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfSplit.cs,Write,The following statement contains a magic number: if (End_token != null && __isset.end_token) {          field.Name = "end_token";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteString(End_token);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CfSplit,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CfSplit.cs,Write,The following statement contains a magic number: if (__isset.row_count) {          field.Name = "row_count";          field.Type = TType.I64;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteI64(Row_count);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,Column,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Column.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Value = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                Timestamp = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Ttl = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,Column,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Column.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Value = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                Timestamp = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Ttl = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,Column,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Column.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Value = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I64) {                Timestamp = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Ttl = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,Column,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Column.cs,Write,The following statement contains a magic number: if (Value != null && __isset.value) {          field.Name = "value";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(Value);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,Column,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Column.cs,Write,The following statement contains a magic number: if (__isset.timestamp) {          field.Name = "timestamp";          field.Type = TType.I64;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteI64(Timestamp);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,Column,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Column.cs,Write,The following statement contains a magic number: if (__isset.ttl) {          field.Name = "ttl";          field.Type = TType.I32;          field.ID = 4;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Ttl);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Index_type = (IndexType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Index_name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Map) {                {                  Index_options = new Dictionary<string' string>();                  TMap _map41 = iprot.ReadMapBegin();                  for( int _i42 = 0; _i42 < _map41.Count; ++_i42)                  {                    string _key43;                    string _val44;                    _key43 = iprot.ReadString();                    _val44 = iprot.ReadString();                    Index_options[_key43] = _val44;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Index_type = (IndexType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Index_name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Map) {                {                  Index_options = new Dictionary<string' string>();                  TMap _map41 = iprot.ReadMapBegin();                  for( int _i42 = 0; _i42 < _map41.Count; ++_i42)                  {                    string _key43;                    string _val44;                    _key43 = iprot.ReadString();                    _val44 = iprot.ReadString();                    Index_options[_key43] = _val44;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Index_type = (IndexType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Index_name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Map) {                {                  Index_options = new Dictionary<string' string>();                  TMap _map41 = iprot.ReadMapBegin();                  for( int _i42 = 0; _i42 < _map41.Count; ++_i42)                  {                    string _key43;                    string _val44;                    _key43 = iprot.ReadString();                    _val44 = iprot.ReadString();                    Index_options[_key43] = _val44;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Validation_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Index_type = (IndexType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Index_name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Map) {                {                  Index_options = new Dictionary<string' string>();                  TMap _map41 = iprot.ReadMapBegin();                  for( int _i42 = 0; _i42 < _map41.Count; ++_i42)                  {                    string _key43;                    string _val44;                    _key43 = iprot.ReadString();                    _val44 = iprot.ReadString();                    Index_options[_key43] = _val44;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnDef.cs,Write,The following statement contains a magic number: if (Validation_class != null && __isset.validation_class) {          field.Name = "validation_class";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteString(Validation_class);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnDef.cs,Write,The following statement contains a magic number: if (__isset.index_type) {          field.Name = "index_type";          field.Type = TType.I32;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteI32((int)Index_type);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnDef.cs,Write,The following statement contains a magic number: if (Index_name != null && __isset.index_name) {          field.Name = "index_name";          field.Type = TType.String;          field.ID = 4;          oprot.WriteFieldBegin(field);          oprot.WriteString(Index_name);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnDef.cs,Write,The following statement contains a magic number: if (Index_options != null && __isset.index_options) {          field.Name = "index_options";          field.Type = TType.Map;          field.ID = 5;          oprot.WriteFieldBegin(field);          {            oprot.WriteMapBegin(new TMap(TType.String' TType.String' Index_options.Count));            foreach (string _iter45 in Index_options.Keys)            {              oprot.WriteString(_iter45);              oprot.WriteString(Index_options[_iter45]);            }            oprot.WriteMapEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnOrSuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnOrSuperColumn.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Column = new Column();                Column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Struct) {                Super_column = new SuperColumn();                Super_column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Struct) {                Counter_column = new CounterColumn();                Counter_column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Struct) {                Counter_super_column = new CounterSuperColumn();                Counter_super_column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnOrSuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnOrSuperColumn.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Column = new Column();                Column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Struct) {                Super_column = new SuperColumn();                Super_column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Struct) {                Counter_column = new CounterColumn();                Counter_column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Struct) {                Counter_super_column = new CounterSuperColumn();                Counter_super_column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnOrSuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnOrSuperColumn.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Column = new Column();                Column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Struct) {                Super_column = new SuperColumn();                Super_column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Struct) {                Counter_column = new CounterColumn();                Counter_column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Struct) {                Counter_super_column = new CounterSuperColumn();                Counter_super_column.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnOrSuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnOrSuperColumn.cs,Write,The following statement contains a magic number: if (Super_column != null && __isset.super_column) {          field.Name = "super_column";          field.Type = TType.Struct;          field.ID = 2;          oprot.WriteFieldBegin(field);          Super_column.Write(oprot);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnOrSuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnOrSuperColumn.cs,Write,The following statement contains a magic number: if (Counter_column != null && __isset.counter_column) {          field.Name = "counter_column";          field.Type = TType.Struct;          field.ID = 3;          oprot.WriteFieldBegin(field);          Counter_column.Write(oprot);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnOrSuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnOrSuperColumn.cs,Write,The following statement contains a magic number: if (Counter_super_column != null && __isset.counter_super_column) {          field.Name = "counter_super_column";          field.Type = TType.Struct;          field.ID = 4;          oprot.WriteFieldBegin(field);          Counter_super_column.Write(oprot);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnParent,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnParent.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 3:              if (field.Type == TType.String) {                Column_family = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Super_column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnParent,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnParent.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 3:              if (field.Type == TType.String) {                Column_family = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Super_column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnParent,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnParent.cs,Write,The following statement contains a magic number: if (Column_family != null && __isset.column_family) {          field.Name = "column_family";          field.Type = TType.String;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteString(Column_family);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnParent,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnParent.cs,Write,The following statement contains a magic number: if (Super_column != null && __isset.super_column) {          field.Name = "super_column";          field.Type = TType.String;          field.ID = 4;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(Super_column);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnPath,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnPath.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 3:              if (field.Type == TType.String) {                Column_family = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Super_column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnPath,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnPath.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 3:              if (field.Type == TType.String) {                Column_family = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Super_column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnPath,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnPath.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 3:              if (field.Type == TType.String) {                Column_family = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Super_column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.String) {                Column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnPath,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnPath.cs,Write,The following statement contains a magic number: if (Column_family != null && __isset.column_family) {          field.Name = "column_family";          field.Type = TType.String;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteString(Column_family);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnPath,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnPath.cs,Write,The following statement contains a magic number: if (Super_column != null && __isset.super_column) {          field.Name = "super_column";          field.Type = TType.String;          field.ID = 4;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(Super_column);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,ColumnPath,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\ColumnPath.cs,Write,The following statement contains a magic number: if (Column != null && __isset.column) {          field.Name = "column";          field.Type = TType.String;          field.ID = 5;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(Column);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CounterColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CounterColumn.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I64) {                Value = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CounterColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CounterColumn.cs,Write,The following statement contains a magic number: if (__isset.value) {          field.Name = "value";          field.Type = TType.I64;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteI64(Value);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CounterSuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CounterSuperColumn.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  Columns = new List<CounterColumn>();                  TList _list4 = iprot.ReadListBegin();                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)                  {                    CounterColumn _elem6 = new CounterColumn();                    _elem6 = new CounterColumn();                    _elem6.Read(iprot);                    Columns.Add(_elem6);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CounterSuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CounterSuperColumn.cs,Write,The following statement contains a magic number: if (Columns != null && __isset.columns) {          field.Name = "columns";          field.Type = TType.List;          field.ID = 2;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.Struct' Columns.Count));            foreach (CounterColumn _iter7 in Columns)            {              _iter7.Write(oprot);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlMetadata,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlMetadata.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.Map) {                {                  Name_types = new Dictionary<byte[]' string>();                  TMap _map73 = iprot.ReadMapBegin();                  for( int _i74 = 0; _i74 < _map73.Count; ++_i74)                  {                    byte[] _key75;                    string _val76;                    _key75 = iprot.ReadBinary();                    _val76 = iprot.ReadString();                    Name_types[_key75] = _val76;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Map) {                {                  Value_types = new Dictionary<byte[]' string>();                  TMap _map77 = iprot.ReadMapBegin();                  for( int _i78 = 0; _i78 < _map77.Count; ++_i78)                  {                    byte[] _key79;                    string _val80;                    _key79 = iprot.ReadBinary();                    _val80 = iprot.ReadString();                    Value_types[_key79] = _val80;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Default_name_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Default_value_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlMetadata,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlMetadata.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.Map) {                {                  Name_types = new Dictionary<byte[]' string>();                  TMap _map73 = iprot.ReadMapBegin();                  for( int _i74 = 0; _i74 < _map73.Count; ++_i74)                  {                    byte[] _key75;                    string _val76;                    _key75 = iprot.ReadBinary();                    _val76 = iprot.ReadString();                    Name_types[_key75] = _val76;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Map) {                {                  Value_types = new Dictionary<byte[]' string>();                  TMap _map77 = iprot.ReadMapBegin();                  for( int _i78 = 0; _i78 < _map77.Count; ++_i78)                  {                    byte[] _key79;                    string _val80;                    _key79 = iprot.ReadBinary();                    _val80 = iprot.ReadString();                    Value_types[_key79] = _val80;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Default_name_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Default_value_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlMetadata,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlMetadata.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.Map) {                {                  Name_types = new Dictionary<byte[]' string>();                  TMap _map73 = iprot.ReadMapBegin();                  for( int _i74 = 0; _i74 < _map73.Count; ++_i74)                  {                    byte[] _key75;                    string _val76;                    _key75 = iprot.ReadBinary();                    _val76 = iprot.ReadString();                    Name_types[_key75] = _val76;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Map) {                {                  Value_types = new Dictionary<byte[]' string>();                  TMap _map77 = iprot.ReadMapBegin();                  for( int _i78 = 0; _i78 < _map77.Count; ++_i78)                  {                    byte[] _key79;                    string _val80;                    _key79 = iprot.ReadBinary();                    _val80 = iprot.ReadString();                    Value_types[_key79] = _val80;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Default_name_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                Default_value_type = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlMetadata,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlMetadata.cs,Write,The following statement contains a magic number: if (Value_types != null && __isset.value_types) {          field.Name = "value_types";          field.Type = TType.Map;          field.ID = 2;          oprot.WriteFieldBegin(field);          {            oprot.WriteMapBegin(new TMap(TType.String' TType.String' Value_types.Count));            foreach (byte[] _iter82 in Value_types.Keys)            {              oprot.WriteBinary(_iter82);              oprot.WriteString(Value_types[_iter82]);            }            oprot.WriteMapEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlMetadata,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlMetadata.cs,Write,The following statement contains a magic number: if (Default_name_type != null && __isset.default_name_type) {          field.Name = "default_name_type";          field.Type = TType.String;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteString(Default_name_type);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlMetadata,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlMetadata.cs,Write,The following statement contains a magic number: if (Default_value_type != null && __isset.default_value_type) {          field.Name = "default_value_type";          field.Type = TType.String;          field.ID = 4;          oprot.WriteFieldBegin(field);          oprot.WriteString(Default_value_type);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlPreparedResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlPreparedResult.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                ItemId = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Variable_types = new List<string>();                  TList _list87 = iprot.ReadListBegin();                  for( int _i88 = 0; _i88 < _list87.Count; ++_i88)                  {                    string _elem89 = null;                    _elem89 = iprot.ReadString();                    Variable_types.Add(_elem89);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  Variable_names = new List<string>();                  TList _list90 = iprot.ReadListBegin();                  for( int _i91 = 0; _i91 < _list90.Count; ++_i91)                  {                    string _elem92 = null;                    _elem92 = iprot.ReadString();                    Variable_names.Add(_elem92);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlPreparedResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlPreparedResult.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                ItemId = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Variable_types = new List<string>();                  TList _list87 = iprot.ReadListBegin();                  for( int _i88 = 0; _i88 < _list87.Count; ++_i88)                  {                    string _elem89 = null;                    _elem89 = iprot.ReadString();                    Variable_types.Add(_elem89);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  Variable_names = new List<string>();                  TList _list90 = iprot.ReadListBegin();                  for( int _i91 = 0; _i91 < _list90.Count; ++_i91)                  {                    string _elem92 = null;                    _elem92 = iprot.ReadString();                    Variable_names.Add(_elem92);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlPreparedResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlPreparedResult.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                ItemId = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Variable_types = new List<string>();                  TList _list87 = iprot.ReadListBegin();                  for( int _i88 = 0; _i88 < _list87.Count; ++_i88)                  {                    string _elem89 = null;                    _elem89 = iprot.ReadString();                    Variable_types.Add(_elem89);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  Variable_names = new List<string>();                  TList _list90 = iprot.ReadListBegin();                  for( int _i91 = 0; _i91 < _list90.Count; ++_i91)                  {                    string _elem92 = null;                    _elem92 = iprot.ReadString();                    Variable_names.Add(_elem92);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlPreparedResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlPreparedResult.cs,Write,The following statement contains a magic number: if (__isset.count) {          field.Name = "count";          field.Type = TType.I32;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Count);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlPreparedResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlPreparedResult.cs,Write,The following statement contains a magic number: if (Variable_types != null && __isset.variable_types) {          field.Name = "variable_types";          field.Type = TType.List;          field.ID = 3;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.String' Variable_types.Count));            foreach (string _iter93 in Variable_types)            {              oprot.WriteString(_iter93);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlPreparedResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlPreparedResult.cs,Write,The following statement contains a magic number: if (Variable_names != null && __isset.variable_names) {          field.Name = "variable_names";          field.Type = TType.List;          field.ID = 4;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.String' Variable_names.Count));            foreach (string _iter94 in Variable_names)            {              oprot.WriteString(_iter94);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlResult.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (CqlResultType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  Rows = new List<CqlRow>();                  TList _list83 = iprot.ReadListBegin();                  for( int _i84 = 0; _i84 < _list83.Count; ++_i84)                  {                    CqlRow _elem85 = new CqlRow();                    _elem85 = new CqlRow();                    _elem85.Read(iprot);                    Rows.Add(_elem85);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Num = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Struct) {                Schema = new CqlMetadata();                Schema.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlResult.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (CqlResultType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  Rows = new List<CqlRow>();                  TList _list83 = iprot.ReadListBegin();                  for( int _i84 = 0; _i84 < _list83.Count; ++_i84)                  {                    CqlRow _elem85 = new CqlRow();                    _elem85 = new CqlRow();                    _elem85.Read(iprot);                    Rows.Add(_elem85);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Num = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Struct) {                Schema = new CqlMetadata();                Schema.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlResult.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Type = (CqlResultType)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  Rows = new List<CqlRow>();                  TList _list83 = iprot.ReadListBegin();                  for( int _i84 = 0; _i84 < _list83.Count; ++_i84)                  {                    CqlRow _elem85 = new CqlRow();                    _elem85 = new CqlRow();                    _elem85.Read(iprot);                    Rows.Add(_elem85);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Num = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.Struct) {                Schema = new CqlMetadata();                Schema.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlResult.cs,Write,The following statement contains a magic number: if (Rows != null && __isset.rows) {          field.Name = "rows";          field.Type = TType.List;          field.ID = 2;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.Struct' Rows.Count));            foreach (CqlRow _iter86 in Rows)            {              _iter86.Write(oprot);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlResult.cs,Write,The following statement contains a magic number: if (__isset.num) {          field.Name = "num";          field.Type = TType.I32;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Num);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlResult,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlResult.cs,Write,The following statement contains a magic number: if (Schema != null && __isset.schema) {          field.Name = "schema";          field.Type = TType.Struct;          field.ID = 4;          oprot.WriteFieldBegin(field);          Schema.Write(oprot);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,CqlRow,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlRow.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  Columns = new List<Column>();                  TList _list69 = iprot.ReadListBegin();                  for( int _i70 = 0; _i70 < _list69.Count; ++_i70)                  {                    Column _elem71 = new Column();                    _elem71 = new Column();                    _elem71.Read(iprot);                    Columns.Add(_elem71);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,CqlRow,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\CqlRow.cs,Write,The following statement contains a magic number: if (Columns != null && __isset.columns) {          field.Name = "columns";          field.Type = TType.List;          field.ID = 2;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.Struct' Columns.Count));            foreach (Column _iter72 in Columns)            {              _iter72.Write(oprot);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,Deletion,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Deletion.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Timestamp = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Super_column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Struct) {                Predicate = new SlicePredicate();                Predicate.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,Deletion,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Deletion.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                Timestamp = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Super_column = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Struct) {                Predicate = new SlicePredicate();                Predicate.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,Deletion,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Deletion.cs,Write,The following statement contains a magic number: if (Super_column != null && __isset.super_column) {          field.Name = "super_column";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(Super_column);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,Deletion,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Deletion.cs,Write,The following statement contains a magic number: if (Predicate != null && __isset.predicate) {          field.Name = "predicate";          field.Type = TType.Struct;          field.ID = 3;          oprot.WriteFieldBegin(field);          Predicate.Write(oprot);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,EndpointDetails,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\EndpointDetails.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Host = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Datacenter = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Rack = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,EndpointDetails,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\EndpointDetails.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Host = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Datacenter = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Rack = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,EndpointDetails,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\EndpointDetails.cs,Write,The following statement contains a magic number: if (Datacenter != null && __isset.datacenter) {          field.Name = "datacenter";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteString(Datacenter);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,EndpointDetails,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\EndpointDetails.cs,Write,The following statement contains a magic number: if (Rack != null && __isset.rack) {          field.Name = "rack";          field.Type = TType.String;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteString(Rack);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,IndexClause,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\IndexClause.cs,IndexClause,The following statement contains a magic number: this._count = 100;
Magic Number,Apache.Cassandra,IndexClause,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\IndexClause.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.List) {                {                  Expressions = new List<IndexExpression>();                  TList _list12 = iprot.ReadListBegin();                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                  {                    IndexExpression _elem14 = new IndexExpression();                    _elem14 = new IndexExpression();                    _elem14.Read(iprot);                    Expressions.Add(_elem14);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Start_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,IndexClause,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\IndexClause.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.List) {                {                  Expressions = new List<IndexExpression>();                  TList _list12 = iprot.ReadListBegin();                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                  {                    IndexExpression _elem14 = new IndexExpression();                    _elem14 = new IndexExpression();                    _elem14.Read(iprot);                    Expressions.Add(_elem14);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Start_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,IndexClause,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\IndexClause.cs,Write,The following statement contains a magic number: if (Start_key != null && __isset.start_key) {          field.Name = "start_key";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(Start_key);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,IndexClause,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\IndexClause.cs,Write,The following statement contains a magic number: if (__isset.count) {          field.Name = "count";          field.Type = TType.I32;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Count);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,IndexExpression,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\IndexExpression.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Column_name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Op = (IndexOperator)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Value = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,IndexExpression,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\IndexExpression.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Column_name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Op = (IndexOperator)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Value = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,IndexExpression,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\IndexExpression.cs,Write,The following statement contains a magic number: if (__isset.op) {          field.Name = "op";          field.Type = TType.I32;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteI32((int)Op);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,IndexExpression,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\IndexExpression.cs,Write,The following statement contains a magic number: if (Value != null && __isset.value) {          field.Name = "value";          field.Type = TType.String;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(Value);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KeyCount,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyCount.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KeyCount,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyCount.cs,Write,The following statement contains a magic number: if (__isset.count) {          field.Name = "count";          field.Type = TType.I32;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Count);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,KeyRange,The following statement contains a magic number: this._count = 100;
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Row_filter = new List<IndexExpression>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    IndexExpression _elem18 = new IndexExpression();                    _elem18 = new IndexExpression();                    _elem18.Read(iprot);                    Row_filter.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Row_filter = new List<IndexExpression>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    IndexExpression _elem18 = new IndexExpression();                    _elem18 = new IndexExpression();                    _elem18.Read(iprot);                    Row_filter.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Row_filter = new List<IndexExpression>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    IndexExpression _elem18 = new IndexExpression();                    _elem18 = new IndexExpression();                    _elem18.Read(iprot);                    Row_filter.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Row_filter = new List<IndexExpression>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    IndexExpression _elem18 = new IndexExpression();                    _elem18 = new IndexExpression();                    _elem18.Read(iprot);                    Row_filter.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.List) {                {                  Row_filter = new List<IndexExpression>();                  TList _list16 = iprot.ReadListBegin();                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)                  {                    IndexExpression _elem18 = new IndexExpression();                    _elem18 = new IndexExpression();                    _elem18.Read(iprot);                    Row_filter.Add(_elem18);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Write,The following statement contains a magic number: if (End_key != null && __isset.end_key) {          field.Name = "end_key";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(End_key);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Write,The following statement contains a magic number: if (Start_token != null && __isset.start_token) {          field.Name = "start_token";          field.Type = TType.String;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteString(Start_token);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Write,The following statement contains a magic number: if (End_token != null && __isset.end_token) {          field.Name = "end_token";          field.Type = TType.String;          field.ID = 4;          oprot.WriteFieldBegin(field);          oprot.WriteString(End_token);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Write,The following statement contains a magic number: if (__isset.count) {          field.Name = "count";          field.Type = TType.I32;          field.ID = 5;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Count);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KeyRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeyRange.cs,Write,The following statement contains a magic number: if (Row_filter != null && __isset.row_filter) {          field.Name = "row_filter";          field.Type = TType.List;          field.ID = 6;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.Struct' Row_filter.Count));            foreach (IndexExpression _iter19 in Row_filter)            {              _iter19.Write(oprot);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KeySlice,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeySlice.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Key = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  Columns = new List<ColumnOrSuperColumn>();                  TList _list20 = iprot.ReadListBegin();                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)                  {                    ColumnOrSuperColumn _elem22 = new ColumnOrSuperColumn();                    _elem22 = new ColumnOrSuperColumn();                    _elem22.Read(iprot);                    Columns.Add(_elem22);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KeySlice,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KeySlice.cs,Write,The following statement contains a magic number: if (Columns != null && __isset.columns) {          field.Name = "columns";          field.Type = TType.List;          field.ID = 2;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.Struct' Columns.Count));            foreach (ColumnOrSuperColumn _iter23 in Columns)            {              _iter23.Write(oprot);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Strategy_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Map) {                {                  Strategy_options = new Dictionary<string' string>();                  TMap _map60 = iprot.ReadMapBegin();                  for( int _i61 = 0; _i61 < _map60.Count; ++_i61)                  {                    string _key62;                    string _val63;                    _key62 = iprot.ReadString();                    _val63 = iprot.ReadString();                    Strategy_options[_key62] = _val63;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Replication_factor = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.List) {                {                  Cf_defs = new List<CfDef>();                  TList _list64 = iprot.ReadListBegin();                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                  {                    CfDef _elem66 = new CfDef();                    _elem66 = new CfDef();                    _elem66.Read(iprot);                    Cf_defs.Add(_elem66);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Durable_writes = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Strategy_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Map) {                {                  Strategy_options = new Dictionary<string' string>();                  TMap _map60 = iprot.ReadMapBegin();                  for( int _i61 = 0; _i61 < _map60.Count; ++_i61)                  {                    string _key62;                    string _val63;                    _key62 = iprot.ReadString();                    _val63 = iprot.ReadString();                    Strategy_options[_key62] = _val63;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Replication_factor = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.List) {                {                  Cf_defs = new List<CfDef>();                  TList _list64 = iprot.ReadListBegin();                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                  {                    CfDef _elem66 = new CfDef();                    _elem66 = new CfDef();                    _elem66.Read(iprot);                    Cf_defs.Add(_elem66);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Durable_writes = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Strategy_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Map) {                {                  Strategy_options = new Dictionary<string' string>();                  TMap _map60 = iprot.ReadMapBegin();                  for( int _i61 = 0; _i61 < _map60.Count; ++_i61)                  {                    string _key62;                    string _val63;                    _key62 = iprot.ReadString();                    _val63 = iprot.ReadString();                    Strategy_options[_key62] = _val63;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Replication_factor = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.List) {                {                  Cf_defs = new List<CfDef>();                  TList _list64 = iprot.ReadListBegin();                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                  {                    CfDef _elem66 = new CfDef();                    _elem66 = new CfDef();                    _elem66.Read(iprot);                    Cf_defs.Add(_elem66);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Durable_writes = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Strategy_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Map) {                {                  Strategy_options = new Dictionary<string' string>();                  TMap _map60 = iprot.ReadMapBegin();                  for( int _i61 = 0; _i61 < _map60.Count; ++_i61)                  {                    string _key62;                    string _val63;                    _key62 = iprot.ReadString();                    _val63 = iprot.ReadString();                    Strategy_options[_key62] = _val63;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Replication_factor = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.List) {                {                  Cf_defs = new List<CfDef>();                  TList _list64 = iprot.ReadListBegin();                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                  {                    CfDef _elem66 = new CfDef();                    _elem66 = new CfDef();                    _elem66.Read(iprot);                    Cf_defs.Add(_elem66);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Durable_writes = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Strategy_class = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Map) {                {                  Strategy_options = new Dictionary<string' string>();                  TMap _map60 = iprot.ReadMapBegin();                  for( int _i61 = 0; _i61 < _map60.Count; ++_i61)                  {                    string _key62;                    string _val63;                    _key62 = iprot.ReadString();                    _val63 = iprot.ReadString();                    Strategy_options[_key62] = _val63;                  }                  iprot.ReadMapEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Replication_factor = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.List) {                {                  Cf_defs = new List<CfDef>();                  TList _list64 = iprot.ReadListBegin();                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                  {                    CfDef _elem66 = new CfDef();                    _elem66 = new CfDef();                    _elem66.Read(iprot);                    Cf_defs.Add(_elem66);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                Durable_writes = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Write,The following statement contains a magic number: if (Strategy_class != null && __isset.strategy_class) {          field.Name = "strategy_class";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteString(Strategy_class);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Write,The following statement contains a magic number: if (Strategy_options != null && __isset.strategy_options) {          field.Name = "strategy_options";          field.Type = TType.Map;          field.ID = 3;          oprot.WriteFieldBegin(field);          {            oprot.WriteMapBegin(new TMap(TType.String' TType.String' Strategy_options.Count));            foreach (string _iter67 in Strategy_options.Keys)            {              oprot.WriteString(_iter67);              oprot.WriteString(Strategy_options[_iter67]);            }            oprot.WriteMapEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Write,The following statement contains a magic number: if (__isset.replication_factor) {          field.Name = "replication_factor";          field.Type = TType.I32;          field.ID = 4;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Replication_factor);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Write,The following statement contains a magic number: if (Cf_defs != null && __isset.cf_defs) {          field.Name = "cf_defs";          field.Type = TType.List;          field.ID = 5;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.Struct' Cf_defs.Count));            foreach (CfDef _iter68 in Cf_defs)            {              _iter68.Write(oprot);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,KsDef,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\KsDef.cs,Write,The following statement contains a magic number: if (__isset.durable_writes) {          field.Name = "durable_writes";          field.Type = TType.Bool;          field.ID = 6;          oprot.WriteFieldBegin(field);          oprot.WriteBool(Durable_writes);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,Mutation,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Mutation.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.Struct) {                Column_or_supercolumn = new ColumnOrSuperColumn();                Column_or_supercolumn.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Struct) {                Deletion = new Deletion();                Deletion.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,Mutation,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\Mutation.cs,Write,The following statement contains a magic number: if (Deletion != null && __isset.deletion) {          field.Name = "deletion";          field.Type = TType.Struct;          field.ID = 2;          oprot.WriteFieldBegin(field);          Deletion.Write(oprot);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,SlicePredicate,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SlicePredicate.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.List) {                {                  Column_names = new List<byte[]>();                  TList _list8 = iprot.ReadListBegin();                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)                  {                    byte[] _elem10 = null;                    _elem10 = iprot.ReadBinary();                    Column_names.Add(_elem10);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Struct) {                Slice_range = new SliceRange();                Slice_range.Read(iprot);              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,SlicePredicate,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SlicePredicate.cs,Write,The following statement contains a magic number: if (Slice_range != null && __isset.slice_range) {          field.Name = "slice_range";          field.Type = TType.Struct;          field.ID = 2;          oprot.WriteFieldBegin(field);          Slice_range.Write(oprot);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,SliceRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SliceRange.cs,SliceRange,The following statement contains a magic number: this._count = 100;
Magic Number,Apache.Cassandra,SliceRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SliceRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Finish = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                Reversed = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,SliceRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SliceRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Finish = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                Reversed = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,SliceRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SliceRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                Finish = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                Reversed = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I32) {                Count = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,SliceRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SliceRange.cs,Write,The following statement contains a magic number: if (Finish != null && __isset.finish) {          field.Name = "finish";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteBinary(Finish);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,SliceRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SliceRange.cs,Write,The following statement contains a magic number: if (__isset.reversed) {          field.Name = "reversed";          field.Type = TType.Bool;          field.ID = 3;          oprot.WriteFieldBegin(field);          oprot.WriteBool(Reversed);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,SliceRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SliceRange.cs,Write,The following statement contains a magic number: if (__isset.count) {          field.Name = "count";          field.Type = TType.I32;          field.ID = 4;          oprot.WriteFieldBegin(field);          oprot.WriteI32(Count);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,SuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SuperColumn.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Name = iprot.ReadBinary();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.List) {                {                  Columns = new List<Column>();                  TList _list0 = iprot.ReadListBegin();                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                  {                    Column _elem2 = new Column();                    _elem2 = new Column();                    _elem2.Read(iprot);                    Columns.Add(_elem2);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,SuperColumn,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\SuperColumn.cs,Write,The following statement contains a magic number: if (Columns != null && __isset.columns) {          field.Name = "columns";          field.Type = TType.List;          field.ID = 2;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.Struct' Columns.Count));            foreach (Column _iter3 in Columns)            {              _iter3.Write(oprot);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,TimedOutException,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TimedOutException.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.I32) {                Acknowledged_by = iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Acknowledged_by_batchlog = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,TimedOutException,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TimedOutException.cs,Write,The following statement contains a magic number: if (__isset.acknowledged_by_batchlog) {          field.Name = "acknowledged_by_batchlog";          field.Type = TType.Bool;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteBool(Acknowledged_by_batchlog);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,TokenRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TokenRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Endpoints = new List<string>();                  TList _list24 = iprot.ReadListBegin();                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                  {                    string _elem26 = null;                    _elem26 = iprot.ReadString();                    Endpoints.Add(_elem26);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  Rpc_endpoints = new List<string>();                  TList _list27 = iprot.ReadListBegin();                  for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                  {                    string _elem29 = null;                    _elem29 = iprot.ReadString();                    Rpc_endpoints.Add(_elem29);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.List) {                {                  Endpoint_details = new List<EndpointDetails>();                  TList _list30 = iprot.ReadListBegin();                  for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                  {                    EndpointDetails _elem32 = new EndpointDetails();                    _elem32 = new EndpointDetails();                    _elem32.Read(iprot);                    Endpoint_details.Add(_elem32);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,TokenRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TokenRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Endpoints = new List<string>();                  TList _list24 = iprot.ReadListBegin();                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                  {                    string _elem26 = null;                    _elem26 = iprot.ReadString();                    Endpoints.Add(_elem26);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  Rpc_endpoints = new List<string>();                  TList _list27 = iprot.ReadListBegin();                  for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                  {                    string _elem29 = null;                    _elem29 = iprot.ReadString();                    Rpc_endpoints.Add(_elem29);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.List) {                {                  Endpoint_details = new List<EndpointDetails>();                  TList _list30 = iprot.ReadListBegin();                  for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                  {                    EndpointDetails _elem32 = new EndpointDetails();                    _elem32 = new EndpointDetails();                    _elem32.Read(iprot);                    Endpoint_details.Add(_elem32);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,TokenRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TokenRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Endpoints = new List<string>();                  TList _list24 = iprot.ReadListBegin();                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                  {                    string _elem26 = null;                    _elem26 = iprot.ReadString();                    Endpoints.Add(_elem26);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  Rpc_endpoints = new List<string>();                  TList _list27 = iprot.ReadListBegin();                  for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                  {                    string _elem29 = null;                    _elem29 = iprot.ReadString();                    Rpc_endpoints.Add(_elem29);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.List) {                {                  Endpoint_details = new List<EndpointDetails>();                  TList _list30 = iprot.ReadListBegin();                  for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                  {                    EndpointDetails _elem32 = new EndpointDetails();                    _elem32 = new EndpointDetails();                    _elem32.Read(iprot);                    Endpoint_details.Add(_elem32);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,TokenRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TokenRange.cs,Read,The following statement contains a magic number: while (true)        {          field = iprot.ReadFieldBegin();          if (field.Type == TType.Stop) {             break;          }          switch (field.ID)          {            case 1:              if (field.Type == TType.String) {                Start_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.String) {                End_token = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.List) {                {                  Endpoints = new List<string>();                  TList _list24 = iprot.ReadListBegin();                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                  {                    string _elem26 = null;                    _elem26 = iprot.ReadString();                    Endpoints.Add(_elem26);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.List) {                {                  Rpc_endpoints = new List<string>();                  TList _list27 = iprot.ReadListBegin();                  for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                  {                    string _elem29 = null;                    _elem29 = iprot.ReadString();                    Rpc_endpoints.Add(_elem29);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.List) {                {                  Endpoint_details = new List<EndpointDetails>();                  TList _list30 = iprot.ReadListBegin();                  for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                  {                    EndpointDetails _elem32 = new EndpointDetails();                    _elem32 = new EndpointDetails();                    _elem32.Read(iprot);                    Endpoint_details.Add(_elem32);                  }                  iprot.ReadListEnd();                }              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }          iprot.ReadFieldEnd();        }
Magic Number,Apache.Cassandra,TokenRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TokenRange.cs,Write,The following statement contains a magic number: if (End_token != null && __isset.end_token) {          field.Name = "end_token";          field.Type = TType.String;          field.ID = 2;          oprot.WriteFieldBegin(field);          oprot.WriteString(End_token);          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,TokenRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TokenRange.cs,Write,The following statement contains a magic number: if (Endpoints != null && __isset.endpoints) {          field.Name = "endpoints";          field.Type = TType.List;          field.ID = 3;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.String' Endpoints.Count));            foreach (string _iter33 in Endpoints)            {              oprot.WriteString(_iter33);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,TokenRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TokenRange.cs,Write,The following statement contains a magic number: if (Rpc_endpoints != null && __isset.rpc_endpoints) {          field.Name = "rpc_endpoints";          field.Type = TType.List;          field.ID = 4;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.String' Rpc_endpoints.Count));            foreach (string _iter34 in Rpc_endpoints)            {              oprot.WriteString(_iter34);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
Magic Number,Apache.Cassandra,TokenRange,C:\repos\pchalamet_cassandra-sharp\Apache.Cassandra\gen-csharp\Apache\Cassandra\TokenRange.cs,Write,The following statement contains a magic number: if (Endpoint_details != null && __isset.endpoint_details) {          field.Name = "endpoint_details";          field.Type = TType.List;          field.ID = 5;          oprot.WriteFieldBegin(field);          {            oprot.WriteListBegin(new TList(TType.Struct' Endpoint_details.Count));            foreach (EndpointDetails _iter35 in Endpoint_details)            {              _iter35.Write(oprot);            }            oprot.WriteListEnd();          }          oprot.WriteFieldEnd();        }
