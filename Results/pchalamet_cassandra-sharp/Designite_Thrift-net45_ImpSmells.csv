Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The method has 5 parameters. Parameters: src' srcOff' len' dst' dstOff
Long Parameter List,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The method has 5 parameters. Parameters: src' srcOff' len' dst' dstOff
Long Parameter List,Thrift.Server,TServer,C:\repos\pchalamet_cassandra-sharp\Thrift\Server\TServer.cs,TServer,The method has 7 parameters. Parameters: processor' serverTransport' inputTransportFactory' outputTransportFactory' inputProtocolFactory' outputProtocolFactory' logDelegate
Long Parameter List,Thrift.Server,TThreadedServer,C:\repos\pchalamet_cassandra-sharp\Thrift\Server\TThreadedServer.cs,TThreadedServer,The method has 8 parameters. Parameters: processor' serverTransport' inputTransportFactory' outputTransportFactory' inputProtocolFactory' outputProtocolFactory' maxThreads' logDel
Long Parameter List,Thrift.Server,TThreadPoolServer,C:\repos\pchalamet_cassandra-sharp\Thrift\Server\TThreadPoolServer.cs,TThreadPoolServer,The method has 9 parameters. Parameters: processor' serverTransport' inputTransportFactory' outputTransportFactory' inputProtocolFactory' outputProtocolFactory' minThreadPoolThreads' maxThreadPoolThreads' logDel
Long Statement,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,ReadMessageBegin,The length of the statement  "                throw new TProtocolException("Expected protocol id " + PROTOCOL_ID.ToString("X") + " but got " + protocolId.ToString("X")); " is 123.
Empty Catch Block,Thrift.Server,TThreadedServer,C:\repos\pchalamet_cassandra-sharp\Thrift\Server\TThreadedServer.cs,ClientWorker,The method has an empty catch block.
Empty Catch Block,Thrift.Server,TThreadPoolServer,C:\repos\pchalamet_cassandra-sharp\Thrift\Server\TThreadPoolServer.cs,Execute,The method has an empty catch block.
Empty Catch Block,Thrift.Transport,THttpHandler,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\THttpHandler.cs,ProcessRequest,The method has an empty catch block.
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: dst[dstOff] = (byte)ENCODE_TABLE[(src[srcOff] >> 2) & 0x3F];
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[  						((src[srcOff + 1] << 2) & 0x3C) | ((src[srcOff + 2] >> 6) & 0x03)];  				dst[dstOff + 3] =  					(byte)ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[  						((src[srcOff] << 4) & 0x30) | ((src[srcOff + 1] >> 4) & 0x0F)];  				dst[dstOff + 2] =  					(byte)ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3C];    			}  			else  			{ // len == 1) {  				dst[dstOff + 1] =  					(byte)ENCODE_TABLE[(src[srcOff] << 4) & 0x30];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: dst[dstOff] = (byte)  				((DECODE_TABLE[src[srcOff] & 0x0FF] << 2) |  				(DECODE_TABLE[src[srcOff + 1] & 0x0FF] >> 4));
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: dst[dstOff] = (byte)  				((DECODE_TABLE[src[srcOff] & 0x0FF] << 2) |  				(DECODE_TABLE[src[srcOff + 1] & 0x0FF] >> 4));
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  					(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  					(DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  						(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  						DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  					(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  					(DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  						(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  						DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  					(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  					(DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  						(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  						DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  					(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  					(DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  						(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  						DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  					(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  					(DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  						(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  						DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  					(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  					(DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  						(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  						DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  					(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  					(DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  						(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  						DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  					(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  					(DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  						(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  						DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  					(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  					(DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  						(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  						DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI16,The following statement contains a magic number: i16out[0] = (byte)(0xff & (s >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI16,The following statement contains a magic number: trans.Write(i16out' 0' 2);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[0] = (byte)(0xff & (i32 >> 24));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[1] = (byte)(0xff & (i32 >> 16));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[2] = (byte)(0xff & (i32 >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[2] = (byte)(0xff & (i32 >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[3] = (byte)(0xff & i32);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: trans.Write(i32out' 0' 4);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[0] = (byte)(0xff & (i64 >> 56));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[1] = (byte)(0xff & (i64 >> 48));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[2] = (byte)(0xff & (i64 >> 40));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[2] = (byte)(0xff & (i64 >> 40));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[3] = (byte)(0xff & (i64 >> 32));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[3] = (byte)(0xff & (i64 >> 32));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[4] = (byte)(0xff & (i64 >> 24));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[4] = (byte)(0xff & (i64 >> 24));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[5] = (byte)(0xff & (i64 >> 16));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[5] = (byte)(0xff & (i64 >> 16));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[6] = (byte)(0xff & (i64 >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[6] = (byte)(0xff & (i64 >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[7] = (byte)(0xff & i64);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: trans.Write(i64out' 0' 8);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI16,The following statement contains a magic number: ReadAll(i16in' 0' 2);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI16,The following statement contains a magic number: return (short)(((i16in[0] & 0xff) << 8) | ((i16in[1] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: ReadAll(i32in' 0' 4);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (int)(((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (int)(((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (int)(((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (int)(((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (int)(((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: ReadAll(i64in' 0' 8);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (long)(                  (ulong)((ulong)(i64in[0] & 0xff) << 56) |                  (ulong)((ulong)(i64in[1] & 0xff) << 48) |                  (ulong)((ulong)(i64in[2] & 0xff) << 40) |                  (ulong)((ulong)(i64in[3] & 0xff) << 32) |                  (ulong)((ulong)(i64in[4] & 0xff) << 24) |                  (ulong)((ulong)(i64in[5] & 0xff) << 16) |                  (ulong)((ulong)(i64in[6] & 0xff) << 8) |                  (ulong)((ulong)(i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,WriteVarint32,The following statement contains a magic number: while (true)              {                  if ((n & ~0x7F) == 0)                  {                      i32buf[idx++] = (byte)n;                      // WriteByteDirect((byte)n);                      break;                      // return;                  }                  else                  {                      i32buf[idx++] = (byte)((n & 0x7F) | 0x80);                      // WriteByteDirect((byte)((n & 0x7F) | 0x80));                      n >>= 7;                  }              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,WriteFieldBeginInternal,The following statement contains a magic number: if (field.ID > lastFieldId_ && field.ID - lastFieldId_ <= 15)              {                  // Write them together                  WriteByteDirect((field.ID - lastFieldId_) << 4 | typeToWrite);              }              else              {                  // Write them separate                  WriteByteDirect(typeToWrite);                  WriteI16(field.ID);              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,WriteFieldBeginInternal,The following statement contains a magic number: if (field.ID > lastFieldId_ && field.ID - lastFieldId_ <= 15)              {                  // Write them together                  WriteByteDirect((field.ID - lastFieldId_) << 4 | typeToWrite);              }              else              {                  // Write them separate                  WriteByteDirect(typeToWrite);                  WriteI16(field.ID);              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,WriteMapBegin,The following statement contains a magic number: if (map.Count == 0)              {                  WriteByteDirect(0);              }              else              {                  WriteVarint32((uint)map.Count);                  WriteByteDirect(getCompactType(map.KeyType) << 4 | getCompactType(map.ValueType));              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,WriteCollectionBegin,The following statement contains a magic number: if (size <= 14)              {                  WriteByteDirect(size << 4 | getCompactType(elemType));              }              else              {                  WriteByteDirect(0xf0 | getCompactType(elemType));                  WriteVarint32((uint)size);              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,WriteCollectionBegin,The following statement contains a magic number: if (size <= 14)              {                  WriteByteDirect(size << 4 | getCompactType(elemType));              }              else              {                  WriteByteDirect(0xf0 | getCompactType(elemType));                  WriteVarint32((uint)size);              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,WriteVarint64,The following statement contains a magic number: while (true)              {                  if ((n & ~(ulong)0x7FL) == 0)                  {                      varint64out[idx++] = (byte)n;                      break;                  }                  else                  {                      varint64out[idx++] = ((byte)((n & 0x7F) | 0x80));                      n >>= 7;                  }              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,longToZigzag,The following statement contains a magic number: return (ulong)(((ulong)n << 1) ^ ((ulong)n >> 63));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,intToZigZag,The following statement contains a magic number: return (uint)(((uint)n << 1) ^ ((uint)n >> 31));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 1] = (byte)((n >> 8) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 2] = (byte)((n >> 16) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 2] = (byte)((n >> 16) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 3] = (byte)((n >> 24) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 3] = (byte)((n >> 24) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 4] = (byte)((n >> 32) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 4] = (byte)((n >> 32) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 5] = (byte)((n >> 40) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 5] = (byte)((n >> 40) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 6] = (byte)((n >> 48) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 6] = (byte)((n >> 48) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 7] = (byte)((n >> 56) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,fixedLongToBytes,The following statement contains a magic number: buf[off + 7] = (byte)((n >> 56) & 0xff);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,ReadFieldBegin,The following statement contains a magic number: short modifier = (short)((type & 0xf0) >> 4);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,ReadMapBegin,The following statement contains a magic number: return new TMap(getTType((byte)(keyAndValueType >> 4))' getTType((byte)(keyAndValueType & 0xf))' size);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,ReadListBegin,The following statement contains a magic number: int size = (size_and_type >> 4) & 0x0f;
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,ReadListBegin,The following statement contains a magic number: if (size == 15)              {                  size = (int)ReadVarint32();              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,ReadDouble,The following statement contains a magic number: byte[] longBits = new byte[8];
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,ReadDouble,The following statement contains a magic number: trans.ReadAll(longBits' 0' 8);
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,ReadVarint32,The following statement contains a magic number: while (true)              {                  byte b = ReadByte();                  result |= (uint)(b & 0x7f) << shift;                  if ((b & 0x80) != 0x80) break;                  shift += 7;              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,ReadVarint64,The following statement contains a magic number: while (true)              {                  byte b = ReadByte();                  result |= (ulong)(b & 0x7f) << shift;                  if ((b & 0x80) != 0x80) break;                  shift += 7;              }
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TCompactProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TCompactProtocol.cs,bytesToLong,The following statement contains a magic number: return                ((bytes[7] & 0xffL) << 56) |                ((bytes[6] & 0xffL) << 48) |                ((bytes[5] & 0xffL) << 40) |                ((bytes[4] & 0xffL) << 32) |                ((bytes[3] & 0xffL) << 24) |                ((bytes[2] & 0xffL) << 16) |                ((bytes[1] & 0xffL) << 8) |                ((bytes[0] & 0xffL));
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,HexChar,The following statement contains a magic number: if (val < 10)  			{  				return (byte)((char)val + '0');  			}  			else  			{  				return (byte)((char)val + 'a');  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,WriteJSONString,The following statement contains a magic number: for (int i = 0; i < len; i++)  			{  				if ((b[i] & 0x00FF) >= 0x30)  				{  					if (b[i] == BACKSLASH[0])  					{  						trans.Write(BACKSLASH);  						trans.Write(BACKSLASH);  					}  					else  					{  						trans.Write(b' i' 1);  					}  				}  				else  				{  					tempBuffer[0] = JSON_CHAR_TABLE[b[i]];  					if (tempBuffer[0] == 1)  					{  						trans.Write(b' i' 1);  					}  					else if (tempBuffer[0] > 1)  					{  						trans.Write(BACKSLASH);  						trans.Write(tempBuffer' 0' 1);  					}  					else  					{  						trans.Write(ESCSEQ);  						tempBuffer[0] = HexChar((byte)(b[i] >> 4));  						tempBuffer[1] = HexChar(b[i]);  						trans.Write(tempBuffer' 0' 2);  					}  				}  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,WriteJSONString,The following statement contains a magic number: for (int i = 0; i < len; i++)  			{  				if ((b[i] & 0x00FF) >= 0x30)  				{  					if (b[i] == BACKSLASH[0])  					{  						trans.Write(BACKSLASH);  						trans.Write(BACKSLASH);  					}  					else  					{  						trans.Write(b' i' 1);  					}  				}  				else  				{  					tempBuffer[0] = JSON_CHAR_TABLE[b[i]];  					if (tempBuffer[0] == 1)  					{  						trans.Write(b' i' 1);  					}  					else if (tempBuffer[0] > 1)  					{  						trans.Write(BACKSLASH);  						trans.Write(tempBuffer' 0' 1);  					}  					else  					{  						trans.Write(ESCSEQ);  						tempBuffer[0] = HexChar((byte)(b[i] >> 4));  						tempBuffer[1] = HexChar(b[i]);  						trans.Write(tempBuffer' 0' 2);  					}  				}  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,ReadJSONString,The following statement contains a magic number: while (true)  			{  				byte ch = reader.Read();  				if (ch == QUOTE[0])  				{  					break;  				}  				if (ch == ESCSEQ[0])  				{  					ch = reader.Read();  					if (ch == ESCSEQ[1])  					{  						ReadJSONSyntaxChar(ZERO);  						ReadJSONSyntaxChar(ZERO);  						trans.ReadAll(tempBuffer' 0' 2);  						ch = (byte)((HexVal((byte)tempBuffer[0]) << 4) + HexVal(tempBuffer[1]));  					}  					else  					{  						int off = Array.IndexOf(ESCAPE_CHARS' (char)ch);  						if (off == -1)  						{  							throw new TProtocolException(TProtocolException.INVALID_DATA'  														 "Expected control char");  						}  						ch = ESCAPE_CHAR_VALS[off];  					}  				}  				buffer.Write(new byte[] { (byte)ch }' 0' 1);  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,ReadJSONString,The following statement contains a magic number: while (true)  			{  				byte ch = reader.Read();  				if (ch == QUOTE[0])  				{  					break;  				}  				if (ch == ESCSEQ[0])  				{  					ch = reader.Read();  					if (ch == ESCSEQ[1])  					{  						ReadJSONSyntaxChar(ZERO);  						ReadJSONSyntaxChar(ZERO);  						trans.ReadAll(tempBuffer' 0' 2);  						ch = (byte)((HexVal((byte)tempBuffer[0]) << 4) + HexVal(tempBuffer[1]));  					}  					else  					{  						int off = Array.IndexOf(ESCAPE_CHARS' (char)ch);  						if (off == -1)  						{  							throw new TProtocolException(TProtocolException.INVALID_DATA'  														 "Expected control char");  						}  						ch = ESCAPE_CHAR_VALS[off];  					}  				}  				buffer.Write(new byte[] { (byte)ch }' 0' 1);  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift,TApplicationException,C:\repos\pchalamet_cassandra-sharp\Thrift\TApplicationException.cs,Read,The following statement contains a magic number: while (true)  			{  				field = iprot.ReadFieldBegin();  				if (field.Type == TType.Stop)  				{  					break;  				}    				switch (field.ID)  				{  					case 1:  						if (field.Type == TType.String)  						{  							message = iprot.ReadString();  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 2:  						if (field.Type == TType.I32)  						{  							type = (ExceptionType)iprot.ReadI32();  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					default:  						TProtocolUtil.Skip(iprot' field.Type);  						break;  				}    				iprot.ReadFieldEnd();  			}
Magic Number,Thrift,TApplicationException,C:\repos\pchalamet_cassandra-sharp\Thrift\TApplicationException.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  				((i32rd[0] & 0xff) << 24) |  				((i32rd[1] & 0xff) << 16) |  				((i32rd[2] & 0xff) <<  8) |  				((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  				((i32rd[0] & 0xff) << 24) |  				((i32rd[1] & 0xff) << 16) |  				((i32rd[2] & 0xff) <<  8) |  				((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  				((i32rd[0] & 0xff) << 24) |  				((i32rd[1] & 0xff) << 16) |  				((i32rd[2] & 0xff) <<  8) |  				((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  				((i32rd[0] & 0xff) << 24) |  				((i32rd[1] & 0xff) << 16) |  				((i32rd[2] & 0xff) <<  8) |  				((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  				((i32rd[0] & 0xff) << 24) |  				((i32rd[1] & 0xff) << 16) |  				((i32rd[2] & 0xff) <<  8) |  				((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[0] = (byte)(0xff & (data_len >> 24));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[1] = (byte)(0xff & (data_len >> 16));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[2] = (byte)(0xff & (data_len >> 8));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[2] = (byte)(0xff & (data_len >> 8));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[3] = (byte)(0xff & (data_len));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\pchalamet_cassandra-sharp\Thrift\Transport\TFramedTransport.cs,InitWriteBuffer,The following statement contains a magic number: writeBuffer = new MemoryStream(1024);
Missing Default,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,GetTypeIDForTypeName,The following switch statement is missing a default case: switch (name[0])  				{  					case (byte)'d':  						result = TType.Double;  						break;  					case (byte)'i':  						switch (name[1])  						{  							case (byte)'8':  								result = TType.Byte;  								break;  							case (byte)'1':  								result = TType.I16;  								break;  							case (byte)'3':  								result = TType.I32;  								break;  							case (byte)'6':  								result = TType.I64;  								break;  						}  						break;  					case (byte)'l':  						result = TType.List;  						break;  					case (byte)'m':  						result = TType.Map;  						break;  					case (byte)'r':  						result = TType.Struct;  						break;  					case (byte)'s':  						if (name[1] == (byte)'t')  						{  							result = TType.String;  						}  						else if (name[1] == (byte)'e')  						{  							result = TType.Set;  						}  						break;  					case (byte)'t':  						result = TType.Bool;  						break;  				}
Missing Default,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,GetTypeIDForTypeName,The following switch statement is missing a default case: switch (name[1])  						{  							case (byte)'8':  								result = TType.Byte;  								break;  							case (byte)'1':  								result = TType.I16;  								break;  							case (byte)'3':  								result = TType.I32;  								break;  							case (byte)'6':  								result = TType.I64;  								break;  						}
Missing Default,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,WriteJSONDouble,The following switch statement is missing a default case: switch (str[0])  			{  				case 'N': // NaN  				case 'I': // Infinity  					special = true;  					break;  				case '-':  					if (str[1] == 'I')  					{ // -Infinity  						special = true;  					}  					break;  			}
Missing Default,Thrift.Protocol,TJSONProtocol,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TJSONProtocol.cs,IsJSONNumeric,The following switch statement is missing a default case: switch (b)  			{  				case (byte)'+':  				case (byte)'-':  				case (byte)'.':  				case (byte)'0':  				case (byte)'1':  				case (byte)'2':  				case (byte)'3':  				case (byte)'4':  				case (byte)'5':  				case (byte)'6':  				case (byte)'7':  				case (byte)'8':  				case (byte)'9':  				case (byte)'E':  				case (byte)'e':  					return true;  			}
Missing Default,Thrift.Protocol,TProtocolUtil,C:\repos\pchalamet_cassandra-sharp\Thrift\Protocol\TProtocolUtil.cs,Skip,The following switch statement is missing a default case: switch (type)  			{  				case TType.Bool:  					prot.ReadBool();  					break;  				case TType.Byte:  					prot.ReadByte();  					break;  				case TType.I16:  					prot.ReadI16();  					break;  				case TType.I32:  					prot.ReadI32();  					break;  				case TType.I64:  					prot.ReadI64();  					break;  				case TType.Double:  					prot.ReadDouble();  					break;  				case TType.String:  					// Don't try to decode the string' just skip it.  					prot.ReadBinary();  					break;  				case TType.Struct:  					prot.ReadStructBegin();  					while (true)  					{  						TField field = prot.ReadFieldBegin();  						if (field.Type == TType.Stop)  						{  							break;  						}  						Skip(prot' field.Type);  						prot.ReadFieldEnd();  					}  					prot.ReadStructEnd();  					break;  				case TType.Map:  					TMap map = prot.ReadMapBegin();  					for (int i = 0; i < map.Count; i++)  					{  						Skip(prot' map.KeyType);  						Skip(prot' map.ValueType);  					}  					prot.ReadMapEnd();  					break;  				case TType.Set:  					TSet set = prot.ReadSetBegin();  					for (int i = 0; i < set.Count; i++)  					{  						Skip(prot' set.ElementType);  					}  					prot.ReadSetEnd();  					break;  				case TType.List:  					TList list = prot.ReadListBegin();  					for (int i = 0; i < list.Count; i++)  					{  						Skip(prot' list.ElementType);  					}  					prot.ReadListEnd();  					break;  			}
