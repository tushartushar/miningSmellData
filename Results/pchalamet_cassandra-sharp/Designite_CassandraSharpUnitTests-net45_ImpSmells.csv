Implementation smell,Namespace,Class,File,Method,Description
Long Method,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The method has 120 lines of code.
Long Method,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The method has 109 lines of code.
Long Statement,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeMapOfCustomType,The length of the statement  "            var data = serializer.Serialize(new Dictionary<string' Point> { { "TopLeft"' new Point { X = 1' Y = 2 } }' { "BottomRight"' new Point { X = 5' Y = 7 } } });" is 156.
Long Statement,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The length of the statement  "                const string createFoo = "CREATE KEYSPACE Tests WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 122.
Long Statement,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The length of the statement  "                        "select cAscii' cBigint' cBlob' cBoolean' cDouble' cFloat' cInet' cInt' cText' cTimestamp' cTimeuuid' cUuid' cVarchar' cList' cSet' cMap from Tests.AllTypes"; " is 158.
Long Statement,CassandraSharpUnitTests.EndpointStrategy,EndpointsConfigExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\EndpointStrategy\FactoryTest.cs,TestCreateCustom,The length of the statement  "            IEndpointStrategy endpointStrategy = ServiceActivator<CassandraSharp.EndpointStrategy.Factory>.Create<IEndpointStrategy>(customType' endpoints'" is 143.
Long Statement,CassandraSharpUnitTests.EndpointStrategy,EndpointsConfigExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\EndpointStrategy\FactoryTest.cs,TestCreateNearest,The length of the statement  "            IEndpointStrategy endpointStrategy = ServiceActivator<CassandraSharp.EndpointStrategy.Factory>.Create<IEndpointStrategy>("Nearest"'" is 131.
Long Statement,CassandraSharpUnitTests.EndpointStrategy,EndpointsConfigExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\EndpointStrategy\FactoryTest.cs,TestCreateRandom,The length of the statement  "            IEndpointStrategy endpointStrategy = ServiceActivator<CassandraSharp.EndpointStrategy.Factory>.Create<IEndpointStrategy>("Random"'" is 130.
Long Statement,CassandraSharpUnitTests.Endurance,EnduranceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Endurance\EnduranceTest.cs,BinaryProtocolRunWritePerformanceParallel,The length of the statement  "                const string createFoo = "CREATE KEYSPACE Endurance WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 126.
Long Statement,CassandraSharpUnitTests.Endurance,EnduranceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Endurance\EnduranceTest.cs,BinaryProtocolRunWritePerformanceParallel,The length of the statement  "                    prepared.Execute(new {intid = i' strid = i.ToString("X")}).AsFuture().ContinueWith(_ => Interlocked.Decrement(ref running)); " is 124.
Long Statement,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The length of the statement  "                const string createFoo = "CREATE KEYSPACE Tests WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 122.
Long Statement,CassandraSharpUnitTests.Functional,NullTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\NullTest.cs,TestNull,The length of the statement  "                const string createFoo = "CREATE KEYSPACE Tests WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 122.
Long Statement,CassandraSharpUnitTests.Functional,StreamStarvationTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\StreamStarvationTest.cs,StreamStarvationMultiThread,The length of the statement  "            const string createKeySpace = "CREATE KEYSPACE Tests WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 127.
Long Statement,CassandraSharpUnitTests.Performance,PacketSizePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\PacketSizePerformanceTest.cs,PacketSizeTest,The length of the statement  "                const string createFoo = "CREATE KEYSPACE Tests WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 122.
Long Statement,CassandraSharpUnitTests.Performance,WritePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\WritePerformanceTest.cs,RunWritePerformanceSingleThread,The length of the statement  "                const string createKeyspace = "create keyspace Tests with replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 127.
Long Statement,CassandraSharpUnitTests.Stress,ResilienceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,RecoveryTest,The length of the statement  "                const string createFoo = "CREATE KEYSPACE data WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 121.
Empty Catch Block,CassandraSharpUnitTests.CQLBinaryProtocol,DefaultKeyspaceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\DefaultKeyspaceTest.cs,TearDown,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.Endurance,EnduranceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Endurance\EnduranceTest.cs,BinaryProtocolRunWritePerformanceParallel,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.Functional,NullTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\NullTest.cs,TestNull,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.Functional,StreamStarvationTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\StreamStarvationTest.cs,StreamStarvationMultiThread,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.Performance,PacketSizePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\PacketSizePerformanceTest.cs,PacketSizeTest,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.Performance,WritePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\WritePerformanceTest.cs,RunWritePerformanceSingleThread,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.Stress,DisconnectingProxy,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,Killer,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.Stress,DisconnectingProxy,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,Transmit,The method has an empty catch block.
Empty Catch Block,CassandraSharpUnitTests.Stress,ResilienceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,RecoveryTest,The method has an empty catch block.
Magic Number,CassandraSharpUnitTests,PartitionerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\PartitionerTest.cs,CheckBuilder,The following statement contains a magic number: PartitionKey key = PartitionKey.From(42' "toto");
Magic Number,CassandraSharpUnitTests,PartitionerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\PartitionerTest.cs,CheckBuilder,The following statement contains a magic number: Assert.AreEqual(new object[] {42' "toto"}' key.Keys);
Magic Number,CassandraSharpUnitTests,SectionHandlerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\SectionHandlerTest.cs,TestLoadConfig,The following statement contains a magic number: Assert.AreEqual(5' cassandraSharpConfig.Clusters.Length);
Magic Number,CassandraSharpUnitTests,SectionHandlerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\SectionHandlerTest.cs,TestLoadConfig,The following statement contains a magic number: Assert.IsNotNull(cassandraSharpConfig.Clusters[4].DefaultKeyspace);
Magic Number,CassandraSharpUnitTests,SectionHandlerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\SectionHandlerTest.cs,TestLoadConfig,The following statement contains a magic number: Assert.AreEqual("Test"' cassandraSharpConfig.Clusters[4].DefaultKeyspace.Name);
Magic Number,CassandraSharpUnitTests,SectionHandlerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\SectionHandlerTest.cs,TestLoadConfig,The following statement contains a magic number: Assert.AreEqual("2"' cassandraSharpConfig.Clusters[4].DefaultKeyspace.Replication.Options["replication_factor"]);
Magic Number,CassandraSharpUnitTests,SectionHandlerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\SectionHandlerTest.cs,TestLoadConfig,The following statement contains a magic number: Assert.AreEqual("SimpleStrategy"' cassandraSharpConfig.Clusters[4].DefaultKeyspace.Replication.Options["class"]);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,DateTimeExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\DateTimeExtensionsTest.cs,TestConversion,The following statement contains a magic number: DateTime dt = new DateTime(2013' 1' 16' 14' 20' 0);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,DateTimeExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\DateTimeExtensionsTest.cs,TestConversion,The following statement contains a magic number: DateTime dt = new DateTime(2013' 1' 16' 14' 20' 0);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,DateTimeExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\DateTimeExtensionsTest.cs,TestConversion,The following statement contains a magic number: DateTime dt = new DateTime(2013' 1' 16' 14' 20' 0);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,DateTimeExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\DateTimeExtensionsTest.cs,TestConversion,The following statement contains a magic number: DateTime dt = new DateTime(2013' 1' 16' 14' 20' 0);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,DateTimeExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\DateTimeExtensionsTest.cs,TestConversion,The following statement contains a magic number: Assert.AreEqual(ts' 1358346000000);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeInt,The following statement contains a magic number: var data = serializer.Serialize(123);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeInt,The following statement contains a magic number: Assert.AreEqual(123' serializer.Deserialize(data));
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeListOfString,The following statement contains a magic number: Assert.AreEqual(3' list.Count);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeListOfString,The following statement contains a magic number: Assert.AreEqual("cde"' list[2]);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeDictionaryOfLongAndBlobs,The following statement contains a magic number: var data = serializer.Serialize(new Dictionary<long' byte[]> { { 1' new byte[] { 1' 2' 3 } }' { 2' new byte[] { } } });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeDictionaryOfLongAndBlobs,The following statement contains a magic number: var data = serializer.Serialize(new Dictionary<long' byte[]> { { 1' new byte[] { 1' 2' 3 } }' { 2' new byte[] { } } });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeDictionaryOfLongAndBlobs,The following statement contains a magic number: var data = serializer.Serialize(new Dictionary<long' byte[]> { { 1' new byte[] { 1' 2' 3 } }' { 2' new byte[] { } } });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeDictionaryOfLongAndBlobs,The following statement contains a magic number: Assert.AreEqual(2' dict.Count);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeDictionaryOfLongAndBlobs,The following statement contains a magic number: Assert.AreEqual(3' dict[1].Length);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeDictionaryOfLongAndBlobs,The following statement contains a magic number: Assert.AreEqual(2' dict[1][1]);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeDictionaryOfLongAndBlobs,The following statement contains a magic number: Assert.AreEqual(0' dict[2].Length);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeHashSet,The following statement contains a magic number: var data = serializer.Serialize(new HashSet<int> { 1' 2 });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeHashSet,The following statement contains a magic number: Assert.AreEqual(2' set.Count);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeHashSet,The following statement contains a magic number: Assert.IsTrue(set.Contains(2));
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeHashSet,The following statement contains a magic number: Assert.IsFalse(set.Contains(3));
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeCustomCollection,The following statement contains a magic number: var data = serializer.Serialize(new CustomCollection { 1' 2' 3 });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeCustomCollection,The following statement contains a magic number: var data = serializer.Serialize(new CustomCollection { 1' 2' 3 });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeCustomCollection,The following statement contains a magic number: Assert.AreEqual(3' list.Count);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeCustomType,The following statement contains a magic number: var data = serializer.Serialize(new Point { X = 1' Y = 2 });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeCustomType,The following statement contains a magic number: Assert.AreEqual(2' point.Y);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeListOfCustomType,The following statement contains a magic number: var data = serializer.Serialize(new List<Point> { new Point { X = 1' Y = 2 } });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeListOfCustomType,The following statement contains a magic number: Assert.AreEqual(2' point.Y);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeMapOfCustomType,The following statement contains a magic number: var data = serializer.Serialize(new Dictionary<string' Point> { { "TopLeft"' new Point { X = 1' Y = 2 } }' { "BottomRight"' new Point { X = 5' Y = 7 } } });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeMapOfCustomType,The following statement contains a magic number: var data = serializer.Serialize(new Dictionary<string' Point> { { "TopLeft"' new Point { X = 1' Y = 2 } }' { "BottomRight"' new Point { X = 5' Y = 7 } } });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeMapOfCustomType,The following statement contains a magic number: var data = serializer.Serialize(new Dictionary<string' Point> { { "TopLeft"' new Point { X = 1' Y = 2 } }' { "BottomRight"' new Point { X = 5' Y = 7 } } });
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeMapOfCustomType,The following statement contains a magic number: Assert.AreEqual(2' dict.Count);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeMapOfCustomType,The following statement contains a magic number: Assert.AreEqual(5' point.X);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,ValueSerializerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,SerializeMapOfCustomType,The following statement contains a magic number: Assert.AreEqual(7' point.Y);
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,PointSerializer,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,Deserialize,The following statement contains a magic number: data == null || data.Length != 8
Magic Number,CassandraSharpUnitTests.CQLBinaryProtocol,PointSerializer,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLBinaryProtocol\ValueSerializerTest.cs,Deserialize,The following statement contains a magic number: val.Y = BitConverter.ToInt32(data' 4);
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLOrdinal,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLOrdinal\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                              CAscii = new string('x'' 8000)'                              CBigint = 0x0102030405060708'                              CBlob = Enumerable.Repeat((byte) 42' 7142).ToArray()'                              CBoolean = true'                              CDouble = 1234.5678'                              CFloat = 234.567f'                              CInet = new IPAddress(new byte[] {0x01' 0x02' 0x03' 0x04})'                              CInt = 42'                              CText = new string('x'' 3000)'                              CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                              CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                              CUuid = Guid.NewGuid()'                              CVarchar = new string('x'' 5000)'                              CList = new List<int> {1' 2' 3}'                              CSet = new HashSet<int> {1' 2' 3}'                              CMap = new Dictionary<string' int> {{"one"' 1}' {"two"' 2}' {"three"' 3}}'                      };
Magic Number,CassandraSharpUnitTests.CQLPoco,ClassMapTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,SetUp,The following statement contains a magic number: pocoInstance = new TestPoco                                {                                    ComplexType = new PocoPoint { X = 1' Y = 2 }'                                    DifferentName = "Another"'                                    IgnoredProperty = 123'                                    TestProperty = "Property"'                                    TestField = "Field"                                };
Magic Number,CassandraSharpUnitTests.CQLPoco,ClassMapTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,SetUp,The following statement contains a magic number: pocoInstance = new TestPoco                                {                                    ComplexType = new PocoPoint { X = 1' Y = 2 }'                                    DifferentName = "Another"'                                    IgnoredProperty = 123'                                    TestProperty = "Property"'                                    TestField = "Field"                                };
Magic Number,CassandraSharpUnitTests.CQLPoco,ClassMapTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,ComplexType_ShouldBeAccessible,The following statement contains a magic number: Assert.AreEqual(2' point.Y);
Magic Number,CassandraSharpUnitTests.CQLPoco,ClassMapTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,ComplexType_ShouldBeAccessible,The following statement contains a magic number: member.SetValue(pocoInstance' new PocoPoint { X = 100' Y = 200 });
Magic Number,CassandraSharpUnitTests.CQLPoco,ClassMapTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,ComplexType_ShouldBeAccessible,The following statement contains a magic number: member.SetValue(pocoInstance' new PocoPoint { X = 100' Y = 200 });
Magic Number,CassandraSharpUnitTests.CQLPoco,ClassMapTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,ComplexType_ShouldBeAccessible,The following statement contains a magic number: Assert.AreEqual(100' newPoint.X);
Magic Number,CassandraSharpUnitTests.CQLPoco,ClassMapTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,ComplexType_ShouldBeAccessible,The following statement contains a magic number: Assert.AreEqual(200' newPoint.Y);
Magic Number,CassandraSharpUnitTests.CQLPoco,PocoPointSerializer,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,Deserialize,The following statement contains a magic number: data == null || data.Length != 8
Magic Number,CassandraSharpUnitTests.CQLPoco,PocoPointSerializer,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,Deserialize,The following statement contains a magic number: return new PocoPoint                            {                                X = BitConverter.ToInt32(data' 0)'                                Y = BitConverter.ToInt32(data' 4)                            };
Magic Number,CassandraSharpUnitTests.CQLPoco,PocoPointSerializer,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,Deserialize,The following statement contains a magic number: data == null || data.Length != 8
Magic Number,CassandraSharpUnitTests.CQLPoco,PocoPointSerializer,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\ClassMapTest.cs,Deserialize,The following statement contains a magic number: return new PocoPoint                 {                     X = BitConverter.ToInt32(data' 0)'                     Y = BitConverter.ToInt32(data' 4)                 };
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,SetUp,The following statement contains a magic number: pocoInstance = new TestPoco             {                 ComplexType = new PocoPoint { X = 1' Y = 2 }'                 DifferentName = "Another"'                 TestProperty = "Property"'                 TestField = "Field"             };
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToColumns_Existing_MappedAndSerialized,The following statement contains a magic number: Assert.AreEqual(columnSpecs[2]' columnData[2].ColumnSpec);
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToColumns_Existing_MappedAndSerialized,The following statement contains a magic number: Assert.AreEqual(columnSpecs[2]' columnData[2].ColumnSpec);
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToColumns_Existing_MappedAndSerialized,The following statement contains a magic number: Assert.AreEqual(pocoInstance.DifferentName' stringSerializer.Deserialize(columnData[2].RawData));
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToColumns_ShouldBeUnderscoreAndCaseInsensitive,The following statement contains a magic number: Assert.AreEqual(columnSpecs[2]' columnData[2].ColumnSpec);
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToColumns_ShouldBeUnderscoreAndCaseInsensitive,The following statement contains a magic number: Assert.AreEqual(columnSpecs[2]' columnData[2].ColumnSpec);
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToColumns_ShouldBeUnderscoreAndCaseInsensitive,The following statement contains a magic number: Assert.AreEqual(pocoInstance.DifferentName' stringSerializer.Deserialize(columnData[2].RawData));
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToObject_Existing_DeserializedAndMapped,The following statement contains a magic number: var pocoPoint = new PocoPoint { X = 100' Y = 200 };
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToObject_Existing_DeserializedAndMapped,The following statement contains a magic number: var pocoPoint = new PocoPoint { X = 100' Y = 200 };
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToObject_Existing_DeserializedAndMapped,The following statement contains a magic number: Assert.AreEqual(100' poco.ComplexType.X);
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToObject_Existing_DeserializedAndMapped,The following statement contains a magic number: Assert.AreEqual(200' poco.ComplexType.Y);
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToObject__ShouldBeUnderscoreAndCaseInsensitive,The following statement contains a magic number: var pocoPoint = new PocoPoint { X = 100' Y = 200 };
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToObject__ShouldBeUnderscoreAndCaseInsensitive,The following statement contains a magic number: var pocoPoint = new PocoPoint { X = 100' Y = 200 };
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToObject__ShouldBeUnderscoreAndCaseInsensitive,The following statement contains a magic number: Assert.AreEqual(100' poco.ComplexType.X);
Magic Number,CassandraSharpUnitTests.CQLPoco,DataMapperTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\CQLPoco\DataMapperTest.cs,MapToObject__ShouldBeUnderscoreAndCaseInsensitive,The following statement contains a magic number: Assert.AreEqual(200' poco.ComplexType.Y);
Magic Number,CassandraSharpUnitTests.EndpointStrategy,RandomEndpointStrategyTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\EndpointStrategy\RandomEndpointStrategyTest.cs,TestRandomness,The following statement contains a magic number: IPAddress[] ips = new IPAddress[4];
Magic Number,CassandraSharpUnitTests.EndpointStrategy,RandomEndpointStrategyTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\EndpointStrategy\RandomEndpointStrategyTest.cs,TestRandomness,The following statement contains a magic number: ips[i] = new IPAddress(new byte[] {192' 168' 0' i});
Magic Number,CassandraSharpUnitTests.EndpointStrategy,RandomEndpointStrategyTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\EndpointStrategy\RandomEndpointStrategyTest.cs,TestRandomness,The following statement contains a magic number: ips[i] = new IPAddress(new byte[] {192' 168' 0' i});
Magic Number,CassandraSharpUnitTests.EndpointStrategy,RandomEndpointStrategyTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\EndpointStrategy\RandomEndpointStrategyTest.cs,TestRandomness,The following statement contains a magic number: i < 10000
Magic Number,CassandraSharpUnitTests.Endurance,EnduranceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Endurance\EnduranceTest.cs,BinaryProtocolRunWritePerformanceParallel,The following statement contains a magic number: 0 == i % 1000
Magic Number,CassandraSharpUnitTests.Endurance,EnduranceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Endurance\EnduranceTest.cs,BinaryProtocolRunWritePerformanceParallel,The following statement contains a magic number: i < 100000
Magic Number,CassandraSharpUnitTests.Endurance,EnduranceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Endurance\EnduranceTest.cs,BinaryProtocolRunWritePerformanceParallel,The following statement contains a magic number: Thread.Sleep(1 * 1000);
Magic Number,CassandraSharpUnitTests.Enlightenment,FutureTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Enlightenment\FutureTest.cs,TestAsFuture,The following statement contains a magic number: var data = Enumerable.Range(0' 10);
Magic Number,CassandraSharpUnitTests.Enlightenment,FutureTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Enlightenment\FutureTest.cs,TestAsFuture,The following statement contains a magic number: Assert.AreEqual(futData.Result.Count' 10);
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,AllTypesTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,TestAllTypes,The following statement contains a magic number: var allTypesInsert = new AllTypes                      {                          CAscii = new string('x'' 8000)'                          CBigint = 0x0102030405060708'                          CBlob = Enumerable.Repeat((byte)42' 33000).ToArray()'                          CBoolean = true'                          CDouble = 1234.5678'                          CFloat = 234.567f'                          CInet = new IPAddress(new byte[] { 0x01' 0x02' 0x03' 0x04 })'                          CInt = 42'                          CText = new string('x'' 100000)'                          CTimestamp = new DateTime(2013' 1' 16' 14' 20' 0)'                          CTimeuuid = TimedUuid.GenerateTimeBasedGuid(DateTime.Now)'                          CUuid = Guid.NewGuid()'                          CVarchar = new string('x'' 5000)'                          CList = new List<int> { 1' 2' 3 }'                          CSet = new HashSet<int> { 1' 2' 3 }'                          CMap = new Dictionary<string' int> { { "one"' 1 }' { "two"' 2 }' { new string('x'' 65525)' 3 } }'                          CEnum = TestEnum.ValueB'                          CPoint = new Point { X = 1' Y = 3 }                      };
Magic Number,CassandraSharpUnitTests.Functional,PointSerializer,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,Deserialize,The following statement contains a magic number: data == null || data.Length != 8
Magic Number,CassandraSharpUnitTests.Functional,PointSerializer,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\AllTypesTest.cs,Deserialize,The following statement contains a magic number: val.Y = BitConverter.ToInt32(data' 4);
Magic Number,CassandraSharpUnitTests.Functional,StreamStarvationTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\StreamStarvationTest.cs,FailingThread,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,CassandraSharpUnitTests.Functional,StreamStarvationTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Functional\StreamStarvationTest.cs,FailingThread,The following statement contains a magic number: 0 == (i % 2)
Magic Number,CassandraSharpUnitTests.Partitioner,MurmurHash3PartitionerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Partitioner\MurmurHash3PartitionerTest.cs,CheckCompositeKey1,The following statement contains a magic number: PartitionKey partitionKey = PartitionKey.From((long)1' 1' 200301);
Magic Number,CassandraSharpUnitTests.Partitioner,MurmurHash3PartitionerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Partitioner\MurmurHash3PartitionerTest.cs,CheckCompositeKey1,The following statement contains a magic number: Assert.IsTrue(token.Value == new BigInteger(2268761313986801232));
Magic Number,CassandraSharpUnitTests.Partitioner,MurmurHash3PartitionerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Partitioner\MurmurHash3PartitionerTest.cs,CheckCompositeKey2,The following statement contains a magic number: PartitionKey partitionKey = PartitionKey.From((long)18653' 1' 200711);
Magic Number,CassandraSharpUnitTests.Partitioner,MurmurHash3PartitionerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Partitioner\MurmurHash3PartitionerTest.cs,CheckCompositeKey2,The following statement contains a magic number: PartitionKey partitionKey = PartitionKey.From((long)18653' 1' 200711);
Magic Number,CassandraSharpUnitTests.Partitioner,MurmurHash3PartitionerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Partitioner\MurmurHash3PartitionerTest.cs,CheckCompositeKey2,The following statement contains a magic number: Assert.IsTrue(token.Value == new BigInteger(-2403361283253792854));
Magic Number,CassandraSharpUnitTests.Partitioner,MurmurHash3PartitionerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Partitioner\MurmurHash3PartitionerTest.cs,CheckSingleKey,The following statement contains a magic number: Assert.IsTrue(token.Value == new BigInteger(-8827056344306985898));
Magic Number,CassandraSharpUnitTests.Partitioner,NullPartitionerTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Partitioner\NullPartitioner.cs,CheckNoToken,The following statement contains a magic number: key = PartitionKey.From("toto"' 42);
Magic Number,CassandraSharpUnitTests.Performance,PacketSizePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\PacketSizePerformanceTest.cs,InsertData,The following statement contains a magic number: i < 10
Magic Number,CassandraSharpUnitTests.Performance,PacketSizePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\PacketSizePerformanceTest.cs,InsertData,The following statement contains a magic number: const long nbQueries = 5000;
Magic Number,CassandraSharpUnitTests.Performance,PacketSizePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\PacketSizePerformanceTest.cs,InsertData,The following statement contains a magic number: Console.WriteLine("Total inserts/s: {0}"' (1000.0 * nbQueries) / totalwatch.ElapsedMilliseconds);
Magic Number,CassandraSharpUnitTests.Performance,PacketSizePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\PacketSizePerformanceTest.cs,PacketSizeTest,The following statement contains a magic number: time1423 = InsertData(new string('x'' 1423)' preparedQuery);
Magic Number,CassandraSharpUnitTests.Performance,PacketSizePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\PacketSizePerformanceTest.cs,PacketSizeTest,The following statement contains a magic number: time1424 = InsertData(new string('x'' 1424)' preparedQuery);
Magic Number,CassandraSharpUnitTests.Performance,ThriftProtocolWrapper,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\ThriftProtocolWrapper.cs,Open,The following statement contains a magic number: TTransport transport = new TFramedTransport(new TSocket(hostname' 9160));
Magic Number,CassandraSharpUnitTests.Performance,WritePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\WritePerformanceTest.cs,ExecuteStressTest,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,CassandraSharpUnitTests.Performance,WritePerformanceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\WritePerformanceTest.cs,ExecuteStressTest,The following statement contains a magic number: double rate = (1000.0 * NUM_WRITES_PER_ROUND) / timer.ElapsedMilliseconds;
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestDatacenter,The following statement contains a magic number: IPAddress address = new IPAddress(new byte[] {192' 168' 255' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestDatacenter,The following statement contains a magic number: IPAddress address = new IPAddress(new byte[] {192' 168' 255' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestDatacenter,The following statement contains a magic number: IPAddress address = new IPAddress(new byte[] {192' 168' 255' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestDatacenter,The following statement contains a magic number: IPAddress a1 = new IPAddress(new byte[] {192' 168' 0' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestDatacenter,The following statement contains a magic number: IPAddress a1 = new IPAddress(new byte[] {192' 168' 0' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestDatacenter,The following statement contains a magic number: IPAddress a2 = new IPAddress(new byte[] {192' 169' 10' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestDatacenter,The following statement contains a magic number: IPAddress a2 = new IPAddress(new byte[] {192' 169' 10' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestDatacenter,The following statement contains a magic number: IPAddress a2 = new IPAddress(new byte[] {192' 169' 10' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestNearestEndpoint,The following statement contains a magic number: IPAddress address = new IPAddress(new byte[] {192' 168' 100' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestNearestEndpoint,The following statement contains a magic number: IPAddress address = new IPAddress(new byte[] {192' 168' 100' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestNearestEndpoint,The following statement contains a magic number: IPAddress address = new IPAddress(new byte[] {192' 168' 100' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestNearestEndpoint,The following statement contains a magic number: IPAddress a1 = new IPAddress(new byte[] {192' 168' 0' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestNearestEndpoint,The following statement contains a magic number: IPAddress a1 = new IPAddress(new byte[] {192' 168' 0' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestNearestEndpoint,The following statement contains a magic number: IPAddress a2 = new IPAddress(new byte[] {192' 168' 100' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestNearestEndpoint,The following statement contains a magic number: IPAddress a2 = new IPAddress(new byte[] {192' 168' 100' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestNearestEndpoint,The following statement contains a magic number: IPAddress a2 = new IPAddress(new byte[] {192' 168' 100' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestRack,The following statement contains a magic number: IPAddress address = new IPAddress(new byte[] {192' 168' 255' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestRack,The following statement contains a magic number: IPAddress address = new IPAddress(new byte[] {192' 168' 255' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestRack,The following statement contains a magic number: IPAddress address = new IPAddress(new byte[] {192' 168' 255' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestRack,The following statement contains a magic number: IPAddress a1 = new IPAddress(new byte[] {192' 168' 0' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestRack,The following statement contains a magic number: IPAddress a1 = new IPAddress(new byte[] {192' 168' 0' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestRack,The following statement contains a magic number: IPAddress a2 = new IPAddress(new byte[] {192' 169' 255' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestRack,The following statement contains a magic number: IPAddress a2 = new IPAddress(new byte[] {192' 169' 255' 0});
Magic Number,CassandraSharpUnitTests.Snitch,RackInferringSnitchTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Snitch\RackInferringSnitchTest.cs,TestRack,The following statement contains a magic number: IPAddress a2 = new IPAddress(new byte[] {192' 169' 255' 0});
Magic Number,CassandraSharpUnitTests.Stress,DisconnectingProxy,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,Start,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,CassandraSharpUnitTests.Stress,DisconnectingProxy,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,Worker,The following statement contains a magic number: listenSocket.Listen(10);
Magic Number,CassandraSharpUnitTests.Stress,DisconnectingProxy,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,Worker,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,CassandraSharpUnitTests.Stress,DisconnectingProxy,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,Killer,The following statement contains a magic number: Thread.Sleep(rnd.Next(500));
Magic Number,CassandraSharpUnitTests.Stress,DisconnectingProxy,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,Killer,The following statement contains a magic number: int proba = rnd.Next(1000);
Magic Number,CassandraSharpUnitTests.Stress,DisconnectingProxy,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,Killer,The following statement contains a magic number: _enableKiller && 900 < proba
Magic Number,CassandraSharpUnitTests.Stress,DisconnectingProxy,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,Transmit,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,CassandraSharpUnitTests.Stress,ResilienceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: CassandraSharpConfig cassandraSharpConfig = new CassandraSharpConfig                  {                          Logger = new LoggerConfig {Type = typeof(ResilienceLogger).AssemblyQualifiedName}'                          Recovery = new RecoveryConfig {Interval = 2}                  };
Magic Number,CassandraSharpUnitTests.Stress,ResilienceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: ClusterConfig clusterConfig = new ClusterConfig                  {                          Endpoints = new EndpointsConfig                              {                                      Servers = new[] { "cassandra1" }'                              }'                          Transport = new TransportConfig                              {                                      Port = 666'                                      ReceiveTimeout = 10 * 1000'                              }                  };
Magic Number,CassandraSharpUnitTests.Stress,ResilienceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: ClusterConfig clusterConfig = new ClusterConfig                  {                          Endpoints = new EndpointsConfig                              {                                      Servers = new[] { "cassandra1" }'                              }'                          Transport = new TransportConfig                              {                                      Port = 666'                                      ReceiveTimeout = 10 * 1000'                              }                  };
Magic Number,CassandraSharpUnitTests.Stress,ResilienceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: ClusterConfig clusterConfig = new ClusterConfig                  {                          Endpoints = new EndpointsConfig                              {                                      Servers = new[] { "cassandra1" }'                              }'                          Transport = new TransportConfig                              {                                      Port = 666'                                      ReceiveTimeout = 10 * 1000'                              }                  };
Magic Number,CassandraSharpUnitTests.Stress,ResilienceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: DisconnectingProxy proxy = new DisconnectingProxy(666' 9042);
Magic Number,CassandraSharpUnitTests.Stress,ResilienceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: DisconnectingProxy proxy = new DisconnectingProxy(666' 9042);
Magic Number,CassandraSharpUnitTests.Stress,ResilienceTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: i < 10000
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: array = array.BinaryAdd(10' comparer);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array[0] == 10);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array.Length == 2);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array[1] == 10);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: array = array.BinaryAdd(8' comparer);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array.Length == 3);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array[1] == 8);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array[2] == 10);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array[2] == 10);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: array = array.BinaryAdd(8' comparer);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array.Length == 3);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array[1] == 8);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array[2] == 10);
Magic Number,CassandraSharpUnitTests.Utils,ArrayExtensionsTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ArrayExtensionsTest.cs,AddElement,The following statement contains a magic number: Assert.IsTrue(array[2] == 10);
Magic Number,CassandraSharpUnitTests.Utils,NetworkTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\NetworkTest.cs,TestValidateEndpoint,The following statement contains a magic number: IPAddress validEndpoint = new IPAddress(new byte[] {255' 0' 0' 0});
Magic Number,CassandraSharpUnitTests.Utils,ServiceActivatorTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ServiceActivatorTest.cs,TestCreateWithCustomType,The following statement contains a magic number: const int value = 42;
Magic Number,CassandraSharpUnitTests.Utils,ServiceActivatorTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ServiceActivatorTest.cs,TestCreateWithEmpty,The following statement contains a magic number: const int value = 42;
Magic Number,CassandraSharpUnitTests.Utils,ServiceActivatorTest,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Utils\ServiceActivatorTest.cs,TestCreateWithNull,The following statement contains a magic number: const int value = 42;
Missing Default,CassandraSharpUnitTests.Performance,PerformanceInstrumentation,C:\research\architectureSmells\repos\pchalamet_cassandra-sharp\CassandraSharpUnitTests\Performance\PerformanceInstrumentation.cs,ClientTrace,The following switch statement is missing a default case: switch (eventType)              {                  case EventType.BeginRead:                      _readWatch.Start();                      break;                    case EventType.EndRead:                      _readWatch.Stop();                      break;                    case EventType.BeginWrite:                      _writeWatch.Start();                      break;                    case EventType.EndWrite:                      _writeWatch.Stop();                      break;              }
