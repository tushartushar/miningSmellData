Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Samples.POCO,PocoSample,C:\repos\pchalamet_cassandra-sharp\Samples\POCO\POCOSample.cs,CreateKeyspace,The length of the statement  "            const string createKeyspace = "CREATE KEYSPACE videos WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 128.
Long Statement,Samples.POCO,PocoSample,C:\repos\pchalamet_cassandra-sharp\Samples\POCO\POCOSample.cs,InternalRun,The length of the statement  "            var taskSelectStartMovies = cmd.Execute<NerdMovie>(selectNerdMovies).AsFuture().ContinueWith(res => DisplayMovies(res.Result)); " is 127.
Long Statement,Samples.PreparedStatement,BatchSample,C:\repos\pchalamet_cassandra-sharp\Samples\PreparedStatement\BatchSample.cs,CreateKeyspace,The length of the statement  "            const string createKeyspaceFoo = "CREATE KEYSPACE Foo WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 128.
Long Statement,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The length of the statement  "                const string createFoo = "CREATE KEYSPACE data WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}"; " is 121.
Empty Catch Block,Samples,Sample,C:\repos\pchalamet_cassandra-sharp\Samples\Sample.cs,Run,The method has an empty catch block.
Empty Catch Block,Samples.Stress,DisconnectingProxy,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,Killer,The method has an empty catch block.
Empty Catch Block,Samples.Stress,DisconnectingProxy,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,Transmit,The method has an empty catch block.
Empty Catch Block,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The method has an empty catch block.
Magic Number,Samples.Async,AsyncSample,C:\repos\pchalamet_cassandra-sharp\Samples\Async\AsyncSample.cs,InternalRun,The following statement contains a magic number: for (int i = 0; i < 100; ++i)              {                  var futRes = cmd.Execute<SchemaKeyspaces>(cqlKeyspaces).AsFuture().ContinueWith(t => DisplayKeyspace(t.Result));                  allTasks.Add(futRes);              }
Magic Number,Samples.Future,FutureSample,C:\repos\pchalamet_cassandra-sharp\Samples\Future\FutureSample.cs,InternalRun,The following statement contains a magic number: for (int i = 0; i < 100; ++i)              {                  var futRes = cmd.Execute<SchemaKeyspaces>(cqlKeyspaces).AsFuture();                  allResults.Add(futRes);              }
Magic Number,Samples.PreparedStatement,BatchSample,C:\repos\pchalamet_cassandra-sharp\Samples\PreparedStatement\BatchSample.cs,InternalRun,The following statement contains a magic number: const int times = 10;
Magic Number,Samples.PreparedStatement,BatchSample,C:\repos\pchalamet_cassandra-sharp\Samples\PreparedStatement\BatchSample.cs,InternalRun,The following statement contains a magic number: for (int i = 0; i < times; i++)              {                  long running = Interlocked.Increment(ref _running);                    Console.WriteLine("Current {0} Running {1}"' i' running);                    var data = new byte[30000];                  // var data = (float)random.NextDouble();                  preparedInsert.Execute(new {id = i' Baz = data}).AsFuture()                                .ContinueWith(_ => Interlocked.Decrement(ref _running));              }
Magic Number,Samples.PreparedStatement,BatchSample,C:\repos\pchalamet_cassandra-sharp\Samples\PreparedStatement\BatchSample.cs,InternalRun,The following statement contains a magic number: while (Thread.VolatileRead(ref _running) > 0)              {                  Console.WriteLine("Running {0}"' _running);                  Thread.Sleep(1000);              }
Magic Number,Samples.Stress,DisconnectingProxy,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,Start,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,Samples.Stress,DisconnectingProxy,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,Worker,The following statement contains a magic number: while (!_stop)              {                  EndPoint targetEndpoint = new IPEndPoint(ipAddress' _target);                  Socket targetSocket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);                  targetSocket.Connect(targetEndpoint);                    Socket listenSocket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);                  listenSocket.Bind(listenEndpoint);                  listenSocket.Listen(10);                    Socket clientSocket = listenSocket.Accept();                  ThreadPool.QueueUserWorkItem(_ => Transmit(clientSocket' targetSocket));                  ThreadPool.QueueUserWorkItem(_ => Transmit(targetSocket' clientSocket));                  Killer(targetSocket' clientSocket' listenSocket);                  Thread.Sleep(3000);              }
Magic Number,Samples.Stress,DisconnectingProxy,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,Worker,The following statement contains a magic number: while (!_stop)              {                  EndPoint targetEndpoint = new IPEndPoint(ipAddress' _target);                  Socket targetSocket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);                  targetSocket.Connect(targetEndpoint);                    Socket listenSocket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);                  listenSocket.Bind(listenEndpoint);                  listenSocket.Listen(10);                    Socket clientSocket = listenSocket.Accept();                  ThreadPool.QueueUserWorkItem(_ => Transmit(clientSocket' targetSocket));                  ThreadPool.QueueUserWorkItem(_ => Transmit(targetSocket' clientSocket));                  Killer(targetSocket' clientSocket' listenSocket);                  Thread.Sleep(3000);              }
Magic Number,Samples.Stress,DisconnectingProxy,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,Killer,The following statement contains a magic number: while (!_stop)              {                  Thread.Sleep(rnd.Next(500));                    int proba = rnd.Next(1000);                  if (_enableKiller && 900 < proba)                  {                      break;                  }              }
Magic Number,Samples.Stress,DisconnectingProxy,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,Killer,The following statement contains a magic number: while (!_stop)              {                  Thread.Sleep(rnd.Next(500));                    int proba = rnd.Next(1000);                  if (_enableKiller && 900 < proba)                  {                      break;                  }              }
Magic Number,Samples.Stress,DisconnectingProxy,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,Killer,The following statement contains a magic number: while (!_stop)              {                  Thread.Sleep(rnd.Next(500));                    int proba = rnd.Next(1000);                  if (_enableKiller && 900 < proba)                  {                      break;                  }              }
Magic Number,Samples.Stress,DisconnectingProxy,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,Transmit,The following statement contains a magic number: try              {                  byte[] buffer = new byte[1024];                  while (true)                  {                      int count = source.Receive(buffer);                      int write = 0;                      while (write != count)                      {                          write += target.Send(buffer' write' count - write' SocketFlags.None);                      }                  }              }              catch              {              }
Magic Number,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: CassandraSharpConfig cassandraSharpConfig = new CassandraSharpConfig              {                  Logger = new LoggerConfig { Type = typeof(ResilienceLogger).AssemblyQualifiedName }'                  Recovery = new RecoveryConfig { Interval = 2 }              };
Magic Number,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: ClusterConfig clusterConfig = new ClusterConfig              {                  Endpoints = new EndpointsConfig                  {                      Servers = new[] { "cassandra1" }'                  }'                  Transport = new TransportConfig                  {                      Port = 666'                      ReceiveTimeout = 10 * 1000'                  }              };
Magic Number,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: ClusterConfig clusterConfig = new ClusterConfig              {                  Endpoints = new EndpointsConfig                  {                      Servers = new[] { "cassandra1" }'                  }'                  Transport = new TransportConfig                  {                      Port = 666'                      ReceiveTimeout = 10 * 1000'                  }              };
Magic Number,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: ClusterConfig clusterConfig = new ClusterConfig              {                  Endpoints = new EndpointsConfig                  {                      Servers = new[] { "cassandra1" }'                  }'                  Transport = new TransportConfig                  {                      Port = 666'                      ReceiveTimeout = 10 * 1000'                  }              };
Magic Number,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: DisconnectingProxy proxy = new DisconnectingProxy(666' 9042);
Magic Number,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: DisconnectingProxy proxy = new DisconnectingProxy(666' 9042);
Magic Number,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: using (ICluster cluster = ClusterManager.GetCluster(clusterConfig))              {                  ICqlCommand cmd = cluster.CreatePocoCommand();                    const string dropFoo = "drop keyspace data";                  try                  {                      cmd.Execute(dropFoo).AsFuture().Wait();                  }                  catch                  {                  }                    const string createFoo = "CREATE KEYSPACE data WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}";                  cmd.Execute(createFoo).AsFuture().Wait();                    const string createBar = "CREATE TABLE data.test (time text PRIMARY KEY)";                  cmd.Execute(createBar).AsFuture().Wait();                    proxy.EnableKiller();                    for (int i = 0; i < 100000; ++i)                  {                      int attempt = 0;                      while (true)                      {                          var now = DateTime.Now;                          string insert = String.Format("insert into data.test(time) values ('{0}');"' now);                          Console.WriteLine("{0}.{1}) {2}"' i' ++attempt' insert);                            try                          {                              cmd.Execute(insert).AsFuture().Wait();                              break;                          }                          catch (Exception ex)                          {                              Console.WriteLine("Failed with error {0}"' ex.Message);                              Thread.Sleep(1000);                          }                      }                  }                    Console.WriteLine("Stress test done");                    ClusterManager.Shutdown();              }
Magic Number,Samples.Stress,ResilienceTest,C:\repos\pchalamet_cassandra-sharp\Samples\Stress\StressTest.cs,RecoveryTest,The following statement contains a magic number: using (ICluster cluster = ClusterManager.GetCluster(clusterConfig))              {                  ICqlCommand cmd = cluster.CreatePocoCommand();                    const string dropFoo = "drop keyspace data";                  try                  {                      cmd.Execute(dropFoo).AsFuture().Wait();                  }                  catch                  {                  }                    const string createFoo = "CREATE KEYSPACE data WITH replication = {'class': 'SimpleStrategy'' 'replication_factor' : 1}";                  cmd.Execute(createFoo).AsFuture().Wait();                    const string createBar = "CREATE TABLE data.test (time text PRIMARY KEY)";                  cmd.Execute(createBar).AsFuture().Wait();                    proxy.EnableKiller();                    for (int i = 0; i < 100000; ++i)                  {                      int attempt = 0;                      while (true)                      {                          var now = DateTime.Now;                          string insert = String.Format("insert into data.test(time) values ('{0}');"' now);                          Console.WriteLine("{0}.{1}) {2}"' i' ++attempt' insert);                            try                          {                              cmd.Execute(insert).AsFuture().Wait();                              break;                          }                          catch (Exception ex)                          {                              Console.WriteLine("Failed with error {0}"' ex.Message);                              Thread.Sleep(1000);                          }                      }                  }                    Console.WriteLine("Stress test done");                    ClusterManager.Shutdown();              }
Magic Number,Samples.TimeOut,TimeOutSample,C:\repos\pchalamet_cassandra-sharp\Samples\TimeOut\TimeOutSample.cs,InternalRun,The following statement contains a magic number: for (int i = 0; i < 10; ++i)              {                  // timeout = 10 ms                  CancellationTokenSource cts = new CancellationTokenSource(10);                  var futRes = cmd.Execute<SchemaKeyspaces>(cqlKeyspaces).AsFuture(cts.Token).ContinueWith(DisplayKeyspace);                  futRes.Wait();              }
Magic Number,Samples.TimeOut,TimeOutSample,C:\repos\pchalamet_cassandra-sharp\Samples\TimeOut\TimeOutSample.cs,InternalRun,The following statement contains a magic number: for (int i = 0; i < 10; ++i)              {                  // timeout = 10 ms                  CancellationTokenSource cts = new CancellationTokenSource(10);                  var futRes = cmd.Execute<SchemaKeyspaces>(cqlKeyspaces).AsFuture(cts.Token).ContinueWith(DisplayKeyspace);                  futRes.Wait();              }
